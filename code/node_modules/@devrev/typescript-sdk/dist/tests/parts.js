"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.partsListPaginator = exports.partsList = exports.partsDeleteGet = exports.partsUpdateGet = exports.partsCreateGet = exports.init = void 0;
const index_1 = require("../index");
require('dotenv').config();
const devrevSDK = index_1.client.setup({ endpoint: (_a = process.env.ENDPOINT) !== null && _a !== void 0 ? _a : '', token: (_b = process.env.TOKEN) !== null && _b !== void 0 ? _b : '' });
function init() {
    return __awaiter(this, void 0, void 0, function* () {
        const userResponse = yield devrevSDK.devUsersSelf();
        globalThis.userId = userResponse.data.dev_user.id;
    });
}
exports.init = init;
function partsCreateGet() {
    return __awaiter(this, void 0, void 0, function* () {
        var newPart = {
            owned_by: [globalThis.userId],
            type: index_1.publicSDK.PartType.Product,
            name: 'Typescript Part',
            description: 'new ts part',
        };
        const partsCreateResponse = yield devrevSDK.partsCreate(newPart);
        const partsGetResponse = yield devrevSDK.partsGet({ id: partsCreateResponse.data.part.id });
        expect(newPart.name).toBe(partsCreateResponse.data.part.name);
        expect(newPart.owned_by[0]).toBe(partsCreateResponse.data.part.owned_by[0].id);
        expect(newPart.type).toBe(partsCreateResponse.data.part.type);
        expect(newPart.description).toBe(partsCreateResponse.data.part.description);
        expect(newPart.name).toBe(partsGetResponse.data.part.name);
        expect(newPart.owned_by[0]).toBe(partsGetResponse.data.part.owned_by[0].id);
        expect(newPart.type).toBe(partsGetResponse.data.part.type);
        expect(newPart.description).toBe(partsGetResponse.data.part.description);
        return partsCreateResponse.data.part.id;
    });
}
exports.partsCreateGet = partsCreateGet;
function partsUpdateGet(id) {
    return __awaiter(this, void 0, void 0, function* () {
        var updPart = {
            owned_by: { set: [globalThis.userId] },
            type: index_1.publicSDK.PartType.Product,
            name: 'Typescript Part UPDATED',
            description: 'updated ts part',
            id: id,
        };
        const partsUpdateResponse = yield devrevSDK.partsUpdate(updPart);
        const partsGetResponse = yield devrevSDK.partsGet({ id: partsUpdateResponse.data.part.id });
        expect(updPart.name).toBe(partsUpdateResponse.data.part.name);
        expect(updPart.type).toBe(partsUpdateResponse.data.part.type);
        expect(updPart.description).toBe(partsUpdateResponse.data.part.description);
        expect(updPart.name).toBe(partsGetResponse.data.part.name);
        expect(updPart.type).toBe(partsGetResponse.data.part.type);
        expect(updPart.description).toBe(partsGetResponse.data.part.description);
        return partsUpdateResponse.data.part.id;
    });
}
exports.partsUpdateGet = partsUpdateGet;
function partsDeleteGet(id) {
    return __awaiter(this, void 0, void 0, function* () {
        const partsDeleteResponse = yield devrevSDK.partsDelete({ id: id });
        expect(partsDeleteResponse.status).toBe(200);
        yield devrevSDK.partsDelete({ id: id });
    });
}
exports.partsDeleteGet = partsDeleteGet;
function partsList() {
    return __awaiter(this, void 0, void 0, function* () {
        let uniquePartName = 'Typescript Part-' + Math.floor(Math.random() * 1000000);
        const partsCreateResponse1 = yield devrevSDK.partsCreate({
            owned_by: [globalThis.userId],
            type: index_1.publicSDK.PartType.Product,
            name: uniquePartName,
            description: 'test part 1',
        });
        const partsCreateResponse2 = yield devrevSDK.partsCreate({
            owned_by: [globalThis.userId],
            type: index_1.publicSDK.PartType.Capability,
            parent_part: [partsCreateResponse1.data.part.id],
            name: 'Typescript Part-Test2',
            description: 'test part 2',
        });
        const partsCreateResponse3 = yield devrevSDK.partsCreate({
            owned_by: [globalThis.userId],
            type: index_1.publicSDK.PartType.Feature,
            parent_part: [partsCreateResponse2.data.part.id],
            name: 'Typescript Part-Test3',
            description: 'test part 3',
        });
        const partsListResponse = yield devrevSDK.partsList({
            name: [uniquePartName],
        });
        expect(partsListResponse.status).toBe(200);
        expect(partsListResponse.data.parts.length).toBe(1);
        yield devrevSDK.partsDelete({ id: partsCreateResponse3.data.part.id });
        yield devrevSDK.partsDelete({ id: partsCreateResponse2.data.part.id });
        yield devrevSDK.partsDelete({ id: partsCreateResponse1.data.part.id });
    });
}
exports.partsList = partsList;
function partsListPaginator() {
    var _a, e_1, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        const partPrefix = (Math.random() + 1).toString(36).substring(7);
        const expectedParts = [];
        // create 5 parts
        for (let i = 0; i < 5; i++) {
            const response = yield devrevSDK.partsCreate({
                owned_by: [globalThis.userId],
                type: index_1.publicSDK.PartType.Product,
                name: `${partPrefix}-paginator-part-${i}`,
                description: `${partPrefix}-paginator-part-${i}`,
            });
            expectedParts.push(response.data.part.id);
        }
        const query = { limit: 2 };
        let obtainedParts = [];
        try {
            for (var _d = true, _e = __asyncValues(devrevSDK.partsListPaginator(query)), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                _c = _f.value;
                _d = false;
                try {
                    const response = _c;
                    obtainedParts = [
                        ...obtainedParts,
                        ...response.parts.filter((part) => part.name.startsWith(`${partPrefix}-paginator-part-`)).map((part) => part.id),
                    ];
                }
                finally {
                    _d = true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
            }
            finally { if (e_1) throw e_1.error; }
        }
        expect(obtainedParts.sort()).toEqual(expectedParts.sort());
        for (const id of expectedParts) {
            yield devrevSDK.partsDelete({ id });
        }
    });
}
exports.partsListPaginator = partsListPaginator;
//# sourceMappingURL=parts.js.map