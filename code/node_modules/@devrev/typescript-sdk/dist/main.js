"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
require('dotenv').config();
// Get the HOST, TOKEN from the environment variables
const endpoint = process.env.ENDPOINT;
const token = process.env.TOKEN;
// Ensure that the ENDPOINT is provided
if (!endpoint) {
    throw new Error('ENDPOINT is not set');
}
// Ensure that the TOKEN is provided
if (!token) {
    throw new Error('TOKEN is not set');
}
const setupOptions = { endpoint, token };
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function example() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            // Create a new Workflow instance
            const workflow = new index_1.Workflow(setupOptions);
            // Get the current dev user
            const devUser = (yield workflow.devUsersSelf()).data.dev_user;
            // Create a new part
            const part = (yield workflow.partsCreate({
                name: 'Sample Part',
                owned_by: [devUser.id],
                type: index_1.workflowSDK.PartType.Product,
            })).data.part;
            // Call the createTicket method
            const title = 'Demo create work workflow';
            const devUserEmail = devUser.email; // DevUser email is always present
            const ticket = yield workflow.createTicket(title, devUserEmail, part.name);
            console.log('Created Ticket:', ticket);
            // Call the createIssue method
            const issue = yield workflow.createIssue(title, devUserEmail, part.name);
            console.log('Created Issue:', issue);
            // Look up users by email
            const emails = [devUserEmail];
            const users = yield workflow.usersLookupByEmail(emails, 'dev_user');
            console.log('Users Lookup:', users);
            // Clean up
            yield workflow.partsDelete({ id: part.id });
        }
        catch (error) {
            console.error('Error:', error.message);
        }
    });
}
example();
//# sourceMappingURL=main.js.map