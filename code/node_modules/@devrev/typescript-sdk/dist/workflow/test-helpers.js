"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAnyWork = exports.getWorks = exports.getAnyPart = exports.getParts = exports.getAnyDevUser = exports.getRevUsers = exports.getDevUsers = exports.publicApi = exports.workflowApi = void 0;
const index_1 = require("../index");
require('dotenv').config();
// Get the HOST, TOKEN from the environment variables
const endpoint = (_a = process.env.ENDPOINT) !== null && _a !== void 0 ? _a : '';
const token = (_b = process.env.TOKEN) !== null && _b !== void 0 ? _b : '';
// Ensure that the ENDPOINT is provided
if (!endpoint) {
    throw new Error('ENDPOINT is not set');
}
// Ensure that the TOKEN is provided
if (!token) {
    throw new Error('TOKEN is not set');
}
const setupOptions = { endpoint, token };
exports.workflowApi = index_1.client.setupWorkflows(setupOptions);
exports.publicApi = index_1.client.setup(setupOptions);
function getDevUsers(limit) {
    return __awaiter(this, void 0, void 0, function* () {
        return (yield exports.workflowApi.devUsersList({ limit: limit })).data.dev_users;
    });
}
exports.getDevUsers = getDevUsers;
function getRevUsers(limit) {
    return __awaiter(this, void 0, void 0, function* () {
        return (yield exports.workflowApi.revUsersList({ limit: limit })).data.rev_users;
    });
}
exports.getRevUsers = getRevUsers;
function getAnyDevUser() {
    return __awaiter(this, void 0, void 0, function* () {
        const users = yield getDevUsers();
        return users[Math.floor(Math.random() * users.length)];
    });
}
exports.getAnyDevUser = getAnyDevUser;
function getParts(limit) {
    return __awaiter(this, void 0, void 0, function* () {
        return (yield exports.workflowApi.partsList({ limit: limit })).data.parts;
    });
}
exports.getParts = getParts;
function getAnyPart() {
    return __awaiter(this, void 0, void 0, function* () {
        const parts = yield getParts();
        return parts[Math.floor(Math.random() * parts.length)];
    });
}
exports.getAnyPart = getAnyPart;
function getWorks(limit) {
    return __awaiter(this, void 0, void 0, function* () {
        return (yield exports.workflowApi.worksList({ limit: limit })).data.works;
    });
}
exports.getWorks = getWorks;
function getAnyWork() {
    return __awaiter(this, void 0, void 0, function* () {
        const works = yield getWorks();
        return works[Math.floor(Math.random() * works.length)];
    });
}
exports.getAnyWork = getAnyWork;
//# sourceMappingURL=test-helpers.js.map