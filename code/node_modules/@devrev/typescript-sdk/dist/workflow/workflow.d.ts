import { AxiosResponse } from 'axios';
import { client, workflowSDK } from '../index';
import { LogLevel, Logger } from '../logger';
/**
 * The Workflow class (BETA) provides methods to execute common workflows or sequences of API calls.
 * @example
 * ```typescript
 * const setup_options = { endpoint: 'https://api.devrev.ai', token: process.env.DEVREV_TOKEN };
 *
 * const workflow = new Workflow(setup_options);
 *
 * (async () => {
 *  const res = await workflow.createTicket('Sample title', 'user@example.com', 'Sample part');
 * })();
 *
 * ```
*/
export declare class Workflow extends workflowSDK.Api<unknown> {
    /**
     * The DevRev SDK client.
     * ```typescript
     * import { client } from './index';
     * const sdk = client.setup({ endpoint: 'https://api.devrev.ai', token: process.env.DEVREV_TOKEN });
     * ```
     */
    private api;
    /**
     * The logger name for the Workflow class.
     */
    static loggerName: string;
    /**
     * The logger for the Workflow class.
     */
    private logger;
    /**
     * The constructor for the Workflow class.
     * @param setupOptions The setup options for the SDK client.
     * @param logLevel The log level for the logger. Optional. Defaults to Logger.INFO. Other options are Logger.DEBUG, Logger.WARN, and Logger.ERROR
     * @param logger The logger for the Workflow class.
     * @example
     * ```typescript
     * const setup_options = { endpoint: 'https://api.devrev.ai', token: process.env.DEVREV_TOKEN };
     * const workflow = new Workflow(setup_options);
     * ```
     * @example
     * ```typescript
     * const setup_options = { endpoint: 'https://api.devrev.ai', token: process.env.DEVREV_TOKEN };
     * const workflow = new Workflow(setup_options, Logger.DEBUG);
     * ```
     */
    constructor(setupOptions: client.SetupOptions, logLevel?: LogLevel, logger?: Logger);
    /**
     * Creates a ticket workflow.
     * @param title The title of the ticket.
     * @param userEmail The email of the dev user associated with the ticket.
     * @param partName The name of the part associated with the ticket.
     * @returns The created ticket.
     */
    createTicket(title: string, userEmail: string, partName: string, additionalParams?: Omit<workflowSDK.WorksCreateRequest, 'applies_to_part' | 'owned_by' | 'title' | 'type'>): Promise<(workflowSDK.AtomBase & {
        applies_to_part?: workflowSDK.PartSummary | undefined;
        artifacts?: workflowSDK.AtomBaseSummary[] | undefined;
        body?: string | undefined;
        custom_fields?: object | undefined;
        custom_schema_fragments?: string[] | undefined;
        owned_by: workflowSDK.UserSummary[];
        reported_by?: workflowSDK.UserSummary[] | undefined;
        stage?: workflowSDK.LegacyStage | undefined;
        stock_schema_fragment?: string | undefined;
        subtype?: string | undefined;
        tags?: workflowSDK.TagWithValue[] | undefined;
        target_close_date?: string | undefined;
        title: string;
    } & {
        type: workflowSDK.WorkType;
    }) | undefined>;
    /**
     * Creates an issue workflow.
     * @param title The title of the issue.
     * @param userEmail The email of the dev user associated with the issue.
     * @param partName The name of the part associated with the issue.
     * @returns The created issue.
    */
    createIssue(title: string, userEmail: string, partName: string, additionalParams?: Omit<workflowSDK.WorksCreateRequest, 'applies_to_part' | 'owned_by' | 'title' | 'type'>): Promise<(workflowSDK.AtomBase & {
        applies_to_part?: workflowSDK.PartSummary | undefined;
        artifacts?: workflowSDK.AtomBaseSummary[] | undefined;
        body?: string | undefined;
        custom_fields?: object | undefined;
        custom_schema_fragments?: string[] | undefined;
        owned_by: workflowSDK.UserSummary[];
        reported_by?: workflowSDK.UserSummary[] | undefined;
        stage?: workflowSDK.LegacyStage | undefined;
        stock_schema_fragment?: string | undefined;
        subtype?: string | undefined;
        tags?: workflowSDK.TagWithValue[] | undefined;
        target_close_date?: string | undefined;
        title: string;
    } & {
        type: workflowSDK.WorkType;
    }) | undefined>;
    /**
     * Creates a work workflow. Work is a generic term for tickets, issues, and tasks.
     * @param title The title of the work.
     * @param userEmail The email of the dev user associated with the work.
     * @param partName The name of the part associated with the work.
     * @returns The created work.
     */
    private createWork;
    /**
     * Looks up users by email.
     * @param emails The emails of the users to look up.
     * @param type The type of the users to look up. Takes either 'dev_user' or 'rev_user'. If not given, both dev and rev users will be looked up.
     * @returns The users that were looked up.
     * @example
     * ```typescript
     * // Look up dev users by email
     * const devUsers = await workflow.usersLookupByEmail(['test@example.com'], 'dev_user');
     *
     * // Look up rev users by email
     * const revUsers = await workflow.usersLookupByEmail(['test@example.com'], 'rev_user');
     *
     * // Look up both dev and rev users by email
     * const users = await workflow.usersLookupByEmail(['test@example.com']);
     * ```
     */
    usersLookupByEmail(emails: string[], type?: string): Promise<workflowSDK.DevUser[] | workflowSDK.RevUser[] | undefined>;
    /**
     * Looks up dev users by email.
     * @param emails The emails of the dev users to look up.
     * @returns The dev users that were found.
     * @example
     * const devUsers = await workflow.devUsersLookupByEmail(['test@example.com'], 'dev_user);
     * console.log(devUsers);
    */
    private devUsersLookupByEmail;
    /**
     * Looks up rev users by email.
     * @param emails The emails of the rev users to look up.
     * @returns The rev users that were found.
     * @example
     * const revUsers = await workflow.revUsersLookupByEmail(['test@example.com'], 'rev_user);
     * console.log(revUsers);
     */
    private revUsersLookupByEmail;
    private customFragmentCache;
    /**
   * Fetches custom fragments for the given fragment IDs.
   * @param fragmentIDs - An array of fragment IDs to fetch.
   * @returns A Promise that resolves to an array of custom fragments. Preserves the order of the fragmentIDs array.
   */
    private fetchCustomFragments;
    /**
   * Adds custom fragments to objects that have custom_schema_fragments property.
   * @template T - The type of the objects with custom_schema_fragments property.
   * @param objects - An array of objects with custom_schema_fragments property.
   * @returns A Promise that resolves to an array of objects with custom_fragment property.
   */
    private addCustomFragments;
    /**
   * Processes 'list' or 'get' API response data and adds custom fragments to the objects, if applicable.
   * @template Q - The type of the query parameter. Ex: WorksGetRequest / worksListRequest
   * @template R - The type of the API response data. Ex: WorksGetResponse / WorksListResponse
   * @template T - The type of the objects with custom_schema_fragments property. Ex: Work
   * @param query - The query parameter for the API call.
   * @param apiMethod - The API method to be called. Ex: worksGet / worksList
   * @param keyName - The name of the key in the API response data where the objects are located.
   * @returns A Promise that resolves to the processed AxiosResponse with custom fragments added to the objects.
   */
    private processWithCustomFragments;
    /**
   * Fetches the works with custom fragments for the given query.
   * @param query - The query parameter for the worksGet API call.
   * @returns A Promise that resolves to the AxiosResponse with updated work containing custom fragments.
   */
    worksGetWithCustomFragments(query: workflowSDK.WorksGetRequest): Promise<AxiosResponse<workflowSDK.WorksGetResponse>>;
    /**
   * Fetches the works list with custom fragments for the given query.
   * @param query - The query parameter for the worksList API call.
   * @returns A Promise that resolves to the AxiosResponse with updated works containing custom fragments.
   */
    worksListWithCustomFragments(query: workflowSDK.WorksListRequest): Promise<AxiosResponse<workflowSDK.WorksListResponse>>;
    /**
   * Fetches the account with custom fragments for the given query.
   * @param query - The query parameter for the accountsGet API call.
   * @returns A Promise that resolves to the AxiosResponse with updated account containing custom fragments.
   */
    accountsGetWithCustomFragments(query: workflowSDK.AccountsGetRequest): Promise<AxiosResponse<workflowSDK.AccountsGetResponse>>;
    /**
   * Fetches the accounts list with custom fragments for the given query.
   * @param query - The query parameter for the accountsList API call.
   * @returns A Promise that resolves to the AxiosResponse with updated accounts containing custom fragments.
   */
    accountsListWithCustomFragments(query: workflowSDK.AccountsListRequest): Promise<AxiosResponse<workflowSDK.AccountsListResponse>>;
    /**
   * Fetches the rev_org with custom fragments for the given query.
   * @param query - The query parameter for the revOrgsGet API call.
   * @returns A Promise that resolves to the AxiosResponse with updated rev_org containing custom fragments.
   */
    revOrgsGetWithCustomFragments(query: workflowSDK.RevOrgsGetRequest): Promise<AxiosResponse<workflowSDK.RevOrgsGetResponse>>;
    /**
   * Fetches the rev_org list with custom fragments for the given query.
   * @param query - The query parameter for the revOrgsList API call.
   * @returns A Promise that resolves to the AxiosResponse with updated rev_orgs containing custom fragments.
   */
    revOrgsListWithCustomFragments(query: workflowSDK.RevOrgsListRequest): Promise<AxiosResponse<workflowSDK.RevOrgsListResponse>>;
    /**
   * Fetches the rev_user with custom fragments for the given query.
   * @param query - The query parameter for the revUsersGet API call.
   * @returns A Promise that resolves to the AxiosResponse with updated rev_user containing custom fragments.
   */
    revUsersGetWithCustomFragments(query: workflowSDK.RevUsersGetRequest): Promise<AxiosResponse<workflowSDK.RevUsersGetResponse>>;
    /**
   * Fetches the rev_user list with custom fragments for the given query.
   * @param query - The query parameter for the revUsersList API call.
   * @returns A Promise that resolves to the AxiosResponse with updated rev_users containing custom fragments.
   */
    revUsersListWithCustomFragments(query: workflowSDK.RevUsersListRequest): Promise<AxiosResponse<workflowSDK.RevUsersListResponse>>;
    /**
     * Fetches the part with custom fragments for the given query.
     * @param query - The query parameter for the partsGet API call.
     * @returns A Promise that resolves to the AxiosResponse with updated part containing custom fragments.
     */
    partsGetWithCustomFragments(query: workflowSDK.PartsGetRequest): Promise<AxiosResponse<workflowSDK.PartsGetResponse>>;
    /**
     * Fetches the parts list with custom fragments for the given query.
     * @param query - The query parameter for the partsList API call.
     * @returns A Promise that resolves to the AxiosResponse with updated parts containing custom fragments.
    */
    partsListWithCustomFragments(query: workflowSDK.PartsListRequest): Promise<AxiosResponse<workflowSDK.PartsListResponse>>;
    /**
     * Handles errors that occur during API requests.
     * @param error The error object.
     */
    private handleError;
}
