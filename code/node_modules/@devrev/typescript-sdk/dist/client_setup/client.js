"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.client = exports.getAxiosRequestConfig = void 0;
const index_1 = require("../index");
function getAxiosRequestConfig(setup_options, scope) {
    const axiosConfig = {
        baseURL: setup_options.endpoint,
        headers: {
            Authorization: setup_options.token || '',
        },
    };
    if (!axiosConfig.headers) {
        axiosConfig.headers = {};
    }
    if (scope) {
        axiosConfig.headers['X-Devrev-Scope'] = scope;
    }
    return axiosConfig;
}
exports.getAxiosRequestConfig = getAxiosRequestConfig;
// eslint-disable-next-line @typescript-eslint/naming-convention
class client {
    static createSDKInstance(setup_options, sdk, scope) {
        const axiosConfig = getAxiosRequestConfig(setup_options, scope);
        const devrevSDK = new sdk.Api(Object.assign({}, axiosConfig));
        devrevSDK.instance.interceptors.request.use((config) => {
            for (const key in config.params) {
                if (Array.isArray(config.params[key])) {
                    config.params[key] = config.params[key]
                        .map((value) => {
                        return `"${value}"`;
                    })
                        .join(',');
                }
            }
            return config;
        });
        return devrevSDK;
    }
    static setup(setup_options) {
        return this.createSDKInstance(setup_options, index_1.publicSDK);
    }
    static setupBeta(setup_options) {
        return this.createSDKInstance(setup_options, index_1.betaSDK, 'beta');
    }
    static setupInternal(setup_options) {
        return this.createSDKInstance(setup_options, index_1.internalSDK, 'internal');
    }
    static setupWorkflows(setup_options) {
        return this.createSDKInstance(setup_options, index_1.workflowSDK, 'beta');
    }
}
exports.client = client;
//# sourceMappingURL=client.js.map