"use strict";
/* eslint-disable */
/* tslint:disable */
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BotStatus = exports.BooleanExpressionType = exports.BooleanExpressionPrimitiveExpressionValueValueType = exports.BooleanExpressionPrimitiveExpressionValueArrayValueBaseType = exports.BooleanExpressionPrimitiveExpressionOperatorValue = exports.BatchApplyResponseItemBatchType = exports.BatchApplyRequestItemBatchType = exports.BannerNudgeWidgetVariant = exports.BannerNudgeWidgetPosition = exports.BannerNudgeWidgetBannerNudgeType = exports.AutomationStatus = exports.AutoSuggestRequestedField = exports.AuthorizeRequestConfigType = exports.AuthorizeRequestConfigGrantType = exports.AuthorizationTypeEnum = exports.AuthTokenTokenType = exports.AuthTokenSubjectTokenType = exports.AuthTokenStatus = exports.AuthTokenRequestedTokenType = exports.AuthTokenGrantType = exports.AuthPreferencesLoginMethod = exports.AuthPreferencesJitRevUserProvisioning = exports.AuthConnectionType = exports.AuthConnectionToggle = exports.AtomType = exports.ArtifactDetailType = exports.ArtifactConfigurationSet = exports.ArticlesUpdateVote = exports.ArticlesListVote = exports.ArticlesGetVote = exports.ArticlesFilterParentOpOperatorType = exports.ArticleStatus = exports.ApproverStatus = exports.ApproverMemberDetailStatus = exports.AppliesToPartFilterPartsOpOperatorType = exports.AppRouteValue = exports.ApiOperationHttpOperation = exports.AirdropRecipeListOfEnumConditionOperator = exports.AirdropRecipeFilterableFieldDescriptionValueType = exports.AirdropRecipeFieldFilteringConditionType = exports.AirdropRecipeEnumConditionOperator = exports.AirdropExternalExtractorMessageRequestEventType = exports.AiAgentEventStatus = exports.AggregationDetailAggregationType = exports.AddonRuleAssociativity = exports.AdaptableRequestConfigType = exports.ActionExecutorType = exports.AccountRevOrgOperationEventOperation = exports.AccountIngestionChannel = exports.AccessLevel = void 0;
exports.DataSourceType = exports.DashboardsListFilterScopeValue = exports.DashboardsListFilterCreatedByOpOperatorType = exports.DashboardIdentifier = exports.DashboardFilterRelativeDateConditionType = exports.DashboardFilterOperandType = exports.DashboardFilterExpressionOperator = exports.DashboardFilterConditionValueType = exports.DashboardFilterConditionOperator = exports.CustomSchemaFragmentsSetRequestType = exports.CustomSchemaFragmentsSetRequestPrivateType = exports.CustomSchemaFragmentsListRequestPrune = exports.CustomSchemaFragmentType = exports.CustomSchemaFragmentPrivateType = exports.CustomSchemaFragmentPrivateFragmentType = exports.CustomSchemaFragmentFragmentType = exports.CreditType = exports.CreditStatus = exports.CreditCouponCreditExpiryMethod = exports.CreateSpotlightNudgeWidgetSpotlightNudgeType = exports.CreatePostNudgeWidgetPostNudgeType = exports.CreateLinkPreviewWidgetLinkPreviewType = exports.CreateEmbeddableWidgetEmbeddableType = exports.CreateBannerNudgeWidgetBannerNudgeType = exports.ConversationsVistaGroupItemType = exports.ConversationsCreateRequestTypeValue = exports.ConversationPriority = exports.ConversationAssistRequestedObject = exports.ContentTemplateType = exports.ContactsPreferencesGroupAccountProvisionForContactsViaPublicAat = exports.ConnectionsUpdateRequestActionValue = exports.ConnectionTargetStatus = exports.ConnectionSourceStatus = exports.ConfigurationProrationBehavior = exports.ConfigurationCollectionMethod = exports.ConditionV1Operator = exports.CommentSuggestedRepliesWidgetVisibility = exports.CommandSurfaceSurface = exports.CommandSurfaceObjectTypes = exports.CommandStatus = exports.CommandActionTemplateType = exports.CommandActionExecutorType = exports.CodeChangeSourceValue = exports.CodeChangeSource = exports.ClassifyInquiryType = exports.ChatType = exports.ChatCompletionsRequestProvider = exports.ChatCompletionsRequestMessageRole = exports.CaveatOperator = exports.BulkImportRequestTypeEnum = void 0;
exports.FieldValueType = exports.FieldPrivilegeFieldPrivilegeEnum = exports.FeatureApiOperationHttpOperation = exports.ExternalSystemType = exports.ExternalIdentityState = exports.ExploreSection = exports.ExploreFilterViewType = exports.EventSourceStatus = exports.EventSourceConfigTemplateType = exports.EventAtomNotifyEventValue = exports.EvaluateSentimentResponseSentiment = exports.ErrorUnauthorizedType = exports.ErrorTooManyRequestsType = exports.ErrorServiceUnavailableType = exports.ErrorNotFoundType = exports.ErrorInternalServerErrorType = exports.ErrorForbiddenType = exports.ErrorConflictType = exports.ErrorBadRequestUnexpectedJsonTypeType = exports.ErrorBadRequestType = exports.EntitlementScope = exports.EntitlementAggregationType = exports.EnhancementRevScoreTier = exports.EngagementsCreateRequestEngagementType = exports.EngagementType = exports.EngagementNewType = exports.EmbeddableWidgetEmbeddableType = exports.DynamicVistaFilterType = exports.DurationType = exports.DomainVerificationStatusValue = exports.DnsRecordType = exports.DiscoveryRunStatus = exports.DiscoveryGithubReposSettingsReposStatus = exports.DiscountDetailType = exports.DirectoriesFilterParentOpOperatorType = exports.DevuInviteState = exports.DevuInviteGlobalState = exports.DevrevProfileVisibility = exports.DevUsersCreateRequestDevUsersCreateStateEnumValue = exports.DevUserJobTitle = exports.DevUserGlobalState = exports.DevOrgGlobalState = exports.DevOrgGlobalPendingState = exports.DevOrgAuthConnectionsUpdateRequestType = exports.DevOrgAuthConnectionsCreateRequestType = exports.DateTimePresetType = exports.DateFilterType = exports.DatasetTypeValue = exports.DatasetFormatValue = exports.DataSourcesListFilterScopeValue = void 0;
exports.LinkType = exports.LinkPreviewWidgetLinkPreviewType = exports.LinkEndpointType = exports.LineVisualizationYAxisStrokeStyle = exports.KeyringTypeKind = exports.KeyringTypeEnum = exports.KeyringStatus = exports.KeyringScope = exports.KeyExtractorExecutorType = exports.JobState = exports.JobCategory = exports.IssueSelectorTagOp = exports.IssuePriority = exports.IoPortFieldsSchemaType = exports.InvoiceUpdateStatus = exports.InvoiceType = exports.InvoiceStatus = exports.InvoicePaymentsPlatform = exports.InvoiceLineItemType = exports.InvoiceInvoicingPlatform = exports.InteractionsFilterParentOpOperatorType = exports.InteractionsFilterOwnedByOpOperatorType = exports.InteractionsFilterMembersOpOperatorType = exports.InteractionsFilterEmbeddedByOpOperatorType = exports.InteractionsFilterCreatedByOpOperatorType = exports.InteractionsFilterClosedByOpOperatorType = exports.InteractionsFilterAppliesToPartsOpOperatorType = exports.InteractionMessageUserType = exports.InteractionHandlerDefinitionType = exports.InstructionsFormat = exports.InsightValueType = exports.InsightType = exports.InputValueDefinitionType = exports.IncidentsListFiltersOwnedByOperatorType = exports.IncidentsListFiltersCreatedByOperatorType = exports.HeadersContentDisposition = exports.GroupedVistaFlavor = exports.GroupedVistaFilterType = exports.GroupType = exports.GroupMemberType = exports.GroupItemType = exports.GlobalStoreListMarketplaceItemsFilterCreatedByOperatorType = exports.GlobalInputInputType = exports.GithubFlowEventTransition = exports.GenericNotificationEventType = exports.GeneralPreferencesGroupPreferredLocale = exports.FunctionSourceInfoType = exports.FocusFocusPoint = exports.FlowStatus = exports.FlowGlobalInputType = void 0;
exports.ObjectFrameViewType = exports.OasisQueryModeType = exports.OasisJobScheduleType = exports.OasisJobPublisherType = exports.OasisDatasetListFilterScopeValue = exports.OasisDataPrepareStatusStatus = exports.OasisColumnPartitionSchemaType = exports.OasisColumnPartitionSchemaTimestampGranularity = exports.NotificationsChannelContentRequestChannel = exports.NotificationType = exports.NotificationState = exports.NotificationPriority = exports.NotificationPreferencesGroupEmailNotifications = exports.NotificationParentType = exports.NotificationMetadataState = exports.NotificationActionActionType = exports.NewsCreateRequestStatusValue = exports.MetricValueType = exports.MetricDetailsNormalization = exports.MetricDetailsCorrelation = exports.MetricDefinitionStatus = exports.MetricDefinitionMetricType = exports.MetricDefinitionAppliesTo = exports.MetricActionExecuteRequestAction = exports.MenuViewType = exports.MenuViewPageType = exports.MenuType = exports.MenuIcon = exports.MemberType = exports.MemberDetailStatus = exports.MeetingState = exports.MeetingEngagementSummaryState = exports.MeetingEngagementSummaryChannel = exports.MeetingChannel = exports.MeerkatWidgetColumnProjectionType = exports.MeerkatWidgetColumnFunctionType = exports.MarketplaceType = exports.MarketplaceSubmissionState = exports.MarketplaceSubmissionItemType = exports.MarketplaceItemType = exports.MarketplaceItemState = exports.MarketplaceItemItemType = exports.LogMlFeedbackRequestUserInteractionType = exports.LogMlFeedbackRequestFeedbackType = exports.LogMlFeedbackRequestBinarySentimentSentiment = exports.ListMode = exports.ListMarketplaceSubmissionsFilterCreatedByOperatorType = exports.ListMarketplaceItemsFilterCreatedByOperatorType = exports.LinksDirection = exports.LinkableKind = void 0;
exports.PlugWebComponentType = exports.PlugUserTypeDisplayRuleValue = exports.PlugUserTypeDisplayRuleOperator = exports.PlugSettingsUpdateRequestWebStylingUpdatePlugSettingWebThemeType = exports.PlugSettingsCreateRequestWebStylingPlugSettingWebThemeType = exports.PlugSettingStatus = exports.PlugSettingLocale = exports.PlugSettingLauncherAlignment = exports.PlugSettingGWWebStylingPlugSettingWebThemeType = exports.PlugSettingGWWebPlugSettingWebTabTypeValue = exports.PlugSettingDisplayRuleType = exports.PlugSettingDisplayRuleExpressionType = exports.PlugPathDisplayRuleOperator = exports.PlugDisplayRuleType = exports.PlugDisplayRuleExpressionType = exports.PlugDisplayRuleExpressionOperator = exports.PlugAttributeDisplayRuleTarget = exports.PeopleInsightsUowCategory = exports.PdfGenerationTemplateType = exports.PaymentMethodType = exports.PaymentMethodCardFundType = exports.PaymentMethodBankAccountAccountType = exports.PaymentMethodBankAccountAccountHolderType = exports.PartsVistaGroupItemType = exports.PartsMutateRequestType = exports.PartsFilterTagsOpOperatorType = exports.PartsFilterOwnedByOpOperatorType = exports.PartsFilterEnhancementTicketsOpOperatorType = exports.PartsFilterEnhancementRevScoreTierOpOperatorType = exports.PartsFilterEnhancementOpportunitiesOpOperatorType = exports.PartsFilterEnhancementAccountsOpOperatorType = exports.PartsFilterCreatedByOpOperatorType = exports.PartsDiscoverySourceName = exports.PartType = exports.PartPinType = exports.PartDeliveredAs = exports.PartCategory = exports.OrgType = exports.OrgState = exports.OrgScheduleStatus = exports.OrgScheduleFragmentStatus = exports.OrgEnvironment = exports.OpportunityPriority = exports.OpportunityForecastCategory = exports.OperationTypeEnum = exports.OperationType = exports.OperationOutputPortType = exports.OperationInputPortType = exports.ObjectTypeProto = exports.ObjectMemberV1MemberType = void 0;
exports.SelectorObject = exports.SearchSortOrderParam = exports.SearchSortByParam = exports.SearchResultType = exports.SearchNamespace = exports.SearchHybridNamespace = exports.ScoreAttributionType = exports.SchemasSubtypePrepareUpdateGetResponseConflictType = exports.SchemaFieldDescriptorFieldType = exports.SchemaFieldDescriptorArrayTypeBaseType = exports.RunnableKind = exports.RoomsInformRequestStatusValue = exports.RolesFilterTargetSubtypeOperatorType = exports.RoleType = exports.RoleTarget = exports.RolePrivileges = exports.RevUsersFiltersRevOrgOperatorType = exports.RevUserUserType = exports.RevUserPlugAvailability = exports.RevUserIngestionChannel = exports.RevOrgsFiltersAccountOperatorType = exports.RevOrgType = exports.RevObjectTagsOperatorType = exports.ResourceType = exports.ResolveEntitiesResponseObjectSummaryObject = exports.ResolveEntitiesRequestObjectType = exports.RelevantContextRequestRelevantContextSourceType = exports.RecordTemplateState = exports.ReactionsUpdateRequestAction = exports.QuestionAnswerStatus = exports.PushNotificationType = exports.PushNotificationTarget = exports.PushNotificationState = exports.PushNotificationDevice = exports.PushNotificationAndroidChannelLegacy = exports.PushNotificationAndroidChannel = exports.PushDeviceType = exports.ProjectType = exports.ProjectPriority = exports.ProductDeliveredAs = exports.PrincipalsListFilterPrinicipalTypeEnum = exports.PrimitiveValueType = exports.PricingBillingCycle = exports.PreferencesType = exports.PostNudgeWidgetPostNudgeType = exports.PortalStylingTheme = exports.PortalPreferencesStatus = exports.PlugWebThemeType = exports.PlugWebThemeNativeTheme = exports.PlugWebTabType = void 0;
exports.SnapWidgetStatus = exports.SnapWidgetNamespace = exports.SnapWidgetInteractionType = exports.SnapWidgetDisplayExpressionOperandType = exports.SnapWidgetDisplayConditionConditionType = exports.SnapWidgetClickInteractionClickAction = exports.SnapType = exports.SnapKitExecutionChannel = exports.SnapKitActionRequestElementTypeValue = exports.SnapKitActionImplExecutorType = exports.SnapInsSystemUpdateRequestStatus = exports.SnapInVersionState = exports.SnapInStatus = exports.SnapInSnapComponentSurface = exports.SnapInPreferencesState = exports.SnapInPackagesLogsFetchResponseLogSummaryTotalTotalRelationEnum = exports.SnapInPackagesLogTargetFilterLogTargetEnum = exports.SnapInPackagesLogSourceTypeFilterLogSourceTypeEnum = exports.SnapInPackagesLogProcessFilterLogProcessEnum = exports.SnapInPackagesLogLevelFilterLogLevelEnum = exports.SnapInOperationDefinitionType = exports.SnapInKeyringTypeKind = exports.SnapInHookReferenceType = exports.SnapInGlobalInputType = exports.SnapInFunctionDeploymentStatus = exports.SnapInFunctionDefinitionSourceType = exports.SnapComponentSurface = exports.SnapComponentState = exports.SlugRegistrationState = exports.SlugRegistrationObjectType = exports.SlasFilterAppliesToOperatorType = exports.SlaType = exports.SlaSummaryStage = exports.SlaStatus = exports.SlaSelectorTagOperation = exports.SlaSelectorSeverity = exports.SlaSelectorPriority = exports.SlaSelectorAppliesTo = exports.SlaEvaluationPeriod = exports.SlaAppliesTo = exports.SkuType = exports.SkuStatus = exports.SkuState = exports.SkuBillingMode = exports.SignConfigType = exports.SignConfigStatus = exports.SetupResourceResourceType = exports.ServicePlanStatus = exports.ServicePlanBillingCycle = exports.SendNotificationType = void 0;
exports.TimelineHuddleStatusType = exports.TimelineEventType = exports.TimelineEntryVisibility = exports.TimelineEntryType = exports.TimelineEntryPanel = exports.TimelineEntryObjectType = exports.TimelineEntryCollection = exports.TimelineEntriesUpdateRequestType = exports.TimelineEntriesCreateRequestType = exports.TimelineEntriesCreateRequestTimelineChangeEventChangeEventType = exports.TimelineEntriesCollection = exports.TimelineCommentBodyType = exports.TicketSeverity = exports.TicketCreationGroupPartTypesAvailableForRevUsers = exports.TicketChannels = exports.TermDetailSectionType = exports.TermDetailInputType = exports.TermCorrelation = exports.TaskPriority = exports.TargetObjectType = exports.TagType = exports.TableVisualizationColumnPinPosition = exports.TableVisualizationColumnLockPosition = exports.TableFormatValue = exports.SyncUnitSyncType = exports.SyncUnitRequiredActions = exports.SyncUnitAvailableActions = exports.SyncRunStartedBy = exports.SyncRunMode = exports.SyncProgressState = exports.SyncOutStatus = exports.SyncMetadataFilterSyncOutFilterStatus = exports.SyncMetadataFilterSyncInFilterStatus = exports.SyncJobInternalsSyncJobStage = exports.SyncJobInternalsJobType = exports.SyncInStatus = exports.SyncErrorRecordLevel = exports.SyncDirection = exports.SuggestObjectsObjectType = exports.SubtypeOpOperatorType = exports.StockSchemaFragmentsListRequestPrune = exports.StockSchemaFragmentsListRequestFilterPreset = exports.StageValidationTypeValue = exports.StageValidationOptionForUpdate = exports.StageValidationOptionForCreate = exports.SpotlightNudgeWidgetSpotlightNudgeType = exports.SocialMediaLinkName = exports.SnapWidgetsUpdateRequestType = exports.SnapWidgetsCreateRequestType = exports.SnapWidgetType = void 0;
exports.WorksFilterIssueAccountsOpOperatorType = exports.WorksFilterCreatedByOperatorType = exports.WorkflowStatus = exports.WorkflowRunStatus = exports.WorkType = exports.WidgetVisualizationType = exports.WidgetViewCountDisplayConditionOperator = exports.WidgetTimeOnPageDisplayConditionOperator = exports.WidgetQueryOrderByDirection = exports.WidgetPageUrlDisplayConditionOperator = exports.WidgetDisplayExpressionOperator = exports.WidgetDeviceTypeDisplayConditionValue = exports.WidgetDeviceTypeDisplayConditionOperator = exports.WidgetDataSourceType = exports.WidgetColumnProjectionType = exports.WebhooksUpdateAction = exports.WebhookStatus = exports.WebhookEventType = exports.WebCrawlerJobsControlRequestAction = exports.WebCrawlerJobState = exports.WatchEvent = exports.VisualizationAxisColorType = exports.VistasFilterFlavorOperatorType = exports.VistaType = exports.VistaReferencePointPositionType = exports.VistaGroupItemViewType = exports.VistaGroupItemType = exports.VistaGroupItemState = exports.VistaGroupItemGroupObjectType = exports.ViewType = exports.VertexV2ObjectType = exports.UserType = exports.UserState = exports.UserSessionBrowserInfoOperatingSystem = exports.UserSessionBrowserInfoBrowserName = exports.UserPrivilegesRequestTargetType = exports.UserPresenceValue = exports.UserPreferencesThemeMode = exports.UserParticipationNotificationLatestActivityType = exports.UserAction = exports.UomMetricScope = exports.UnitType = exports.TypeAheadRequestedField = exports.TuringSurface = exports.TuringSpacebarResponseCommandNameValue = exports.TuringSourcesType = exports.TuringRteRequestChangeToneTone = exports.TuringRteRequestAction = exports.TuringAnswersGroupLanguage = exports.TuringAnswersGroupExitAction = void 0;
exports.Api = exports.HttpClient = exports.ContentType = exports.WorksVistaGroupItemType = exports.WorksFilterTicketRevOrgIDsOperatorType = exports.WorksFilterTicketGroupsOpOperatorType = exports.WorksFilterTicketChannelsOperatorType = exports.WorksFilterTagIdsOperatorType = exports.WorksFilterReportedByOperatorType = exports.WorksFilterOwnedByOperatorType = exports.WorksFilterOpportunityContactsOpOperatorType = exports.WorksFilterLinkTargetObjectOperatorType = exports.WorksFilterIssueSprintOpOperatorType = exports.WorksFilterIssueRevOrgsOpOperatorType = void 0;
var AccessLevel;
(function (AccessLevel) {
    AccessLevel["External"] = "external";
    AccessLevel["Internal"] = "internal";
    AccessLevel["Private"] = "private";
    AccessLevel["Public"] = "public";
    AccessLevel["Restricted"] = "restricted";
})(AccessLevel = exports.AccessLevel || (exports.AccessLevel = {}));
/** Channel from which the rev identity is ingested. */
var AccountIngestionChannel;
(function (AccountIngestionChannel) {
    AccountIngestionChannel["Airdrop"] = "airdrop";
    AccountIngestionChannel["Csv"] = "csv";
})(AccountIngestionChannel = exports.AccountIngestionChannel || (exports.AccountIngestionChannel = {}));
/** Operation performed on the RevOrg with respect to account. */
var AccountRevOrgOperationEventOperation;
(function (AccountRevOrgOperationEventOperation) {
    AccountRevOrgOperationEventOperation["Added"] = "added";
    AccountRevOrgOperationEventOperation["Created"] = "created";
    AccountRevOrgOperationEventOperation["Deleted"] = "deleted";
    AccountRevOrgOperationEventOperation["Removed"] = "removed";
})(AccountRevOrgOperationEventOperation = exports.AccountRevOrgOperationEventOperation || (exports.AccountRevOrgOperationEventOperation = {}));
/** Specifies how the action is defined. */
var ActionExecutorType;
(function (ActionExecutorType) {
    ActionExecutorType["Rego"] = "rego";
})(ActionExecutorType = exports.ActionExecutorType || (exports.ActionExecutorType = {}));
/**
 * Choose the authorization method, configuration (predefined settings) or
 * function (custom code).
 */
var AdaptableRequestConfigType;
(function (AdaptableRequestConfigType) {
    AdaptableRequestConfigType["Config"] = "config";
    AdaptableRequestConfigType["Function"] = "function";
})(AdaptableRequestConfigType = exports.AdaptableRequestConfigType || (exports.AdaptableRequestConfigType = {}));
/** Type of association between SKU and addon, defaults to optional. */
var AddonRuleAssociativity;
(function (AddonRuleAssociativity) {
    AddonRuleAssociativity["Mandatory"] = "mandatory";
    AddonRuleAssociativity["Optional"] = "optional";
})(AddonRuleAssociativity = exports.AddonRuleAssociativity || (exports.AddonRuleAssociativity = {}));
/**
 * Aggregation type to be used while aggregating the metering data for the
 * UOM. 1] Sum - sum of all the values for the meter in a given period Ex.
 * { M1:2, M1:4 } => {M1:6} 2] Minimum - min of all the values for the
 * meter in a given period Ex. { M1:2, M1:4 } => {M1:2} 3] Maximum - max
 * of all the values for the meter in a given period Ex. { M1:2, M1:4 } =>
 * {M1:4} 4] Unique Count - Sum of distinct unique dimension observed for
 * the meter in the given period (not considering the data from the
 * previous billing period) Ex. January {M1:{VM:VM0}}, February
 * {M1:{VM:VM1}, M1:{VM:VM2}, M1:{VM:VM1}} => {M1:2} 5] Running Total -
 * Sum of distinct active unique dimension observed for a meter in the
 * given period, taking into consideration the active data from the
 * previous billing cycle Ex. January {M1:{VM:VM0,on}, {M1:{VM:VM1,off}
 * February {M1:{VM:VM2, on}, M1:{VM:VM2, off}, M1:{VM:VM3, on}} => {M1:3}
 * 6] Duration - Sum of distinct active unique dimension duration for a
 * meter in the given period, taking into consideration the active data
 * from the previous month Ex. January15 {M1:{VM:VM0,on, 4}} February15
 * {M1:{VM:VM0,off}, February18 {M1:{VM:VM1,on,5} => M1->
 * 30*4*charge_per_day + 10*5*charge_per_day 7] Latest - consider the
 * latest/last meter in the given period 8] Oldest - consider the
 * oldest/first record in the given period.
 */
var AggregationDetailAggregationType;
(function (AggregationDetailAggregationType) {
    AggregationDetailAggregationType["Duration"] = "duration";
    AggregationDetailAggregationType["Latest"] = "latest";
    AggregationDetailAggregationType["Maximum"] = "maximum";
    AggregationDetailAggregationType["Minimum"] = "minimum";
    AggregationDetailAggregationType["Oldest"] = "oldest";
    AggregationDetailAggregationType["RunningTotal"] = "running_total";
    AggregationDetailAggregationType["Sum"] = "sum";
    AggregationDetailAggregationType["UniqueCount"] = "unique_count";
})(AggregationDetailAggregationType = exports.AggregationDetailAggregationType || (exports.AggregationDetailAggregationType = {}));
/** Status of the AI agent event when consumed synchronously. */
var AiAgentEventStatus;
(function (AiAgentEventStatus) {
    AiAgentEventStatus["Failure"] = "failure";
    AiAgentEventStatus["Success"] = "success";
    AiAgentEventStatus["WaitingOnInput"] = "waiting_on_input";
})(AiAgentEventStatus = exports.AiAgentEventStatus || (exports.AiAgentEventStatus = {}));
var AirdropExternalExtractorMessageRequestEventType;
(function (AirdropExternalExtractorMessageRequestEventType) {
    AirdropExternalExtractorMessageRequestEventType["ExtractionAttachmentsDelay"] = "extraction_attachments_delay";
    AirdropExternalExtractorMessageRequestEventType["ExtractionAttachmentsDeleteDone"] = "extraction_attachments_delete_done";
    AirdropExternalExtractorMessageRequestEventType["ExtractionAttachmentsDeleteError"] = "extraction_attachments_delete_error";
    AirdropExternalExtractorMessageRequestEventType["ExtractionAttachmentsDone"] = "extraction_attachments_done";
    AirdropExternalExtractorMessageRequestEventType["ExtractionAttachmentsError"] = "extraction_attachments_error";
    AirdropExternalExtractorMessageRequestEventType["ExtractionAttachmentsProgress"] = "extraction_attachments_progress";
    AirdropExternalExtractorMessageRequestEventType["ExtractionDataDelay"] = "extraction_data_delay";
    AirdropExternalExtractorMessageRequestEventType["ExtractionDataDeleteDone"] = "extraction_data_delete_done";
    AirdropExternalExtractorMessageRequestEventType["ExtractionDataDeleteError"] = "extraction_data_delete_error";
    AirdropExternalExtractorMessageRequestEventType["ExtractionDataDone"] = "extraction_data_done";
    AirdropExternalExtractorMessageRequestEventType["ExtractionDataError"] = "extraction_data_error";
    AirdropExternalExtractorMessageRequestEventType["ExtractionDataProgress"] = "extraction_data_progress";
    AirdropExternalExtractorMessageRequestEventType["ExtractionExternalSyncUnitsDone"] = "extraction_external_sync_units_done";
    AirdropExternalExtractorMessageRequestEventType["ExtractionExternalSyncUnitsError"] = "extraction_external_sync_units_error";
    AirdropExternalExtractorMessageRequestEventType["ExtractionMetadataDone"] = "extraction_metadata_done";
    AirdropExternalExtractorMessageRequestEventType["ExtractionMetadataError"] = "extraction_metadata_error";
})(AirdropExternalExtractorMessageRequestEventType = exports.AirdropExternalExtractorMessageRequestEventType || (exports.AirdropExternalExtractorMessageRequestEventType = {}));
var AirdropRecipeEnumConditionOperator;
(function (AirdropRecipeEnumConditionOperator) {
    AirdropRecipeEnumConditionOperator["AnyOf"] = "any_of";
    AirdropRecipeEnumConditionOperator["NoneOf"] = "none_of";
})(AirdropRecipeEnumConditionOperator = exports.AirdropRecipeEnumConditionOperator || (exports.AirdropRecipeEnumConditionOperator = {}));
/** The type of the field. */
var AirdropRecipeFieldFilteringConditionType;
(function (AirdropRecipeFieldFilteringConditionType) {
    AirdropRecipeFieldFilteringConditionType["Enum"] = "enum";
    AirdropRecipeFieldFilteringConditionType["ListOfEnum"] = "list_of_enum";
    AirdropRecipeFieldFilteringConditionType["Timestamp"] = "timestamp";
})(AirdropRecipeFieldFilteringConditionType = exports.AirdropRecipeFieldFilteringConditionType || (exports.AirdropRecipeFieldFilteringConditionType = {}));
/** The type of the fields value. */
var AirdropRecipeFilterableFieldDescriptionValueType;
(function (AirdropRecipeFilterableFieldDescriptionValueType) {
    AirdropRecipeFilterableFieldDescriptionValueType["Enum"] = "enum";
    AirdropRecipeFilterableFieldDescriptionValueType["Timestamp"] = "timestamp";
})(AirdropRecipeFilterableFieldDescriptionValueType = exports.AirdropRecipeFilterableFieldDescriptionValueType || (exports.AirdropRecipeFilterableFieldDescriptionValueType = {}));
var AirdropRecipeListOfEnumConditionOperator;
(function (AirdropRecipeListOfEnumConditionOperator) {
    AirdropRecipeListOfEnumConditionOperator["ContainsAllOf"] = "contains_all_of";
    AirdropRecipeListOfEnumConditionOperator["ContainsAnyOf"] = "contains_any_of";
    AirdropRecipeListOfEnumConditionOperator["ContainsNoneOf"] = "contains_none_of";
    AirdropRecipeListOfEnumConditionOperator["SubsetOf"] = "subset_of";
})(AirdropRecipeListOfEnumConditionOperator = exports.AirdropRecipeListOfEnumConditionOperator || (exports.AirdropRecipeListOfEnumConditionOperator = {}));
/** The Http verb of the discovered API operation. */
var ApiOperationHttpOperation;
(function (ApiOperationHttpOperation) {
    ApiOperationHttpOperation["Connect"] = "connect";
    ApiOperationHttpOperation["Delete"] = "delete";
    ApiOperationHttpOperation["Get"] = "get";
    ApiOperationHttpOperation["Head"] = "head";
    ApiOperationHttpOperation["Options"] = "options";
    ApiOperationHttpOperation["Patch"] = "patch";
    ApiOperationHttpOperation["Post"] = "post";
    ApiOperationHttpOperation["Put"] = "put";
    ApiOperationHttpOperation["Trace"] = "trace";
})(ApiOperationHttpOperation = exports.ApiOperationHttpOperation || (exports.ApiOperationHttpOperation = {}));
var AppRouteValue;
(function (AppRouteValue) {
    AppRouteValue["Accounts"] = "accounts";
    AppRouteValue["BuildInsights"] = "build_insights";
    AppRouteValue["Contacts"] = "contacts";
    AppRouteValue["Customers"] = "customers";
    AppRouteValue["Inbox"] = "inbox";
    AppRouteValue["Lobby"] = "lobby";
    AppRouteValue["Parts"] = "parts";
    AppRouteValue["RevInsights"] = "rev_insights";
    AppRouteValue["Settings"] = "settings";
    AppRouteValue["Sprints"] = "sprints";
    AppRouteValue["SupportInsights"] = "support_insights";
    AppRouteValue["Tasks"] = "tasks";
    AppRouteValue["Trails"] = "trails";
    AppRouteValue["Unknown"] = "unknown";
    AppRouteValue["Updates"] = "updates";
    AppRouteValue["Works"] = "works";
})(AppRouteValue = exports.AppRouteValue || (exports.AppRouteValue = {}));
var AppliesToPartFilterPartsOpOperatorType;
(function (AppliesToPartFilterPartsOpOperatorType) {
    AppliesToPartFilterPartsOpOperatorType["Any"] = "any";
    AppliesToPartFilterPartsOpOperatorType["NotAny"] = "not_any";
})(AppliesToPartFilterPartsOpOperatorType = exports.AppliesToPartFilterPartsOpOperatorType || (exports.AppliesToPartFilterPartsOpOperatorType = {}));
/** User's approval status. */
var ApproverMemberDetailStatus;
(function (ApproverMemberDetailStatus) {
    ApproverMemberDetailStatus["Approved"] = "approved";
    ApproverMemberDetailStatus["Pending"] = "pending";
    ApproverMemberDetailStatus["Rejected"] = "rejected";
})(ApproverMemberDetailStatus = exports.ApproverMemberDetailStatus || (exports.ApproverMemberDetailStatus = {}));
/** Approver status. */
var ApproverStatus;
(function (ApproverStatus) {
    ApproverStatus["Approved"] = "approved";
    ApproverStatus["Pending"] = "pending";
    ApproverStatus["Rejected"] = "rejected";
})(ApproverStatus = exports.ApproverStatus || (exports.ApproverStatus = {}));
/** Status of the article. */
var ArticleStatus;
(function (ArticleStatus) {
    ArticleStatus["Archived"] = "archived";
    ArticleStatus["Draft"] = "draft";
    ArticleStatus["Published"] = "published";
    ArticleStatus["ReviewNeeded"] = "review_needed";
})(ArticleStatus = exports.ArticleStatus || (exports.ArticleStatus = {}));
var ArticlesFilterParentOpOperatorType;
(function (ArticlesFilterParentOpOperatorType) {
    ArticlesFilterParentOpOperatorType["All"] = "all";
    ArticlesFilterParentOpOperatorType["Any"] = "any";
    ArticlesFilterParentOpOperatorType["Empty"] = "empty";
    ArticlesFilterParentOpOperatorType["NotAny"] = "not_any";
    ArticlesFilterParentOpOperatorType["NotEmpty"] = "not_empty";
})(ArticlesFilterParentOpOperatorType = exports.ArticlesFilterParentOpOperatorType || (exports.ArticlesFilterParentOpOperatorType = {}));
/** Describes the vote a Rev user can have on an article. */
var ArticlesGetVote;
(function (ArticlesGetVote) {
    ArticlesGetVote["Downvote"] = "downvote";
    ArticlesGetVote["None"] = "none";
    ArticlesGetVote["Upvote"] = "upvote";
})(ArticlesGetVote = exports.ArticlesGetVote || (exports.ArticlesGetVote = {}));
/** Describes the kind of vote for which the voters are to be listed. */
var ArticlesListVote;
(function (ArticlesListVote) {
    ArticlesListVote["Downvote"] = "downvote";
    ArticlesListVote["Upvote"] = "upvote";
})(ArticlesListVote = exports.ArticlesListVote || (exports.ArticlesListVote = {}));
/** Describes the vote update action that can be performed on an article. */
var ArticlesUpdateVote;
(function (ArticlesUpdateVote) {
    ArticlesUpdateVote["Downvote"] = "downvote";
    ArticlesUpdateVote["Unvote"] = "unvote";
    ArticlesUpdateVote["Upvote"] = "upvote";
})(ArticlesUpdateVote = exports.ArticlesUpdateVote || (exports.ArticlesUpdateVote = {}));
/** Represents a set of configuration to be used with the artifacts object. */
var ArtifactConfigurationSet;
(function (ArtifactConfigurationSet) {
    ArtifactConfigurationSet["ArticleMedia"] = "article_media";
    ArtifactConfigurationSet["Default"] = "default";
    ArtifactConfigurationSet["EmailMedia"] = "email_media";
    ArtifactConfigurationSet["MarketplaceListingIcon"] = "marketplace_listing_icon";
    ArtifactConfigurationSet["MarketplaceMedia"] = "marketplace_media";
    ArtifactConfigurationSet["OrgLogo"] = "org_logo";
    ArtifactConfigurationSet["PlugSetting"] = "plug_setting";
    ArtifactConfigurationSet["PlugSettingBannerCard"] = "plug_setting_banner_card";
    ArtifactConfigurationSet["SnapInFunctionsCode"] = "snap_in_functions_code";
    ArtifactConfigurationSet["SnapWidget"] = "snap_widget";
    ArtifactConfigurationSet["UserProfilePicture"] = "user_profile_picture";
    ArtifactConfigurationSet["Work"] = "work";
})(ArtifactConfigurationSet = exports.ArtifactConfigurationSet || (exports.ArtifactConfigurationSet = {}));
/** Type of the artifact. */
var ArtifactDetailType;
(function (ArtifactDetailType) {
    ArtifactDetailType["GeneratedContract"] = "generated_contract";
    ArtifactDetailType["Others"] = "others";
    ArtifactDetailType["PurchaseOrder"] = "purchase_order";
    ArtifactDetailType["SignedContract"] = "signed_contract";
})(ArtifactDetailType = exports.ArtifactDetailType || (exports.ArtifactDetailType = {}));
var AtomType;
(function (AtomType) {
    AtomType["Account"] = "account";
    AtomType["AccountCommerceDetails"] = "account_commerce_details";
    AtomType["AddonRule"] = "addon_rule";
    AtomType["AiAgent"] = "ai_agent";
    AtomType["AiAgentSession"] = "ai_agent_session";
    AtomType["AppFragment"] = "app_fragment";
    AtomType["AppFragmentPrivate"] = "app_fragment_private";
    AtomType["Article"] = "article";
    AtomType["Artifact"] = "artifact";
    AtomType["AuthToken"] = "auth_token";
    AtomType["Automation"] = "automation";
    AtomType["Bot"] = "bot";
    AtomType["BotSnapshot"] = "bot_snapshot";
    AtomType["Call"] = "call";
    AtomType["Capability"] = "capability";
    AtomType["Channel"] = "channel";
    AtomType["CodeChange"] = "code_change";
    AtomType["Command"] = "command";
    AtomType["Component"] = "component";
    AtomType["Connection"] = "connection";
    AtomType["Conversation"] = "conversation";
    AtomType["ConversationCreatedNotification"] = "conversation_created_notification";
    AtomType["ConversationInactivityReminder"] = "conversation_inactivity_reminder";
    AtomType["Credit"] = "credit";
    AtomType["CreditCoupon"] = "credit_coupon";
    AtomType["Curated"] = "curated";
    AtomType["CustomEngagement"] = "custom_engagement";
    AtomType["CustomObject"] = "custom_object";
    AtomType["CustomPart"] = "custom_part";
    AtomType["CustomStage"] = "custom_stage";
    AtomType["CustomState"] = "custom_state";
    AtomType["CustomTypeFragment"] = "custom_type_fragment";
    AtomType["CustomTypeFragmentPrivate"] = "custom_type_fragment_private";
    AtomType["CustomWork"] = "custom_work";
    AtomType["Dashboard"] = "dashboard";
    AtomType["DataSource"] = "data_source";
    AtomType["Dataset"] = "dataset";
    AtomType["DevOrg"] = "dev_org";
    AtomType["DevOrgCommerceDetails"] = "dev_org_commerce_details";
    AtomType["DevOrgGlobal"] = "dev_org_global";
    AtomType["DevUser"] = "dev_user";
    AtomType["DevUserGlobal"] = "dev_user_global";
    AtomType["DevrevProfile"] = "devrev_profile";
    AtomType["DevrevReminder"] = "devrev_reminder";
    AtomType["DevuInvite"] = "devu_invite";
    AtomType["DevuInviteGlobal"] = "devu_invite_global";
    AtomType["Directory"] = "directory";
    AtomType["DiscoveryGitCommit"] = "discovery_git_commit";
    AtomType["DiscoveryGitEvent"] = "discovery_git_event";
    AtomType["DiscoveryProfile"] = "discovery_profile";
    AtomType["DiscoveryRun"] = "discovery_run";
    AtomType["DiscoverySettings"] = "discovery_settings";
    AtomType["Dynamic"] = "dynamic";
    AtomType["Emoji"] = "emoji";
    AtomType["Engagement"] = "engagement";
    AtomType["Enhancement"] = "enhancement";
    AtomType["EventSource"] = "event_source";
    AtomType["ExternalSyncUnit"] = "external_sync_unit";
    AtomType["Feature"] = "feature";
    AtomType["FeaturePin"] = "feature_pin";
    AtomType["Flow"] = "flow";
    AtomType["GenericNotification"] = "generic_notification";
    AtomType["Group"] = "group";
    AtomType["Grouped"] = "grouped";
    AtomType["Incident"] = "incident";
    AtomType["Interaction"] = "interaction";
    AtomType["Invoice"] = "invoice";
    AtomType["InvoiceLineItem"] = "invoice_line_item";
    AtomType["Issue"] = "issue";
    AtomType["Job"] = "job";
    AtomType["Keyring"] = "keyring";
    AtomType["KeyringType"] = "keyring_type";
    AtomType["LicenseAssignment"] = "license_assignment";
    AtomType["Link"] = "link";
    AtomType["Linkable"] = "linkable";
    AtomType["LinkablePin"] = "linkable_pin";
    AtomType["Marketplace"] = "marketplace";
    AtomType["MarketplaceCategory"] = "marketplace_category";
    AtomType["MarketplaceItem"] = "marketplace_item";
    AtomType["MarketplaceSubmission"] = "marketplace_submission";
    AtomType["Meeting"] = "meeting";
    AtomType["MeetingNew"] = "meeting_new";
    AtomType["Menu"] = "menu";
    AtomType["Metric"] = "metric";
    AtomType["MetricDefinition"] = "metric_definition";
    AtomType["MetricSet"] = "metric_set";
    AtomType["Microservice"] = "microservice";
    AtomType["News"] = "news";
    AtomType["NotificationContentTemplate"] = "notification_content_template";
    AtomType["NotificationPreferences"] = "notification_preferences";
    AtomType["OasisData"] = "oasis_data";
    AtomType["OasisJob"] = "oasis_job";
    AtomType["ObjectAssignmentNotification"] = "object_assignment_notification";
    AtomType["ObjectMember"] = "object_member";
    AtomType["OneTimeLineItem"] = "one_time_line_item";
    AtomType["Operation"] = "operation";
    AtomType["Opportunity"] = "opportunity";
    AtomType["OrgPreferences"] = "org_preferences";
    AtomType["OrgSchedule"] = "org_schedule";
    AtomType["OrgScheduleFragment"] = "org_schedule_fragment";
    AtomType["PaymentMethodBankAccount"] = "payment_method_bank_account";
    AtomType["PaymentMethodCard"] = "payment_method_card";
    AtomType["PlugSetting"] = "plug_setting";
    AtomType["PortalPreferences"] = "portal_preferences";
    AtomType["PrReviewReminder"] = "pr_review_reminder";
    AtomType["PriceBook"] = "price_book";
    AtomType["Pricing"] = "pricing";
    AtomType["Product"] = "product";
    AtomType["Project"] = "project";
    AtomType["PushDevice"] = "push_device";
    AtomType["QuestionAnswer"] = "question_answer";
    AtomType["Quote"] = "quote";
    AtomType["QuoteTermTemplate"] = "quote_term_template";
    AtomType["RealTimeInsight"] = "real_time_insight";
    AtomType["RealTimeInsightValue"] = "real_time_insight_value";
    AtomType["RecordTemplate"] = "record_template";
    AtomType["RecurringLineItem"] = "recurring_line_item";
    AtomType["RevOrg"] = "rev_org";
    AtomType["RevUser"] = "rev_user";
    AtomType["Reward"] = "reward";
    AtomType["RewardTransaction"] = "reward_transaction";
    AtomType["Role"] = "role";
    AtomType["Room"] = "room";
    AtomType["Rule"] = "rule";
    AtomType["Runnable"] = "runnable";
    AtomType["RunnablePin"] = "runnable_pin";
    AtomType["Scenario"] = "scenario";
    AtomType["Score"] = "score";
    AtomType["ServiceAccount"] = "service_account";
    AtomType["ServicePlan"] = "service_plan";
    AtomType["Settings"] = "settings";
    AtomType["Sku"] = "sku";
    AtomType["SkuRule"] = "sku_rule";
    AtomType["Sla"] = "sla";
    AtomType["SlaTracker"] = "sla_tracker";
    AtomType["SnapComponent"] = "snap_component";
    AtomType["SnapIn"] = "snap_in";
    AtomType["SnapInFunction"] = "snap_in_function";
    AtomType["SnapInPackage"] = "snap_in_package";
    AtomType["SnapInPreferences"] = "snap_in_preferences";
    AtomType["SnapInVersion"] = "snap_in_version";
    AtomType["SnapKitAction"] = "snap_kit_action";
    AtomType["SnapKitExecution"] = "snap_kit_execution";
    AtomType["SnapWidget"] = "snap_widget";
    AtomType["StageDiagram"] = "stage_diagram";
    AtomType["StockSchemaFragment"] = "stock_schema_fragment";
    AtomType["StockSchemaFragmentPrivate"] = "stock_schema_fragment_private";
    AtomType["Survey"] = "survey";
    AtomType["SurveyResponse"] = "survey_response";
    AtomType["SyncHistory"] = "sync_history";
    AtomType["SyncModificationRecord"] = "sync_modification_record";
    AtomType["SyncUnit"] = "sync_unit";
    AtomType["SysUser"] = "sys_user";
    AtomType["Tag"] = "tag";
    AtomType["Task"] = "task";
    AtomType["TenantFragment"] = "tenant_fragment";
    AtomType["TenantFragmentPrivate"] = "tenant_fragment_private";
    AtomType["Ticket"] = "ticket";
    AtomType["TimelineChangeEvent"] = "timeline_change_event";
    AtomType["TimelineComment"] = "timeline_comment";
    AtomType["TimelineHuddle"] = "timeline_huddle";
    AtomType["Uom"] = "uom";
    AtomType["UserMentionedNotification"] = "user_mentioned_notification";
    AtomType["UserParticipationNotification"] = "user_participation_notification";
    AtomType["UserPreferences"] = "user_preferences";
    AtomType["UserSession"] = "user_session";
    AtomType["VistaSharedNotification"] = "vista_shared_notification";
    AtomType["WebCrawlerJob"] = "web_crawler_job";
    AtomType["Webhook"] = "webhook";
    AtomType["Widget"] = "widget";
    AtomType["WindowBasedInsight"] = "window_based_insight";
    AtomType["WindowBasedInsightValue"] = "window_based_insight_value";
    AtomType["Workflow"] = "workflow";
    AtomType["WorkflowRun"] = "workflow_run";
    AtomType["WorkflowStep"] = "workflow_step";
})(AtomType = exports.AtomType || (exports.AtomType = {}));
var AuthConnectionToggle;
(function (AuthConnectionToggle) {
    AuthConnectionToggle["Disable"] = "disable";
    AuthConnectionToggle["Enable"] = "enable";
})(AuthConnectionToggle = exports.AuthConnectionToggle || (exports.AuthConnectionToggle = {}));
/**
 * Defines the type for the authentication connection. The configuration
 * for each authentication connection will depend on the type value.
 */
var AuthConnectionType;
(function (AuthConnectionType) {
    AuthConnectionType["GoogleApps"] = "google_apps";
    AuthConnectionType["Oidc"] = "oidc";
    AuthConnectionType["Samlp"] = "samlp";
    AuthConnectionType["Social"] = "social";
    AuthConnectionType["Waad"] = "waad";
})(AuthConnectionType = exports.AuthConnectionType || (exports.AuthConnectionType = {}));
/** Just in Time (JIT) rev user provisioning type. */
var AuthPreferencesJitRevUserProvisioning;
(function (AuthPreferencesJitRevUserProvisioning) {
    AuthPreferencesJitRevUserProvisioning["All"] = "all";
    AuthPreferencesJitRevUserProvisioning["None"] = "none";
})(AuthPreferencesJitRevUserProvisioning = exports.AuthPreferencesJitRevUserProvisioning || (exports.AuthPreferencesJitRevUserProvisioning = {}));
/** Login method for authenticating customers to the rev user portal. */
var AuthPreferencesLoginMethod;
(function (AuthPreferencesLoginMethod) {
    AuthPreferencesLoginMethod["Default"] = "default";
    AuthPreferencesLoginMethod["Sso"] = "sso";
})(AuthPreferencesLoginMethod = exports.AuthPreferencesLoginMethod || (exports.AuthPreferencesLoginMethod = {}));
/** Specifies the process of obtaining a token. */
var AuthTokenGrantType;
(function (AuthTokenGrantType) {
    AuthTokenGrantType["UrnDevrevParamsOauthGrantTypeTokenIssue"] = "urn:devrev:params:oauth:grant-type:token-issue";
    AuthTokenGrantType["UrnIetfParamsOauthGrantTypeTokenExchange"] = "urn:ietf:params:oauth:grant-type:token-exchange";
})(AuthTokenGrantType = exports.AuthTokenGrantType || (exports.AuthTokenGrantType = {}));
/** The type of the requested token. */
var AuthTokenRequestedTokenType;
(function (AuthTokenRequestedTokenType) {
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypeAat"] = "urn:devrev:params:oauth:token-type:aat";
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypeAatActAs"] = "urn:devrev:params:oauth:token-type:aat:act-as";
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypeAatPublic"] = "urn:devrev:params:oauth:token-type:aat:public";
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypeDev"] = "urn:devrev:params:oauth:token-type:dev";
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypeDevConnect"] = "urn:devrev:params:oauth:token-type:dev:connect";
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypeGat"] = "urn:devrev:params:oauth:token-type:gat";
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypePat"] = "urn:devrev:params:oauth:token-type:pat";
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypePatActAs"] = "urn:devrev:params:oauth:token-type:pat:act-as";
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypeRat"] = "urn:devrev:params:oauth:token-type:rat";
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypeRev"] = "urn:devrev:params:oauth:token-type:rev";
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypeSession"] = "urn:devrev:params:oauth:token-type:session";
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypeSessionDev0"] = "urn:devrev:params:oauth:token-type:session:dev0";
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypeSessionOnetime"] = "urn:devrev:params:oauth:token-type:session:onetime";
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypeSessionRevActAs"] = "urn:devrev:params:oauth:token-type:session:rev:act-as";
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypeSuper"] = "urn:devrev:params:oauth:token-type:super";
    AuthTokenRequestedTokenType["UrnDevrevParamsOauthTokenTypeSys"] = "urn:devrev:params:oauth:token-type:sys";
    AuthTokenRequestedTokenType["UrnIetfParamsOauthTokenTypeJwt"] = "urn:ietf:params:oauth:token-type:jwt";
})(AuthTokenRequestedTokenType = exports.AuthTokenRequestedTokenType || (exports.AuthTokenRequestedTokenType = {}));
/** The status of the token. */
var AuthTokenStatus;
(function (AuthTokenStatus) {
    AuthTokenStatus["Active"] = "active";
    AuthTokenStatus["Expired"] = "expired";
    AuthTokenStatus["Revoked"] = "revoked";
})(AuthTokenStatus = exports.AuthTokenStatus || (exports.AuthTokenStatus = {}));
/** The type of the subject token. */
var AuthTokenSubjectTokenType;
(function (AuthTokenSubjectTokenType) {
    AuthTokenSubjectTokenType["UrnDevrevParamsOauthTokenTypeJwtAuth0"] = "urn:devrev:params:oauth:token-type:jwt:auth0";
    AuthTokenSubjectTokenType["UrnDevrevParamsOauthTokenTypeJwtDev"] = "urn:devrev:params:oauth:token-type:jwt:dev";
    AuthTokenSubjectTokenType["UrnDevrevParamsOauthTokenTypeRat"] = "urn:devrev:params:oauth:token-type:rat";
    AuthTokenSubjectTokenType["UrnDevrevParamsOauthTokenTypeRevinfo"] = "urn:devrev:params:oauth:token-type:revinfo";
    AuthTokenSubjectTokenType["UrnDevrevParamsOauthTokenTypeSession"] = "urn:devrev:params:oauth:token-type:session";
    AuthTokenSubjectTokenType["UrnDevrevParamsOauthTokenTypeSysu"] = "urn:devrev:params:oauth:token-type:sysu";
    AuthTokenSubjectTokenType["UrnDevrevParamsOauthTokenTypeUserinfo"] = "urn:devrev:params:oauth:token-type:userinfo";
    AuthTokenSubjectTokenType["UrnDevrevParamsOauthTokenTypeUserinfoProfile"] = "urn:devrev:params:oauth:token-type:userinfo:profile";
    AuthTokenSubjectTokenType["UrnIetfParamsOauthTokenTypeJwt"] = "urn:ietf:params:oauth:token-type:jwt";
})(AuthTokenSubjectTokenType = exports.AuthTokenSubjectTokenType || (exports.AuthTokenSubjectTokenType = {}));
/** The type of the issued token. Bearer is the only supported token type. */
var AuthTokenTokenType;
(function (AuthTokenTokenType) {
    AuthTokenTokenType["Bearer"] = "bearer";
})(AuthTokenTokenType = exports.AuthTokenTokenType || (exports.AuthTokenTokenType = {}));
/** Authorization type. */
var AuthorizationTypeEnum;
(function (AuthorizationTypeEnum) {
    AuthorizationTypeEnum["Oauth"] = "oauth";
    AuthorizationTypeEnum["Secret"] = "secret";
})(AuthorizationTypeEnum = exports.AuthorizationTypeEnum || (exports.AuthorizationTypeEnum = {}));
/**
 * Choose the OAuth2 authorization grant type. Currently, only the
 * authorization_code grant type is supported for OAuth2.
 */
var AuthorizeRequestConfigGrantType;
(function (AuthorizeRequestConfigGrantType) {
    AuthorizeRequestConfigGrantType["AuthorizationCode"] = "authorization_code";
})(AuthorizeRequestConfigGrantType = exports.AuthorizeRequestConfigGrantType || (exports.AuthorizeRequestConfigGrantType = {}));
/**
 * Choose the authorization method, configuration (predefined settings) or
 * function (custom code).
 */
var AuthorizeRequestConfigType;
(function (AuthorizeRequestConfigType) {
    AuthorizeRequestConfigType["Config"] = "config";
    AuthorizeRequestConfigType["Function"] = "function";
})(AuthorizeRequestConfigType = exports.AuthorizeRequestConfigType || (exports.AuthorizeRequestConfigType = {}));
/** Field types for autosuggest recommendation. */
var AutoSuggestRequestedField;
(function (AutoSuggestRequestedField) {
    AutoSuggestRequestedField["AppliesToPart"] = "applies_to_part";
    AutoSuggestRequestedField["OwnedBy"] = "owned_by";
    AutoSuggestRequestedField["Tag"] = "tag";
})(AutoSuggestRequestedField = exports.AutoSuggestRequestedField || (exports.AutoSuggestRequestedField = {}));
/** Status of the automation. */
var AutomationStatus;
(function (AutomationStatus) {
    AutomationStatus["Active"] = "active";
    AutomationStatus["Blocked"] = "blocked";
    AutomationStatus["Deprecated"] = "deprecated";
    AutomationStatus["Draft"] = "draft";
    AutomationStatus["Inactive"] = "inactive";
})(AutomationStatus = exports.AutomationStatus || (exports.AutomationStatus = {}));
var BannerNudgeWidgetBannerNudgeType;
(function (BannerNudgeWidgetBannerNudgeType) {
    BannerNudgeWidgetBannerNudgeType["Native"] = "native";
    BannerNudgeWidgetBannerNudgeType["SnapKit"] = "snap_kit";
})(BannerNudgeWidgetBannerNudgeType = exports.BannerNudgeWidgetBannerNudgeType || (exports.BannerNudgeWidgetBannerNudgeType = {}));
/** The position of the banner nudge widget. */
var BannerNudgeWidgetPosition;
(function (BannerNudgeWidgetPosition) {
    BannerNudgeWidgetPosition["Bottom"] = "bottom";
    BannerNudgeWidgetPosition["Top"] = "top";
})(BannerNudgeWidgetPosition = exports.BannerNudgeWidgetPosition || (exports.BannerNudgeWidgetPosition = {}));
/** The variant of the banner nudge widget. */
var BannerNudgeWidgetVariant;
(function (BannerNudgeWidgetVariant) {
    BannerNudgeWidgetVariant["Floating"] = "floating";
    BannerNudgeWidgetVariant["Inline"] = "inline";
})(BannerNudgeWidgetVariant = exports.BannerNudgeWidgetVariant || (exports.BannerNudgeWidgetVariant = {}));
var BatchApplyRequestItemBatchType;
(function (BatchApplyRequestItemBatchType) {
    BatchApplyRequestItemBatchType["AccountsCount"] = "accounts_count";
    BatchApplyRequestItemBatchType["AccountsCreate"] = "accounts_create";
    BatchApplyRequestItemBatchType["AccountsDelete"] = "accounts_delete";
    BatchApplyRequestItemBatchType["AccountsDeleteValidate"] = "accounts_delete_validate";
    BatchApplyRequestItemBatchType["AccountsGet"] = "accounts_get";
    BatchApplyRequestItemBatchType["AccountsUpdate"] = "accounts_update";
    BatchApplyRequestItemBatchType["ArticlesCount"] = "articles_count";
    BatchApplyRequestItemBatchType["ArticlesDelete"] = "articles_delete";
    BatchApplyRequestItemBatchType["ArticlesGet"] = "articles_get";
    BatchApplyRequestItemBatchType["ArticlesUpdate"] = "articles_update";
    BatchApplyRequestItemBatchType["AtomsGet"] = "atoms_get";
    BatchApplyRequestItemBatchType["AtomsSummary"] = "atoms_summary";
    BatchApplyRequestItemBatchType["ConversationsCount"] = "conversations_count";
    BatchApplyRequestItemBatchType["ConversationsCreate"] = "conversations_create";
    BatchApplyRequestItemBatchType["ConversationsDelete"] = "conversations_delete";
    BatchApplyRequestItemBatchType["ConversationsGet"] = "conversations_get";
    BatchApplyRequestItemBatchType["ConversationsUpdate"] = "conversations_update";
    BatchApplyRequestItemBatchType["CustomSchemaFragmentsGet"] = "custom_schema_fragments_get";
    BatchApplyRequestItemBatchType["CustomStagesGet"] = "custom_stages_get";
    BatchApplyRequestItemBatchType["LinksCreate"] = "links_create";
    BatchApplyRequestItemBatchType["LinksDelete"] = "links_delete";
    BatchApplyRequestItemBatchType["LinksGet"] = "links_get";
    BatchApplyRequestItemBatchType["LinksReplace"] = "links_replace";
    BatchApplyRequestItemBatchType["ObjectMembersCount"] = "object_members_count";
    BatchApplyRequestItemBatchType["PartsCount"] = "parts_count";
    BatchApplyRequestItemBatchType["PartsCreate"] = "parts_create";
    BatchApplyRequestItemBatchType["PartsDelete"] = "parts_delete";
    BatchApplyRequestItemBatchType["PartsGet"] = "parts_get";
    BatchApplyRequestItemBatchType["PartsUpdate"] = "parts_update";
    BatchApplyRequestItemBatchType["QuestionAnswersGet"] = "question_answers_get";
    BatchApplyRequestItemBatchType["RevOrgsCount"] = "rev_orgs_count";
    BatchApplyRequestItemBatchType["RevOrgsCreate"] = "rev_orgs_create";
    BatchApplyRequestItemBatchType["RevOrgsDelete"] = "rev_orgs_delete";
    BatchApplyRequestItemBatchType["RevOrgsDeleteValidate"] = "rev_orgs_delete_validate";
    BatchApplyRequestItemBatchType["RevOrgsGet"] = "rev_orgs_get";
    BatchApplyRequestItemBatchType["RevOrgsUpdate"] = "rev_orgs_update";
    BatchApplyRequestItemBatchType["RevUsersCount"] = "rev_users_count";
    BatchApplyRequestItemBatchType["RevUsersCreate"] = "rev_users_create";
    BatchApplyRequestItemBatchType["RevUsersDelete"] = "rev_users_delete";
    BatchApplyRequestItemBatchType["RevUsersGet"] = "rev_users_get";
    BatchApplyRequestItemBatchType["RevUsersUpdate"] = "rev_users_update";
    BatchApplyRequestItemBatchType["SearchCore"] = "search_core";
    BatchApplyRequestItemBatchType["ServiceAccountsGet"] = "service_accounts_get";
    BatchApplyRequestItemBatchType["SubtypesList"] = "subtypes_list";
    BatchApplyRequestItemBatchType["TagsCreate"] = "tags_create";
    BatchApplyRequestItemBatchType["TagsDelete"] = "tags_delete";
    BatchApplyRequestItemBatchType["TagsGet"] = "tags_get";
    BatchApplyRequestItemBatchType["TagsUpdate"] = "tags_update";
    BatchApplyRequestItemBatchType["TimelineEntriesCreate"] = "timeline_entries_create";
    BatchApplyRequestItemBatchType["TimelineEntriesDelete"] = "timeline_entries_delete";
    BatchApplyRequestItemBatchType["TimelineEntriesGet"] = "timeline_entries_get";
    BatchApplyRequestItemBatchType["TimelineEntriesList"] = "timeline_entries_list";
    BatchApplyRequestItemBatchType["TimelineEntriesUpdate"] = "timeline_entries_update";
    BatchApplyRequestItemBatchType["UserPrivileges"] = "user_privileges";
    BatchApplyRequestItemBatchType["VistasGet"] = "vistas_get";
    BatchApplyRequestItemBatchType["VistasGroupsGet"] = "vistas_groups_get";
    BatchApplyRequestItemBatchType["WorksCount"] = "works_count";
    BatchApplyRequestItemBatchType["WorksCreate"] = "works_create";
    BatchApplyRequestItemBatchType["WorksDelete"] = "works_delete";
    BatchApplyRequestItemBatchType["WorksGet"] = "works_get";
    BatchApplyRequestItemBatchType["WorksUpdate"] = "works_update";
})(BatchApplyRequestItemBatchType = exports.BatchApplyRequestItemBatchType || (exports.BatchApplyRequestItemBatchType = {}));
var BatchApplyResponseItemBatchType;
(function (BatchApplyResponseItemBatchType) {
    BatchApplyResponseItemBatchType["AccountsCount"] = "accounts_count";
    BatchApplyResponseItemBatchType["AccountsCreate"] = "accounts_create";
    BatchApplyResponseItemBatchType["AccountsDelete"] = "accounts_delete";
    BatchApplyResponseItemBatchType["AccountsDeleteValidate"] = "accounts_delete_validate";
    BatchApplyResponseItemBatchType["AccountsGet"] = "accounts_get";
    BatchApplyResponseItemBatchType["AccountsUpdate"] = "accounts_update";
    BatchApplyResponseItemBatchType["ArticlesCount"] = "articles_count";
    BatchApplyResponseItemBatchType["ArticlesDelete"] = "articles_delete";
    BatchApplyResponseItemBatchType["ArticlesGet"] = "articles_get";
    BatchApplyResponseItemBatchType["ArticlesUpdate"] = "articles_update";
    BatchApplyResponseItemBatchType["AtomsGet"] = "atoms_get";
    BatchApplyResponseItemBatchType["AtomsSummary"] = "atoms_summary";
    BatchApplyResponseItemBatchType["ConversationsCount"] = "conversations_count";
    BatchApplyResponseItemBatchType["ConversationsCreate"] = "conversations_create";
    BatchApplyResponseItemBatchType["ConversationsDelete"] = "conversations_delete";
    BatchApplyResponseItemBatchType["ConversationsGet"] = "conversations_get";
    BatchApplyResponseItemBatchType["ConversationsUpdate"] = "conversations_update";
    BatchApplyResponseItemBatchType["CustomSchemaFragmentsGet"] = "custom_schema_fragments_get";
    BatchApplyResponseItemBatchType["CustomStagesGet"] = "custom_stages_get";
    BatchApplyResponseItemBatchType["Error"] = "error";
    BatchApplyResponseItemBatchType["LinksCreate"] = "links_create";
    BatchApplyResponseItemBatchType["LinksDelete"] = "links_delete";
    BatchApplyResponseItemBatchType["LinksGet"] = "links_get";
    BatchApplyResponseItemBatchType["LinksReplace"] = "links_replace";
    BatchApplyResponseItemBatchType["ObjectMembersCount"] = "object_members_count";
    BatchApplyResponseItemBatchType["PartsCount"] = "parts_count";
    BatchApplyResponseItemBatchType["PartsCreate"] = "parts_create";
    BatchApplyResponseItemBatchType["PartsDelete"] = "parts_delete";
    BatchApplyResponseItemBatchType["PartsGet"] = "parts_get";
    BatchApplyResponseItemBatchType["PartsUpdate"] = "parts_update";
    BatchApplyResponseItemBatchType["QuestionAnswersGet"] = "question_answers_get";
    BatchApplyResponseItemBatchType["RevOrgsCount"] = "rev_orgs_count";
    BatchApplyResponseItemBatchType["RevOrgsCreate"] = "rev_orgs_create";
    BatchApplyResponseItemBatchType["RevOrgsDelete"] = "rev_orgs_delete";
    BatchApplyResponseItemBatchType["RevOrgsDeleteValidate"] = "rev_orgs_delete_validate";
    BatchApplyResponseItemBatchType["RevOrgsGet"] = "rev_orgs_get";
    BatchApplyResponseItemBatchType["RevOrgsUpdate"] = "rev_orgs_update";
    BatchApplyResponseItemBatchType["RevUsersCount"] = "rev_users_count";
    BatchApplyResponseItemBatchType["RevUsersCreate"] = "rev_users_create";
    BatchApplyResponseItemBatchType["RevUsersDelete"] = "rev_users_delete";
    BatchApplyResponseItemBatchType["RevUsersGet"] = "rev_users_get";
    BatchApplyResponseItemBatchType["RevUsersUpdate"] = "rev_users_update";
    BatchApplyResponseItemBatchType["SearchCore"] = "search_core";
    BatchApplyResponseItemBatchType["ServiceAccountsGet"] = "service_accounts_get";
    BatchApplyResponseItemBatchType["SubtypesList"] = "subtypes_list";
    BatchApplyResponseItemBatchType["TagsCreate"] = "tags_create";
    BatchApplyResponseItemBatchType["TagsDelete"] = "tags_delete";
    BatchApplyResponseItemBatchType["TagsGet"] = "tags_get";
    BatchApplyResponseItemBatchType["TagsUpdate"] = "tags_update";
    BatchApplyResponseItemBatchType["TimelineEntriesCreate"] = "timeline_entries_create";
    BatchApplyResponseItemBatchType["TimelineEntriesDelete"] = "timeline_entries_delete";
    BatchApplyResponseItemBatchType["TimelineEntriesGet"] = "timeline_entries_get";
    BatchApplyResponseItemBatchType["TimelineEntriesList"] = "timeline_entries_list";
    BatchApplyResponseItemBatchType["TimelineEntriesUpdate"] = "timeline_entries_update";
    BatchApplyResponseItemBatchType["UserPrivileges"] = "user_privileges";
    BatchApplyResponseItemBatchType["VistasGet"] = "vistas_get";
    BatchApplyResponseItemBatchType["VistasGroupsGet"] = "vistas_groups_get";
    BatchApplyResponseItemBatchType["WorksCount"] = "works_count";
    BatchApplyResponseItemBatchType["WorksCreate"] = "works_create";
    BatchApplyResponseItemBatchType["WorksDelete"] = "works_delete";
    BatchApplyResponseItemBatchType["WorksGet"] = "works_get";
    BatchApplyResponseItemBatchType["WorksUpdate"] = "works_update";
})(BatchApplyResponseItemBatchType = exports.BatchApplyResponseItemBatchType || (exports.BatchApplyResponseItemBatchType = {}));
/** The operator used to compare the key and the value. */
var BooleanExpressionPrimitiveExpressionOperatorValue;
(function (BooleanExpressionPrimitiveExpressionOperatorValue) {
    BooleanExpressionPrimitiveExpressionOperatorValue["Eq"] = "eq";
    BooleanExpressionPrimitiveExpressionOperatorValue["In"] = "in";
    BooleanExpressionPrimitiveExpressionOperatorValue["Neq"] = "neq";
})(BooleanExpressionPrimitiveExpressionOperatorValue = exports.BooleanExpressionPrimitiveExpressionOperatorValue || (exports.BooleanExpressionPrimitiveExpressionOperatorValue = {}));
var BooleanExpressionPrimitiveExpressionValueArrayValueBaseType;
(function (BooleanExpressionPrimitiveExpressionValueArrayValueBaseType) {
    BooleanExpressionPrimitiveExpressionValueArrayValueBaseType["Id"] = "id";
    BooleanExpressionPrimitiveExpressionValueArrayValueBaseType["Int"] = "int";
    BooleanExpressionPrimitiveExpressionValueArrayValueBaseType["String"] = "string";
})(BooleanExpressionPrimitiveExpressionValueArrayValueBaseType = exports.BooleanExpressionPrimitiveExpressionValueArrayValueBaseType || (exports.BooleanExpressionPrimitiveExpressionValueArrayValueBaseType = {}));
var BooleanExpressionPrimitiveExpressionValueValueType;
(function (BooleanExpressionPrimitiveExpressionValueValueType) {
    BooleanExpressionPrimitiveExpressionValueValueType["Array"] = "array";
    BooleanExpressionPrimitiveExpressionValueValueType["Attribute"] = "attribute";
    BooleanExpressionPrimitiveExpressionValueValueType["Bool"] = "bool";
    BooleanExpressionPrimitiveExpressionValueValueType["Id"] = "id";
    BooleanExpressionPrimitiveExpressionValueValueType["Int"] = "int";
    BooleanExpressionPrimitiveExpressionValueValueType["String"] = "string";
})(BooleanExpressionPrimitiveExpressionValueValueType = exports.BooleanExpressionPrimitiveExpressionValueValueType || (exports.BooleanExpressionPrimitiveExpressionValueValueType = {}));
var BooleanExpressionType;
(function (BooleanExpressionType) {
    BooleanExpressionType["And"] = "and";
    BooleanExpressionType["Not"] = "not";
    BooleanExpressionType["Or"] = "or";
    BooleanExpressionType["Primitive"] = "primitive";
})(BooleanExpressionType = exports.BooleanExpressionType || (exports.BooleanExpressionType = {}));
/** Status of the bot. */
var BotStatus;
(function (BotStatus) {
    BotStatus["Archived"] = "archived";
    BotStatus["Draft"] = "draft";
    BotStatus["InTesting"] = "in_testing";
    BotStatus["Published"] = "published";
})(BotStatus = exports.BotStatus || (exports.BotStatus = {}));
var BulkImportRequestTypeEnum;
(function (BulkImportRequestTypeEnum) {
    BulkImportRequestTypeEnum["Create"] = "create";
    BulkImportRequestTypeEnum["PreviewHeaders"] = "preview_headers";
    BulkImportRequestTypeEnum["PreviewRecords"] = "preview_records";
    BulkImportRequestTypeEnum["Unknown"] = "unknown";
})(BulkImportRequestTypeEnum = exports.BulkImportRequestTypeEnum || (exports.BulkImportRequestTypeEnum = {}));
/** The operator used to compare the key and the value. */
var CaveatOperator;
(function (CaveatOperator) {
    CaveatOperator["Eq"] = "eq";
    CaveatOperator["In"] = "in";
    CaveatOperator["NotEq"] = "not_eq";
})(CaveatOperator = exports.CaveatOperator || (exports.CaveatOperator = {}));
/** The role of the entity that is creating the message. */
var ChatCompletionsRequestMessageRole;
(function (ChatCompletionsRequestMessageRole) {
    ChatCompletionsRequestMessageRole["Assistant"] = "assistant";
    ChatCompletionsRequestMessageRole["System"] = "system";
    ChatCompletionsRequestMessageRole["User"] = "user";
})(ChatCompletionsRequestMessageRole = exports.ChatCompletionsRequestMessageRole || (exports.ChatCompletionsRequestMessageRole = {}));
/** Model Provider */
var ChatCompletionsRequestProvider;
(function (ChatCompletionsRequestProvider) {
    ChatCompletionsRequestProvider["Openai"] = "openai";
})(ChatCompletionsRequestProvider = exports.ChatCompletionsRequestProvider || (exports.ChatCompletionsRequestProvider = {}));
var ChatType;
(function (ChatType) {
    ChatType["Channel"] = "channel";
})(ChatType = exports.ChatType || (exports.ChatType = {}));
/** Type of the classification. */
var ClassifyInquiryType;
(function (ClassifyInquiryType) {
    ClassifyInquiryType["Spam"] = "spam";
})(ClassifyInquiryType = exports.ClassifyInquiryType || (exports.ClassifyInquiryType = {}));
/** Source of the code change object. */
var CodeChangeSource;
(function (CodeChangeSource) {
    CodeChangeSource["Github"] = "github";
})(CodeChangeSource = exports.CodeChangeSource || (exports.CodeChangeSource = {}));
var CodeChangeSourceValue;
(function (CodeChangeSourceValue) {
    CodeChangeSourceValue["Github"] = "github";
})(CodeChangeSourceValue = exports.CodeChangeSourceValue || (exports.CodeChangeSourceValue = {}));
/** Specifies how the action is defined. */
var CommandActionExecutorType;
(function (CommandActionExecutorType) {
    CommandActionExecutorType["Rego"] = "rego";
    CommandActionExecutorType["Workflow"] = "workflow";
})(CommandActionExecutorType = exports.CommandActionExecutorType || (exports.CommandActionExecutorType = {}));
/** The template engine for resolving message. */
var CommandActionTemplateType;
(function (CommandActionTemplateType) {
    CommandActionTemplateType["DevrevV1"] = "devrev_v1";
})(CommandActionTemplateType = exports.CommandActionTemplateType || (exports.CommandActionTemplateType = {}));
/** Status of the command. */
var CommandStatus;
(function (CommandStatus) {
    CommandStatus["Disabled"] = "disabled";
    CommandStatus["Draft"] = "draft";
    CommandStatus["Enabled"] = "enabled";
})(CommandStatus = exports.CommandStatus || (exports.CommandStatus = {}));
/** Objects types on which a command can be invoked. */
var CommandSurfaceObjectTypes;
(function (CommandSurfaceObjectTypes) {
    CommandSurfaceObjectTypes["Account"] = "account";
    CommandSurfaceObjectTypes["Conversation"] = "conversation";
    CommandSurfaceObjectTypes["Engagement"] = "engagement";
    CommandSurfaceObjectTypes["Flow"] = "flow";
    CommandSurfaceObjectTypes["Issue"] = "issue";
    CommandSurfaceObjectTypes["Opportunity"] = "opportunity";
    CommandSurfaceObjectTypes["Part"] = "part";
    CommandSurfaceObjectTypes["RevOrg"] = "rev_org";
    CommandSurfaceObjectTypes["RevUser"] = "rev_user";
    CommandSurfaceObjectTypes["SnapIn"] = "snap_in";
    CommandSurfaceObjectTypes["Ticket"] = "ticket";
})(CommandSurfaceObjectTypes = exports.CommandSurfaceObjectTypes || (exports.CommandSurfaceObjectTypes = {}));
/**
 * Surfaces from where this command can be invoked. In future this will be
 * extended to add more places like list views and events from where a
 * command can be invoked.
 */
var CommandSurfaceSurface;
(function (CommandSurfaceSurface) {
    CommandSurfaceSurface["CustomerChat"] = "customer_chat";
    CommandSurfaceSurface["Discussions"] = "discussions";
})(CommandSurfaceSurface = exports.CommandSurfaceSurface || (exports.CommandSurfaceSurface = {}));
/** The visibility of the comment suggested replies widget. */
var CommentSuggestedRepliesWidgetVisibility;
(function (CommentSuggestedRepliesWidgetVisibility) {
    CommentSuggestedRepliesWidgetVisibility["DevUser"] = "dev_user";
    CommentSuggestedRepliesWidgetVisibility["RevUser"] = "rev_user";
})(CommentSuggestedRepliesWidgetVisibility = exports.CommentSuggestedRepliesWidgetVisibility || (exports.CommentSuggestedRepliesWidgetVisibility = {}));
/** The operator used to compare the object vals. */
var ConditionV1Operator;
(function (ConditionV1Operator) {
    ConditionV1Operator["Eq"] = "eq";
    ConditionV1Operator["In"] = "in";
    ConditionV1Operator["NotEq"] = "not_eq";
    ConditionV1Operator["NotIn"] = "not_in";
})(ConditionV1Operator = exports.ConditionV1Operator || (exports.ConditionV1Operator = {}));
/**
 * Charge collection strategy for the service plan. Defaults to
 * charge_automatically.
 */
var ConfigurationCollectionMethod;
(function (ConfigurationCollectionMethod) {
    ConfigurationCollectionMethod["ChargeAutomatically"] = "charge_automatically";
    ConfigurationCollectionMethod["SendInvoice"] = "send_invoice";
})(ConfigurationCollectionMethod = exports.ConfigurationCollectionMethod || (exports.ConfigurationCollectionMethod = {}));
/**
 * Determines how to handle prorations resulting from the billing_date. If
 * no value is passed, the default is create_prorations.
 */
var ConfigurationProrationBehavior;
(function (ConfigurationProrationBehavior) {
    ConfigurationProrationBehavior["AlwaysInvoice"] = "always_invoice";
    ConfigurationProrationBehavior["CreateProrations"] = "create_prorations";
    ConfigurationProrationBehavior["None"] = "none";
})(ConfigurationProrationBehavior = exports.ConfigurationProrationBehavior || (exports.ConfigurationProrationBehavior = {}));
/** The status of the source connection. */
var ConnectionSourceStatus;
(function (ConnectionSourceStatus) {
    ConnectionSourceStatus["Closed"] = "closed";
    ConnectionSourceStatus["Connected"] = "connected";
    ConnectionSourceStatus["PendingApproval"] = "pending_approval";
})(ConnectionSourceStatus = exports.ConnectionSourceStatus || (exports.ConnectionSourceStatus = {}));
/** The status of the target connection. */
var ConnectionTargetStatus;
(function (ConnectionTargetStatus) {
    ConnectionTargetStatus["Closed"] = "closed";
    ConnectionTargetStatus["Connected"] = "connected";
    ConnectionTargetStatus["PendingApproval"] = "pending_approval";
})(ConnectionTargetStatus = exports.ConnectionTargetStatus || (exports.ConnectionTargetStatus = {}));
var ConnectionsUpdateRequestActionValue;
(function (ConnectionsUpdateRequestActionValue) {
    ConnectionsUpdateRequestActionValue["Approve"] = "approve";
    ConnectionsUpdateRequestActionValue["Close"] = "close";
})(ConnectionsUpdateRequestActionValue = exports.ConnectionsUpdateRequestActionValue || (exports.ConnectionsUpdateRequestActionValue = {}));
/** Assign each new user an individual account. */
var ContactsPreferencesGroupAccountProvisionForContactsViaPublicAat;
(function (ContactsPreferencesGroupAccountProvisionForContactsViaPublicAat) {
    ContactsPreferencesGroupAccountProvisionForContactsViaPublicAat["NewAccount"] = "new_account";
    ContactsPreferencesGroupAccountProvisionForContactsViaPublicAat["NoAccount"] = "no_account";
})(ContactsPreferencesGroupAccountProvisionForContactsViaPublicAat = exports.ContactsPreferencesGroupAccountProvisionForContactsViaPublicAat || (exports.ContactsPreferencesGroupAccountProvisionForContactsViaPublicAat = {}));
var ContentTemplateType;
(function (ContentTemplateType) {
    ContentTemplateType["NotificationContentTemplate"] = "notification_content_template";
})(ContentTemplateType = exports.ContentTemplateType || (exports.ContentTemplateType = {}));
/** Object for which suggestions are requested. */
var ConversationAssistRequestedObject;
(function (ConversationAssistRequestedObject) {
    ConversationAssistRequestedObject["Article"] = "article";
    ConversationAssistRequestedObject["Conversation"] = "conversation";
    ConversationAssistRequestedObject["Ticket"] = "ticket";
})(ConversationAssistRequestedObject = exports.ConversationAssistRequestedObject || (exports.ConversationAssistRequestedObject = {}));
/** Priority of the conversation. */
var ConversationPriority;
(function (ConversationPriority) {
    ConversationPriority["P0"] = "p0";
    ConversationPriority["P1"] = "p1";
    ConversationPriority["P2"] = "p2";
})(ConversationPriority = exports.ConversationPriority || (exports.ConversationPriority = {}));
var ConversationsCreateRequestTypeValue;
(function (ConversationsCreateRequestTypeValue) {
    ConversationsCreateRequestTypeValue["Support"] = "support";
})(ConversationsCreateRequestTypeValue = exports.ConversationsCreateRequestTypeValue || (exports.ConversationsCreateRequestTypeValue = {}));
/** Type of conversations vista group item. */
var ConversationsVistaGroupItemType;
(function (ConversationsVistaGroupItemType) {
    ConversationsVistaGroupItemType["Curated"] = "curated";
    ConversationsVistaGroupItemType["Dynamic"] = "dynamic";
})(ConversationsVistaGroupItemType = exports.ConversationsVistaGroupItemType || (exports.ConversationsVistaGroupItemType = {}));
var CreateBannerNudgeWidgetBannerNudgeType;
(function (CreateBannerNudgeWidgetBannerNudgeType) {
    CreateBannerNudgeWidgetBannerNudgeType["Native"] = "native";
    CreateBannerNudgeWidgetBannerNudgeType["SnapKit"] = "snap_kit";
})(CreateBannerNudgeWidgetBannerNudgeType = exports.CreateBannerNudgeWidgetBannerNudgeType || (exports.CreateBannerNudgeWidgetBannerNudgeType = {}));
var CreateEmbeddableWidgetEmbeddableType;
(function (CreateEmbeddableWidgetEmbeddableType) {
    CreateEmbeddableWidgetEmbeddableType["SnapKit"] = "snap_kit";
})(CreateEmbeddableWidgetEmbeddableType = exports.CreateEmbeddableWidgetEmbeddableType || (exports.CreateEmbeddableWidgetEmbeddableType = {}));
var CreateLinkPreviewWidgetLinkPreviewType;
(function (CreateLinkPreviewWidgetLinkPreviewType) {
    CreateLinkPreviewWidgetLinkPreviewType["Native"] = "native";
    CreateLinkPreviewWidgetLinkPreviewType["SnapKit"] = "snap_kit";
})(CreateLinkPreviewWidgetLinkPreviewType = exports.CreateLinkPreviewWidgetLinkPreviewType || (exports.CreateLinkPreviewWidgetLinkPreviewType = {}));
var CreatePostNudgeWidgetPostNudgeType;
(function (CreatePostNudgeWidgetPostNudgeType) {
    CreatePostNudgeWidgetPostNudgeType["Native"] = "native";
    CreatePostNudgeWidgetPostNudgeType["SnapKit"] = "snap_kit";
})(CreatePostNudgeWidgetPostNudgeType = exports.CreatePostNudgeWidgetPostNudgeType || (exports.CreatePostNudgeWidgetPostNudgeType = {}));
var CreateSpotlightNudgeWidgetSpotlightNudgeType;
(function (CreateSpotlightNudgeWidgetSpotlightNudgeType) {
    CreateSpotlightNudgeWidgetSpotlightNudgeType["Native"] = "native";
    CreateSpotlightNudgeWidgetSpotlightNudgeType["SnapKit"] = "snap_kit";
})(CreateSpotlightNudgeWidgetSpotlightNudgeType = exports.CreateSpotlightNudgeWidgetSpotlightNudgeType || (exports.CreateSpotlightNudgeWidgetSpotlightNudgeType = {}));
/**
 * If both credit expiry time and credit expiry duration are set, then the
 * max of both will be taken at the time of applying this coupon, if
 * credit expiry method is set to 'latest'. While min of both would be
 * taken in case of 'earliest' credit expiry method.
 */
var CreditCouponCreditExpiryMethod;
(function (CreditCouponCreditExpiryMethod) {
    CreditCouponCreditExpiryMethod["Earliest"] = "earliest";
    CreditCouponCreditExpiryMethod["Latest"] = "latest";
})(CreditCouponCreditExpiryMethod = exports.CreditCouponCreditExpiryMethod || (exports.CreditCouponCreditExpiryMethod = {}));
/**
 * Status of the credit request. A Dev is allowed to update status for the
 * credit request made by their Rev. Once a credit request status is made
 * as 'approved', no updates are allowed to the credit object after that.
 * When a Dev disburses credits to any of it's Revs, then by default the
 * credit object's status is 'approved', hence no updates are allowed.
 * When a Rev requests credits from their Dev Org, the status of requested
 * credit object is 'awaiting approval' (revs cannot modify the status
 * field, it's a Dev's construct). A Dev can update the status of credit
 * request to approved or rejected.
 */
var CreditStatus;
(function (CreditStatus) {
    CreditStatus["Approved"] = "approved";
    CreditStatus["AwaitingApproval"] = "awaiting_approval";
    CreditStatus["Rejected"] = "rejected";
})(CreditStatus = exports.CreditStatus || (exports.CreditStatus = {}));
/**
 * Indicates the source of the credit object, if it was requested by rev,
 * purchased by rev, issued by the dev or redeemed via a coupon.
 */
var CreditType;
(function (CreditType) {
    CreditType["Issued"] = "issued";
    CreditType["Purchased"] = "purchased";
    CreditType["Redeemed"] = "redeemed";
    CreditType["Requested"] = "requested";
})(CreditType = exports.CreditType || (exports.CreditType = {}));
/** Type of the custom schema fragment. */
var CustomSchemaFragmentFragmentType;
(function (CustomSchemaFragmentFragmentType) {
    CustomSchemaFragmentFragmentType["App"] = "app";
    CustomSchemaFragmentFragmentType["CustomType"] = "custom_type";
    CustomSchemaFragmentFragmentType["Tenant"] = "tenant";
})(CustomSchemaFragmentFragmentType = exports.CustomSchemaFragmentFragmentType || (exports.CustomSchemaFragmentFragmentType = {}));
/** Type of the custom schema fragment. */
var CustomSchemaFragmentPrivateFragmentType;
(function (CustomSchemaFragmentPrivateFragmentType) {
    CustomSchemaFragmentPrivateFragmentType["App"] = "app";
    CustomSchemaFragmentPrivateFragmentType["CustomType"] = "custom_type";
    CustomSchemaFragmentPrivateFragmentType["Tenant"] = "tenant";
})(CustomSchemaFragmentPrivateFragmentType = exports.CustomSchemaFragmentPrivateFragmentType || (exports.CustomSchemaFragmentPrivateFragmentType = {}));
var CustomSchemaFragmentPrivateType;
(function (CustomSchemaFragmentPrivateType) {
    CustomSchemaFragmentPrivateType["AppFragmentPrivate"] = "app_fragment_private";
    CustomSchemaFragmentPrivateType["CustomTypeFragmentPrivate"] = "custom_type_fragment_private";
    CustomSchemaFragmentPrivateType["TenantFragmentPrivate"] = "tenant_fragment_private";
})(CustomSchemaFragmentPrivateType = exports.CustomSchemaFragmentPrivateType || (exports.CustomSchemaFragmentPrivateType = {}));
var CustomSchemaFragmentType;
(function (CustomSchemaFragmentType) {
    CustomSchemaFragmentType["AppFragment"] = "app_fragment";
    CustomSchemaFragmentType["CustomTypeFragment"] = "custom_type_fragment";
    CustomSchemaFragmentType["TenantFragment"] = "tenant_fragment";
})(CustomSchemaFragmentType = exports.CustomSchemaFragmentType || (exports.CustomSchemaFragmentType = {}));
var CustomSchemaFragmentsListRequestPrune;
(function (CustomSchemaFragmentsListRequestPrune) {
    CustomSchemaFragmentsListRequestPrune["Fields"] = "fields";
})(CustomSchemaFragmentsListRequestPrune = exports.CustomSchemaFragmentsListRequestPrune || (exports.CustomSchemaFragmentsListRequestPrune = {}));
var CustomSchemaFragmentsSetRequestPrivateType;
(function (CustomSchemaFragmentsSetRequestPrivateType) {
    CustomSchemaFragmentsSetRequestPrivateType["AppFragment"] = "app_fragment";
    CustomSchemaFragmentsSetRequestPrivateType["CustomTypeFragment"] = "custom_type_fragment";
    CustomSchemaFragmentsSetRequestPrivateType["TenantFragment"] = "tenant_fragment";
})(CustomSchemaFragmentsSetRequestPrivateType = exports.CustomSchemaFragmentsSetRequestPrivateType || (exports.CustomSchemaFragmentsSetRequestPrivateType = {}));
var CustomSchemaFragmentsSetRequestType;
(function (CustomSchemaFragmentsSetRequestType) {
    CustomSchemaFragmentsSetRequestType["AppFragment"] = "app_fragment";
    CustomSchemaFragmentsSetRequestType["CustomTypeFragment"] = "custom_type_fragment";
    CustomSchemaFragmentsSetRequestType["TenantFragment"] = "tenant_fragment";
})(CustomSchemaFragmentsSetRequestType = exports.CustomSchemaFragmentsSetRequestType || (exports.CustomSchemaFragmentsSetRequestType = {}));
/** The operator used to compare the key and value. */
var DashboardFilterConditionOperator;
(function (DashboardFilterConditionOperator) {
    DashboardFilterConditionOperator["Contains"] = "contains";
    DashboardFilterConditionOperator["Equals"] = "equals";
    DashboardFilterConditionOperator["NotEquals"] = "not_equals";
    DashboardFilterConditionOperator["Range"] = "range";
})(DashboardFilterConditionOperator = exports.DashboardFilterConditionOperator || (exports.DashboardFilterConditionOperator = {}));
/** The operator used to compare the key and value. */
var DashboardFilterConditionValueType;
(function (DashboardFilterConditionValueType) {
    DashboardFilterConditionValueType["JsonValue"] = "json_value";
    DashboardFilterConditionValueType["PartValue"] = "part_value";
    DashboardFilterConditionValueType["RelativeDateValue"] = "relative_date_value";
})(DashboardFilterConditionValueType = exports.DashboardFilterConditionValueType || (exports.DashboardFilterConditionValueType = {}));
/** The logical operator that binds the filter conditions or expressions. */
var DashboardFilterExpressionOperator;
(function (DashboardFilterExpressionOperator) {
    DashboardFilterExpressionOperator["And"] = "and";
    DashboardFilterExpressionOperator["Or"] = "or";
})(DashboardFilterExpressionOperator = exports.DashboardFilterExpressionOperator || (exports.DashboardFilterExpressionOperator = {}));
/**
 * The type of the operand. It can be either a filter expression or a
 * filter condition.
 */
var DashboardFilterOperandType;
(function (DashboardFilterOperandType) {
    DashboardFilterOperandType["Condition"] = "condition";
    DashboardFilterOperandType["Expression"] = "expression";
})(DashboardFilterOperandType = exports.DashboardFilterOperandType || (exports.DashboardFilterOperandType = {}));
/** The type of the relative date condition. */
var DashboardFilterRelativeDateConditionType;
(function (DashboardFilterRelativeDateConditionType) {
    DashboardFilterRelativeDateConditionType["NextNDays"] = "next_n_days";
    DashboardFilterRelativeDateConditionType["NextNMonths"] = "next_n_months";
    DashboardFilterRelativeDateConditionType["NextNWeeks"] = "next_n_weeks";
    DashboardFilterRelativeDateConditionType["PrevNDays"] = "prev_n_days";
    DashboardFilterRelativeDateConditionType["PrevNMonths"] = "prev_n_months";
    DashboardFilterRelativeDateConditionType["PrevNWeeks"] = "prev_n_weeks";
})(DashboardFilterRelativeDateConditionType = exports.DashboardFilterRelativeDateConditionType || (exports.DashboardFilterRelativeDateConditionType = {}));
/** The identifier for the dashboard. */
var DashboardIdentifier;
(function (DashboardIdentifier) {
    DashboardIdentifier["CapiDashboard"] = "capi_dashboard";
    DashboardIdentifier["DrillthroughDashboard"] = "drillthrough_dashboard";
    DashboardIdentifier["SupportDashboard"] = "support_dashboard";
})(DashboardIdentifier = exports.DashboardIdentifier || (exports.DashboardIdentifier = {}));
var DashboardsListFilterCreatedByOpOperatorType;
(function (DashboardsListFilterCreatedByOpOperatorType) {
    DashboardsListFilterCreatedByOpOperatorType["All"] = "all";
    DashboardsListFilterCreatedByOpOperatorType["Any"] = "any";
    DashboardsListFilterCreatedByOpOperatorType["Empty"] = "empty";
    DashboardsListFilterCreatedByOpOperatorType["NotAny"] = "not_any";
    DashboardsListFilterCreatedByOpOperatorType["NotEmpty"] = "not_empty";
})(DashboardsListFilterCreatedByOpOperatorType = exports.DashboardsListFilterCreatedByOpOperatorType || (exports.DashboardsListFilterCreatedByOpOperatorType = {}));
var DashboardsListFilterScopeValue;
(function (DashboardsListFilterScopeValue) {
    DashboardsListFilterScopeValue["Org"] = "org";
    DashboardsListFilterScopeValue["System"] = "system";
})(DashboardsListFilterScopeValue = exports.DashboardsListFilterScopeValue || (exports.DashboardsListFilterScopeValue = {}));
/** The type of the data source. */
var DataSourceType;
(function (DataSourceType) {
    DataSourceType["Oasis"] = "oasis";
})(DataSourceType = exports.DataSourceType || (exports.DataSourceType = {}));
var DataSourcesListFilterScopeValue;
(function (DataSourcesListFilterScopeValue) {
    DataSourcesListFilterScopeValue["Org"] = "org";
    DataSourcesListFilterScopeValue["System"] = "system";
})(DataSourcesListFilterScopeValue = exports.DataSourcesListFilterScopeValue || (exports.DataSourcesListFilterScopeValue = {}));
/** The format of the dataset. */
var DatasetFormatValue;
(function (DatasetFormatValue) {
    DatasetFormatValue["Csv"] = "csv";
    DatasetFormatValue["Json"] = "json";
    DatasetFormatValue["Parquet"] = "parquet";
    DatasetFormatValue["Unknown"] = "unknown";
})(DatasetFormatValue = exports.DatasetFormatValue || (exports.DatasetFormatValue = {}));
/** The type of the dataset. */
var DatasetTypeValue;
(function (DatasetTypeValue) {
    DatasetTypeValue["Snapshot"] = "snapshot";
    DatasetTypeValue["Summary"] = "summary";
    DatasetTypeValue["Timeseries"] = "timeseries";
    DatasetTypeValue["Unknown"] = "unknown";
})(DatasetTypeValue = exports.DatasetTypeValue || (exports.DatasetTypeValue = {}));
/** Type of date filter. */
var DateFilterType;
(function (DateFilterType) {
    DateFilterType["Preset"] = "preset";
    DateFilterType["Range"] = "range";
})(DateFilterType = exports.DateFilterType || (exports.DateFilterType = {}));
/** Type of date preset. */
var DateTimePresetType;
(function (DateTimePresetType) {
    DateTimePresetType["AfterNDays"] = "after_n_days";
    DateTimePresetType["AfterNHours"] = "after_n_hours";
    DateTimePresetType["BeforeNDays"] = "before_n_days";
    DateTimePresetType["BeforeNHours"] = "before_n_hours";
    DateTimePresetType["LastNDays"] = "last_n_days";
    DateTimePresetType["LastNHours"] = "last_n_hours";
    DateTimePresetType["NextNDays"] = "next_n_days";
    DateTimePresetType["NextNHours"] = "next_n_hours";
})(DateTimePresetType = exports.DateTimePresetType || (exports.DateTimePresetType = {}));
/**
 * Defines the type for the authentication connection. Different types of
 * authentication connections have different configuration parameters.
 */
var DevOrgAuthConnectionsCreateRequestType;
(function (DevOrgAuthConnectionsCreateRequestType) {
    DevOrgAuthConnectionsCreateRequestType["GoogleApps"] = "google_apps";
    DevOrgAuthConnectionsCreateRequestType["Oidc"] = "oidc";
    DevOrgAuthConnectionsCreateRequestType["Samlp"] = "samlp";
    DevOrgAuthConnectionsCreateRequestType["Waad"] = "waad";
})(DevOrgAuthConnectionsCreateRequestType = exports.DevOrgAuthConnectionsCreateRequestType || (exports.DevOrgAuthConnectionsCreateRequestType = {}));
/**
 * Specifies the type for the authentication connection. Different types
 * of authentication connections have different configuration parameters
 * that can be updated.
 */
var DevOrgAuthConnectionsUpdateRequestType;
(function (DevOrgAuthConnectionsUpdateRequestType) {
    DevOrgAuthConnectionsUpdateRequestType["GoogleApps"] = "google_apps";
    DevOrgAuthConnectionsUpdateRequestType["None"] = "none";
    DevOrgAuthConnectionsUpdateRequestType["Oidc"] = "oidc";
    DevOrgAuthConnectionsUpdateRequestType["Samlp"] = "samlp";
    DevOrgAuthConnectionsUpdateRequestType["Waad"] = "waad";
})(DevOrgAuthConnectionsUpdateRequestType = exports.DevOrgAuthConnectionsUpdateRequestType || (exports.DevOrgAuthConnectionsUpdateRequestType = {}));
/** State of the record which is pending to commit. */
var DevOrgGlobalPendingState;
(function (DevOrgGlobalPendingState) {
    DevOrgGlobalPendingState["Create"] = "create";
    DevOrgGlobalPendingState["Update"] = "update";
})(DevOrgGlobalPendingState = exports.DevOrgGlobalPendingState || (exports.DevOrgGlobalPendingState = {}));
/** State of the record. */
var DevOrgGlobalState;
(function (DevOrgGlobalState) {
    DevOrgGlobalState["Active"] = "active";
    DevOrgGlobalState["Deactivated"] = "deactivated";
    DevOrgGlobalState["Deleted"] = "deleted";
    DevOrgGlobalState["Pending"] = "pending";
})(DevOrgGlobalState = exports.DevOrgGlobalState || (exports.DevOrgGlobalState = {}));
/** State of the user. */
var DevUserGlobalState;
(function (DevUserGlobalState) {
    DevUserGlobalState["Active"] = "active";
    DevUserGlobalState["Deactivated"] = "deactivated";
    DevUserGlobalState["Deleted"] = "deleted";
    DevUserGlobalState["Locked"] = "locked";
    DevUserGlobalState["Shadow"] = "shadow";
    DevUserGlobalState["Unassigned"] = "unassigned";
})(DevUserGlobalState = exports.DevUserGlobalState || (exports.DevUserGlobalState = {}));
/** Job title of the Dev User. */
var DevUserJobTitle;
(function (DevUserJobTitle) {
    DevUserJobTitle["CustomerSuccessManager"] = "customer_success_manager";
    DevUserJobTitle["Cxo"] = "cxo";
    DevUserJobTitle["Designer"] = "designer";
    DevUserJobTitle["Developer"] = "developer";
    DevUserJobTitle["HeadOfSupport"] = "head_of_support";
    DevUserJobTitle["Operations"] = "operations";
    DevUserJobTitle["Others"] = "others";
    DevUserJobTitle["ProductManager"] = "product_manager";
    DevUserJobTitle["Qa"] = "qa";
    DevUserJobTitle["RevenueLeader"] = "revenue_leader";
    DevUserJobTitle["Support"] = "support";
    DevUserJobTitle["TechLead"] = "tech_lead";
})(DevUserJobTitle = exports.DevUserJobTitle || (exports.DevUserJobTitle = {}));
var DevUsersCreateRequestDevUsersCreateStateEnumValue;
(function (DevUsersCreateRequestDevUsersCreateStateEnumValue) {
    DevUsersCreateRequestDevUsersCreateStateEnumValue["Shadow"] = "shadow";
})(DevUsersCreateRequestDevUsersCreateStateEnumValue = exports.DevUsersCreateRequestDevUsersCreateStateEnumValue || (exports.DevUsersCreateRequestDevUsersCreateStateEnumValue = {}));
/** Visibility of the profile to other users. */
var DevrevProfileVisibility;
(function (DevrevProfileVisibility) {
    DevrevProfileVisibility["Private"] = "private";
    DevrevProfileVisibility["Public"] = "public";
})(DevrevProfileVisibility = exports.DevrevProfileVisibility || (exports.DevrevProfileVisibility = {}));
/** State of the invite. */
var DevuInviteGlobalState;
(function (DevuInviteGlobalState) {
    DevuInviteGlobalState["Accepted"] = "accepted";
    DevuInviteGlobalState["Deleted"] = "deleted";
    DevuInviteGlobalState["Expired"] = "expired";
    DevuInviteGlobalState["Pending"] = "pending";
})(DevuInviteGlobalState = exports.DevuInviteGlobalState || (exports.DevuInviteGlobalState = {}));
/** State of the invite. */
var DevuInviteState;
(function (DevuInviteState) {
    DevuInviteState["Accepted"] = "accepted";
    DevuInviteState["Deleted"] = "deleted";
    DevuInviteState["Expired"] = "expired";
    DevuInviteState["Pending"] = "pending";
})(DevuInviteState = exports.DevuInviteState || (exports.DevuInviteState = {}));
var DirectoriesFilterParentOpOperatorType;
(function (DirectoriesFilterParentOpOperatorType) {
    DirectoriesFilterParentOpOperatorType["All"] = "all";
    DirectoriesFilterParentOpOperatorType["Any"] = "any";
    DirectoriesFilterParentOpOperatorType["Empty"] = "empty";
    DirectoriesFilterParentOpOperatorType["NotAny"] = "not_any";
    DirectoriesFilterParentOpOperatorType["NotEmpty"] = "not_empty";
})(DirectoriesFilterParentOpOperatorType = exports.DirectoriesFilterParentOpOperatorType || (exports.DirectoriesFilterParentOpOperatorType = {}));
/** The type of the discount that is associated. */
var DiscountDetailType;
(function (DiscountDetailType) {
    DiscountDetailType["Number"] = "number";
    DiscountDetailType["Percentage"] = "percentage";
})(DiscountDetailType = exports.DiscountDetailType || (exports.DiscountDetailType = {}));
/** Enum for repositories status for inclusion and exclusion. */
var DiscoveryGithubReposSettingsReposStatus;
(function (DiscoveryGithubReposSettingsReposStatus) {
    DiscoveryGithubReposSettingsReposStatus["All"] = "all";
    DiscoveryGithubReposSettingsReposStatus["Exclude"] = "exclude";
    DiscoveryGithubReposSettingsReposStatus["Include"] = "include";
})(DiscoveryGithubReposSettingsReposStatus = exports.DiscoveryGithubReposSettingsReposStatus || (exports.DiscoveryGithubReposSettingsReposStatus = {}));
/** Enum for discovery run status. */
var DiscoveryRunStatus;
(function (DiscoveryRunStatus) {
    DiscoveryRunStatus["Failed"] = "failed";
    DiscoveryRunStatus["Running"] = "running";
    DiscoveryRunStatus["Started"] = "started";
    DiscoveryRunStatus["Success"] = "success";
})(DiscoveryRunStatus = exports.DiscoveryRunStatus || (exports.DiscoveryRunStatus = {}));
/** Type of DNS record. */
var DnsRecordType;
(function (DnsRecordType) {
    DnsRecordType["Cname"] = "cname";
    DnsRecordType["Mx"] = "mx";
    DnsRecordType["Txt"] = "txt";
})(DnsRecordType = exports.DnsRecordType || (exports.DnsRecordType = {}));
/** Status of the identity. */
var DomainVerificationStatusValue;
(function (DomainVerificationStatusValue) {
    DomainVerificationStatusValue["Failed"] = "failed";
    DomainVerificationStatusValue["NotStarted"] = "not_started";
    DomainVerificationStatusValue["Pending"] = "pending";
    DomainVerificationStatusValue["Success"] = "success";
    DomainVerificationStatusValue["TemporaryFailure"] = "temporary_failure";
})(DomainVerificationStatusValue = exports.DomainVerificationStatusValue || (exports.DomainVerificationStatusValue = {}));
/** Type defines the type of the duration. */
var DurationType;
(function (DurationType) {
    DurationType["Day"] = "day";
    DurationType["Hour"] = "hour";
    DurationType["Minute"] = "minute";
    DurationType["Month"] = "month";
    DurationType["OneTime"] = "one_time";
    DurationType["Year"] = "year";
})(DurationType = exports.DurationType || (exports.DurationType = {}));
/** Type of DevRev object for which the vista is applicable. */
var DynamicVistaFilterType;
(function (DynamicVistaFilterType) {
    DynamicVistaFilterType["Accounts"] = "accounts";
    DynamicVistaFilterType["Conversations"] = "conversations";
    DynamicVistaFilterType["Credits"] = "credits";
    DynamicVistaFilterType["Incidents"] = "incidents";
    DynamicVistaFilterType["Invoices"] = "invoices";
    DynamicVistaFilterType["Parts"] = "parts";
    DynamicVistaFilterType["Quotes"] = "quotes";
    DynamicVistaFilterType["RevOrgs"] = "rev_orgs";
    DynamicVistaFilterType["RevUsers"] = "rev_users";
    DynamicVistaFilterType["Works"] = "works";
})(DynamicVistaFilterType = exports.DynamicVistaFilterType || (exports.DynamicVistaFilterType = {}));
var EmbeddableWidgetEmbeddableType;
(function (EmbeddableWidgetEmbeddableType) {
    EmbeddableWidgetEmbeddableType["SnapKit"] = "snap_kit";
})(EmbeddableWidgetEmbeddableType = exports.EmbeddableWidgetEmbeddableType || (exports.EmbeddableWidgetEmbeddableType = {}));
/** The type of engagement. */
var EngagementNewType;
(function (EngagementNewType) {
    EngagementNewType["Call"] = "call";
    EngagementNewType["CustomEngagement"] = "custom_engagement";
    EngagementNewType["MeetingNew"] = "meeting_new";
})(EngagementNewType = exports.EngagementNewType || (exports.EngagementNewType = {}));
/** Type of engagement. */
var EngagementType;
(function (EngagementType) {
    EngagementType["Call"] = "call";
    EngagementType["Default"] = "default";
    EngagementType["Email"] = "email";
    EngagementType["LinkedIn"] = "linked_in";
    EngagementType["Meeting"] = "meeting";
    EngagementType["Offline"] = "offline";
    EngagementType["Survey"] = "survey";
})(EngagementType = exports.EngagementType || (exports.EngagementType = {}));
/** The type of engagement. */
var EngagementsCreateRequestEngagementType;
(function (EngagementsCreateRequestEngagementType) {
    EngagementsCreateRequestEngagementType["Call"] = "call";
    EngagementsCreateRequestEngagementType["Default"] = "default";
    EngagementsCreateRequestEngagementType["Email"] = "email";
    EngagementsCreateRequestEngagementType["LinkedIn"] = "linked_in";
    EngagementsCreateRequestEngagementType["Offline"] = "offline";
})(EngagementsCreateRequestEngagementType = exports.EngagementsCreateRequestEngagementType || (exports.EngagementsCreateRequestEngagementType = {}));
/** Rev Score tier of the enhancement. */
var EnhancementRevScoreTier;
(function (EnhancementRevScoreTier) {
    EnhancementRevScoreTier["High"] = "high";
    EnhancementRevScoreTier["Low"] = "low";
    EnhancementRevScoreTier["Medium"] = "medium";
})(EnhancementRevScoreTier = exports.EnhancementRevScoreTier || (exports.EnhancementRevScoreTier = {}));
/**
 * Aggregation type to be used while aggregating the metering data for the
 * UOM. 1] Sum - sum of all the values for the meter in a given period Ex.
 * { M1:2, M1:4 } => {M1:6} 2] Minimum - min of all the values for the
 * meter in a given period Ex. { M1:2, M1:4 } => {M1:2} 3] Maximum - max
 * of all the values for the meter in a given period Ex. { M1:2, M1:4 } =>
 * {M1:4} 4] Unique Count - Sum of distinct unique dimension observed for
 * the meter in the given period (not considering the data from the
 * previous billing period) Ex. January {M1:{VM:VM0}}, February
 * {M1:{VM:VM1}, M1:{VM:VM2}, M1:{VM:VM1}} => {M1:2} 5] Running Total -
 * Sum of distinct active unique dimension observed for a meter in the
 * given period, taking into consideration the active data from the
 * previous billing cycle Ex. January {M1:{VM:VM0,on}, {M1:{VM:VM1,off}
 * February {M1:{VM:VM2, on}, M1:{VM:VM2, off}, M1:{VM:VM3, on}} => {M1:3}
 * 6] Duration - Sum of distinct active unique dimension duration for a
 * meter in the given period, taking into consideration the active data
 * from the previous month Ex. January15 {M1:{VM:VM0,on, 4}} February15
 * {M1:{VM:VM0,off}, February18 {M1:{VM:VM1,on,5} => M1->
 * 30*4*charge_per_day + 10*5*charge_per_day 7] Latest - consider the
 * latest/last meter in the given period 8] Oldest - consider the
 * oldest/first record in the given period.
 */
var EntitlementAggregationType;
(function (EntitlementAggregationType) {
    EntitlementAggregationType["Duration"] = "duration";
    EntitlementAggregationType["Latest"] = "latest";
    EntitlementAggregationType["Maximum"] = "maximum";
    EntitlementAggregationType["Minimum"] = "minimum";
    EntitlementAggregationType["Oldest"] = "oldest";
    EntitlementAggregationType["RunningTotal"] = "running_total";
    EntitlementAggregationType["Sum"] = "sum";
    EntitlementAggregationType["UniqueCount"] = "unique_count";
})(EntitlementAggregationType = exports.EntitlementAggregationType || (exports.EntitlementAggregationType = {}));
/**
 * Scope defines whether the entitlement is at org level or at each user
 * level. Knowing this will help on enforcing them for the given SKU at
 * rev, or at rev user level.
 */
var EntitlementScope;
(function (EntitlementScope) {
    EntitlementScope["Org"] = "org";
    EntitlementScope["User"] = "user";
})(EntitlementScope = exports.EntitlementScope || (exports.EntitlementScope = {}));
var ErrorBadRequestType;
(function (ErrorBadRequestType) {
    ErrorBadRequestType["ArtifactAlreadyAttachedToAParent"] = "artifact_already_attached_to_a_parent";
    ErrorBadRequestType["BadRequest"] = "bad_request";
    ErrorBadRequestType["InvalidApiVersion"] = "invalid_api_version";
    ErrorBadRequestType["InvalidEnumValue"] = "invalid_enum_value";
    ErrorBadRequestType["InvalidField"] = "invalid_field";
    ErrorBadRequestType["MissingDependency"] = "missing_dependency";
    ErrorBadRequestType["MissingRequiredField"] = "missing_required_field";
    ErrorBadRequestType["ParseError"] = "parse_error";
    ErrorBadRequestType["StaleSchemaFragments"] = "stale_schema_fragments";
    ErrorBadRequestType["UnexpectedJsonType"] = "unexpected_json_type";
    ErrorBadRequestType["ValueNotPermitted"] = "value_not_permitted";
})(ErrorBadRequestType = exports.ErrorBadRequestType || (exports.ErrorBadRequestType = {}));
var ErrorBadRequestUnexpectedJsonTypeType;
(function (ErrorBadRequestUnexpectedJsonTypeType) {
    ErrorBadRequestUnexpectedJsonTypeType["Array"] = "array";
    ErrorBadRequestUnexpectedJsonTypeType["Bool"] = "bool";
    ErrorBadRequestUnexpectedJsonTypeType["Null"] = "null";
    ErrorBadRequestUnexpectedJsonTypeType["Number"] = "number";
    ErrorBadRequestUnexpectedJsonTypeType["Object"] = "object";
    ErrorBadRequestUnexpectedJsonTypeType["String"] = "string";
})(ErrorBadRequestUnexpectedJsonTypeType = exports.ErrorBadRequestUnexpectedJsonTypeType || (exports.ErrorBadRequestUnexpectedJsonTypeType = {}));
var ErrorConflictType;
(function (ErrorConflictType) {
    ErrorConflictType["Conflict"] = "conflict";
})(ErrorConflictType = exports.ErrorConflictType || (exports.ErrorConflictType = {}));
var ErrorForbiddenType;
(function (ErrorForbiddenType) {
    ErrorForbiddenType["Forbidden"] = "forbidden";
})(ErrorForbiddenType = exports.ErrorForbiddenType || (exports.ErrorForbiddenType = {}));
var ErrorInternalServerErrorType;
(function (ErrorInternalServerErrorType) {
    ErrorInternalServerErrorType["InternalError"] = "internal_error";
})(ErrorInternalServerErrorType = exports.ErrorInternalServerErrorType || (exports.ErrorInternalServerErrorType = {}));
var ErrorNotFoundType;
(function (ErrorNotFoundType) {
    ErrorNotFoundType["NotFound"] = "not_found";
})(ErrorNotFoundType = exports.ErrorNotFoundType || (exports.ErrorNotFoundType = {}));
var ErrorServiceUnavailableType;
(function (ErrorServiceUnavailableType) {
    ErrorServiceUnavailableType["ServiceUnavailable"] = "service_unavailable";
})(ErrorServiceUnavailableType = exports.ErrorServiceUnavailableType || (exports.ErrorServiceUnavailableType = {}));
var ErrorTooManyRequestsType;
(function (ErrorTooManyRequestsType) {
    ErrorTooManyRequestsType["TooManyRequests"] = "too_many_requests";
})(ErrorTooManyRequestsType = exports.ErrorTooManyRequestsType || (exports.ErrorTooManyRequestsType = {}));
var ErrorUnauthorizedType;
(function (ErrorUnauthorizedType) {
    ErrorUnauthorizedType["Unauthenticated"] = "unauthenticated";
})(ErrorUnauthorizedType = exports.ErrorUnauthorizedType || (exports.ErrorUnauthorizedType = {}));
/** Sentiment value. */
var EvaluateSentimentResponseSentiment;
(function (EvaluateSentimentResponseSentiment) {
    EvaluateSentimentResponseSentiment["Delighted"] = "delighted";
    EvaluateSentimentResponseSentiment["Frustrated"] = "frustrated";
    EvaluateSentimentResponseSentiment["Happy"] = "happy";
    EvaluateSentimentResponseSentiment["Neutral"] = "neutral";
    EvaluateSentimentResponseSentiment["Unhappy"] = "unhappy";
    EvaluateSentimentResponseSentiment["Unknown"] = "unknown";
})(EvaluateSentimentResponseSentiment = exports.EvaluateSentimentResponseSentiment || (exports.EvaluateSentimentResponseSentiment = {}));
var EventAtomNotifyEventValue;
(function (EventAtomNotifyEventValue) {
    EventAtomNotifyEventValue["Created"] = "created";
    EventAtomNotifyEventValue["Deleted"] = "deleted";
    EventAtomNotifyEventValue["Updated"] = "updated";
})(EventAtomNotifyEventValue = exports.EventAtomNotifyEventValue || (exports.EventAtomNotifyEventValue = {}));
/** Parser type for the template. */
var EventSourceConfigTemplateType;
(function (EventSourceConfigTemplateType) {
    EventSourceConfigTemplateType["Rego"] = "rego";
})(EventSourceConfigTemplateType = exports.EventSourceConfigTemplateType || (exports.EventSourceConfigTemplateType = {}));
/**
 * Status of the event source. Note that paused/blocked event sources
 * return NotFound error on triggering.
 */
var EventSourceStatus;
(function (EventSourceStatus) {
    EventSourceStatus["Active"] = "active";
    EventSourceStatus["Blocked"] = "blocked";
    EventSourceStatus["Paused"] = "paused";
})(EventSourceStatus = exports.EventSourceStatus || (exports.EventSourceStatus = {}));
/** Filters for the section views of explore. */
var ExploreFilterViewType;
(function (ExploreFilterViewType) {
    ExploreFilterViewType["Dashboards"] = "dashboards";
    ExploreFilterViewType["Lists"] = "lists";
    ExploreFilterViewType["SprintBoards"] = "sprint_boards";
})(ExploreFilterViewType = exports.ExploreFilterViewType || (exports.ExploreFilterViewType = {}));
/** Name of explore section. */
var ExploreSection;
(function (ExploreSection) {
    ExploreSection["Apps"] = "apps";
    ExploreSection["MyViews"] = "my_views";
    ExploreSection["SharedWithMe"] = "shared_with_me";
})(ExploreSection = exports.ExploreSection || (exports.ExploreSection = {}));
/** State of the user in the external source. */
var ExternalIdentityState;
(function (ExternalIdentityState) {
    ExternalIdentityState["Active"] = "active";
    ExternalIdentityState["Deleted"] = "deleted";
    ExternalIdentityState["Inactive"] = "inactive";
})(ExternalIdentityState = exports.ExternalIdentityState || (exports.ExternalIdentityState = {}));
var ExternalSystemType;
(function (ExternalSystemType) {
    ExternalSystemType["Adaas"] = "adaas";
    ExternalSystemType["Confluence"] = "confluence";
    ExternalSystemType["Github"] = "github";
    ExternalSystemType["Hubspot"] = "hubspot";
    ExternalSystemType["Jira"] = "jira";
    ExternalSystemType["Linear"] = "linear";
    ExternalSystemType["Rocketlane"] = "rocketlane";
    ExternalSystemType["SalesforceSales"] = "salesforce_sales";
    ExternalSystemType["SalesforceService"] = "salesforce_service";
    ExternalSystemType["Servicenow"] = "servicenow";
    ExternalSystemType["Zendesk"] = "zendesk";
})(ExternalSystemType = exports.ExternalSystemType || (exports.ExternalSystemType = {}));
/** The HTTP Operations that can be assigned to a Feature's API Operation. */
var FeatureApiOperationHttpOperation;
(function (FeatureApiOperationHttpOperation) {
    FeatureApiOperationHttpOperation["Connect"] = "connect";
    FeatureApiOperationHttpOperation["Delete"] = "delete";
    FeatureApiOperationHttpOperation["Get"] = "get";
    FeatureApiOperationHttpOperation["Head"] = "head";
    FeatureApiOperationHttpOperation["Options"] = "options";
    FeatureApiOperationHttpOperation["Patch"] = "patch";
    FeatureApiOperationHttpOperation["Post"] = "post";
    FeatureApiOperationHttpOperation["Put"] = "put";
    FeatureApiOperationHttpOperation["Trace"] = "trace";
    FeatureApiOperationHttpOperation["Unknown"] = "unknown";
})(FeatureApiOperationHttpOperation = exports.FeatureApiOperationHttpOperation || (exports.FeatureApiOperationHttpOperation = {}));
var FieldPrivilegeFieldPrivilegeEnum;
(function (FieldPrivilegeFieldPrivilegeEnum) {
    FieldPrivilegeFieldPrivilegeEnum["Read"] = "read";
    FieldPrivilegeFieldPrivilegeEnum["Write"] = "write";
})(FieldPrivilegeFieldPrivilegeEnum = exports.FieldPrivilegeFieldPrivilegeEnum || (exports.FieldPrivilegeFieldPrivilegeEnum = {}));
var FieldValueType;
(function (FieldValueType) {
    FieldValueType["Bool"] = "bool";
    FieldValueType["BoolList"] = "bool_list";
    FieldValueType["Composite"] = "composite";
    FieldValueType["CompositeList"] = "composite_list";
    FieldValueType["Date"] = "date";
    FieldValueType["DateList"] = "date_list";
    FieldValueType["DateTime"] = "date_time";
    FieldValueType["DateTimeList"] = "date_time_list";
    FieldValueType["Double"] = "double";
    FieldValueType["DoubleList"] = "double_list";
    FieldValueType["Id"] = "id";
    FieldValueType["IdList"] = "id_list";
    FieldValueType["Int"] = "int";
    FieldValueType["IntList"] = "int_list";
    FieldValueType["Stage"] = "stage";
    FieldValueType["String"] = "string";
    FieldValueType["StringList"] = "string_list";
    FieldValueType["TagSummary"] = "tag_summary";
    FieldValueType["TagSummaryList"] = "tag_summary_list";
})(FieldValueType = exports.FieldValueType || (exports.FieldValueType = {}));
/** Type of the input. */
var FlowGlobalInputType;
(function (FlowGlobalInputType) {
    FlowGlobalInputType["Bool"] = "bool";
    FlowGlobalInputType["EmailAddress"] = "email_address";
    FlowGlobalInputType["Enum"] = "enum";
    FlowGlobalInputType["EnumList"] = "enum_list";
    FlowGlobalInputType["Float"] = "float";
    FlowGlobalInputType["FloatList"] = "float_list";
    FlowGlobalInputType["Integer"] = "integer";
    FlowGlobalInputType["IntegerList"] = "integer_list";
    FlowGlobalInputType["Json"] = "json";
    FlowGlobalInputType["KeyValues"] = "key_values";
    FlowGlobalInputType["Part"] = "part";
    FlowGlobalInputType["String"] = "string";
    FlowGlobalInputType["StringList"] = "string_list";
    FlowGlobalInputType["User"] = "user";
})(FlowGlobalInputType = exports.FlowGlobalInputType || (exports.FlowGlobalInputType = {}));
/** Deployment status of the flow. */
var FlowStatus;
(function (FlowStatus) {
    FlowStatus["Active"] = "active";
    FlowStatus["Draft"] = "draft";
    FlowStatus["Error"] = "error";
    FlowStatus["Inactive"] = "inactive";
})(FlowStatus = exports.FlowStatus || (exports.FlowStatus = {}));
var FocusFocusPoint;
(function (FocusFocusPoint) {
    FocusFocusPoint["Spacebar"] = "spacebar";
    FocusFocusPoint["Unknown"] = "unknown";
})(FocusFocusPoint = exports.FocusFocusPoint || (exports.FocusFocusPoint = {}));
/** The source type containing the function code. */
var FunctionSourceInfoType;
(function (FunctionSourceInfoType) {
    FunctionSourceInfoType["Artifact"] = "artifact";
    FunctionSourceInfoType["Http"] = "http";
    FunctionSourceInfoType["PrebuiltLambda"] = "prebuilt_lambda";
})(FunctionSourceInfoType = exports.FunctionSourceInfoType || (exports.FunctionSourceInfoType = {}));
/** Preferred locale of the user. */
var GeneralPreferencesGroupPreferredLocale;
(function (GeneralPreferencesGroupPreferredLocale) {
    GeneralPreferencesGroupPreferredLocale["EnUs"] = "en_us";
    GeneralPreferencesGroupPreferredLocale["JaJp"] = "ja_jp";
})(GeneralPreferencesGroupPreferredLocale = exports.GeneralPreferencesGroupPreferredLocale || (exports.GeneralPreferencesGroupPreferredLocale = {}));
/** Event type of the notification. */
var GenericNotificationEventType;
(function (GenericNotificationEventType) {
    GenericNotificationEventType["Alert"] = "alert";
    GenericNotificationEventType["Assignment"] = "assignment";
    GenericNotificationEventType["Mention"] = "mention";
    GenericNotificationEventType["Reminder"] = "reminder";
    GenericNotificationEventType["Update"] = "update";
})(GenericNotificationEventType = exports.GenericNotificationEventType || (exports.GenericNotificationEventType = {}));
/** Github flow event transition. */
var GithubFlowEventTransition;
(function (GithubFlowEventTransition) {
    GithubFlowEventTransition["NewBranchTransition"] = "new_branch_transition";
    GithubFlowEventTransition["NewBranchWorkCreateTransition"] = "new_branch_work_create_transition";
    GithubFlowEventTransition["NewCommitTransition"] = "new_commit_transition";
    GithubFlowEventTransition["PrMergedInprogressToClosedTransition"] = "pr_merged_inprogress_to_closed_transition";
    GithubFlowEventTransition["PrMergedOpenToClosedTransition"] = "pr_merged_open_to_closed_transition";
    GithubFlowEventTransition["PrOpenedTransition"] = "pr_opened_transition";
})(GithubFlowEventTransition = exports.GithubFlowEventTransition || (exports.GithubFlowEventTransition = {}));
/** The type of input expected from the user. */
var GlobalInputInputType;
(function (GlobalInputInputType) {
    GlobalInputInputType["Bool"] = "bool";
    GlobalInputInputType["EmailAddress"] = "email_address";
    GlobalInputInputType["Enum"] = "enum";
    GlobalInputInputType["EnumList"] = "enum_list";
    GlobalInputInputType["Float"] = "float";
    GlobalInputInputType["FloatList"] = "float_list";
    GlobalInputInputType["Integer"] = "integer";
    GlobalInputInputType["IntegerList"] = "integer_list";
    GlobalInputInputType["Json"] = "json";
    GlobalInputInputType["KeyValues"] = "key_values";
    GlobalInputInputType["Part"] = "part";
    GlobalInputInputType["String"] = "string";
    GlobalInputInputType["StringList"] = "string_list";
    GlobalInputInputType["User"] = "user";
})(GlobalInputInputType = exports.GlobalInputInputType || (exports.GlobalInputInputType = {}));
var GlobalStoreListMarketplaceItemsFilterCreatedByOperatorType;
(function (GlobalStoreListMarketplaceItemsFilterCreatedByOperatorType) {
    GlobalStoreListMarketplaceItemsFilterCreatedByOperatorType["Any"] = "any";
    GlobalStoreListMarketplaceItemsFilterCreatedByOperatorType["NotAny"] = "not_any";
})(GlobalStoreListMarketplaceItemsFilterCreatedByOperatorType = exports.GlobalStoreListMarketplaceItemsFilterCreatedByOperatorType || (exports.GlobalStoreListMarketplaceItemsFilterCreatedByOperatorType = {}));
/** Type of the vista group item object. */
var GroupItemType;
(function (GroupItemType) {
    GroupItemType["Curated"] = "curated";
    GroupItemType["Dynamic"] = "dynamic";
})(GroupItemType = exports.GroupItemType || (exports.GroupItemType = {}));
/** Type of the members in the group. */
var GroupMemberType;
(function (GroupMemberType) {
    GroupMemberType["DevUser"] = "dev_user";
    GroupMemberType["RevUser"] = "rev_user";
    GroupMemberType["SvcAcc"] = "svc_acc";
})(GroupMemberType = exports.GroupMemberType || (exports.GroupMemberType = {}));
/** Type of the group. */
var GroupType;
(function (GroupType) {
    GroupType["Dynamic"] = "dynamic";
    GroupType["Static"] = "static";
})(GroupType = exports.GroupType || (exports.GroupType = {}));
/** Type of DevRev object for which the grouped vista is applicable. */
var GroupedVistaFilterType;
(function (GroupedVistaFilterType) {
    GroupedVistaFilterType["Conversations"] = "conversations";
    GroupedVistaFilterType["Parts"] = "parts";
    GroupedVistaFilterType["Works"] = "works";
})(GroupedVistaFilterType = exports.GroupedVistaFilterType || (exports.GroupedVistaFilterType = {}));
/** Denotes the use case of the grouped vista. */
var GroupedVistaFlavor;
(function (GroupedVistaFlavor) {
    GroupedVistaFlavor["Nnl"] = "nnl";
    GroupedVistaFlavor["SprintBoard"] = "sprint_board";
    GroupedVistaFlavor["SupportInbox"] = "support_inbox";
})(GroupedVistaFlavor = exports.GroupedVistaFlavor || (exports.GroupedVistaFlavor = {}));
/** Content-Disposition of the file. */
var HeadersContentDisposition;
(function (HeadersContentDisposition) {
    HeadersContentDisposition["Attachment"] = "attachment";
    HeadersContentDisposition["Inline"] = "inline";
})(HeadersContentDisposition = exports.HeadersContentDisposition || (exports.HeadersContentDisposition = {}));
var IncidentsListFiltersCreatedByOperatorType;
(function (IncidentsListFiltersCreatedByOperatorType) {
    IncidentsListFiltersCreatedByOperatorType["Any"] = "any";
    IncidentsListFiltersCreatedByOperatorType["NotAny"] = "not_any";
})(IncidentsListFiltersCreatedByOperatorType = exports.IncidentsListFiltersCreatedByOperatorType || (exports.IncidentsListFiltersCreatedByOperatorType = {}));
var IncidentsListFiltersOwnedByOperatorType;
(function (IncidentsListFiltersOwnedByOperatorType) {
    IncidentsListFiltersOwnedByOperatorType["Any"] = "any";
    IncidentsListFiltersOwnedByOperatorType["NotAny"] = "not_any";
})(IncidentsListFiltersOwnedByOperatorType = exports.IncidentsListFiltersOwnedByOperatorType || (exports.IncidentsListFiltersOwnedByOperatorType = {}));
/**
 * Identifies the nature of the input value, distinguishing between a
 * literal constant and a dynamic expression.
 */
var InputValueDefinitionType;
(function (InputValueDefinitionType) {
    InputValueDefinitionType["Expression"] = "expression";
    InputValueDefinitionType["JsonataExpression"] = "jsonata_expression";
    InputValueDefinitionType["Literal"] = "literal";
})(InputValueDefinitionType = exports.InputValueDefinitionType || (exports.InputValueDefinitionType = {}));
var InsightType;
(function (InsightType) {
    InsightType["RealTimeInsight"] = "real_time_insight";
    InsightType["WindowBasedInsight"] = "window_based_insight";
})(InsightType = exports.InsightType || (exports.InsightType = {}));
var InsightValueType;
(function (InsightValueType) {
    InsightValueType["RealTimeInsightValue"] = "real_time_insight_value";
    InsightValueType["WindowBasedInsightValue"] = "window_based_insight_value";
})(InsightValueType = exports.InsightValueType || (exports.InsightValueType = {}));
/** Format in which content is defined. */
var InstructionsFormat;
(function (InstructionsFormat) {
    InstructionsFormat["Markdown"] = "markdown";
})(InstructionsFormat = exports.InstructionsFormat || (exports.InstructionsFormat = {}));
/** Interaction type. */
var InteractionHandlerDefinitionType;
(function (InteractionHandlerDefinitionType) {
    InteractionHandlerDefinitionType["SnapComponent"] = "snap_component";
})(InteractionHandlerDefinitionType = exports.InteractionHandlerDefinitionType || (exports.InteractionHandlerDefinitionType = {}));
/** Type of the user that created the message. */
var InteractionMessageUserType;
(function (InteractionMessageUserType) {
    InteractionMessageUserType["Devu"] = "devu";
    InteractionMessageUserType["Revu"] = "revu";
    InteractionMessageUserType["Sysu"] = "sysu";
})(InteractionMessageUserType = exports.InteractionMessageUserType || (exports.InteractionMessageUserType = {}));
var InteractionsFilterAppliesToPartsOpOperatorType;
(function (InteractionsFilterAppliesToPartsOpOperatorType) {
    InteractionsFilterAppliesToPartsOpOperatorType["Any"] = "any";
    InteractionsFilterAppliesToPartsOpOperatorType["Empty"] = "empty";
    InteractionsFilterAppliesToPartsOpOperatorType["NotAny"] = "not_any";
    InteractionsFilterAppliesToPartsOpOperatorType["NotEmpty"] = "not_empty";
})(InteractionsFilterAppliesToPartsOpOperatorType = exports.InteractionsFilterAppliesToPartsOpOperatorType || (exports.InteractionsFilterAppliesToPartsOpOperatorType = {}));
var InteractionsFilterClosedByOpOperatorType;
(function (InteractionsFilterClosedByOpOperatorType) {
    InteractionsFilterClosedByOpOperatorType["Any"] = "any";
    InteractionsFilterClosedByOpOperatorType["Empty"] = "empty";
    InteractionsFilterClosedByOpOperatorType["NotAny"] = "not_any";
    InteractionsFilterClosedByOpOperatorType["NotEmpty"] = "not_empty";
})(InteractionsFilterClosedByOpOperatorType = exports.InteractionsFilterClosedByOpOperatorType || (exports.InteractionsFilterClosedByOpOperatorType = {}));
var InteractionsFilterCreatedByOpOperatorType;
(function (InteractionsFilterCreatedByOpOperatorType) {
    InteractionsFilterCreatedByOpOperatorType["Any"] = "any";
    InteractionsFilterCreatedByOpOperatorType["NotAny"] = "not_any";
})(InteractionsFilterCreatedByOpOperatorType = exports.InteractionsFilterCreatedByOpOperatorType || (exports.InteractionsFilterCreatedByOpOperatorType = {}));
var InteractionsFilterEmbeddedByOpOperatorType;
(function (InteractionsFilterEmbeddedByOpOperatorType) {
    InteractionsFilterEmbeddedByOpOperatorType["Any"] = "any";
    InteractionsFilterEmbeddedByOpOperatorType["Empty"] = "empty";
    InteractionsFilterEmbeddedByOpOperatorType["NotAny"] = "not_any";
    InteractionsFilterEmbeddedByOpOperatorType["NotEmpty"] = "not_empty";
})(InteractionsFilterEmbeddedByOpOperatorType = exports.InteractionsFilterEmbeddedByOpOperatorType || (exports.InteractionsFilterEmbeddedByOpOperatorType = {}));
var InteractionsFilterMembersOpOperatorType;
(function (InteractionsFilterMembersOpOperatorType) {
    InteractionsFilterMembersOpOperatorType["All"] = "all";
    InteractionsFilterMembersOpOperatorType["Any"] = "any";
    InteractionsFilterMembersOpOperatorType["Empty"] = "empty";
    InteractionsFilterMembersOpOperatorType["NotAny"] = "not_any";
    InteractionsFilterMembersOpOperatorType["NotEmpty"] = "not_empty";
})(InteractionsFilterMembersOpOperatorType = exports.InteractionsFilterMembersOpOperatorType || (exports.InteractionsFilterMembersOpOperatorType = {}));
var InteractionsFilterOwnedByOpOperatorType;
(function (InteractionsFilterOwnedByOpOperatorType) {
    InteractionsFilterOwnedByOpOperatorType["Any"] = "any";
    InteractionsFilterOwnedByOpOperatorType["Empty"] = "empty";
    InteractionsFilterOwnedByOpOperatorType["NotAny"] = "not_any";
    InteractionsFilterOwnedByOpOperatorType["NotEmpty"] = "not_empty";
})(InteractionsFilterOwnedByOpOperatorType = exports.InteractionsFilterOwnedByOpOperatorType || (exports.InteractionsFilterOwnedByOpOperatorType = {}));
var InteractionsFilterParentOpOperatorType;
(function (InteractionsFilterParentOpOperatorType) {
    InteractionsFilterParentOpOperatorType["Any"] = "any";
    InteractionsFilterParentOpOperatorType["Empty"] = "empty";
    InteractionsFilterParentOpOperatorType["NotAny"] = "not_any";
    InteractionsFilterParentOpOperatorType["NotEmpty"] = "not_empty";
})(InteractionsFilterParentOpOperatorType = exports.InteractionsFilterParentOpOperatorType || (exports.InteractionsFilterParentOpOperatorType = {}));
/** Platform on which the invoice will be generated. */
var InvoiceInvoicingPlatform;
(function (InvoiceInvoicingPlatform) {
    InvoiceInvoicingPlatform["Aws"] = "aws";
    InvoiceInvoicingPlatform["Stripe"] = "stripe";
})(InvoiceInvoicingPlatform = exports.InvoiceInvoicingPlatform || (exports.InvoiceInvoicingPlatform = {}));
/** The type of line item. */
var InvoiceLineItemType;
(function (InvoiceLineItemType) {
    InvoiceLineItemType["Credit"] = "credit";
    InvoiceLineItemType["Discount"] = "discount";
    InvoiceLineItemType["Prorated"] = "prorated";
    InvoiceLineItemType["Regular"] = "regular";
    InvoiceLineItemType["Tax"] = "tax";
})(InvoiceLineItemType = exports.InvoiceLineItemType || (exports.InvoiceLineItemType = {}));
/** Payments platform on which the payment on the invoice will be made. */
var InvoicePaymentsPlatform;
(function (InvoicePaymentsPlatform) {
    InvoicePaymentsPlatform["Aws"] = "aws";
    InvoicePaymentsPlatform["Stripe"] = "stripe";
})(InvoicePaymentsPlatform = exports.InvoicePaymentsPlatform || (exports.InvoicePaymentsPlatform = {}));
/** Status of the invoice. */
var InvoiceStatus;
(function (InvoiceStatus) {
    InvoiceStatus["Draft"] = "draft";
    InvoiceStatus["FinalizedPending"] = "finalized_pending";
    InvoiceStatus["Open"] = "open";
    InvoiceStatus["Paid"] = "paid";
    InvoiceStatus["Posted"] = "posted";
    InvoiceStatus["Uncollectible"] = "uncollectible";
    InvoiceStatus["Void"] = "void";
})(InvoiceStatus = exports.InvoiceStatus || (exports.InvoiceStatus = {}));
/** Type of the invoice. */
var InvoiceType;
(function (InvoiceType) {
    InvoiceType["OneTime"] = "one_time";
    InvoiceType["Recurring"] = "recurring";
})(InvoiceType = exports.InvoiceType || (exports.InvoiceType = {}));
/** Invoice status update supported values. */
var InvoiceUpdateStatus;
(function (InvoiceUpdateStatus) {
    InvoiceUpdateStatus["Uncollectible"] = "uncollectible";
    InvoiceUpdateStatus["Void"] = "void";
})(InvoiceUpdateStatus = exports.InvoiceUpdateStatus || (exports.InvoiceUpdateStatus = {}));
/** Schema type used to describe fields. */
var IoPortFieldsSchemaType;
(function (IoPortFieldsSchemaType) {
    IoPortFieldsSchemaType["FieldDescriptor"] = "field_descriptor";
})(IoPortFieldsSchemaType = exports.IoPortFieldsSchemaType || (exports.IoPortFieldsSchemaType = {}));
/** Priority of the work based upon impact and criticality. */
var IssuePriority;
(function (IssuePriority) {
    IssuePriority["P0"] = "p0";
    IssuePriority["P1"] = "p1";
    IssuePriority["P2"] = "p2";
    IssuePriority["P3"] = "p3";
})(IssuePriority = exports.IssuePriority || (exports.IssuePriority = {}));
/**
 * Specifies the logical operation to perform between the presence of the
 * specified tags, whether all or any are needed.
 */
var IssueSelectorTagOp;
(function (IssueSelectorTagOp) {
    IssueSelectorTagOp["All"] = "all";
    IssueSelectorTagOp["Any"] = "any";
    IssueSelectorTagOp["NotAny"] = "not_any";
})(IssueSelectorTagOp = exports.IssueSelectorTagOp || (exports.IssueSelectorTagOp = {}));
/** Category of your job. */
var JobCategory;
(function (JobCategory) {
    JobCategory["MergeAccount"] = "merge_account";
    JobCategory["MergeDevuser"] = "merge_devuser";
    JobCategory["MergeRevuser"] = "merge_revuser";
    JobCategory["MoveRevuser"] = "move_revuser";
})(JobCategory = exports.JobCategory || (exports.JobCategory = {}));
/** State of your Job. */
var JobState;
(function (JobState) {
    JobState["Completed"] = "completed";
    JobState["Failed"] = "failed";
    JobState["InProgress"] = "in_progress";
    JobState["Queued"] = "queued";
    JobState["Started"] = "started";
})(JobState = exports.JobState || (exports.JobState = {}));
/** Type of the key extractor. */
var KeyExtractorExecutorType;
(function (KeyExtractorExecutorType) {
    KeyExtractorExecutorType["Rego"] = "rego";
})(KeyExtractorExecutorType = exports.KeyExtractorExecutorType || (exports.KeyExtractorExecutorType = {}));
/** Scope of keyring. */
var KeyringScope;
(function (KeyringScope) {
    KeyringScope["Org"] = "org";
    KeyringScope["User"] = "user";
})(KeyringScope = exports.KeyringScope || (exports.KeyringScope = {}));
/** keyring status. */
var KeyringStatus;
(function (KeyringStatus) {
    KeyringStatus["Active"] = "active";
    KeyringStatus["CollectionPending"] = "collection_pending";
    KeyringStatus["Error"] = "error";
    KeyringStatus["SelectOrg"] = "select_org";
    KeyringStatus["UserActionRequired"] = "user_action_required";
    KeyringStatus["Warning"] = "warning";
})(KeyringStatus = exports.KeyringStatus || (exports.KeyringStatus = {}));
/** Obsolete. Use type_id instead. */
var KeyringTypeEnum;
(function (KeyringTypeEnum) {
    KeyringTypeEnum["Aws"] = "aws";
    KeyringTypeEnum["Bitbucket"] = "bitbucket";
    KeyringTypeEnum["Cci"] = "cci";
    KeyringTypeEnum["Clearbit"] = "clearbit";
    KeyringTypeEnum["Confluence"] = "confluence";
    KeyringTypeEnum["ConfluencePat"] = "confluence_pat";
    KeyringTypeEnum["Datadog"] = "datadog";
    KeyringTypeEnum["Descope"] = "descope";
    KeyringTypeEnum["DevrevAat"] = "devrev_aat";
    KeyringTypeEnum["DevrevPat"] = "devrev_pat";
    KeyringTypeEnum["Dialog360"] = "dialog_360";
    KeyringTypeEnum["Discord"] = "discord";
    KeyringTypeEnum["DiscoursePat"] = "discourse_pat";
    KeyringTypeEnum["DomainVerification"] = "domain_verification";
    KeyringTypeEnum["FlowSecret"] = "flow_secret";
    KeyringTypeEnum["Freshdesk"] = "freshdesk";
    KeyringTypeEnum["Gainsight"] = "gainsight";
    KeyringTypeEnum["Gcp"] = "gcp";
    KeyringTypeEnum["GhApp"] = "gh_app";
    KeyringTypeEnum["GhOauth"] = "gh_oauth";
    KeyringTypeEnum["GhPat"] = "gh_pat";
    KeyringTypeEnum["Goodmeetings"] = "goodmeetings";
    KeyringTypeEnum["Google"] = "google";
    KeyringTypeEnum["GoogleBigQuery"] = "google_big_query";
    KeyringTypeEnum["GoogleCalendar"] = "google_calendar";
    KeyringTypeEnum["HubspotOauth"] = "hubspot_oauth";
    KeyringTypeEnum["HubspotPat"] = "hubspot_pat";
    KeyringTypeEnum["Intercom"] = "intercom";
    KeyringTypeEnum["Jira"] = "jira";
    KeyringTypeEnum["Kubernetes"] = "kubernetes";
    KeyringTypeEnum["LinearOauth"] = "linear_oauth";
    KeyringTypeEnum["LinearPat"] = "linear_pat";
    KeyringTypeEnum["MsTeams"] = "ms_teams";
    KeyringTypeEnum["OauthSecret"] = "oauth_secret";
    KeyringTypeEnum["Outreach"] = "outreach";
    KeyringTypeEnum["PagerdutyPat"] = "pagerduty_pat";
    KeyringTypeEnum["Rocketlane"] = "rocketlane";
    KeyringTypeEnum["SalesforceSales"] = "salesforce_sales";
    KeyringTypeEnum["SalesforceService"] = "salesforce_service";
    KeyringTypeEnum["Sendgrid"] = "sendgrid";
    KeyringTypeEnum["ServiceAccounts"] = "service_accounts";
    KeyringTypeEnum["Servicenow"] = "servicenow";
    KeyringTypeEnum["Slack"] = "slack";
    KeyringTypeEnum["SnapInSecret"] = "snap_in_secret";
    KeyringTypeEnum["Stripe"] = "stripe";
    KeyringTypeEnum["Twilio"] = "twilio";
    KeyringTypeEnum["WarehouseOutreachBigdata"] = "warehouse_outreach_bigdata";
    KeyringTypeEnum["Xero"] = "xero";
    KeyringTypeEnum["Zendesk"] = "zendesk";
    KeyringTypeEnum["ZendeskPat"] = "zendesk_pat";
})(KeyringTypeEnum = exports.KeyringTypeEnum || (exports.KeyringTypeEnum = {}));
/** Kind defines the external system authentication method. */
var KeyringTypeKind;
(function (KeyringTypeKind) {
    KeyringTypeKind["Oauth2"] = "oauth2";
    KeyringTypeKind["Secret"] = "secret";
})(KeyringTypeKind = exports.KeyringTypeKind || (exports.KeyringTypeKind = {}));
/** The stroke style for the line. */
var LineVisualizationYAxisStrokeStyle;
(function (LineVisualizationYAxisStrokeStyle) {
    LineVisualizationYAxisStrokeStyle["Dashed"] = "dashed";
    LineVisualizationYAxisStrokeStyle["Dotted"] = "dotted";
    LineVisualizationYAxisStrokeStyle["Solid"] = "solid";
})(LineVisualizationYAxisStrokeStyle = exports.LineVisualizationYAxisStrokeStyle || (exports.LineVisualizationYAxisStrokeStyle = {}));
var LinkEndpointType;
(function (LinkEndpointType) {
    LinkEndpointType["Artifact"] = "artifact";
    LinkEndpointType["Capability"] = "capability";
    LinkEndpointType["CodeChange"] = "code_change";
    LinkEndpointType["Conversation"] = "conversation";
    LinkEndpointType["CustomPart"] = "custom_part";
    LinkEndpointType["CustomWork"] = "custom_work";
    LinkEndpointType["Dashboard"] = "dashboard";
    LinkEndpointType["Enhancement"] = "enhancement";
    LinkEndpointType["Feature"] = "feature";
    LinkEndpointType["Incident"] = "incident";
    LinkEndpointType["Issue"] = "issue";
    LinkEndpointType["Linkable"] = "linkable";
    LinkEndpointType["Opportunity"] = "opportunity";
    LinkEndpointType["Product"] = "product";
    LinkEndpointType["Runnable"] = "runnable";
    LinkEndpointType["Task"] = "task";
    LinkEndpointType["Ticket"] = "ticket";
    LinkEndpointType["Vista"] = "vista";
})(LinkEndpointType = exports.LinkEndpointType || (exports.LinkEndpointType = {}));
var LinkPreviewWidgetLinkPreviewType;
(function (LinkPreviewWidgetLinkPreviewType) {
    LinkPreviewWidgetLinkPreviewType["Native"] = "native";
    LinkPreviewWidgetLinkPreviewType["SnapKit"] = "snap_kit";
})(LinkPreviewWidgetLinkPreviewType = exports.LinkPreviewWidgetLinkPreviewType || (exports.LinkPreviewWidgetLinkPreviewType = {}));
/** Type of link used to define the relationship. */
var LinkType;
(function (LinkType) {
    LinkType["DevelopedWith"] = "developed_with";
    LinkType["Imports"] = "imports";
    LinkType["IsDependentOn"] = "is_dependent_on";
    LinkType["IsDuplicateOf"] = "is_duplicate_of";
    LinkType["IsParentOf"] = "is_parent_of";
    LinkType["IsPartOf"] = "is_part_of";
    LinkType["IsRelatedTo"] = "is_related_to";
    LinkType["Serves"] = "serves";
})(LinkType = exports.LinkType || (exports.LinkType = {}));
/** The kind of linkable. */
var LinkableKind;
(function (LinkableKind) {
    LinkableKind["Component"] = "component";
    LinkableKind["Library"] = "library";
})(LinkableKind = exports.LinkableKind || (exports.LinkableKind = {}));
/**
 * The direction of link, which can either be outbound such that the
 * object is the source of the link, otherwise inbound where the object is
 * the target of the link.
 */
var LinksDirection;
(function (LinksDirection) {
    LinksDirection["IsSource"] = "is_source";
    LinksDirection["IsTarget"] = "is_target";
})(LinksDirection = exports.LinksDirection || (exports.LinksDirection = {}));
var ListMarketplaceItemsFilterCreatedByOperatorType;
(function (ListMarketplaceItemsFilterCreatedByOperatorType) {
    ListMarketplaceItemsFilterCreatedByOperatorType["Any"] = "any";
    ListMarketplaceItemsFilterCreatedByOperatorType["NotAny"] = "not_any";
})(ListMarketplaceItemsFilterCreatedByOperatorType = exports.ListMarketplaceItemsFilterCreatedByOperatorType || (exports.ListMarketplaceItemsFilterCreatedByOperatorType = {}));
var ListMarketplaceSubmissionsFilterCreatedByOperatorType;
(function (ListMarketplaceSubmissionsFilterCreatedByOperatorType) {
    ListMarketplaceSubmissionsFilterCreatedByOperatorType["Any"] = "any";
    ListMarketplaceSubmissionsFilterCreatedByOperatorType["NotAny"] = "not_any";
})(ListMarketplaceSubmissionsFilterCreatedByOperatorType = exports.ListMarketplaceSubmissionsFilterCreatedByOperatorType || (exports.ListMarketplaceSubmissionsFilterCreatedByOperatorType = {}));
/**
 * The iteration mode to use. If "after", then entries after the provided
 * cursor will be returned, or if no cursor is provided, then from the
 * beginning. If "before", then entries before the provided cursor will be
 * returned, or if no cursor is provided, then from the end. Entries will
 * always be returned in the specified sort-by order.
 */
var ListMode;
(function (ListMode) {
    ListMode["After"] = "after";
    ListMode["Before"] = "before";
})(ListMode = exports.ListMode || (exports.ListMode = {}));
var LogMlFeedbackRequestBinarySentimentSentiment;
(function (LogMlFeedbackRequestBinarySentimentSentiment) {
    LogMlFeedbackRequestBinarySentimentSentiment["Dislike"] = "dislike";
    LogMlFeedbackRequestBinarySentimentSentiment["Like"] = "like";
})(LogMlFeedbackRequestBinarySentimentSentiment = exports.LogMlFeedbackRequestBinarySentimentSentiment || (exports.LogMlFeedbackRequestBinarySentimentSentiment = {}));
var LogMlFeedbackRequestFeedbackType;
(function (LogMlFeedbackRequestFeedbackType) {
    LogMlFeedbackRequestFeedbackType["BinarySentiment"] = "binary_sentiment";
    LogMlFeedbackRequestFeedbackType["Classification"] = "classification";
    LogMlFeedbackRequestFeedbackType["UserInteraction"] = "user_interaction";
})(LogMlFeedbackRequestFeedbackType = exports.LogMlFeedbackRequestFeedbackType || (exports.LogMlFeedbackRequestFeedbackType = {}));
var LogMlFeedbackRequestUserInteractionType;
(function (LogMlFeedbackRequestUserInteractionType) {
    LogMlFeedbackRequestUserInteractionType["Accepted"] = "accepted";
    LogMlFeedbackRequestUserInteractionType["Modified"] = "modified";
    LogMlFeedbackRequestUserInteractionType["Rejected"] = "rejected";
    LogMlFeedbackRequestUserInteractionType["Retry"] = "retry";
    LogMlFeedbackRequestUserInteractionType["Unspecified"] = "unspecified";
})(LogMlFeedbackRequestUserInteractionType = exports.LogMlFeedbackRequestUserInteractionType || (exports.LogMlFeedbackRequestUserInteractionType = {}));
/**
 * Marketplace listing type defines what backing service will be used when
 * validating a create marketplace submission request, installing
 * marketplace items in some organizations, etc. It is important to note
 * that marketplace listings of type app are not backed by any service and
 * are only placeholders for existing functionality in the DevRev platform
 * (e.g. Jira Airdrop). Note: 'flow' type is deprecated, use 'snapin'
 * instead.
 */
var MarketplaceItemItemType;
(function (MarketplaceItemItemType) {
    MarketplaceItemItemType["App"] = "app";
    MarketplaceItemItemType["Flow"] = "flow";
    MarketplaceItemItemType["Snapin"] = "snapin";
})(MarketplaceItemItemType = exports.MarketplaceItemItemType || (exports.MarketplaceItemItemType = {}));
/**
 * The state represents the life cycle of the marketplace item. When a new
 * marketplace item is created it is put in the state 'draft'. Once
 * publisher (member of an organization who created a marketplace item)
 * finishes editing the item he will transition it into the state
 * 'in_review'. Marketplace owner (member of an organization that owns the
 * marketplace) will be able to do a review of the submission and either
 * transition it  back into state 'draft' (if changes are required) or in
 * state 'published'  (if submission met the required standards).
 * Publisher can transit the published marketplace item into the state
 * 'end_of_sale' if he wants to temporarily remove the marketplace item
 * from the shelves ( the item won't appear on the marketplace and users
 * won't be able to install it). From state 'end_of_sale' one can
 * transition the item back into state 'draft' or  'published' (if there
 * were no changes done). Once an item is deleted it is transitioned into
 * the state 'end_of_life'.
 */
var MarketplaceItemState;
(function (MarketplaceItemState) {
    MarketplaceItemState["Draft"] = "draft";
    MarketplaceItemState["EndOfLife"] = "end_of_life";
    MarketplaceItemState["EndOfSale"] = "end_of_sale";
    MarketplaceItemState["InReview"] = "in_review";
    MarketplaceItemState["Published"] = "published";
})(MarketplaceItemState = exports.MarketplaceItemState || (exports.MarketplaceItemState = {}));
var MarketplaceItemType;
(function (MarketplaceItemType) {
    MarketplaceItemType["App"] = "app";
    MarketplaceItemType["Flow"] = "flow";
    MarketplaceItemType["Snapin"] = "snapin";
})(MarketplaceItemType = exports.MarketplaceItemType || (exports.MarketplaceItemType = {}));
/**
 * Marketplace listing type defines what backing service will be used when
 * validating a create marketplace submission request, installing
 * marketplace items in some organizations, etc. It is important to note
 * that marketplace listings of type app are not backed by any service and
 * are only placeholders for existing functionality in the DevRev platform
 * (e.g. Jira Airdrop). Note: 'flow' type is deprecated, use 'snapin'
 * instead.
 */
var MarketplaceSubmissionItemType;
(function (MarketplaceSubmissionItemType) {
    MarketplaceSubmissionItemType["App"] = "app";
    MarketplaceSubmissionItemType["Flow"] = "flow";
    MarketplaceSubmissionItemType["Snapin"] = "snapin";
})(MarketplaceSubmissionItemType = exports.MarketplaceSubmissionItemType || (exports.MarketplaceSubmissionItemType = {}));
/**
 * The state represents the life cycle of the marketplace submission. When
 * a new marketplace submission is created it is put in the state 'draft'.
 * Once publisher (member of an organization who created the submission)
 * finishes editing it he will transition it into the state
 * 'waiting_for_review'. Marketplace owner (member of an organization that
 * owns the marketplace) will be able to do a review of the submission
 * (when he starts reviewing the submission will be  transitioned to
 * 'in_review') and he can either transition it  into state 'rejected' (if
 * changes are required) or in state 'approved'  (if submission met the
 * required standards). Once the submission is published, the submission
 * will be transitioned to 'published' state (only approved submissions
 * can be published).
 */
var MarketplaceSubmissionState;
(function (MarketplaceSubmissionState) {
    MarketplaceSubmissionState["Approved"] = "approved";
    MarketplaceSubmissionState["Draft"] = "draft";
    MarketplaceSubmissionState["InReview"] = "in_review";
    MarketplaceSubmissionState["Published"] = "published";
    MarketplaceSubmissionState["Rejected"] = "rejected";
    MarketplaceSubmissionState["WaitingForReview"] = "waiting_for_review";
})(MarketplaceSubmissionState = exports.MarketplaceSubmissionState || (exports.MarketplaceSubmissionState = {}));
/**
 * A marketplace can be either of two types universal or organizational. A
 * universal marketplace is publicly available (all the users on the
 * internet can access it). While an organizational marketplace can be
 * accessed only by the members of the organization. Also, only
 * organization members can install its marketplace items. Once the
 * marketplace type value is set it can't be changed.
 */
var MarketplaceType;
(function (MarketplaceType) {
    MarketplaceType["Organization"] = "organization";
    MarketplaceType["Universal"] = "universal";
})(MarketplaceType = exports.MarketplaceType || (exports.MarketplaceType = {}));
/** The type of the function. */
var MeerkatWidgetColumnFunctionType;
(function (MeerkatWidgetColumnFunctionType) {
    MeerkatWidgetColumnFunctionType["Avg"] = "avg";
    MeerkatWidgetColumnFunctionType["Count"] = "count";
    MeerkatWidgetColumnFunctionType["CountDistinct"] = "count_distinct";
    MeerkatWidgetColumnFunctionType["Max"] = "max";
    MeerkatWidgetColumnFunctionType["Median"] = "median";
    MeerkatWidgetColumnFunctionType["Min"] = "min";
    MeerkatWidgetColumnFunctionType["Sum"] = "sum";
})(MeerkatWidgetColumnFunctionType = exports.MeerkatWidgetColumnFunctionType || (exports.MeerkatWidgetColumnFunctionType = {}));
/** The data type of the column generated by the SQL expression. */
var MeerkatWidgetColumnProjectionType;
(function (MeerkatWidgetColumnProjectionType) {
    MeerkatWidgetColumnProjectionType["Boolean"] = "boolean";
    MeerkatWidgetColumnProjectionType["Number"] = "number";
    MeerkatWidgetColumnProjectionType["NumberArray"] = "number_array";
    MeerkatWidgetColumnProjectionType["String"] = "string";
    MeerkatWidgetColumnProjectionType["StringArray"] = "string_array";
    MeerkatWidgetColumnProjectionType["Time"] = "time";
})(MeerkatWidgetColumnProjectionType = exports.MeerkatWidgetColumnProjectionType || (exports.MeerkatWidgetColumnProjectionType = {}));
/** The channel of meeting. */
var MeetingChannel;
(function (MeetingChannel) {
    MeetingChannel["Devrev"] = "devrev";
    MeetingChannel["GoogleMeet"] = "google_meet";
    MeetingChannel["Offline"] = "offline";
    MeetingChannel["Other"] = "other";
    MeetingChannel["Teams"] = "teams";
    MeetingChannel["Zoom"] = "zoom";
})(MeetingChannel = exports.MeetingChannel || (exports.MeetingChannel = {}));
/** The channel of meeting. */
var MeetingEngagementSummaryChannel;
(function (MeetingEngagementSummaryChannel) {
    MeetingEngagementSummaryChannel["Devrev"] = "devrev";
    MeetingEngagementSummaryChannel["GoogleMeet"] = "google_meet";
    MeetingEngagementSummaryChannel["Offline"] = "offline";
    MeetingEngagementSummaryChannel["Other"] = "other";
    MeetingEngagementSummaryChannel["Teams"] = "teams";
    MeetingEngagementSummaryChannel["Zoom"] = "zoom";
})(MeetingEngagementSummaryChannel = exports.MeetingEngagementSummaryChannel || (exports.MeetingEngagementSummaryChannel = {}));
/** The state of meeting. */
var MeetingEngagementSummaryState;
(function (MeetingEngagementSummaryState) {
    MeetingEngagementSummaryState["Canceled"] = "canceled";
    MeetingEngagementSummaryState["Completed"] = "completed";
    MeetingEngagementSummaryState["Scheduled"] = "scheduled";
})(MeetingEngagementSummaryState = exports.MeetingEngagementSummaryState || (exports.MeetingEngagementSummaryState = {}));
/** The state of meeting. */
var MeetingState;
(function (MeetingState) {
    MeetingState["Canceled"] = "canceled";
    MeetingState["Completed"] = "completed";
    MeetingState["Scheduled"] = "scheduled";
})(MeetingState = exports.MeetingState || (exports.MeetingState = {}));
/** Users document sign status. */
var MemberDetailStatus;
(function (MemberDetailStatus) {
    MemberDetailStatus["Declined"] = "declined";
    MemberDetailStatus["Pending"] = "pending";
    MemberDetailStatus["Signed"] = "signed";
    MemberDetailStatus["Viewed"] = "viewed";
})(MemberDetailStatus = exports.MemberDetailStatus || (exports.MemberDetailStatus = {}));
var MemberType;
(function (MemberType) {
    MemberType["DevUser"] = "dev_user";
    MemberType["Group"] = "group";
    MemberType["RevUser"] = "rev_user";
    MemberType["SysUser"] = "sys_user";
})(MemberType = exports.MemberType || (exports.MemberType = {}));
/** Icon of the menu. */
var MenuIcon;
(function (MenuIcon) {
    MenuIcon["BuildApp"] = "build_app";
    MenuIcon["GrowApp"] = "grow_app";
    MenuIcon["Home"] = "home";
    MenuIcon["SupportApp"] = "support_app";
})(MenuIcon = exports.MenuIcon || (exports.MenuIcon = {}));
/**
 * The type of the menu object. - global: It is visible to all users and
 * is a part of the DevRev defaults. - app: It will be shown in the app
 * menu switcher. - explore: This type is used for rendering the explore
 * tab.
 */
var MenuType;
(function (MenuType) {
    MenuType["App"] = "app";
    MenuType["Explore"] = "explore";
    MenuType["Global"] = "global";
})(MenuType = exports.MenuType || (exports.MenuType = {}));
/** The identifier for the view. Used when view type is page. */
var MenuViewPageType;
(function (MenuViewPageType) {
    MenuViewPageType["ArticleCollections"] = "article_collections";
    MenuViewPageType["Contacts"] = "contacts";
    MenuViewPageType["Datasets"] = "datasets";
    MenuViewPageType["Developer360Analytics"] = "developer360_analytics";
    MenuViewPageType["Explore"] = "explore";
    MenuViewPageType["GrowAnalytics"] = "grow_analytics";
    MenuViewPageType["GrowTeamActivity"] = "grow_team_activity";
    MenuViewPageType["KnowledgeBase"] = "knowledge_base";
    MenuViewPageType["Lobby"] = "lobby";
    MenuViewPageType["MyTasks"] = "my_tasks";
    MenuViewPageType["Notebook"] = "notebook";
    MenuViewPageType["PeopleInsights"] = "people_insights";
    MenuViewPageType["PlugGettingStarted"] = "plug_getting_started";
    MenuViewPageType["PlugNudges"] = "plug_nudges";
    MenuViewPageType["RevopsDashboard"] = "revops_dashboard";
    MenuViewPageType["Search"] = "search";
    MenuViewPageType["SprintBoards"] = "sprint_boards";
    MenuViewPageType["SupportDashboard"] = "support_dashboard";
    MenuViewPageType["Trails"] = "trails";
    MenuViewPageType["Updates"] = "updates";
})(MenuViewPageType = exports.MenuViewPageType || (exports.MenuViewPageType = {}));
/** The type of the view. */
var MenuViewType;
(function (MenuViewType) {
    MenuViewType["Dashboard"] = "dashboard";
    MenuViewType["Page"] = "page";
    MenuViewType["Vista"] = "vista";
})(MenuViewType = exports.MenuViewType || (exports.MenuViewType = {}));
var MetricActionExecuteRequestAction;
(function (MetricActionExecuteRequestAction) {
    MetricActionExecuteRequestAction["Complete"] = "complete";
    MetricActionExecuteRequestAction["Pause"] = "pause";
    MetricActionExecuteRequestAction["Restart"] = "restart";
    MetricActionExecuteRequestAction["Resume"] = "resume";
    MetricActionExecuteRequestAction["Start"] = "start";
})(MetricActionExecuteRequestAction = exports.MetricActionExecuteRequestAction || (exports.MetricActionExecuteRequestAction = {}));
/** The list of item types on which the metric might be applied. */
var MetricDefinitionAppliesTo;
(function (MetricDefinitionAppliesTo) {
    MetricDefinitionAppliesTo["Conversation"] = "conversation";
    MetricDefinitionAppliesTo["Issue"] = "issue";
    MetricDefinitionAppliesTo["Ticket"] = "ticket";
})(MetricDefinitionAppliesTo = exports.MetricDefinitionAppliesTo || (exports.MetricDefinitionAppliesTo = {}));
/**
 * The type of the metric. 'time' metrics track the time spent in some
 * state, supporting operations like 'start', 'stop', 'pause', 'resume'.
 * 'value' metrics track a value, supporting operations like 'set',
 * 'increment', 'decrement'.
 */
var MetricDefinitionMetricType;
(function (MetricDefinitionMetricType) {
    MetricDefinitionMetricType["Time"] = "time";
    MetricDefinitionMetricType["Value"] = "value";
})(MetricDefinitionMetricType = exports.MetricDefinitionMetricType || (exports.MetricDefinitionMetricType = {}));
/**
 * The status of the metric. 'active' metrics can be used to create new
 * SLAs, while 'inactive' metrics can not be used in new SLAs. Metrics can
 * be updated between 'active' and 'inactive' states.
 */
var MetricDefinitionStatus;
(function (MetricDefinitionStatus) {
    MetricDefinitionStatus["Active"] = "active";
    MetricDefinitionStatus["Inactive"] = "inactive";
})(MetricDefinitionStatus = exports.MetricDefinitionStatus || (exports.MetricDefinitionStatus = {}));
/**
 * Whether the metric is positively or negatively correlated  with the
 * metric_set.
 */
var MetricDetailsCorrelation;
(function (MetricDetailsCorrelation) {
    MetricDetailsCorrelation["Negative"] = "negative";
    MetricDetailsCorrelation["Positive"] = "positive";
})(MetricDetailsCorrelation = exports.MetricDetailsCorrelation || (exports.MetricDetailsCorrelation = {}));
/** Normalization method for the metric. */
var MetricDetailsNormalization;
(function (MetricDetailsNormalization) {
    MetricDetailsNormalization["Linear"] = "linear";
})(MetricDetailsNormalization = exports.MetricDetailsNormalization || (exports.MetricDetailsNormalization = {}));
/** Type of the metric value. */
var MetricValueType;
(function (MetricValueType) {
    MetricValueType["Double"] = "double";
    MetricValueType["Duration"] = "duration";
})(MetricValueType = exports.MetricValueType || (exports.MetricValueType = {}));
var NewsCreateRequestStatusValue;
(function (NewsCreateRequestStatusValue) {
    NewsCreateRequestStatusValue["Archived"] = "archived";
    NewsCreateRequestStatusValue["Draft"] = "draft";
    NewsCreateRequestStatusValue["Published"] = "published";
})(NewsCreateRequestStatusValue = exports.NewsCreateRequestStatusValue || (exports.NewsCreateRequestStatusValue = {}));
/** Action type of the notification. */
var NotificationActionActionType;
(function (NotificationActionActionType) {
    NotificationActionActionType["Clickable"] = "clickable";
    NotificationActionActionType["Commentable"] = "commentable";
    NotificationActionActionType["Executable"] = "executable";
})(NotificationActionActionType = exports.NotificationActionActionType || (exports.NotificationActionActionType = {}));
/** The state of the notification. */
var NotificationMetadataState;
(function (NotificationMetadataState) {
    NotificationMetadataState["Archived"] = "archived";
    NotificationMetadataState["Read"] = "read";
    NotificationMetadataState["Unread"] = "unread";
})(NotificationMetadataState = exports.NotificationMetadataState || (exports.NotificationMetadataState = {}));
/** Notification parent types. */
var NotificationParentType;
(function (NotificationParentType) {
    NotificationParentType["Account"] = "account";
    NotificationParentType["Conversation"] = "conversation";
    NotificationParentType["Issue"] = "issue";
    NotificationParentType["Opportunity"] = "opportunity";
    NotificationParentType["Part"] = "part";
    NotificationParentType["RevOrg"] = "rev_org";
    NotificationParentType["RevUser"] = "rev_user";
    NotificationParentType["Ticket"] = "ticket";
})(NotificationParentType = exports.NotificationParentType || (exports.NotificationParentType = {}));
/** Email notifications. */
var NotificationPreferencesGroupEmailNotifications;
(function (NotificationPreferencesGroupEmailNotifications) {
    NotificationPreferencesGroupEmailNotifications["All"] = "all";
    NotificationPreferencesGroupEmailNotifications["Important"] = "important";
    NotificationPreferencesGroupEmailNotifications["Nothing"] = "nothing";
})(NotificationPreferencesGroupEmailNotifications = exports.NotificationPreferencesGroupEmailNotifications || (exports.NotificationPreferencesGroupEmailNotifications = {}));
/** Priority of the notification. */
var NotificationPriority;
(function (NotificationPriority) {
    NotificationPriority["High"] = "high";
    NotificationPriority["Low"] = "low";
    NotificationPriority["Medium"] = "medium";
})(NotificationPriority = exports.NotificationPriority || (exports.NotificationPriority = {}));
/** The state of the notification. */
var NotificationState;
(function (NotificationState) {
    NotificationState["Archived"] = "archived";
    NotificationState["Read"] = "read";
    NotificationState["Unread"] = "unread";
})(NotificationState = exports.NotificationState || (exports.NotificationState = {}));
var NotificationType;
(function (NotificationType) {
    NotificationType["ConversationCreatedNotification"] = "conversation_created_notification";
    NotificationType["ConversationInactivityReminder"] = "conversation_inactivity_reminder";
    NotificationType["DevrevReminder"] = "devrev_reminder";
    NotificationType["GenericNotification"] = "generic_notification";
    NotificationType["ObjectAssignmentNotification"] = "object_assignment_notification";
    NotificationType["PrReviewReminder"] = "pr_review_reminder";
    NotificationType["UserMentionedNotification"] = "user_mentioned_notification";
    NotificationType["UserParticipationNotification"] = "user_participation_notification";
    NotificationType["VistaSharedNotification"] = "vista_shared_notification";
})(NotificationType = exports.NotificationType || (exports.NotificationType = {}));
var NotificationsChannelContentRequestChannel;
(function (NotificationsChannelContentRequestChannel) {
    NotificationsChannelContentRequestChannel["Email"] = "email";
})(NotificationsChannelContentRequestChannel = exports.NotificationsChannelContentRequestChannel || (exports.NotificationsChannelContentRequestChannel = {}));
/** Granularity of the timestamp, in case its a timestamp type column. */
var OasisColumnPartitionSchemaTimestampGranularity;
(function (OasisColumnPartitionSchemaTimestampGranularity) {
    OasisColumnPartitionSchemaTimestampGranularity["Day"] = "day";
    OasisColumnPartitionSchemaTimestampGranularity["Month"] = "month";
    OasisColumnPartitionSchemaTimestampGranularity["Year"] = "year";
})(OasisColumnPartitionSchemaTimestampGranularity = exports.OasisColumnPartitionSchemaTimestampGranularity || (exports.OasisColumnPartitionSchemaTimestampGranularity = {}));
/** Partitioning type of the column (as per the field type). */
var OasisColumnPartitionSchemaType;
(function (OasisColumnPartitionSchemaType) {
    OasisColumnPartitionSchemaType["RevOrg"] = "rev_org";
    OasisColumnPartitionSchemaType["Timestamp"] = "timestamp";
})(OasisColumnPartitionSchemaType = exports.OasisColumnPartitionSchemaType || (exports.OasisColumnPartitionSchemaType = {}));
/** Prepare status of the oasis data. */
var OasisDataPrepareStatusStatus;
(function (OasisDataPrepareStatusStatus) {
    OasisDataPrepareStatusStatus["Completed"] = "completed";
    OasisDataPrepareStatusStatus["Failed"] = "failed";
    OasisDataPrepareStatusStatus["InProgress"] = "in_progress";
})(OasisDataPrepareStatusStatus = exports.OasisDataPrepareStatusStatus || (exports.OasisDataPrepareStatusStatus = {}));
var OasisDatasetListFilterScopeValue;
(function (OasisDatasetListFilterScopeValue) {
    OasisDatasetListFilterScopeValue["Org"] = "org";
    OasisDatasetListFilterScopeValue["System"] = "system";
})(OasisDatasetListFilterScopeValue = exports.OasisDatasetListFilterScopeValue || (exports.OasisDatasetListFilterScopeValue = {}));
/** Type of the publisher. */
var OasisJobPublisherType;
(function (OasisJobPublisherType) {
    OasisJobPublisherType["DataWarehouse"] = "data_warehouse";
    OasisJobPublisherType["Oasis"] = "oasis";
})(OasisJobPublisherType = exports.OasisJobPublisherType || (exports.OasisJobPublisherType = {}));
/** Type of the schedule. */
var OasisJobScheduleType;
(function (OasisJobScheduleType) {
    OasisJobScheduleType["AdHoc"] = "ad_hoc";
    OasisJobScheduleType["Cron"] = "cron";
})(OasisJobScheduleType = exports.OasisJobScheduleType || (exports.OasisJobScheduleType = {}));
var OasisQueryModeType;
(function (OasisQueryModeType) {
    OasisQueryModeType["Arrow"] = "arrow";
    OasisQueryModeType["Json"] = "json";
})(OasisQueryModeType = exports.OasisQueryModeType || (exports.OasisQueryModeType = {}));
var ObjectFrameViewType;
(function (ObjectFrameViewType) {
    ObjectFrameViewType["Default"] = "default";
    ObjectFrameViewType["Expanded"] = "expanded";
    ObjectFrameViewType["Single"] = "single";
})(ObjectFrameViewType = exports.ObjectFrameViewType || (exports.ObjectFrameViewType = {}));
/** Type of this member. */
var ObjectMemberV1MemberType;
(function (ObjectMemberV1MemberType) {
    ObjectMemberV1MemberType["Group"] = "group";
    ObjectMemberV1MemberType["User"] = "user";
})(ObjectMemberV1MemberType = exports.ObjectMemberV1MemberType || (exports.ObjectMemberV1MemberType = {}));
var ObjectTypeProto;
(function (ObjectTypeProto) {
    ObjectTypeProto["AccessControlEntry"] = "access_control_entry";
    ObjectTypeProto["Account"] = "account";
    ObjectTypeProto["AccountCommerceDetails"] = "account_commerce_details";
    ObjectTypeProto["Action"] = "action";
    ObjectTypeProto["AddonRule"] = "addon_rule";
    ObjectTypeProto["AiAgent"] = "ai_agent";
    ObjectTypeProto["AiAgentSession"] = "ai_agent_session";
    ObjectTypeProto["Alert"] = "alert";
    ObjectTypeProto["ApiOperation"] = "api_operation";
    ObjectTypeProto["ApiParameter"] = "api_parameter";
    ObjectTypeProto["AppFragment"] = "app_fragment";
    ObjectTypeProto["Article"] = "article";
    ObjectTypeProto["Artifact"] = "artifact";
    ObjectTypeProto["Auth0User"] = "auth0_user";
    ObjectTypeProto["Automation"] = "automation";
    ObjectTypeProto["Bot"] = "bot";
    ObjectTypeProto["BotSnapshot"] = "bot_snapshot";
    ObjectTypeProto["Bug"] = "bug";
    ObjectTypeProto["Call"] = "call";
    ObjectTypeProto["Capability"] = "capability";
    ObjectTypeProto["ChangeEvent"] = "change_event";
    ObjectTypeProto["Channel"] = "channel";
    ObjectTypeProto["ClusterLabel"] = "cluster_label";
    ObjectTypeProto["ClusterLink"] = "cluster_link";
    ObjectTypeProto["ClusteringRun"] = "clustering_run";
    ObjectTypeProto["Code"] = "code";
    ObjectTypeProto["CodeChange"] = "code_change";
    ObjectTypeProto["Collection"] = "collection";
    ObjectTypeProto["Command"] = "command";
    ObjectTypeProto["Comment"] = "comment";
    ObjectTypeProto["Communication"] = "communication";
    ObjectTypeProto["Component"] = "component";
    ObjectTypeProto["ConditionalRole"] = "conditional_role";
    ObjectTypeProto["Connection"] = "connection";
    ObjectTypeProto["Conversation"] = "conversation";
    ObjectTypeProto["ConversationCreated"] = "conversation_created";
    ObjectTypeProto["ConversationInactivityReminder"] = "conversation_inactivity_reminder";
    ObjectTypeProto["Credit"] = "credit";
    ObjectTypeProto["CreditCoupon"] = "credit_coupon";
    ObjectTypeProto["CustomEngagement"] = "custom_engagement";
    ObjectTypeProto["CustomLinkType"] = "custom_link_type";
    ObjectTypeProto["CustomObject"] = "custom_object";
    ObjectTypeProto["CustomPart"] = "custom_part";
    ObjectTypeProto["CustomSchemaFragment"] = "custom_schema_fragment";
    ObjectTypeProto["CustomStage"] = "custom_stage";
    ObjectTypeProto["CustomState"] = "custom_state";
    ObjectTypeProto["CustomType"] = "custom_type";
    ObjectTypeProto["CustomTypeFragment"] = "custom_type_fragment";
    ObjectTypeProto["CustomWork"] = "custom_work";
    ObjectTypeProto["Dashboard"] = "dashboard";
    ObjectTypeProto["DataSource"] = "data_source";
    ObjectTypeProto["Dataset"] = "dataset";
    ObjectTypeProto["DevOrg"] = "dev_org";
    ObjectTypeProto["DevOrgCommerceDetails"] = "dev_org_commerce_details";
    ObjectTypeProto["DevSpace"] = "dev_space";
    ObjectTypeProto["DevUser"] = "dev_user";
    ObjectTypeProto["DevrevProfile"] = "devrev_profile";
    ObjectTypeProto["DevrevReminder"] = "devrev_reminder";
    ObjectTypeProto["DevuInvite"] = "devu_invite";
    ObjectTypeProto["Directory"] = "directory";
    ObjectTypeProto["DiscoveryGitCommit"] = "discovery_git_commit";
    ObjectTypeProto["DiscoveryGitEvent"] = "discovery_git_event";
    ObjectTypeProto["DiscoveryProfile"] = "discovery_profile";
    ObjectTypeProto["DiscoveryRun"] = "discovery_run";
    ObjectTypeProto["DiscoverySettings"] = "discovery_settings";
    ObjectTypeProto["Emoji"] = "emoji";
    ObjectTypeProto["Engagement"] = "engagement";
    ObjectTypeProto["Enhancement"] = "enhancement";
    ObjectTypeProto["Entity"] = "entity";
    ObjectTypeProto["EventSource"] = "event_source";
    ObjectTypeProto["ExternalImport"] = "external_import";
    ObjectTypeProto["ExternalSyncUnit"] = "external_sync_unit";
    ObjectTypeProto["ExternalSystem"] = "external_system";
    ObjectTypeProto["ExternalSystemType"] = "external_system_type";
    ObjectTypeProto["Feature"] = "feature";
    ObjectTypeProto["FeaturePin"] = "feature_pin";
    ObjectTypeProto["Flow"] = "flow";
    ObjectTypeProto["Form"] = "form";
    ObjectTypeProto["FunctionDefinition"] = "function_definition";
    ObjectTypeProto["GenericNotification"] = "generic_notification";
    ObjectTypeProto["Group"] = "group";
    ObjectTypeProto["Incident"] = "incident";
    ObjectTypeProto["Intent"] = "intent";
    ObjectTypeProto["Interaction"] = "interaction";
    ObjectTypeProto["Invalid"] = "invalid";
    ObjectTypeProto["Invoice"] = "invoice";
    ObjectTypeProto["InvoiceLineItem"] = "invoice_line_item";
    ObjectTypeProto["Issue"] = "issue";
    ObjectTypeProto["Job"] = "job";
    ObjectTypeProto["Journey"] = "journey";
    ObjectTypeProto["Keyring"] = "keyring";
    ObjectTypeProto["KeyringType"] = "keyring_type";
    ObjectTypeProto["KnowledgeNode"] = "knowledge_node";
    ObjectTypeProto["LicenseAssignment"] = "license_assignment";
    ObjectTypeProto["Link"] = "link";
    ObjectTypeProto["Linkable"] = "linkable";
    ObjectTypeProto["LinkablePin"] = "linkable_pin";
    ObjectTypeProto["Marketplace"] = "marketplace";
    ObjectTypeProto["MarketplaceCategory"] = "marketplace_category";
    ObjectTypeProto["MarketplaceItem"] = "marketplace_item";
    ObjectTypeProto["MarketplaceSection"] = "marketplace_section";
    ObjectTypeProto["MarketplaceSubmission"] = "marketplace_submission";
    ObjectTypeProto["Meeting"] = "meeting";
    ObjectTypeProto["MeetingNew"] = "meeting_new";
    ObjectTypeProto["Menu"] = "menu";
    ObjectTypeProto["Metric"] = "metric";
    ObjectTypeProto["MetricDefinition"] = "metric_definition";
    ObjectTypeProto["MetricSet"] = "metric_set";
    ObjectTypeProto["MetricTracker"] = "metric_tracker";
    ObjectTypeProto["MicroflowDefinition"] = "microflow_definition";
    ObjectTypeProto["Microservice"] = "microservice";
    ObjectTypeProto["Namespace"] = "namespace";
    ObjectTypeProto["News"] = "news";
    ObjectTypeProto["NotificationContentTemplate"] = "notification_content_template";
    ObjectTypeProto["NotificationPreferences"] = "notification_preferences";
    ObjectTypeProto["OasisData"] = "oasis_data";
    ObjectTypeProto["OasisJob"] = "oasis_job";
    ObjectTypeProto["OasisView"] = "oasis_view";
    ObjectTypeProto["ObjectAssignment"] = "object_assignment";
    ObjectTypeProto["ObjectMember"] = "object_member";
    ObjectTypeProto["OneTimeLineItem"] = "one_time_line_item";
    ObjectTypeProto["Operation"] = "operation";
    ObjectTypeProto["Opportunity"] = "opportunity";
    ObjectTypeProto["OrgPreferences"] = "org_preferences";
    ObjectTypeProto["OrgSchedule"] = "org_schedule";
    ObjectTypeProto["OrgScheduleFragment"] = "org_schedule_fragment";
    ObjectTypeProto["PartPin"] = "part_pin";
    ObjectTypeProto["PaymentMethodBankAccount"] = "payment_method_bank_account";
    ObjectTypeProto["PaymentMethodCard"] = "payment_method_card";
    ObjectTypeProto["Playbook"] = "playbook";
    ObjectTypeProto["PlugPreferences"] = "plug_preferences";
    ObjectTypeProto["PlugSetting"] = "plug_setting";
    ObjectTypeProto["PortalPreferences"] = "portal_preferences";
    ObjectTypeProto["PrReviewReminder"] = "pr_review_reminder";
    ObjectTypeProto["PriceBook"] = "price_book";
    ObjectTypeProto["Pricing"] = "pricing";
    ObjectTypeProto["Problem"] = "problem";
    ObjectTypeProto["Product"] = "product";
    ObjectTypeProto["Project"] = "project";
    ObjectTypeProto["PushDevice"] = "push_device";
    ObjectTypeProto["QuestionAnswer"] = "question_answer";
    ObjectTypeProto["Quote"] = "quote";
    ObjectTypeProto["QuoteLineItem"] = "quote_line_item";
    ObjectTypeProto["QuoteTerm"] = "quote_term";
    ObjectTypeProto["QuoteTermTemplate"] = "quote_term_template";
    ObjectTypeProto["RealTimeInsight"] = "real_time_insight";
    ObjectTypeProto["RealTimeInsightValue"] = "real_time_insight_value";
    ObjectTypeProto["RecordTemplate"] = "record_template";
    ObjectTypeProto["RecurringLineItem"] = "recurring_line_item";
    ObjectTypeProto["Request"] = "request";
    ObjectTypeProto["RevOrg"] = "rev_org";
    ObjectTypeProto["RevOrgCommerceDetails"] = "rev_org_commerce_details";
    ObjectTypeProto["RevUser"] = "rev_user";
    ObjectTypeProto["Reward"] = "reward";
    ObjectTypeProto["RewardTransaction"] = "reward_transaction";
    ObjectTypeProto["Role"] = "role";
    ObjectTypeProto["Room"] = "room";
    ObjectTypeProto["Rule"] = "rule";
    ObjectTypeProto["Runnable"] = "runnable";
    ObjectTypeProto["RunnablePin"] = "runnable_pin";
    ObjectTypeProto["Scenario"] = "scenario";
    ObjectTypeProto["Schedule"] = "schedule";
    ObjectTypeProto["ScheduleFragment"] = "schedule_fragment";
    ObjectTypeProto["Schema"] = "schema";
    ObjectTypeProto["Score"] = "score";
    ObjectTypeProto["ServicePlan"] = "service_plan";
    ObjectTypeProto["Settings"] = "settings";
    ObjectTypeProto["Sku"] = "sku";
    ObjectTypeProto["SkuRule"] = "sku_rule";
    ObjectTypeProto["Sla"] = "sla";
    ObjectTypeProto["SlaAssignmentRule"] = "sla_assignment_rule";
    ObjectTypeProto["SlaPolicy"] = "sla_policy";
    ObjectTypeProto["SlaTracker"] = "sla_tracker";
    ObjectTypeProto["Slot"] = "slot";
    ObjectTypeProto["SlugRegistration"] = "slug_registration";
    ObjectTypeProto["SnapComponent"] = "snap_component";
    ObjectTypeProto["SnapIn"] = "snap_in";
    ObjectTypeProto["SnapInFunction"] = "snap_in_function";
    ObjectTypeProto["SnapInPackage"] = "snap_in_package";
    ObjectTypeProto["SnapInPreferences"] = "snap_in_preferences";
    ObjectTypeProto["SnapInVersion"] = "snap_in_version";
    ObjectTypeProto["SnapKitAction"] = "snap_kit_action";
    ObjectTypeProto["SnapKitExecution"] = "snap_kit_execution";
    ObjectTypeProto["SnapWidget"] = "snap_widget";
    ObjectTypeProto["StageDiagram"] = "stage_diagram";
    ObjectTypeProto["Step"] = "step";
    ObjectTypeProto["StockSchemaFragment"] = "stock_schema_fragment";
    ObjectTypeProto["SupportSettings"] = "support_settings";
    ObjectTypeProto["Survey"] = "survey";
    ObjectTypeProto["SurveyResponse"] = "survey_response";
    ObjectTypeProto["SvcAcc"] = "svc_acc";
    ObjectTypeProto["SyncHistory"] = "sync_history";
    ObjectTypeProto["SyncMapperRecord"] = "sync_mapper_record";
    ObjectTypeProto["SyncModificationRecord"] = "sync_modification_record";
    ObjectTypeProto["SyncPrecedenceConfig"] = "sync_precedence_config";
    ObjectTypeProto["SyncRecipeBlueprint"] = "sync_recipe_blueprint";
    ObjectTypeProto["SyncRecipeBlueprintShard"] = "sync_recipe_blueprint_shard";
    ObjectTypeProto["SyncRecipeFilter"] = "sync_recipe_filter";
    ObjectTypeProto["SyncSnapIn"] = "sync_snap_in";
    ObjectTypeProto["SyncUnit"] = "sync_unit";
    ObjectTypeProto["SysUser"] = "sys_user";
    ObjectTypeProto["Tag"] = "tag";
    ObjectTypeProto["Task"] = "task";
    ObjectTypeProto["TenantFragment"] = "tenant_fragment";
    ObjectTypeProto["TestObject"] = "test_object";
    ObjectTypeProto["Ticket"] = "ticket";
    ObjectTypeProto["TimeMetricTracker"] = "time_metric_tracker";
    ObjectTypeProto["TimelineEvent"] = "timeline_event";
    ObjectTypeProto["Token"] = "token";
    ObjectTypeProto["Uom"] = "uom";
    ObjectTypeProto["UserMention"] = "user_mention";
    ObjectTypeProto["UserParticipation"] = "user_participation";
    ObjectTypeProto["UserPreferences"] = "user_preferences";
    ObjectTypeProto["UserSession"] = "user_session";
    ObjectTypeProto["Vista"] = "vista";
    ObjectTypeProto["VistaGroupItem"] = "vista_group_item";
    ObjectTypeProto["VistaShared"] = "vista_shared";
    ObjectTypeProto["WatcherEntry"] = "watcher_entry";
    ObjectTypeProto["WebCrawlerJob"] = "web_crawler_job";
    ObjectTypeProto["Webhook"] = "webhook";
    ObjectTypeProto["WebhookEvent"] = "webhook_event";
    ObjectTypeProto["Webpage"] = "webpage";
    ObjectTypeProto["Widget"] = "widget";
    ObjectTypeProto["WindowBasedInsight"] = "window_based_insight";
    ObjectTypeProto["WindowBasedInsightValue"] = "window_based_insight_value";
    ObjectTypeProto["Workflow"] = "workflow";
    ObjectTypeProto["WorkflowRun"] = "workflow_run";
    ObjectTypeProto["WorkflowStep"] = "workflow_step";
})(ObjectTypeProto = exports.ObjectTypeProto || (exports.ObjectTypeProto = {}));
/** Port type. */
var OperationInputPortType;
(function (OperationInputPortType) {
    OperationInputPortType["Default"] = "default";
    OperationInputPortType["UserDefined"] = "user_defined";
})(OperationInputPortType = exports.OperationInputPortType || (exports.OperationInputPortType = {}));
/** Port type. */
var OperationOutputPortType;
(function (OperationOutputPortType) {
    OperationOutputPortType["Default"] = "default";
    OperationOutputPortType["Error"] = "error";
    OperationOutputPortType["UserDefined"] = "user_defined";
})(OperationOutputPortType = exports.OperationOutputPortType || (exports.OperationOutputPortType = {}));
var OperationType;
(function (OperationType) {
    OperationType["Create"] = "create";
    OperationType["Delete"] = "delete";
    OperationType["Execute"] = "execute";
    OperationType["List"] = "list";
    OperationType["Read"] = "read";
    OperationType["Update"] = "update";
})(OperationType = exports.OperationType || (exports.OperationType = {}));
/** Operation type. */
var OperationTypeEnum;
(function (OperationTypeEnum) {
    OperationTypeEnum["Action"] = "action";
    OperationTypeEnum["Control"] = "control";
    OperationTypeEnum["Trigger"] = "trigger";
})(OperationTypeEnum = exports.OperationTypeEnum || (exports.OperationTypeEnum = {}));
/** Forecast category of the opportunity. */
var OpportunityForecastCategory;
(function (OpportunityForecastCategory) {
    OpportunityForecastCategory["Commit"] = "commit";
    OpportunityForecastCategory["Omitted"] = "omitted";
    OpportunityForecastCategory["Pipeline"] = "pipeline";
    OpportunityForecastCategory["StrongUpside"] = "strong_upside";
    OpportunityForecastCategory["Upside"] = "upside";
    OpportunityForecastCategory["Won"] = "won";
})(OpportunityForecastCategory = exports.OpportunityForecastCategory || (exports.OpportunityForecastCategory = {}));
/** Priority of the opportunity. */
var OpportunityPriority;
(function (OpportunityPriority) {
    OpportunityPriority["P0"] = "p0";
    OpportunityPriority["P1"] = "p1";
    OpportunityPriority["P2"] = "p2";
    OpportunityPriority["P3"] = "p3";
})(OpportunityPriority = exports.OpportunityPriority || (exports.OpportunityPriority = {}));
/** The environment of the Org. Defaults to 'production' if not specified. */
var OrgEnvironment;
(function (OrgEnvironment) {
    OrgEnvironment["Production"] = "production";
    OrgEnvironment["Staging"] = "staging";
    OrgEnvironment["Test"] = "test";
})(OrgEnvironment = exports.OrgEnvironment || (exports.OrgEnvironment = {}));
/**
 * Status determines how an item can be used. In 'draft' status an item
 * can be edited but can't be used. When 'published' the item can longer
 * be edited but can be used. 'Archived' is read-only.
 */
var OrgScheduleFragmentStatus;
(function (OrgScheduleFragmentStatus) {
    OrgScheduleFragmentStatus["Archived"] = "archived";
    OrgScheduleFragmentStatus["Draft"] = "draft";
    OrgScheduleFragmentStatus["Published"] = "published";
})(OrgScheduleFragmentStatus = exports.OrgScheduleFragmentStatus || (exports.OrgScheduleFragmentStatus = {}));
/**
 * Status determines how an item can be used. In 'draft' status an item
 * can be edited but can't be used. When 'published' the item can longer
 * be edited but can be used. 'Archived' is read-only.
 */
var OrgScheduleStatus;
(function (OrgScheduleStatus) {
    OrgScheduleStatus["Archived"] = "archived";
    OrgScheduleStatus["Draft"] = "draft";
    OrgScheduleStatus["Published"] = "published";
})(OrgScheduleStatus = exports.OrgScheduleStatus || (exports.OrgScheduleStatus = {}));
/** State of the Organization. */
var OrgState;
(function (OrgState) {
    OrgState["Active"] = "active";
    OrgState["Deactivated"] = "deactivated";
    OrgState["Deleted"] = "deleted";
    OrgState["Inactive"] = "inactive";
    OrgState["Locked"] = "locked";
})(OrgState = exports.OrgState || (exports.OrgState = {}));
var OrgType;
(function (OrgType) {
    OrgType["Account"] = "account";
    OrgType["DevOrg"] = "dev_org";
    OrgType["RevOrg"] = "rev_org";
})(OrgType = exports.OrgType || (exports.OrgType = {}));
/** Designated category of the part. */
var PartCategory;
(function (PartCategory) {
    PartCategory["DevPart"] = "dev_part";
    PartCategory["General"] = "general";
    PartCategory["RevPart"] = "rev_part";
})(PartCategory = exports.PartCategory || (exports.PartCategory = {}));
/** Methods the product can be delivered as. */
var PartDeliveredAs;
(function (PartDeliveredAs) {
    PartDeliveredAs["Goods"] = "goods";
    PartDeliveredAs["Service"] = "service";
    PartDeliveredAs["Software"] = "software";
})(PartDeliveredAs = exports.PartDeliveredAs || (exports.PartDeliveredAs = {}));
/** Type of part pin object. */
var PartPinType;
(function (PartPinType) {
    PartPinType["ApiEndpointPin"] = "api_endpoint_pin";
    PartPinType["FeaturePin"] = "feature_pin";
    PartPinType["LinkablePin"] = "linkable_pin";
    PartPinType["RunnablePin"] = "runnable_pin";
})(PartPinType = exports.PartPinType || (exports.PartPinType = {}));
var PartType;
(function (PartType) {
    PartType["Capability"] = "capability";
    PartType["Component"] = "component";
    PartType["CustomPart"] = "custom_part";
    PartType["Enhancement"] = "enhancement";
    PartType["Feature"] = "feature";
    PartType["Linkable"] = "linkable";
    PartType["Microservice"] = "microservice";
    PartType["Product"] = "product";
    PartType["Runnable"] = "runnable";
})(PartType = exports.PartType || (exports.PartType = {}));
/** Name of the source used for parts discovery. */
var PartsDiscoverySourceName;
(function (PartsDiscoverySourceName) {
    PartsDiscoverySourceName["AwsApiGw"] = "aws_api_gw";
    PartsDiscoverySourceName["CustomRoutes"] = "custom_routes";
    PartsDiscoverySourceName["DataDog"] = "data_dog";
    PartsDiscoverySourceName["Git"] = "git";
    PartsDiscoverySourceName["Kubernetes"] = "kubernetes";
})(PartsDiscoverySourceName = exports.PartsDiscoverySourceName || (exports.PartsDiscoverySourceName = {}));
var PartsFilterCreatedByOpOperatorType;
(function (PartsFilterCreatedByOpOperatorType) {
    PartsFilterCreatedByOpOperatorType["Any"] = "any";
    PartsFilterCreatedByOpOperatorType["NotAny"] = "not_any";
})(PartsFilterCreatedByOpOperatorType = exports.PartsFilterCreatedByOpOperatorType || (exports.PartsFilterCreatedByOpOperatorType = {}));
var PartsFilterEnhancementAccountsOpOperatorType;
(function (PartsFilterEnhancementAccountsOpOperatorType) {
    PartsFilterEnhancementAccountsOpOperatorType["All"] = "all";
    PartsFilterEnhancementAccountsOpOperatorType["Any"] = "any";
    PartsFilterEnhancementAccountsOpOperatorType["Empty"] = "empty";
    PartsFilterEnhancementAccountsOpOperatorType["NotAny"] = "not_any";
    PartsFilterEnhancementAccountsOpOperatorType["NotEmpty"] = "not_empty";
})(PartsFilterEnhancementAccountsOpOperatorType = exports.PartsFilterEnhancementAccountsOpOperatorType || (exports.PartsFilterEnhancementAccountsOpOperatorType = {}));
var PartsFilterEnhancementOpportunitiesOpOperatorType;
(function (PartsFilterEnhancementOpportunitiesOpOperatorType) {
    PartsFilterEnhancementOpportunitiesOpOperatorType["All"] = "all";
    PartsFilterEnhancementOpportunitiesOpOperatorType["Any"] = "any";
    PartsFilterEnhancementOpportunitiesOpOperatorType["Empty"] = "empty";
    PartsFilterEnhancementOpportunitiesOpOperatorType["NotAny"] = "not_any";
    PartsFilterEnhancementOpportunitiesOpOperatorType["NotEmpty"] = "not_empty";
})(PartsFilterEnhancementOpportunitiesOpOperatorType = exports.PartsFilterEnhancementOpportunitiesOpOperatorType || (exports.PartsFilterEnhancementOpportunitiesOpOperatorType = {}));
var PartsFilterEnhancementRevScoreTierOpOperatorType;
(function (PartsFilterEnhancementRevScoreTierOpOperatorType) {
    PartsFilterEnhancementRevScoreTierOpOperatorType["Any"] = "any";
    PartsFilterEnhancementRevScoreTierOpOperatorType["Empty"] = "empty";
    PartsFilterEnhancementRevScoreTierOpOperatorType["NotAny"] = "not_any";
    PartsFilterEnhancementRevScoreTierOpOperatorType["NotEmpty"] = "not_empty";
})(PartsFilterEnhancementRevScoreTierOpOperatorType = exports.PartsFilterEnhancementRevScoreTierOpOperatorType || (exports.PartsFilterEnhancementRevScoreTierOpOperatorType = {}));
var PartsFilterEnhancementTicketsOpOperatorType;
(function (PartsFilterEnhancementTicketsOpOperatorType) {
    PartsFilterEnhancementTicketsOpOperatorType["All"] = "all";
    PartsFilterEnhancementTicketsOpOperatorType["Any"] = "any";
    PartsFilterEnhancementTicketsOpOperatorType["Empty"] = "empty";
    PartsFilterEnhancementTicketsOpOperatorType["NotAny"] = "not_any";
    PartsFilterEnhancementTicketsOpOperatorType["NotEmpty"] = "not_empty";
})(PartsFilterEnhancementTicketsOpOperatorType = exports.PartsFilterEnhancementTicketsOpOperatorType || (exports.PartsFilterEnhancementTicketsOpOperatorType = {}));
var PartsFilterOwnedByOpOperatorType;
(function (PartsFilterOwnedByOpOperatorType) {
    PartsFilterOwnedByOpOperatorType["All"] = "all";
    PartsFilterOwnedByOpOperatorType["Any"] = "any";
    PartsFilterOwnedByOpOperatorType["NotAny"] = "not_any";
})(PartsFilterOwnedByOpOperatorType = exports.PartsFilterOwnedByOpOperatorType || (exports.PartsFilterOwnedByOpOperatorType = {}));
var PartsFilterTagsOpOperatorType;
(function (PartsFilterTagsOpOperatorType) {
    PartsFilterTagsOpOperatorType["All"] = "all";
    PartsFilterTagsOpOperatorType["Any"] = "any";
    PartsFilterTagsOpOperatorType["Empty"] = "empty";
    PartsFilterTagsOpOperatorType["NotAny"] = "not_any";
    PartsFilterTagsOpOperatorType["NotEmpty"] = "not_empty";
})(PartsFilterTagsOpOperatorType = exports.PartsFilterTagsOpOperatorType || (exports.PartsFilterTagsOpOperatorType = {}));
var PartsMutateRequestType;
(function (PartsMutateRequestType) {
    PartsMutateRequestType["Merge"] = "merge";
    PartsMutateRequestType["Promote"] = "promote";
})(PartsMutateRequestType = exports.PartsMutateRequestType || (exports.PartsMutateRequestType = {}));
/** Type of parts vista group item. */
var PartsVistaGroupItemType;
(function (PartsVistaGroupItemType) {
    PartsVistaGroupItemType["Curated"] = "curated";
    PartsVistaGroupItemType["Dynamic"] = "dynamic";
})(PartsVistaGroupItemType = exports.PartsVistaGroupItemType || (exports.PartsVistaGroupItemType = {}));
/** Account holder type. */
var PaymentMethodBankAccountAccountHolderType;
(function (PaymentMethodBankAccountAccountHolderType) {
    PaymentMethodBankAccountAccountHolderType["Company"] = "company";
    PaymentMethodBankAccountAccountHolderType["Individual"] = "individual";
})(PaymentMethodBankAccountAccountHolderType = exports.PaymentMethodBankAccountAccountHolderType || (exports.PaymentMethodBankAccountAccountHolderType = {}));
/** Account type. */
var PaymentMethodBankAccountAccountType;
(function (PaymentMethodBankAccountAccountType) {
    PaymentMethodBankAccountAccountType["Checking"] = "checking";
    PaymentMethodBankAccountAccountType["Savings"] = "savings";
})(PaymentMethodBankAccountAccountType = exports.PaymentMethodBankAccountAccountType || (exports.PaymentMethodBankAccountAccountType = {}));
/** Fund type of the card. */
var PaymentMethodCardFundType;
(function (PaymentMethodCardFundType) {
    PaymentMethodCardFundType["Credit"] = "credit";
    PaymentMethodCardFundType["Debit"] = "debit";
    PaymentMethodCardFundType["Prepaid"] = "prepaid";
})(PaymentMethodCardFundType = exports.PaymentMethodCardFundType || (exports.PaymentMethodCardFundType = {}));
var PaymentMethodType;
(function (PaymentMethodType) {
    PaymentMethodType["PaymentMethodBankAccount"] = "payment_method_bank_account";
    PaymentMethodType["PaymentMethodCard"] = "payment_method_card";
})(PaymentMethodType = exports.PaymentMethodType || (exports.PaymentMethodType = {}));
/** The type of the PDF generation template. */
var PdfGenerationTemplateType;
(function (PdfGenerationTemplateType) {
    PdfGenerationTemplateType["Quote"] = "quote";
})(PdfGenerationTemplateType = exports.PdfGenerationTemplateType || (exports.PdfGenerationTemplateType = {}));
/** Category of the contribution type. */
var PeopleInsightsUowCategory;
(function (PeopleInsightsUowCategory) {
    PeopleInsightsUowCategory["Code"] = "code";
    PeopleInsightsUowCategory["Communication"] = "communication";
    PeopleInsightsUowCategory["Management"] = "management";
    PeopleInsightsUowCategory["Miscellaneous"] = "miscellaneous";
    PeopleInsightsUowCategory["Review"] = "review";
})(PeopleInsightsUowCategory = exports.PeopleInsightsUowCategory || (exports.PeopleInsightsUowCategory = {}));
/** Target object of the attribute display rule. */
var PlugAttributeDisplayRuleTarget;
(function (PlugAttributeDisplayRuleTarget) {
    PlugAttributeDisplayRuleTarget["Account"] = "account";
    PlugAttributeDisplayRuleTarget["RevOrg"] = "rev_org";
    PlugAttributeDisplayRuleTarget["RevUser"] = "rev_user";
})(PlugAttributeDisplayRuleTarget = exports.PlugAttributeDisplayRuleTarget || (exports.PlugAttributeDisplayRuleTarget = {}));
/** Logical operator to use. */
var PlugDisplayRuleExpressionOperator;
(function (PlugDisplayRuleExpressionOperator) {
    PlugDisplayRuleExpressionOperator["And"] = "and";
    PlugDisplayRuleExpressionOperator["Or"] = "or";
})(PlugDisplayRuleExpressionOperator = exports.PlugDisplayRuleExpressionOperator || (exports.PlugDisplayRuleExpressionOperator = {}));
/** Logical operator to use. */
var PlugDisplayRuleExpressionType;
(function (PlugDisplayRuleExpressionType) {
    PlugDisplayRuleExpressionType["Expression"] = "expression";
    PlugDisplayRuleExpressionType["Rule"] = "rule";
})(PlugDisplayRuleExpressionType = exports.PlugDisplayRuleExpressionType || (exports.PlugDisplayRuleExpressionType = {}));
/** Type of the display rule. */
var PlugDisplayRuleType;
(function (PlugDisplayRuleType) {
    PlugDisplayRuleType["Attribute"] = "attribute";
    PlugDisplayRuleType["Audience"] = "audience";
    PlugDisplayRuleType["Path"] = "path";
    PlugDisplayRuleType["UserType"] = "user_type";
})(PlugDisplayRuleType = exports.PlugDisplayRuleType || (exports.PlugDisplayRuleType = {}));
/** Comparison operator for this display rule. */
var PlugPathDisplayRuleOperator;
(function (PlugPathDisplayRuleOperator) {
    PlugPathDisplayRuleOperator["Contains"] = "contains";
    PlugPathDisplayRuleOperator["Eq"] = "eq";
    PlugPathDisplayRuleOperator["Neq"] = "neq";
    PlugPathDisplayRuleOperator["NotContains"] = "not_contains";
})(PlugPathDisplayRuleOperator = exports.PlugPathDisplayRuleOperator || (exports.PlugPathDisplayRuleOperator = {}));
var PlugSettingDisplayRuleExpressionType;
(function (PlugSettingDisplayRuleExpressionType) {
    PlugSettingDisplayRuleExpressionType["Expressions"] = "expressions";
    PlugSettingDisplayRuleExpressionType["Rules"] = "rules";
})(PlugSettingDisplayRuleExpressionType = exports.PlugSettingDisplayRuleExpressionType || (exports.PlugSettingDisplayRuleExpressionType = {}));
var PlugSettingDisplayRuleType;
(function (PlugSettingDisplayRuleType) {
    PlugSettingDisplayRuleType["Attribute"] = "attribute";
    PlugSettingDisplayRuleType["Audience"] = "audience";
    PlugSettingDisplayRuleType["Path"] = "path";
    PlugSettingDisplayRuleType["UserType"] = "user_type";
})(PlugSettingDisplayRuleType = exports.PlugSettingDisplayRuleType || (exports.PlugSettingDisplayRuleType = {}));
var PlugSettingGWWebPlugSettingWebTabTypeValue;
(function (PlugSettingGWWebPlugSettingWebTabTypeValue) {
    PlugSettingGWWebPlugSettingWebTabTypeValue["Conversations"] = "conversations";
    PlugSettingGWWebPlugSettingWebTabTypeValue["Help"] = "help";
    PlugSettingGWWebPlugSettingWebTabTypeValue["Home"] = "home";
    PlugSettingGWWebPlugSettingWebTabTypeValue["News"] = "news";
    PlugSettingGWWebPlugSettingWebTabTypeValue["Tasks"] = "tasks";
    PlugSettingGWWebPlugSettingWebTabTypeValue["Tickets"] = "tickets";
})(PlugSettingGWWebPlugSettingWebTabTypeValue = exports.PlugSettingGWWebPlugSettingWebTabTypeValue || (exports.PlugSettingGWWebPlugSettingWebTabTypeValue = {}));
var PlugSettingGWWebStylingPlugSettingWebThemeType;
(function (PlugSettingGWWebStylingPlugSettingWebThemeType) {
    PlugSettingGWWebStylingPlugSettingWebThemeType["CustomTheme"] = "custom_theme";
    PlugSettingGWWebStylingPlugSettingWebThemeType["NativeTheme"] = "native_theme";
})(PlugSettingGWWebStylingPlugSettingWebThemeType = exports.PlugSettingGWWebStylingPlugSettingWebThemeType || (exports.PlugSettingGWWebStylingPlugSettingWebThemeType = {}));
/** Alignment of the launcher. */
var PlugSettingLauncherAlignment;
(function (PlugSettingLauncherAlignment) {
    PlugSettingLauncherAlignment["Left"] = "left";
    PlugSettingLauncherAlignment["Right"] = "right";
})(PlugSettingLauncherAlignment = exports.PlugSettingLauncherAlignment || (exports.PlugSettingLauncherAlignment = {}));
/** Language used in the Plug UI. */
var PlugSettingLocale;
(function (PlugSettingLocale) {
    PlugSettingLocale["EnUs"] = "en_us";
    PlugSettingLocale["EsAr"] = "es_ar";
    PlugSettingLocale["FrFr"] = "fr_fr";
    PlugSettingLocale["PlPl"] = "pl_pl";
})(PlugSettingLocale = exports.PlugSettingLocale || (exports.PlugSettingLocale = {}));
/** Current status of the plug setting object. */
var PlugSettingStatus;
(function (PlugSettingStatus) {
    PlugSettingStatus["Draft"] = "draft";
    PlugSettingStatus["Published"] = "published";
})(PlugSettingStatus = exports.PlugSettingStatus || (exports.PlugSettingStatus = {}));
var PlugSettingsCreateRequestWebStylingPlugSettingWebThemeType;
(function (PlugSettingsCreateRequestWebStylingPlugSettingWebThemeType) {
    PlugSettingsCreateRequestWebStylingPlugSettingWebThemeType["CustomTheme"] = "custom_theme";
    PlugSettingsCreateRequestWebStylingPlugSettingWebThemeType["NativeTheme"] = "native_theme";
})(PlugSettingsCreateRequestWebStylingPlugSettingWebThemeType = exports.PlugSettingsCreateRequestWebStylingPlugSettingWebThemeType || (exports.PlugSettingsCreateRequestWebStylingPlugSettingWebThemeType = {}));
var PlugSettingsUpdateRequestWebStylingUpdatePlugSettingWebThemeType;
(function (PlugSettingsUpdateRequestWebStylingUpdatePlugSettingWebThemeType) {
    PlugSettingsUpdateRequestWebStylingUpdatePlugSettingWebThemeType["CustomTheme"] = "custom_theme";
    PlugSettingsUpdateRequestWebStylingUpdatePlugSettingWebThemeType["NativeTheme"] = "native_theme";
})(PlugSettingsUpdateRequestWebStylingUpdatePlugSettingWebThemeType = exports.PlugSettingsUpdateRequestWebStylingUpdatePlugSettingWebThemeType || (exports.PlugSettingsUpdateRequestWebStylingUpdatePlugSettingWebThemeType = {}));
/** Comparison operator for this display rule. */
var PlugUserTypeDisplayRuleOperator;
(function (PlugUserTypeDisplayRuleOperator) {
    PlugUserTypeDisplayRuleOperator["Eq"] = "eq";
    PlugUserTypeDisplayRuleOperator["Neq"] = "neq";
})(PlugUserTypeDisplayRuleOperator = exports.PlugUserTypeDisplayRuleOperator || (exports.PlugUserTypeDisplayRuleOperator = {}));
/** Value which will be used for comparison for the display rule. */
var PlugUserTypeDisplayRuleValue;
(function (PlugUserTypeDisplayRuleValue) {
    PlugUserTypeDisplayRuleValue["Anonymous"] = "anonymous";
    PlugUserTypeDisplayRuleValue["Identified"] = "identified";
})(PlugUserTypeDisplayRuleValue = exports.PlugUserTypeDisplayRuleValue || (exports.PlugUserTypeDisplayRuleValue = {}));
/** Type of the component. */
var PlugWebComponentType;
(function (PlugWebComponentType) {
    PlugWebComponentType["Banner"] = "banner";
    PlugWebComponentType["CreateConversation"] = "create_conversation";
    PlugWebComponentType["CreateTicket"] = "create_ticket";
    PlugWebComponentType["RecentConversations"] = "recent_conversations";
    PlugWebComponentType["RecentTickets"] = "recent_tickets";
    PlugWebComponentType["Search"] = "search";
    PlugWebComponentType["SnapComponent"] = "snap_component";
    PlugWebComponentType["Welcome"] = "welcome";
})(PlugWebComponentType = exports.PlugWebComponentType || (exports.PlugWebComponentType = {}));
/** Type of the tab. */
var PlugWebTabType;
(function (PlugWebTabType) {
    PlugWebTabType["Conversations"] = "conversations";
    PlugWebTabType["Help"] = "help";
    PlugWebTabType["Home"] = "home";
    PlugWebTabType["News"] = "news";
    PlugWebTabType["Tasks"] = "tasks";
    PlugWebTabType["Tickets"] = "tickets";
})(PlugWebTabType = exports.PlugWebTabType || (exports.PlugWebTabType = {}));
/** Native theme, only meant to be set if 'type' is 'native'. */
var PlugWebThemeNativeTheme;
(function (PlugWebThemeNativeTheme) {
    PlugWebThemeNativeTheme["Dark"] = "dark";
    PlugWebThemeNativeTheme["Light"] = "light";
})(PlugWebThemeNativeTheme = exports.PlugWebThemeNativeTheme || (exports.PlugWebThemeNativeTheme = {}));
/** Type of the theme. */
var PlugWebThemeType;
(function (PlugWebThemeType) {
    PlugWebThemeType["Custom"] = "custom";
    PlugWebThemeType["Native"] = "native";
})(PlugWebThemeType = exports.PlugWebThemeType || (exports.PlugWebThemeType = {}));
/** Status of the portal. */
var PortalPreferencesStatus;
(function (PortalPreferencesStatus) {
    PortalPreferencesStatus["Disabled"] = "disabled";
    PortalPreferencesStatus["Enabled"] = "enabled";
    PortalPreferencesStatus["Enabling"] = "enabling";
})(PortalPreferencesStatus = exports.PortalPreferencesStatus || (exports.PortalPreferencesStatus = {}));
/** Portal appearance theme. */
var PortalStylingTheme;
(function (PortalStylingTheme) {
    PortalStylingTheme["Dark"] = "dark";
    PortalStylingTheme["Light"] = "light";
})(PortalStylingTheme = exports.PortalStylingTheme || (exports.PortalStylingTheme = {}));
var PostNudgeWidgetPostNudgeType;
(function (PostNudgeWidgetPostNudgeType) {
    PostNudgeWidgetPostNudgeType["Native"] = "native";
    PostNudgeWidgetPostNudgeType["SnapKit"] = "snap_kit";
})(PostNudgeWidgetPostNudgeType = exports.PostNudgeWidgetPostNudgeType || (exports.PostNudgeWidgetPostNudgeType = {}));
var PreferencesType;
(function (PreferencesType) {
    PreferencesType["NotificationPreferences"] = "notification_preferences";
    PreferencesType["OrgPreferences"] = "org_preferences";
    PreferencesType["PortalPreferences"] = "portal_preferences";
    PreferencesType["UserPreferences"] = "user_preferences";
})(PreferencesType = exports.PreferencesType || (exports.PreferencesType = {}));
/** Billing frequency of the SKU. */
var PricingBillingCycle;
(function (PricingBillingCycle) {
    PricingBillingCycle["Monthly"] = "monthly";
    PricingBillingCycle["OneTime"] = "one_time";
    PricingBillingCycle["Yearly"] = "yearly";
})(PricingBillingCycle = exports.PricingBillingCycle || (exports.PricingBillingCycle = {}));
/** Type of the value. */
var PrimitiveValueType;
(function (PrimitiveValueType) {
    PrimitiveValueType["Attribute"] = "attribute";
    PrimitiveValueType["Bool"] = "bool";
    PrimitiveValueType["Id"] = "id";
    PrimitiveValueType["IdList"] = "id_list";
    PrimitiveValueType["Int"] = "int";
    PrimitiveValueType["IntList"] = "int_list";
    PrimitiveValueType["OverridableEnum"] = "overridable_enum";
    PrimitiveValueType["OverridableEnumList"] = "overridable_enum_list";
    PrimitiveValueType["String"] = "string";
    PrimitiveValueType["StringList"] = "string_list";
})(PrimitiveValueType = exports.PrimitiveValueType || (exports.PrimitiveValueType = {}));
var PrincipalsListFilterPrinicipalTypeEnum;
(function (PrincipalsListFilterPrinicipalTypeEnum) {
    PrincipalsListFilterPrinicipalTypeEnum["DevOrg"] = "dev_org";
    PrincipalsListFilterPrinicipalTypeEnum["Group"] = "group";
    PrincipalsListFilterPrinicipalTypeEnum["Unknown"] = "unknown";
})(PrincipalsListFilterPrinicipalTypeEnum = exports.PrincipalsListFilterPrinicipalTypeEnum || (exports.PrincipalsListFilterPrinicipalTypeEnum = {}));
/** Product Delivered as. */
var ProductDeliveredAs;
(function (ProductDeliveredAs) {
    ProductDeliveredAs["Goods"] = "goods";
    ProductDeliveredAs["Service"] = "service";
})(ProductDeliveredAs = exports.ProductDeliveredAs || (exports.ProductDeliveredAs = {}));
/** Priority of the work based upon impact and criticality. */
var ProjectPriority;
(function (ProjectPriority) {
    ProjectPriority["P0"] = "p0";
    ProjectPriority["P1"] = "p1";
    ProjectPriority["P2"] = "p2";
    ProjectPriority["P3"] = "p3";
})(ProjectPriority = exports.ProjectPriority || (exports.ProjectPriority = {}));
/** Type of project. */
var ProjectType;
(function (ProjectType) {
    ProjectType["DeliverableBased"] = "deliverable_based";
    ProjectType["TimeBased"] = "time_based";
})(ProjectType = exports.ProjectType || (exports.ProjectType = {}));
/** The type of the push device. */
var PushDeviceType;
(function (PushDeviceType) {
    PushDeviceType["Android"] = "android";
    PushDeviceType["Chrome"] = "chrome";
    PushDeviceType["Ios"] = "ios";
    PushDeviceType["IosSandbox"] = "ios_sandbox";
})(PushDeviceType = exports.PushDeviceType || (exports.PushDeviceType = {}));
/** The matching channel control settings for android in settings. */
var PushNotificationAndroidChannel;
(function (PushNotificationAndroidChannel) {
    PushNotificationAndroidChannel["Alerts"] = "alerts";
    PushNotificationAndroidChannel["Discussions"] = "discussions";
    PushNotificationAndroidChannel["StatusUpdates"] = "status_updates";
})(PushNotificationAndroidChannel = exports.PushNotificationAndroidChannel || (exports.PushNotificationAndroidChannel = {}));
/** The matching channel control settings for android in settings. */
var PushNotificationAndroidChannelLegacy;
(function (PushNotificationAndroidChannelLegacy) {
    PushNotificationAndroidChannelLegacy["NotificationChannelIdAlerts"] = "notification_channel_id_alerts";
    PushNotificationAndroidChannelLegacy["NotificationChannelIdDiscussions"] = "notification_channel_id_discussions";
    PushNotificationAndroidChannelLegacy["NotificationChannelIdStatusUpdates"] = "notification_channel_id_status_updates";
})(PushNotificationAndroidChannelLegacy = exports.PushNotificationAndroidChannelLegacy || (exports.PushNotificationAndroidChannelLegacy = {}));
/** The device name for the notification. */
var PushNotificationDevice;
(function (PushNotificationDevice) {
    PushNotificationDevice["Android"] = "android";
    PushNotificationDevice["Chrome"] = "chrome";
    PushNotificationDevice["Ios"] = "ios";
    PushNotificationDevice["IosSandbox"] = "ios_sandbox";
})(PushNotificationDevice = exports.PushNotificationDevice || (exports.PushNotificationDevice = {}));
/** State of delivery of the notification. */
var PushNotificationState;
(function (PushNotificationState) {
    PushNotificationState["Deleted"] = "deleted";
    PushNotificationState["Read"] = "read";
    PushNotificationState["Unread"] = "unread";
})(PushNotificationState = exports.PushNotificationState || (exports.PushNotificationState = {}));
/** The tab to be opened when the notification is clicked. */
var PushNotificationTarget;
(function (PushNotificationTarget) {
    PushNotificationTarget["Details"] = "details";
    PushNotificationTarget["Discussion"] = "discussion";
    PushNotificationTarget["Event"] = "event";
    PushNotificationTarget["Updates"] = "updates";
})(PushNotificationTarget = exports.PushNotificationTarget || (exports.PushNotificationTarget = {}));
/** The type of the underlying notification. */
var PushNotificationType;
(function (PushNotificationType) {
    PushNotificationType["ConversationCreated"] = "conversation_created";
    PushNotificationType["ConversationInactivityReminder"] = "conversation_inactivity_reminder";
    PushNotificationType["DevrevReminder"] = "devrev_reminder";
    PushNotificationType["GenericNotification"] = "generic_notification";
    PushNotificationType["ObjectAssigned"] = "object_assigned";
    PushNotificationType["PrReviewReminder"] = "pr_review_reminder";
    PushNotificationType["UserMentioned"] = "user_mentioned";
    PushNotificationType["UserParticipation"] = "user_participation";
    PushNotificationType["VistaShared"] = "vista_shared";
})(PushNotificationType = exports.PushNotificationType || (exports.PushNotificationType = {}));
/** Status of the question answer. */
var QuestionAnswerStatus;
(function (QuestionAnswerStatus) {
    QuestionAnswerStatus["Archived"] = "archived";
    QuestionAnswerStatus["Discarded"] = "discarded";
    QuestionAnswerStatus["Draft"] = "draft";
    QuestionAnswerStatus["Published"] = "published";
    QuestionAnswerStatus["ReviewNeeded"] = "review_needed";
})(QuestionAnswerStatus = exports.QuestionAnswerStatus || (exports.QuestionAnswerStatus = {}));
var ReactionsUpdateRequestAction;
(function (ReactionsUpdateRequestAction) {
    ReactionsUpdateRequestAction["Add"] = "add";
    ReactionsUpdateRequestAction["Remove"] = "remove";
})(ReactionsUpdateRequestAction = exports.ReactionsUpdateRequestAction || (exports.ReactionsUpdateRequestAction = {}));
/** State of the record template. */
var RecordTemplateState;
(function (RecordTemplateState) {
    RecordTemplateState["Active"] = "active";
    RecordTemplateState["Draft"] = "draft";
    RecordTemplateState["Inactive"] = "inactive";
    RecordTemplateState["NeedsAttention"] = "needs_attention";
})(RecordTemplateState = exports.RecordTemplateState || (exports.RecordTemplateState = {}));
/** Source of the relevant context. */
var RelevantContextRequestRelevantContextSourceType;
(function (RelevantContextRequestRelevantContextSourceType) {
    RelevantContextRequestRelevantContextSourceType["Article"] = "article";
    RelevantContextRequestRelevantContextSourceType["Question"] = "question";
})(RelevantContextRequestRelevantContextSourceType = exports.RelevantContextRequestRelevantContextSourceType || (exports.RelevantContextRequestRelevantContextSourceType = {}));
var ResolveEntitiesRequestObjectType;
(function (ResolveEntitiesRequestObjectType) {
    ResolveEntitiesRequestObjectType["Part"] = "part";
    ResolveEntitiesRequestObjectType["User"] = "user";
    ResolveEntitiesRequestObjectType["Work"] = "work";
})(ResolveEntitiesRequestObjectType = exports.ResolveEntitiesRequestObjectType || (exports.ResolveEntitiesRequestObjectType = {}));
/** The object summary corresponding to the resolved entity. */
var ResolveEntitiesResponseObjectSummaryObject;
(function (ResolveEntitiesResponseObjectSummaryObject) {
    ResolveEntitiesResponseObjectSummaryObject["Part"] = "part";
    ResolveEntitiesResponseObjectSummaryObject["User"] = "user";
    ResolveEntitiesResponseObjectSummaryObject["Work"] = "work";
})(ResolveEntitiesResponseObjectSummaryObject = exports.ResolveEntitiesResponseObjectSummaryObject || (exports.ResolveEntitiesResponseObjectSummaryObject = {}));
/** Type of the article resource. */
var ResourceType;
(function (ResourceType) {
    ResourceType["Artifact"] = "artifact";
    ResourceType["Url"] = "url";
})(ResourceType = exports.ResourceType || (exports.ResourceType = {}));
var RevObjectTagsOperatorType;
(function (RevObjectTagsOperatorType) {
    RevObjectTagsOperatorType["All"] = "all";
    RevObjectTagsOperatorType["Any"] = "any";
    RevObjectTagsOperatorType["Empty"] = "empty";
    RevObjectTagsOperatorType["NotAny"] = "not_any";
    RevObjectTagsOperatorType["NotEmpty"] = "not_empty";
})(RevObjectTagsOperatorType = exports.RevObjectTagsOperatorType || (exports.RevObjectTagsOperatorType = {}));
/** The type of the Rev organization. */
var RevOrgType;
(function (RevOrgType) {
    RevOrgType["B2B"] = "b2b";
    RevOrgType["B2C"] = "b2c";
})(RevOrgType = exports.RevOrgType || (exports.RevOrgType = {}));
var RevOrgsFiltersAccountOperatorType;
(function (RevOrgsFiltersAccountOperatorType) {
    RevOrgsFiltersAccountOperatorType["Any"] = "any";
    RevOrgsFiltersAccountOperatorType["NotAny"] = "not_any";
})(RevOrgsFiltersAccountOperatorType = exports.RevOrgsFiltersAccountOperatorType || (exports.RevOrgsFiltersAccountOperatorType = {}));
/** Channel from which the rev identity is ingested. */
var RevUserIngestionChannel;
(function (RevUserIngestionChannel) {
    RevUserIngestionChannel["Airdrop"] = "airdrop";
    RevUserIngestionChannel["Csv"] = "csv";
})(RevUserIngestionChannel = exports.RevUserIngestionChannel || (exports.RevUserIngestionChannel = {}));
/** Status of the user on the PLuG. */
var RevUserPlugAvailability;
(function (RevUserPlugAvailability) {
    RevUserPlugAvailability["Offline"] = "offline";
    RevUserPlugAvailability["Online"] = "online";
})(RevUserPlugAvailability = exports.RevUserPlugAvailability || (exports.RevUserPlugAvailability = {}));
/** Type of the user. */
var RevUserUserType;
(function (RevUserUserType) {
    RevUserUserType["Anonymous"] = "anonymous";
    RevUserUserType["Identified"] = "identified";
})(RevUserUserType = exports.RevUserUserType || (exports.RevUserUserType = {}));
var RevUsersFiltersRevOrgOperatorType;
(function (RevUsersFiltersRevOrgOperatorType) {
    RevUsersFiltersRevOrgOperatorType["Any"] = "any";
    RevUsersFiltersRevOrgOperatorType["Empty"] = "empty";
    RevUsersFiltersRevOrgOperatorType["NotAny"] = "not_any";
    RevUsersFiltersRevOrgOperatorType["NotEmpty"] = "not_empty";
})(RevUsersFiltersRevOrgOperatorType = exports.RevUsersFiltersRevOrgOperatorType || (exports.RevUsersFiltersRevOrgOperatorType = {}));
/** Privileges the role provides. */
var RolePrivileges;
(function (RolePrivileges) {
    RolePrivileges["Create"] = "create";
    RolePrivileges["Delete"] = "delete";
    RolePrivileges["Read"] = "read";
    RolePrivileges["Update"] = "update";
})(RolePrivileges = exports.RolePrivileges || (exports.RolePrivileges = {}));
/** Target object type of the role. */
var RoleTarget;
(function (RoleTarget) {
    RoleTarget["Account"] = "account";
    RoleTarget["AccountCommerceDetails"] = "account_commerce_details";
    RoleTarget["AddonRule"] = "addon_rule";
    RoleTarget["AppFragment"] = "app_fragment";
    RoleTarget["Article"] = "article";
    RoleTarget["Artifact"] = "artifact";
    RoleTarget["Capability"] = "capability";
    RoleTarget["Command"] = "command";
    RoleTarget["Comment"] = "comment";
    RoleTarget["Conversation"] = "conversation";
    RoleTarget["Credit"] = "credit";
    RoleTarget["CreditCoupon"] = "credit_coupon";
    RoleTarget["CustomPart"] = "custom_part";
    RoleTarget["CustomTypeFragment"] = "custom_type_fragment";
    RoleTarget["Dashboard"] = "dashboard";
    RoleTarget["Dataset"] = "dataset";
    RoleTarget["DevOrg"] = "dev_org";
    RoleTarget["DevUser"] = "dev_user";
    RoleTarget["Directory"] = "directory";
    RoleTarget["DiscoveryRun"] = "discovery_run";
    RoleTarget["Enhancement"] = "enhancement";
    RoleTarget["Feature"] = "feature";
    RoleTarget["Flow"] = "flow";
    RoleTarget["Group"] = "group";
    RoleTarget["Invoice"] = "invoice";
    RoleTarget["Issue"] = "issue";
    RoleTarget["Keyring"] = "keyring";
    RoleTarget["LicenseAssignment"] = "license_assignment";
    RoleTarget["Link"] = "link";
    RoleTarget["Linkable"] = "linkable";
    RoleTarget["Marketplace"] = "marketplace";
    RoleTarget["MarketplaceCategory"] = "marketplace_category";
    RoleTarget["MarketplaceItem"] = "marketplace_item";
    RoleTarget["MarketplaceSubmission"] = "marketplace_submission";
    RoleTarget["OasisData"] = "oasis_data";
    RoleTarget["ObjectMember"] = "object_member";
    RoleTarget["Opportunity"] = "opportunity";
    RoleTarget["PaymentMethodCard"] = "payment_method_card";
    RoleTarget["Pricing"] = "pricing";
    RoleTarget["Product"] = "product";
    RoleTarget["QuestionAnswer"] = "question_answer";
    RoleTarget["Quote"] = "quote";
    RoleTarget["RevOrg"] = "rev_org";
    RoleTarget["RevUser"] = "rev_user";
    RoleTarget["RevoConfig"] = "revo_config";
    RoleTarget["Role"] = "role";
    RoleTarget["Runnable"] = "runnable";
    RoleTarget["ServicePlan"] = "service_plan";
    RoleTarget["Sku"] = "sku";
    RoleTarget["SkuRule"] = "sku_rule";
    RoleTarget["SnapIn"] = "snap_in";
    RoleTarget["SnapWidget"] = "snap_widget";
    RoleTarget["Task"] = "task";
    RoleTarget["TenantFragment"] = "tenant_fragment";
    RoleTarget["Ticket"] = "ticket";
    RoleTarget["Token"] = "token";
    RoleTarget["Uom"] = "uom";
    RoleTarget["Vista"] = "vista";
    RoleTarget["Webhook"] = "webhook";
    RoleTarget["Widget"] = "widget";
})(RoleTarget = exports.RoleTarget || (exports.RoleTarget = {}));
/** Type of the role. */
var RoleType;
(function (RoleType) {
    RoleType["FieldAccess"] = "field_access";
    RoleType["ObjectAccess"] = "object_access";
})(RoleType = exports.RoleType || (exports.RoleType = {}));
var RolesFilterTargetSubtypeOperatorType;
(function (RolesFilterTargetSubtypeOperatorType) {
    RolesFilterTargetSubtypeOperatorType["Any"] = "any";
    RolesFilterTargetSubtypeOperatorType["Null"] = "null";
})(RolesFilterTargetSubtypeOperatorType = exports.RolesFilterTargetSubtypeOperatorType || (exports.RolesFilterTargetSubtypeOperatorType = {}));
var RoomsInformRequestStatusValue;
(function (RoomsInformRequestStatusValue) {
    RoomsInformRequestStatusValue["Joined"] = "joined";
    RoomsInformRequestStatusValue["Left"] = "left";
})(RoomsInformRequestStatusValue = exports.RoomsInformRequestStatusValue || (exports.RoomsInformRequestStatusValue = {}));
/** The kind of runnable. */
var RunnableKind;
(function (RunnableKind) {
    RunnableKind["EcrImage"] = "ecr_image";
    RunnableKind["Lambda"] = "lambda";
    RunnableKind["Microservice"] = "microservice";
    RunnableKind["Service"] = "service";
})(RunnableKind = exports.RunnableKind || (exports.RunnableKind = {}));
var SchemaFieldDescriptorArrayTypeBaseType;
(function (SchemaFieldDescriptorArrayTypeBaseType) {
    SchemaFieldDescriptorArrayTypeBaseType["Bool"] = "bool";
    SchemaFieldDescriptorArrayTypeBaseType["Composite"] = "composite";
    SchemaFieldDescriptorArrayTypeBaseType["Date"] = "date";
    SchemaFieldDescriptorArrayTypeBaseType["Double"] = "double";
    SchemaFieldDescriptorArrayTypeBaseType["Enum"] = "enum";
    SchemaFieldDescriptorArrayTypeBaseType["Id"] = "id";
    SchemaFieldDescriptorArrayTypeBaseType["Int"] = "int";
    SchemaFieldDescriptorArrayTypeBaseType["RichText"] = "rich_text";
    SchemaFieldDescriptorArrayTypeBaseType["Text"] = "text";
    SchemaFieldDescriptorArrayTypeBaseType["Timestamp"] = "timestamp";
    SchemaFieldDescriptorArrayTypeBaseType["Tokens"] = "tokens";
    SchemaFieldDescriptorArrayTypeBaseType["Uenum"] = "uenum";
})(SchemaFieldDescriptorArrayTypeBaseType = exports.SchemaFieldDescriptorArrayTypeBaseType || (exports.SchemaFieldDescriptorArrayTypeBaseType = {}));
var SchemaFieldDescriptorFieldType;
(function (SchemaFieldDescriptorFieldType) {
    SchemaFieldDescriptorFieldType["Array"] = "array";
    SchemaFieldDescriptorFieldType["Bool"] = "bool";
    SchemaFieldDescriptorFieldType["Composite"] = "composite";
    SchemaFieldDescriptorFieldType["Date"] = "date";
    SchemaFieldDescriptorFieldType["Double"] = "double";
    SchemaFieldDescriptorFieldType["Enum"] = "enum";
    SchemaFieldDescriptorFieldType["Id"] = "id";
    SchemaFieldDescriptorFieldType["Int"] = "int";
    SchemaFieldDescriptorFieldType["RichText"] = "rich_text";
    SchemaFieldDescriptorFieldType["Text"] = "text";
    SchemaFieldDescriptorFieldType["Timestamp"] = "timestamp";
    SchemaFieldDescriptorFieldType["Tokens"] = "tokens";
    SchemaFieldDescriptorFieldType["Uenum"] = "uenum";
    SchemaFieldDescriptorFieldType["Unknown"] = "unknown";
})(SchemaFieldDescriptorFieldType = exports.SchemaFieldDescriptorFieldType || (exports.SchemaFieldDescriptorFieldType = {}));
var SchemasSubtypePrepareUpdateGetResponseConflictType;
(function (SchemasSubtypePrepareUpdateGetResponseConflictType) {
    SchemasSubtypePrepareUpdateGetResponseConflictType["AbsentInNew"] = "absent_in_new";
    SchemasSubtypePrepareUpdateGetResponseConflictType["AbsentInOld"] = "absent_in_old";
    SchemasSubtypePrepareUpdateGetResponseConflictType["IncompatibleType"] = "incompatible_type";
})(SchemasSubtypePrepareUpdateGetResponseConflictType = exports.SchemasSubtypePrepareUpdateGetResponseConflictType || (exports.SchemasSubtypePrepareUpdateGetResponseConflictType = {}));
/** Object type to which the score is attributed. */
var ScoreAttributionType;
(function (ScoreAttributionType) {
    ScoreAttributionType["Account"] = "account";
})(ScoreAttributionType = exports.ScoreAttributionType || (exports.ScoreAttributionType = {}));
/** The namespaces for hybrid search. */
var SearchHybridNamespace;
(function (SearchHybridNamespace) {
    SearchHybridNamespace["Article"] = "article";
    SearchHybridNamespace["Conversation"] = "conversation";
    SearchHybridNamespace["Issue"] = "issue";
    SearchHybridNamespace["Part"] = "part";
    SearchHybridNamespace["QuestionAnswer"] = "question_answer";
    SearchHybridNamespace["Ticket"] = "ticket";
    SearchHybridNamespace["Work"] = "work";
})(SearchHybridNamespace = exports.SearchHybridNamespace || (exports.SearchHybridNamespace = {}));
/** The namespaces to search in. */
var SearchNamespace;
(function (SearchNamespace) {
    SearchNamespace["Account"] = "account";
    SearchNamespace["Article"] = "article";
    SearchNamespace["Capability"] = "capability";
    SearchNamespace["Component"] = "component";
    SearchNamespace["Conversation"] = "conversation";
    SearchNamespace["CustomPart"] = "custom_part";
    SearchNamespace["CustomWork"] = "custom_work";
    SearchNamespace["Dashboard"] = "dashboard";
    SearchNamespace["DevUser"] = "dev_user";
    SearchNamespace["Enhancement"] = "enhancement";
    SearchNamespace["Feature"] = "feature";
    SearchNamespace["Group"] = "group";
    SearchNamespace["Issue"] = "issue";
    SearchNamespace["Linkable"] = "linkable";
    SearchNamespace["Microservice"] = "microservice";
    SearchNamespace["ObjectMember"] = "object_member";
    SearchNamespace["Opportunity"] = "opportunity";
    SearchNamespace["Product"] = "product";
    SearchNamespace["Project"] = "project";
    SearchNamespace["QuestionAnswer"] = "question_answer";
    SearchNamespace["RevOrg"] = "rev_org";
    SearchNamespace["RevUser"] = "rev_user";
    SearchNamespace["Runnable"] = "runnable";
    SearchNamespace["ServiceAccount"] = "service_account";
    SearchNamespace["SysUser"] = "sys_user";
    SearchNamespace["Tag"] = "tag";
    SearchNamespace["Task"] = "task";
    SearchNamespace["Ticket"] = "ticket";
    SearchNamespace["Vista"] = "vista";
})(SearchNamespace = exports.SearchNamespace || (exports.SearchNamespace = {}));
var SearchResultType;
(function (SearchResultType) {
    SearchResultType["Account"] = "account";
    SearchResultType["Article"] = "article";
    SearchResultType["Artifact"] = "artifact";
    SearchResultType["Conversation"] = "conversation";
    SearchResultType["Dashboard"] = "dashboard";
    SearchResultType["Group"] = "group";
    SearchResultType["Link"] = "link";
    SearchResultType["ObjectMember"] = "object_member";
    SearchResultType["Org"] = "org";
    SearchResultType["Part"] = "part";
    SearchResultType["QuestionAnswer"] = "question_answer";
    SearchResultType["Tag"] = "tag";
    SearchResultType["User"] = "user";
    SearchResultType["Vista"] = "vista";
    SearchResultType["Work"] = "work";
})(SearchResultType = exports.SearchResultType || (exports.SearchResultType = {}));
/** Search sort by parameters. */
var SearchSortByParam;
(function (SearchSortByParam) {
    SearchSortByParam["CreatedDate"] = "created_date";
    SearchSortByParam["ModifiedDate"] = "modified_date";
    SearchSortByParam["Relevance"] = "relevance";
})(SearchSortByParam = exports.SearchSortByParam || (exports.SearchSortByParam = {}));
/** Search sort order parameters. */
var SearchSortOrderParam;
(function (SearchSortOrderParam) {
    SearchSortOrderParam["Asc"] = "asc";
    SearchSortOrderParam["Desc"] = "desc";
})(SearchSortOrderParam = exports.SearchSortOrderParam || (exports.SearchSortOrderParam = {}));
/** The object. */
var SelectorObject;
(function (SelectorObject) {
    SelectorObject["Actor"] = "actor";
    SelectorObject["Target"] = "target";
})(SelectorObject = exports.SelectorObject || (exports.SelectorObject = {}));
var SendNotificationType;
(function (SendNotificationType) {
    SendNotificationType["DevrevReminder"] = "devrev_reminder";
    SendNotificationType["GenericNotification"] = "generic_notification";
})(SendNotificationType = exports.SendNotificationType || (exports.SendNotificationType = {}));
/** The billing frequency of the service plan. */
var ServicePlanBillingCycle;
(function (ServicePlanBillingCycle) {
    ServicePlanBillingCycle["Monthly"] = "monthly";
})(ServicePlanBillingCycle = exports.ServicePlanBillingCycle || (exports.ServicePlanBillingCycle = {}));
/**
 * The status of the service plan indicates its current state. If the
 * status is 'active,' it means the service plan items are in use and
 * billed every cycle. If the status is 'cancelled,' it signifies that the
 * service plan has been terminated and is no longer active or considered
 * for billing.
 */
var ServicePlanStatus;
(function (ServicePlanStatus) {
    ServicePlanStatus["Active"] = "active";
    ServicePlanStatus["Cancelled"] = "cancelled";
})(ServicePlanStatus = exports.ServicePlanStatus || (exports.ServicePlanStatus = {}));
/** Type of the created resource. */
var SetupResourceResourceType;
(function (SetupResourceResourceType) {
    SetupResourceResourceType["Tag"] = "tag";
    SetupResourceResourceType["User"] = "user";
})(SetupResourceResourceType = exports.SetupResourceResourceType || (exports.SetupResourceResourceType = {}));
/** Status of the signing document. */
var SignConfigStatus;
(function (SignConfigStatus) {
    SignConfigStatus["Declined"] = "declined";
    SignConfigStatus["Pending"] = "pending";
    SignConfigStatus["Signed"] = "signed";
    SignConfigStatus["Viewed"] = "viewed";
})(SignConfigStatus = exports.SignConfigStatus || (exports.SignConfigStatus = {}));
/** Type of the sign needed for the quote. */
var SignConfigType;
(function (SignConfigType) {
    SignConfigType["Esign"] = "esign";
    SignConfigType["EsignWithWetSignature"] = "esign_with_wet_signature";
    SignConfigType["ManualSign"] = "manual_sign";
    SignConfigType["NoSign"] = "no_sign";
})(SignConfigType = exports.SignConfigType || (exports.SignConfigType = {}));
/**
 * The attribute indicates the type of billing mode for license-based
 * SKUs. 'Committed' indicates a chargeable quantity is specified by
 * DevOrg admin regardless actual license assignments to users. Customers
 * are billed for the committed quantity configured. 'Consumed' indicates
 * that customers are billed based on the actual consumption of licenses
 * by users. eg. Build Starter License SKU provides entitlements to
 * consume Build App, with maximum limit of licenses = 5. If billing_mode
 * = Committed and committed quantity = 3, customers monthly invoices will
 * always contain a charge for 3 licenses, even if number of actual
 * licenses assigned to users is < 3. If billing_mode = Consumed and
 * used_quantity = 4, customers monthly invoices will contain a charge for
 * 4 licenses, which is based on actual license to user assignments.
 */
var SkuBillingMode;
(function (SkuBillingMode) {
    SkuBillingMode["Committed"] = "committed";
    SkuBillingMode["Consumed"] = "consumed";
})(SkuBillingMode = exports.SkuBillingMode || (exports.SkuBillingMode = {}));
/**
 * Current state of the SKU. A SKU is visible to RevOs only when it is
 * released.
 */
var SkuState;
(function (SkuState) {
    SkuState["Approved"] = "approved";
    SkuState["Draft"] = "draft";
    SkuState["EndOfLife"] = "end_of_life";
    SkuState["EndOfSale"] = "end_of_sale";
    SkuState["Released"] = "released";
})(SkuState = exports.SkuState || (exports.SkuState = {}));
/** The update status of the SKU. */
var SkuStatus;
(function (SkuStatus) {
    SkuStatus["CreateInProgress"] = "create_in_progress";
    SkuStatus["DeleteInProgress"] = "delete_in_progress";
    SkuStatus["Normal"] = "normal";
    SkuStatus["UpdateInProgress"] = "update_in_progress";
})(SkuStatus = exports.SkuStatus || (exports.SkuStatus = {}));
/** It defines the type of SKU. */
var SkuType;
(function (SkuType) {
    SkuType["Consumption"] = "consumption";
    SkuType["ConsumptionAddon"] = "consumption_addon";
    SkuType["OneOffAddon"] = "one_off_addon";
    SkuType["OneOffCharge"] = "one_off_charge";
    SkuType["Subscription"] = "subscription";
    SkuType["SubscriptionAddon"] = "subscription_addon";
})(SkuType = exports.SkuType || (exports.SkuType = {}));
/**
 * The object types on which the SLA applies. An external SLA can apply to
 * multiple object types, but an internal SLA can apply to only one object
 * type.
 */
var SlaAppliesTo;
(function (SlaAppliesTo) {
    SlaAppliesTo["Conversation"] = "conversation";
    SlaAppliesTo["Issue"] = "issue";
    SlaAppliesTo["Ticket"] = "ticket";
})(SlaAppliesTo = exports.SlaAppliesTo || (exports.SlaAppliesTo = {}));
/**
 * Specifies the frequency of when the contractually-meaningful evaluation
 * of the SLA happens. The organization for their own information might
 * evaluate the various metrics contained in the policy as often as we can
 * make it feasible for them, but only the evaluation at the end of the
 * evaluation period triggers a compensation and needs to be shared with
 * the customer.
 */
var SlaEvaluationPeriod;
(function (SlaEvaluationPeriod) {
    SlaEvaluationPeriod["Monthly"] = "monthly";
    SlaEvaluationPeriod["Quarterly"] = "quarterly";
    SlaEvaluationPeriod["Weekly"] = "weekly";
    SlaEvaluationPeriod["Yearly"] = "yearly";
})(SlaEvaluationPeriod = exports.SlaEvaluationPeriod || (exports.SlaEvaluationPeriod = {}));
/** The item type for which the SLA policy applies. */
var SlaSelectorAppliesTo;
(function (SlaSelectorAppliesTo) {
    SlaSelectorAppliesTo["Conversation"] = "conversation";
    SlaSelectorAppliesTo["Issue"] = "issue";
    SlaSelectorAppliesTo["Ticket"] = "ticket";
})(SlaSelectorAppliesTo = exports.SlaSelectorAppliesTo || (exports.SlaSelectorAppliesTo = {}));
/** The SLA policy applies to conversations with these priorities. */
var SlaSelectorPriority;
(function (SlaSelectorPriority) {
    SlaSelectorPriority["P0"] = "p0";
    SlaSelectorPriority["P1"] = "p1";
    SlaSelectorPriority["P2"] = "p2";
})(SlaSelectorPriority = exports.SlaSelectorPriority || (exports.SlaSelectorPriority = {}));
/** The SLA policy applies to tickets with these severities. */
var SlaSelectorSeverity;
(function (SlaSelectorSeverity) {
    SlaSelectorSeverity["Blocker"] = "blocker";
    SlaSelectorSeverity["High"] = "high";
    SlaSelectorSeverity["Low"] = "low";
    SlaSelectorSeverity["Medium"] = "medium";
})(SlaSelectorSeverity = exports.SlaSelectorSeverity || (exports.SlaSelectorSeverity = {}));
/**
 * Specifies the logical operation to perform between the presence of the
 * specified tags, whether all or any are needed.
 */
var SlaSelectorTagOperation;
(function (SlaSelectorTagOperation) {
    SlaSelectorTagOperation["All"] = "all";
    SlaSelectorTagOperation["Any"] = "any";
    SlaSelectorTagOperation["NotAny"] = "not_any";
})(SlaSelectorTagOperation = exports.SlaSelectorTagOperation || (exports.SlaSelectorTagOperation = {}));
/**
 * Status determines how an item can be used. In 'draft' status an item
 * can be edited but can't be used. When 'published' the item can longer
 * be edited but can be used. 'Archived' is read-only.
 */
var SlaStatus;
(function (SlaStatus) {
    SlaStatus["Archived"] = "archived";
    SlaStatus["Draft"] = "draft";
    SlaStatus["Published"] = "published";
})(SlaStatus = exports.SlaStatus || (exports.SlaStatus = {}));
/**
 * The stage of the SLA. This is the metric stage which is closest to
 * breach.
 */
var SlaSummaryStage;
(function (SlaSummaryStage) {
    SlaSummaryStage["Breached"] = "breached";
    SlaSummaryStage["Completed"] = "completed";
    SlaSummaryStage["Paused"] = "paused";
    SlaSummaryStage["Running"] = "running";
    SlaSummaryStage["Warning"] = "warning";
})(SlaSummaryStage = exports.SlaSummaryStage || (exports.SlaSummaryStage = {}));
/** Type of the SLA. */
var SlaType;
(function (SlaType) {
    SlaType["External"] = "external";
    SlaType["Internal"] = "internal";
})(SlaType = exports.SlaType || (exports.SlaType = {}));
var SlasFilterAppliesToOperatorType;
(function (SlasFilterAppliesToOperatorType) {
    SlasFilterAppliesToOperatorType["All"] = "all";
    SlasFilterAppliesToOperatorType["Any"] = "any";
})(SlasFilterAppliesToOperatorType = exports.SlasFilterAppliesToOperatorType || (exports.SlasFilterAppliesToOperatorType = {}));
/**
 * Object type for which the slug is registered. It can be 'marketplace'
 * or 'marketplace_item'.
 */
var SlugRegistrationObjectType;
(function (SlugRegistrationObjectType) {
    SlugRegistrationObjectType["Marketplace"] = "marketplace";
    SlugRegistrationObjectType["MarketplaceItem"] = "marketplace_item";
})(SlugRegistrationObjectType = exports.SlugRegistrationObjectType || (exports.SlugRegistrationObjectType = {}));
/** State of the slug registration. */
var SlugRegistrationState;
(function (SlugRegistrationState) {
    SlugRegistrationState["Confirmed"] = "confirmed";
    SlugRegistrationState["Pending"] = "pending";
})(SlugRegistrationState = exports.SlugRegistrationState || (exports.SlugRegistrationState = {}));
/** State of the snap component. */
var SnapComponentState;
(function (SnapComponentState) {
    SnapComponentState["Active"] = "active";
    SnapComponentState["Inactive"] = "inactive";
})(SnapComponentState = exports.SnapComponentState || (exports.SnapComponentState = {}));
/** UI Surface associated with this snap component. */
var SnapComponentSurface;
(function (SnapComponentSurface) {
    SnapComponentSurface["CommentsRte"] = "comments_rte";
    SnapComponentSurface["Issue"] = "issue";
    SnapComponentSurface["Plug"] = "plug";
    SnapComponentSurface["SnapInConfiguration"] = "snap_in__configuration";
    SnapComponentSurface["Support"] = "support";
})(SnapComponentSurface = exports.SnapComponentSurface || (exports.SnapComponentSurface = {}));
/** The source type containing the code. */
var SnapInFunctionDefinitionSourceType;
(function (SnapInFunctionDefinitionSourceType) {
    SnapInFunctionDefinitionSourceType["Artifact"] = "artifact";
    SnapInFunctionDefinitionSourceType["Http"] = "http";
    SnapInFunctionDefinitionSourceType["PrebuiltLambda"] = "prebuilt_lambda";
})(SnapInFunctionDefinitionSourceType = exports.SnapInFunctionDefinitionSourceType || (exports.SnapInFunctionDefinitionSourceType = {}));
/** Deployment status of function. */
var SnapInFunctionDeploymentStatus;
(function (SnapInFunctionDeploymentStatus) {
    SnapInFunctionDeploymentStatus["BuildFailed"] = "build_failed";
    SnapInFunctionDeploymentStatus["BuildSucceeded"] = "build_succeeded";
    SnapInFunctionDeploymentStatus["Building"] = "building";
    SnapInFunctionDeploymentStatus["Deployed"] = "deployed";
    SnapInFunctionDeploymentStatus["Deploying"] = "deploying";
    SnapInFunctionDeploymentStatus["DeploymentFailed"] = "deployment_failed";
    SnapInFunctionDeploymentStatus["Deprecated"] = "deprecated";
    SnapInFunctionDeploymentStatus["NotStarted"] = "not_started";
})(SnapInFunctionDeploymentStatus = exports.SnapInFunctionDeploymentStatus || (exports.SnapInFunctionDeploymentStatus = {}));
/** Type of the input. */
var SnapInGlobalInputType;
(function (SnapInGlobalInputType) {
    SnapInGlobalInputType["Bool"] = "bool";
    SnapInGlobalInputType["Enum"] = "enum";
    SnapInGlobalInputType["EnumList"] = "enum_list";
    SnapInGlobalInputType["Float"] = "float";
    SnapInGlobalInputType["FloatList"] = "float_list";
    SnapInGlobalInputType["Integer"] = "integer";
    SnapInGlobalInputType["IntegerList"] = "integer_list";
    SnapInGlobalInputType["String"] = "string";
    SnapInGlobalInputType["StringList"] = "string_list";
})(SnapInGlobalInputType = exports.SnapInGlobalInputType || (exports.SnapInGlobalInputType = {}));
/** Type of snap-in hook. */
var SnapInHookReferenceType;
(function (SnapInHookReferenceType) {
    SnapInHookReferenceType["Activate"] = "activate";
    SnapInHookReferenceType["Deactivate"] = "deactivate";
    SnapInHookReferenceType["Delete"] = "delete";
    SnapInHookReferenceType["Update"] = "update";
    SnapInHookReferenceType["Upgrade"] = "upgrade";
    SnapInHookReferenceType["Validate"] = "validate";
})(SnapInHookReferenceType = exports.SnapInHookReferenceType || (exports.SnapInHookReferenceType = {}));
/** Kind defines the external system authentication method. */
var SnapInKeyringTypeKind;
(function (SnapInKeyringTypeKind) {
    SnapInKeyringTypeKind["Oauth2"] = "oauth2";
    SnapInKeyringTypeKind["Secret"] = "secret";
})(SnapInKeyringTypeKind = exports.SnapInKeyringTypeKind || (exports.SnapInKeyringTypeKind = {}));
/** Operation type. */
var SnapInOperationDefinitionType;
(function (SnapInOperationDefinitionType) {
    SnapInOperationDefinitionType["Action"] = "action";
    SnapInOperationDefinitionType["Control"] = "control";
    SnapInOperationDefinitionType["Trigger"] = "trigger";
})(SnapInOperationDefinitionType = exports.SnapInOperationDefinitionType || (exports.SnapInOperationDefinitionType = {}));
var SnapInPackagesLogLevelFilterLogLevelEnum;
(function (SnapInPackagesLogLevelFilterLogLevelEnum) {
    SnapInPackagesLogLevelFilterLogLevelEnum["Debug"] = "debug";
    SnapInPackagesLogLevelFilterLogLevelEnum["Error"] = "error";
    SnapInPackagesLogLevelFilterLogLevelEnum["Fatal"] = "fatal";
    SnapInPackagesLogLevelFilterLogLevelEnum["Info"] = "info";
    SnapInPackagesLogLevelFilterLogLevelEnum["None"] = "none";
    SnapInPackagesLogLevelFilterLogLevelEnum["Trace"] = "trace";
    SnapInPackagesLogLevelFilterLogLevelEnum["Warn"] = "warn";
})(SnapInPackagesLogLevelFilterLogLevelEnum = exports.SnapInPackagesLogLevelFilterLogLevelEnum || (exports.SnapInPackagesLogLevelFilterLogLevelEnum = {}));
var SnapInPackagesLogProcessFilterLogProcessEnum;
(function (SnapInPackagesLogProcessFilterLogProcessEnum) {
    SnapInPackagesLogProcessFilterLogProcessEnum["Build"] = "build";
    SnapInPackagesLogProcessFilterLogProcessEnum["Function"] = "function";
    SnapInPackagesLogProcessFilterLogProcessEnum["None"] = "none";
})(SnapInPackagesLogProcessFilterLogProcessEnum = exports.SnapInPackagesLogProcessFilterLogProcessEnum || (exports.SnapInPackagesLogProcessFilterLogProcessEnum = {}));
var SnapInPackagesLogSourceTypeFilterLogSourceTypeEnum;
(function (SnapInPackagesLogSourceTypeFilterLogSourceTypeEnum) {
    SnapInPackagesLogSourceTypeFilterLogSourceTypeEnum["Automation"] = "automation";
    SnapInPackagesLogSourceTypeFilterLogSourceTypeEnum["Command"] = "command";
    SnapInPackagesLogSourceTypeFilterLogSourceTypeEnum["EventSource"] = "event_source";
    SnapInPackagesLogSourceTypeFilterLogSourceTypeEnum["None"] = "none";
    SnapInPackagesLogSourceTypeFilterLogSourceTypeEnum["SnapKitAction"] = "snap_kit_action";
})(SnapInPackagesLogSourceTypeFilterLogSourceTypeEnum = exports.SnapInPackagesLogSourceTypeFilterLogSourceTypeEnum || (exports.SnapInPackagesLogSourceTypeFilterLogSourceTypeEnum = {}));
var SnapInPackagesLogTargetFilterLogTargetEnum;
(function (SnapInPackagesLogTargetFilterLogTargetEnum) {
    SnapInPackagesLogTargetFilterLogTargetEnum["DevOrg"] = "dev_org";
    SnapInPackagesLogTargetFilterLogTargetEnum["None"] = "none";
})(SnapInPackagesLogTargetFilterLogTargetEnum = exports.SnapInPackagesLogTargetFilterLogTargetEnum || (exports.SnapInPackagesLogTargetFilterLogTargetEnum = {}));
var SnapInPackagesLogsFetchResponseLogSummaryTotalTotalRelationEnum;
(function (SnapInPackagesLogsFetchResponseLogSummaryTotalTotalRelationEnum) {
    SnapInPackagesLogsFetchResponseLogSummaryTotalTotalRelationEnum["Eq"] = "eq";
    SnapInPackagesLogsFetchResponseLogSummaryTotalTotalRelationEnum["Gte"] = "gte";
})(SnapInPackagesLogsFetchResponseLogSummaryTotalTotalRelationEnum = exports.SnapInPackagesLogsFetchResponseLogSummaryTotalTotalRelationEnum || (exports.SnapInPackagesLogsFetchResponseLogSummaryTotalTotalRelationEnum = {}));
/** State of the snap-in preference for the user. */
var SnapInPreferencesState;
(function (SnapInPreferencesState) {
    SnapInPreferencesState["Active"] = "active";
    SnapInPreferencesState["Draft"] = "draft";
    SnapInPreferencesState["Inactive"] = "inactive";
})(SnapInPreferencesState = exports.SnapInPreferencesState || (exports.SnapInPreferencesState = {}));
/** UI Surface associated with this snap component. */
var SnapInSnapComponentSurface;
(function (SnapInSnapComponentSurface) {
    SnapInSnapComponentSurface["CommentsRte"] = "comments_rte";
    SnapInSnapComponentSurface["Issue"] = "issue";
    SnapInSnapComponentSurface["Plug"] = "plug";
    SnapInSnapComponentSurface["SnapInConfiguration"] = "snap_in__configuration";
    SnapInSnapComponentSurface["Support"] = "support";
})(SnapInSnapComponentSurface = exports.SnapInSnapComponentSurface || (exports.SnapInSnapComponentSurface = {}));
/** Deployment status of the snap-in. */
var SnapInStatus;
(function (SnapInStatus) {
    SnapInStatus["Activating"] = "activating";
    SnapInStatus["Active"] = "active";
    SnapInStatus["Deactivating"] = "deactivating";
    SnapInStatus["Draft"] = "draft";
    SnapInStatus["Error"] = "error";
    SnapInStatus["Inactive"] = "inactive";
    SnapInStatus["Installing"] = "installing";
})(SnapInStatus = exports.SnapInStatus || (exports.SnapInStatus = {}));
/** Snap-in package state. */
var SnapInVersionState;
(function (SnapInVersionState) {
    SnapInVersionState["BuildFailed"] = "build_failed";
    SnapInVersionState["Deploying"] = "deploying";
    SnapInVersionState["DeploymentFailed"] = "deployment_failed";
    SnapInVersionState["Draft"] = "draft";
    SnapInVersionState["Published"] = "published";
    SnapInVersionState["Ready"] = "ready";
})(SnapInVersionState = exports.SnapInVersionState || (exports.SnapInVersionState = {}));
var SnapInsSystemUpdateRequestStatus;
(function (SnapInsSystemUpdateRequestStatus) {
    SnapInsSystemUpdateRequestStatus["Active"] = "active";
    SnapInsSystemUpdateRequestStatus["Error"] = "error";
    SnapInsSystemUpdateRequestStatus["Inactive"] = "inactive";
})(SnapInsSystemUpdateRequestStatus = exports.SnapInsSystemUpdateRequestStatus || (exports.SnapInsSystemUpdateRequestStatus = {}));
/** Specifies how the action is defined. */
var SnapKitActionImplExecutorType;
(function (SnapKitActionImplExecutorType) {
    SnapKitActionImplExecutorType["Rego"] = "rego";
})(SnapKitActionImplExecutorType = exports.SnapKitActionImplExecutorType || (exports.SnapKitActionImplExecutorType = {}));
var SnapKitActionRequestElementTypeValue;
(function (SnapKitActionRequestElementTypeValue) {
    SnapKitActionRequestElementTypeValue["Button"] = "button";
    SnapKitActionRequestElementTypeValue["Form"] = "form";
})(SnapKitActionRequestElementTypeValue = exports.SnapKitActionRequestElementTypeValue || (exports.SnapKitActionRequestElementTypeValue = {}));
/** Channel associated with this snap-kit execution. */
var SnapKitExecutionChannel;
(function (SnapKitExecutionChannel) {
    SnapKitExecutionChannel["App"] = "app";
    SnapKitExecutionChannel["Email"] = "email";
})(SnapKitExecutionChannel = exports.SnapKitExecutionChannel || (exports.SnapKitExecutionChannel = {}));
var SnapType;
(function (SnapType) {
    SnapType["Flow"] = "flow";
    SnapType["SnapIn"] = "snap_in";
})(SnapType = exports.SnapType || (exports.SnapType = {}));
var SnapWidgetClickInteractionClickAction;
(function (SnapWidgetClickInteractionClickAction) {
    SnapWidgetClickInteractionClickAction["OpenPlugWidget"] = "open_plug_widget";
    SnapWidgetClickInteractionClickAction["OpenUrl"] = "open_url";
    SnapWidgetClickInteractionClickAction["StartConversation"] = "start_conversation";
})(SnapWidgetClickInteractionClickAction = exports.SnapWidgetClickInteractionClickAction || (exports.SnapWidgetClickInteractionClickAction = {}));
var SnapWidgetDisplayConditionConditionType;
(function (SnapWidgetDisplayConditionConditionType) {
    SnapWidgetDisplayConditionConditionType["DeviceType"] = "device_type";
    SnapWidgetDisplayConditionConditionType["PageUrl"] = "page_url";
    SnapWidgetDisplayConditionConditionType["TimeOnPage"] = "time_on_page";
    SnapWidgetDisplayConditionConditionType["ViewCount"] = "view_count";
})(SnapWidgetDisplayConditionConditionType = exports.SnapWidgetDisplayConditionConditionType || (exports.SnapWidgetDisplayConditionConditionType = {}));
var SnapWidgetDisplayExpressionOperandType;
(function (SnapWidgetDisplayExpressionOperandType) {
    SnapWidgetDisplayExpressionOperandType["Condition"] = "condition";
    SnapWidgetDisplayExpressionOperandType["Expression"] = "expression";
})(SnapWidgetDisplayExpressionOperandType = exports.SnapWidgetDisplayExpressionOperandType || (exports.SnapWidgetDisplayExpressionOperandType = {}));
var SnapWidgetInteractionType;
(function (SnapWidgetInteractionType) {
    SnapWidgetInteractionType["Click"] = "click";
    SnapWidgetInteractionType["EmailInput"] = "email_input";
})(SnapWidgetInteractionType = exports.SnapWidgetInteractionType || (exports.SnapWidgetInteractionType = {}));
/** Logical grouping of snap widgets. Useful for filtering. */
var SnapWidgetNamespace;
(function (SnapWidgetNamespace) {
    SnapWidgetNamespace["CommentSuggestionReplies"] = "comment_suggestion_replies";
    SnapWidgetNamespace["EmailPreview"] = "email_preview";
    SnapWidgetNamespace["LinkPreview"] = "link_preview";
    SnapWidgetNamespace["PlugNudge"] = "plug_nudge";
})(SnapWidgetNamespace = exports.SnapWidgetNamespace || (exports.SnapWidgetNamespace = {}));
/** The status of the snap widget. */
var SnapWidgetStatus;
(function (SnapWidgetStatus) {
    SnapWidgetStatus["Draft"] = "draft";
    SnapWidgetStatus["Published"] = "published";
})(SnapWidgetStatus = exports.SnapWidgetStatus || (exports.SnapWidgetStatus = {}));
var SnapWidgetType;
(function (SnapWidgetType) {
    SnapWidgetType["BannerNudge"] = "banner_nudge";
    SnapWidgetType["CommentSuggestedReplies"] = "comment_suggested_replies";
    SnapWidgetType["EmailPreview"] = "email_preview";
    SnapWidgetType["Embeddable"] = "embeddable";
    SnapWidgetType["LinkPreview"] = "link_preview";
    SnapWidgetType["PostNudge"] = "post_nudge";
    SnapWidgetType["SpotlightNudge"] = "spotlight_nudge";
})(SnapWidgetType = exports.SnapWidgetType || (exports.SnapWidgetType = {}));
var SnapWidgetsCreateRequestType;
(function (SnapWidgetsCreateRequestType) {
    SnapWidgetsCreateRequestType["BannerNudge"] = "banner_nudge";
    SnapWidgetsCreateRequestType["CommentSuggestedReplies"] = "comment_suggested_replies";
    SnapWidgetsCreateRequestType["EmailPreview"] = "email_preview";
    SnapWidgetsCreateRequestType["Embeddable"] = "embeddable";
    SnapWidgetsCreateRequestType["LinkPreview"] = "link_preview";
    SnapWidgetsCreateRequestType["PostNudge"] = "post_nudge";
    SnapWidgetsCreateRequestType["SpotlightNudge"] = "spotlight_nudge";
})(SnapWidgetsCreateRequestType = exports.SnapWidgetsCreateRequestType || (exports.SnapWidgetsCreateRequestType = {}));
var SnapWidgetsUpdateRequestType;
(function (SnapWidgetsUpdateRequestType) {
    SnapWidgetsUpdateRequestType["BannerNudge"] = "banner_nudge";
    SnapWidgetsUpdateRequestType["CommentSuggestedReplies"] = "comment_suggested_replies";
    SnapWidgetsUpdateRequestType["EmailPreview"] = "email_preview";
    SnapWidgetsUpdateRequestType["Embeddable"] = "embeddable";
    SnapWidgetsUpdateRequestType["LinkPreview"] = "link_preview";
    SnapWidgetsUpdateRequestType["PostNudge"] = "post_nudge";
    SnapWidgetsUpdateRequestType["SpotlightNudge"] = "spotlight_nudge";
})(SnapWidgetsUpdateRequestType = exports.SnapWidgetsUpdateRequestType || (exports.SnapWidgetsUpdateRequestType = {}));
/** Name of the social media platform. */
var SocialMediaLinkName;
(function (SocialMediaLinkName) {
    SocialMediaLinkName["Discord"] = "discord";
    SocialMediaLinkName["Fb"] = "fb";
    SocialMediaLinkName["Github"] = "github";
    SocialMediaLinkName["Instagram"] = "instagram";
    SocialMediaLinkName["Linkedin"] = "linkedin";
    SocialMediaLinkName["Medium"] = "medium";
    SocialMediaLinkName["Notion"] = "notion";
    SocialMediaLinkName["Reddit"] = "reddit";
    SocialMediaLinkName["Twitch"] = "twitch";
    SocialMediaLinkName["Twitter"] = "twitter";
    SocialMediaLinkName["Youtube"] = "youtube";
})(SocialMediaLinkName = exports.SocialMediaLinkName || (exports.SocialMediaLinkName = {}));
var SpotlightNudgeWidgetSpotlightNudgeType;
(function (SpotlightNudgeWidgetSpotlightNudgeType) {
    SpotlightNudgeWidgetSpotlightNudgeType["Native"] = "native";
    SpotlightNudgeWidgetSpotlightNudgeType["SnapKit"] = "snap_kit";
})(SpotlightNudgeWidgetSpotlightNudgeType = exports.SpotlightNudgeWidgetSpotlightNudgeType || (exports.SpotlightNudgeWidgetSpotlightNudgeType = {}));
/** Type of stage validation options when creating an object. */
var StageValidationOptionForCreate;
(function (StageValidationOptionForCreate) {
    StageValidationOptionForCreate["AllowNonStart"] = "allow_non_start";
})(StageValidationOptionForCreate = exports.StageValidationOptionForCreate || (exports.StageValidationOptionForCreate = {}));
/** Type of state validation options when updating the stage of an object. */
var StageValidationOptionForUpdate;
(function (StageValidationOptionForUpdate) {
    StageValidationOptionForUpdate["AllowInvalidTransition"] = "allow_invalid_transition";
})(StageValidationOptionForUpdate = exports.StageValidationOptionForUpdate || (exports.StageValidationOptionForUpdate = {}));
/** Type of validations to be enforced on stage while creating an object. */
var StageValidationTypeValue;
(function (StageValidationTypeValue) {
    StageValidationTypeValue["AllowDeprecatedAndNonStartStage"] = "allow_deprecated_and_non_start_stage";
    StageValidationTypeValue["Strict"] = "strict";
})(StageValidationTypeValue = exports.StageValidationTypeValue || (exports.StageValidationTypeValue = {}));
var StockSchemaFragmentsListRequestFilterPreset;
(function (StockSchemaFragmentsListRequestFilterPreset) {
    StockSchemaFragmentsListRequestFilterPreset["CustomizableTypesPreset"] = "customizable_types_preset";
    StockSchemaFragmentsListRequestFilterPreset["NoPreset"] = "no_preset";
})(StockSchemaFragmentsListRequestFilterPreset = exports.StockSchemaFragmentsListRequestFilterPreset || (exports.StockSchemaFragmentsListRequestFilterPreset = {}));
var StockSchemaFragmentsListRequestPrune;
(function (StockSchemaFragmentsListRequestPrune) {
    StockSchemaFragmentsListRequestPrune["CompositeSchemas"] = "composite_schemas";
    StockSchemaFragmentsListRequestPrune["Fields"] = "fields";
})(StockSchemaFragmentsListRequestPrune = exports.StockSchemaFragmentsListRequestPrune || (exports.StockSchemaFragmentsListRequestPrune = {}));
var SubtypeOpOperatorType;
(function (SubtypeOpOperatorType) {
    SubtypeOpOperatorType["All"] = "all";
    SubtypeOpOperatorType["Any"] = "any";
    SubtypeOpOperatorType["Empty"] = "empty";
    SubtypeOpOperatorType["NotAny"] = "not_any";
    SubtypeOpOperatorType["NotEmpty"] = "not_empty";
})(SubtypeOpOperatorType = exports.SubtypeOpOperatorType || (exports.SubtypeOpOperatorType = {}));
/** Target objects to search in. */
var SuggestObjectsObjectType;
(function (SuggestObjectsObjectType) {
    SuggestObjectsObjectType["Article"] = "article";
    SuggestObjectsObjectType["Conversation"] = "conversation";
    SuggestObjectsObjectType["Issue"] = "issue";
    SuggestObjectsObjectType["Question"] = "question";
    SuggestObjectsObjectType["Ticket"] = "ticket";
})(SuggestObjectsObjectType = exports.SuggestObjectsObjectType || (exports.SuggestObjectsObjectType = {}));
var SyncDirection;
(function (SyncDirection) {
    SyncDirection["FromDevrev"] = "from_devrev";
    SyncDirection["ToDevrev"] = "to_devrev";
})(SyncDirection = exports.SyncDirection || (exports.SyncDirection = {}));
/** The airdrop error record level. */
var SyncErrorRecordLevel;
(function (SyncErrorRecordLevel) {
    SyncErrorRecordLevel["Error"] = "error";
    SyncErrorRecordLevel["Warning"] = "warning";
})(SyncErrorRecordLevel = exports.SyncErrorRecordLevel || (exports.SyncErrorRecordLevel = {}));
/** Status of the sync for the object. */
var SyncInStatus;
(function (SyncInStatus) {
    SyncInStatus["Failed"] = "failed";
    SyncInStatus["Modified"] = "modified";
    SyncInStatus["Staged"] = "staged";
    SyncInStatus["Succeeded"] = "succeeded";
})(SyncInStatus = exports.SyncInStatus || (exports.SyncInStatus = {}));
/** Type of a automatic sync job. */
var SyncJobInternalsJobType;
(function (SyncJobInternalsJobType) {
    SyncJobInternalsJobType["Bidirectional"] = "bidirectional";
    SyncJobInternalsJobType["Unidirectional"] = "unidirectional";
})(SyncJobInternalsJobType = exports.SyncJobInternalsJobType || (exports.SyncJobInternalsJobType = {}));
/** The internal stage of the scheduled sync job. */
var SyncJobInternalsSyncJobStage;
(function (SyncJobInternalsSyncJobStage) {
    SyncJobInternalsSyncJobStage["FromDevrev"] = "from_devrev";
    SyncJobInternalsSyncJobStage["ToDevrev"] = "to_devrev";
})(SyncJobInternalsSyncJobStage = exports.SyncJobInternalsSyncJobStage || (exports.SyncJobInternalsSyncJobStage = {}));
var SyncMetadataFilterSyncInFilterStatus;
(function (SyncMetadataFilterSyncInFilterStatus) {
    SyncMetadataFilterSyncInFilterStatus["Failed"] = "failed";
    SyncMetadataFilterSyncInFilterStatus["Modified"] = "modified";
    SyncMetadataFilterSyncInFilterStatus["Staged"] = "staged";
    SyncMetadataFilterSyncInFilterStatus["Succeeded"] = "succeeded";
})(SyncMetadataFilterSyncInFilterStatus = exports.SyncMetadataFilterSyncInFilterStatus || (exports.SyncMetadataFilterSyncInFilterStatus = {}));
var SyncMetadataFilterSyncOutFilterStatus;
(function (SyncMetadataFilterSyncOutFilterStatus) {
    SyncMetadataFilterSyncOutFilterStatus["Failed"] = "failed";
    SyncMetadataFilterSyncOutFilterStatus["Succeeded"] = "succeeded";
})(SyncMetadataFilterSyncOutFilterStatus = exports.SyncMetadataFilterSyncOutFilterStatus || (exports.SyncMetadataFilterSyncOutFilterStatus = {}));
/** Status of the sync for the object. */
var SyncOutStatus;
(function (SyncOutStatus) {
    SyncOutStatus["Failed"] = "failed";
    SyncOutStatus["Succeeded"] = "succeeded";
})(SyncOutStatus = exports.SyncOutStatus || (exports.SyncOutStatus = {}));
/** The state of a sync progress. */
var SyncProgressState;
(function (SyncProgressState) {
    SyncProgressState["Completed"] = "completed";
    SyncProgressState["DeleteInProgress"] = "delete_in_progress";
    SyncProgressState["Deleted"] = "deleted";
    SyncProgressState["DeletionError"] = "deletion_error";
    SyncProgressState["ExtractAttachments"] = "extract_attachments";
    SyncProgressState["ExtractAttachmentsError"] = "extract_attachments_error";
    SyncProgressState["Extraction"] = "extraction";
    SyncProgressState["ExtractionError"] = "extraction_error";
    SyncProgressState["Loading"] = "loading";
    SyncProgressState["LoadingAttachments"] = "loading_attachments";
    SyncProgressState["LoadingAttachmentsError"] = "loading_attachments_error";
    SyncProgressState["LoadingError"] = "loading_error";
    SyncProgressState["RecipeDiscovery"] = "recipe_discovery";
    SyncProgressState["RecipeDiscoveryError"] = "recipe_discovery_error";
    SyncProgressState["RecipeDiscoveryWaitingForUserInput"] = "recipe_discovery_waiting_for_user_input";
    SyncProgressState["Starting"] = "starting";
    SyncProgressState["Transformation"] = "transformation";
    SyncProgressState["TransformationError"] = "transformation_error";
})(SyncProgressState = exports.SyncProgressState || (exports.SyncProgressState = {}));
/** The direction/mode of a sync run. */
var SyncRunMode;
(function (SyncRunMode) {
    SyncRunMode["Initial"] = "initial";
    SyncRunMode["SyncFromDevrev"] = "sync_from_devrev";
    SyncRunMode["SyncToDevrev"] = "sync_to_devrev";
})(SyncRunMode = exports.SyncRunMode || (exports.SyncRunMode = {}));
/** Describes how the sync was initiated. */
var SyncRunStartedBy;
(function (SyncRunStartedBy) {
    SyncRunStartedBy["PeriodicSyncScheduler"] = "periodic_sync_scheduler";
    SyncRunStartedBy["User"] = "user";
})(SyncRunStartedBy = exports.SyncRunStartedBy || (exports.SyncRunStartedBy = {}));
/** Available actions for a given SyncUnit. */
var SyncUnitAvailableActions;
(function (SyncUnitAvailableActions) {
    SyncUnitAvailableActions["Delete"] = "delete";
    SyncUnitAvailableActions["Start"] = "start";
    SyncUnitAvailableActions["SyncFromDevrev"] = "sync_from_devrev";
    SyncUnitAvailableActions["SyncToDevrev"] = "sync_to_devrev";
})(SyncUnitAvailableActions = exports.SyncUnitAvailableActions || (exports.SyncUnitAvailableActions = {}));
/** Required actions to continue sync. */
var SyncUnitRequiredActions;
(function (SyncUnitRequiredActions) {
    SyncUnitRequiredActions["ChangeConnection"] = "change_connection";
    SyncUnitRequiredActions["LowCodeDecision"] = "low_code_decision";
})(SyncUnitRequiredActions = exports.SyncUnitRequiredActions || (exports.SyncUnitRequiredActions = {}));
/** Type of sync preferences. */
var SyncUnitSyncType;
(function (SyncUnitSyncType) {
    SyncUnitSyncType["Manual"] = "manual";
    SyncUnitSyncType["Periodic"] = "periodic";
})(SyncUnitSyncType = exports.SyncUnitSyncType || (exports.SyncUnitSyncType = {}));
/** Table format of the dataset. */
var TableFormatValue;
(function (TableFormatValue) {
    TableFormatValue["Hive"] = "hive";
    TableFormatValue["Iceberg"] = "iceberg";
    TableFormatValue["Unknown"] = "unknown";
})(TableFormatValue = exports.TableFormatValue || (exports.TableFormatValue = {}));
/**
 * Whether the column should be locked to the left or right side of the
 * table.
 */
var TableVisualizationColumnLockPosition;
(function (TableVisualizationColumnLockPosition) {
    TableVisualizationColumnLockPosition["Left"] = "left";
    TableVisualizationColumnLockPosition["Right"] = "right";
})(TableVisualizationColumnLockPosition = exports.TableVisualizationColumnLockPosition || (exports.TableVisualizationColumnLockPosition = {}));
/**
 * Whether the column should be pinned to the left or right side of the
 * table.
 */
var TableVisualizationColumnPinPosition;
(function (TableVisualizationColumnPinPosition) {
    TableVisualizationColumnPinPosition["Left"] = "left";
    TableVisualizationColumnPinPosition["Right"] = "right";
})(TableVisualizationColumnPinPosition = exports.TableVisualizationColumnPinPosition || (exports.TableVisualizationColumnPinPosition = {}));
/** An enum to specify the behaviour of values for this tag. */
var TagType;
(function (TagType) {
    TagType["Annotation"] = "annotation";
    TagType["Tag"] = "tag";
})(TagType = exports.TagType || (exports.TagType = {}));
/** Type of target object for a link. */
var TargetObjectType;
(function (TargetObjectType) {
    TargetObjectType["Issue"] = "issue";
    TargetObjectType["Opportunity"] = "opportunity";
    TargetObjectType["Ticket"] = "ticket";
})(TargetObjectType = exports.TargetObjectType || (exports.TargetObjectType = {}));
/** Priority of the work based upon impact and criticality. */
var TaskPriority;
(function (TaskPriority) {
    TaskPriority["P0"] = "p0";
    TaskPriority["P1"] = "p1";
    TaskPriority["P2"] = "p2";
    TaskPriority["P3"] = "p3";
})(TaskPriority = exports.TaskPriority || (exports.TaskPriority = {}));
/** Whether the term is positively or negatively correlated with the score. */
var TermCorrelation;
(function (TermCorrelation) {
    TermCorrelation["Negative"] = "negative";
    TermCorrelation["Positive"] = "positive";
})(TermCorrelation = exports.TermCorrelation || (exports.TermCorrelation = {}));
/** It specifies the type of input expected for a particular term. */
var TermDetailInputType;
(function (TermDetailInputType) {
    TermDetailInputType["Date"] = "date";
    TermDetailInputType["Duration"] = "duration";
    TermDetailInputType["Number"] = "number";
    TermDetailInputType["Option"] = "option";
    TermDetailInputType["Text"] = "text";
})(TermDetailInputType = exports.TermDetailInputType || (exports.TermDetailInputType = {}));
/** Helps in determining the placement of the term in quote layout. */
var TermDetailSectionType;
(function (TermDetailSectionType) {
    TermDetailSectionType["Footer"] = "footer";
    TermDetailSectionType["HeaderLeft"] = "header_left";
    TermDetailSectionType["HeaderRight"] = "header_right";
    TermDetailSectionType["Introduction"] = "introduction";
    TermDetailSectionType["LogoLeft"] = "logo_left";
    TermDetailSectionType["LogoRight"] = "logo_right";
})(TermDetailSectionType = exports.TermDetailSectionType || (exports.TermDetailSectionType = {}));
/** Channels of the ticket. */
var TicketChannels;
(function (TicketChannels) {
    TicketChannels["Email"] = "email";
    TicketChannels["Plug"] = "plug";
    TicketChannels["Slack"] = "slack";
    TicketChannels["Twilio"] = "twilio";
})(TicketChannels = exports.TicketChannels || (exports.TicketChannels = {}));
/** Part types available for rev users to select from. */
var TicketCreationGroupPartTypesAvailableForRevUsers;
(function (TicketCreationGroupPartTypesAvailableForRevUsers) {
    TicketCreationGroupPartTypesAvailableForRevUsers["Capability"] = "capability";
    TicketCreationGroupPartTypesAvailableForRevUsers["Enhancement"] = "enhancement";
    TicketCreationGroupPartTypesAvailableForRevUsers["Feature"] = "feature";
    TicketCreationGroupPartTypesAvailableForRevUsers["Product"] = "product";
})(TicketCreationGroupPartTypesAvailableForRevUsers = exports.TicketCreationGroupPartTypesAvailableForRevUsers || (exports.TicketCreationGroupPartTypesAvailableForRevUsers = {}));
/** Severity of the ticket. */
var TicketSeverity;
(function (TicketSeverity) {
    TicketSeverity["Blocker"] = "blocker";
    TicketSeverity["High"] = "high";
    TicketSeverity["Low"] = "low";
    TicketSeverity["Medium"] = "medium";
})(TicketSeverity = exports.TicketSeverity || (exports.TicketSeverity = {}));
/** The type of the body to use for the comment. */
var TimelineCommentBodyType;
(function (TimelineCommentBodyType) {
    TimelineCommentBodyType["SnapKit"] = "snap_kit";
    TimelineCommentBodyType["SnapWidget"] = "snap_widget";
    TimelineCommentBodyType["Text"] = "text";
})(TimelineCommentBodyType = exports.TimelineCommentBodyType || (exports.TimelineCommentBodyType = {}));
/** Describes collections of timeline entries. */
var TimelineEntriesCollection;
(function (TimelineEntriesCollection) {
    TimelineEntriesCollection["Comments"] = "comments";
    TimelineEntriesCollection["Discussions"] = "discussions";
    TimelineEntriesCollection["Events"] = "events";
})(TimelineEntriesCollection = exports.TimelineEntriesCollection || (exports.TimelineEntriesCollection = {}));
var TimelineEntriesCreateRequestTimelineChangeEventChangeEventType;
(function (TimelineEntriesCreateRequestTimelineChangeEventChangeEventType) {
    TimelineEntriesCreateRequestTimelineChangeEventChangeEventType["MicroflowAction"] = "microflow_action";
})(TimelineEntriesCreateRequestTimelineChangeEventChangeEventType = exports.TimelineEntriesCreateRequestTimelineChangeEventChangeEventType || (exports.TimelineEntriesCreateRequestTimelineChangeEventChangeEventType = {}));
var TimelineEntriesCreateRequestType;
(function (TimelineEntriesCreateRequestType) {
    TimelineEntriesCreateRequestType["TimelineChangeEvent"] = "timeline_change_event";
    TimelineEntriesCreateRequestType["TimelineComment"] = "timeline_comment";
})(TimelineEntriesCreateRequestType = exports.TimelineEntriesCreateRequestType || (exports.TimelineEntriesCreateRequestType = {}));
var TimelineEntriesUpdateRequestType;
(function (TimelineEntriesUpdateRequestType) {
    TimelineEntriesUpdateRequestType["TimelineComment"] = "timeline_comment";
})(TimelineEntriesUpdateRequestType = exports.TimelineEntriesUpdateRequestType || (exports.TimelineEntriesUpdateRequestType = {}));
/** The collections that the timeline entry belongs to. */
var TimelineEntryCollection;
(function (TimelineEntryCollection) {
    TimelineEntryCollection["Discussions"] = "discussions";
    TimelineEntryCollection["Events"] = "events";
})(TimelineEntryCollection = exports.TimelineEntryCollection || (exports.TimelineEntryCollection = {}));
/** The type of object that the Timeline entry belongs to. */
var TimelineEntryObjectType;
(function (TimelineEntryObjectType) {
    TimelineEntryObjectType["Account"] = "account";
    TimelineEntryObjectType["Article"] = "article";
    TimelineEntryObjectType["Capability"] = "capability";
    TimelineEntryObjectType["Channel"] = "channel";
    TimelineEntryObjectType["CodeChange"] = "code_change";
    TimelineEntryObjectType["Component"] = "component";
    TimelineEntryObjectType["Conversation"] = "conversation";
    TimelineEntryObjectType["CustomPart"] = "custom_part";
    TimelineEntryObjectType["CustomWork"] = "custom_work";
    TimelineEntryObjectType["Dataset"] = "dataset";
    TimelineEntryObjectType["Engagement"] = "engagement";
    TimelineEntryObjectType["Enhancement"] = "enhancement";
    TimelineEntryObjectType["Feature"] = "feature";
    TimelineEntryObjectType["Flow"] = "flow";
    TimelineEntryObjectType["Incident"] = "incident";
    TimelineEntryObjectType["Interaction"] = "interaction";
    TimelineEntryObjectType["Invoice"] = "invoice";
    TimelineEntryObjectType["Issue"] = "issue";
    TimelineEntryObjectType["Keyring"] = "keyring";
    TimelineEntryObjectType["Linkable"] = "linkable";
    TimelineEntryObjectType["MarketplaceSubmission"] = "marketplace_submission";
    TimelineEntryObjectType["Meeting"] = "meeting";
    TimelineEntryObjectType["Microservice"] = "microservice";
    TimelineEntryObjectType["OasisData"] = "oasis_data";
    TimelineEntryObjectType["Opportunity"] = "opportunity";
    TimelineEntryObjectType["Product"] = "product";
    TimelineEntryObjectType["Project"] = "project";
    TimelineEntryObjectType["Quote"] = "quote";
    TimelineEntryObjectType["RevOrg"] = "rev_org";
    TimelineEntryObjectType["RevUser"] = "rev_user";
    TimelineEntryObjectType["Runnable"] = "runnable";
    TimelineEntryObjectType["SnapIn"] = "snap_in";
    TimelineEntryObjectType["SyncUnit"] = "sync_unit";
    TimelineEntryObjectType["Task"] = "task";
    TimelineEntryObjectType["Ticket"] = "ticket";
    TimelineEntryObjectType["TimelineChangeEvent"] = "timeline_change_event";
    TimelineEntryObjectType["TimelineComment"] = "timeline_comment";
    TimelineEntryObjectType["TimelineHuddle"] = "timeline_huddle";
})(TimelineEntryObjectType = exports.TimelineEntryObjectType || (exports.TimelineEntryObjectType = {}));
/** Display panels for the Timeline entry. */
var TimelineEntryPanel;
(function (TimelineEntryPanel) {
    TimelineEntryPanel["CustomerChat"] = "customer_chat";
    TimelineEntryPanel["Discussions"] = "discussions";
    TimelineEntryPanel["Events"] = "events";
})(TimelineEntryPanel = exports.TimelineEntryPanel || (exports.TimelineEntryPanel = {}));
var TimelineEntryType;
(function (TimelineEntryType) {
    TimelineEntryType["TimelineChangeEvent"] = "timeline_change_event";
    TimelineEntryType["TimelineComment"] = "timeline_comment";
    TimelineEntryType["TimelineHuddle"] = "timeline_huddle";
})(TimelineEntryType = exports.TimelineEntryType || (exports.TimelineEntryType = {}));
/**
 * The visibility of the entry. If 'private', then the entry is only
 * visible to the creator, 'internal' is visible with the Dev
 * organization, 'external' is visible to the Dev organzation and Rev
 * users, and 'public' is visible to all. If not set, then the default
 * visibility is 'external'.
 */
var TimelineEntryVisibility;
(function (TimelineEntryVisibility) {
    TimelineEntryVisibility["External"] = "external";
    TimelineEntryVisibility["Internal"] = "internal";
    TimelineEntryVisibility["Private"] = "private";
    TimelineEntryVisibility["Public"] = "public";
})(TimelineEntryVisibility = exports.TimelineEntryVisibility || (exports.TimelineEntryVisibility = {}));
/** The type of the event. */
var TimelineEventType;
(function (TimelineEventType) {
    TimelineEventType["Annotated"] = "annotated";
    TimelineEventType["Created"] = "created";
    TimelineEventType["Deleted"] = "deleted";
    TimelineEventType["Linked"] = "linked";
    TimelineEventType["Updated"] = "updated";
})(TimelineEventType = exports.TimelineEventType || (exports.TimelineEventType = {}));
var TimelineHuddleStatusType;
(function (TimelineHuddleStatusType) {
    TimelineHuddleStatusType["Created"] = "created";
    TimelineHuddleStatusType["Ended"] = "ended";
    TimelineHuddleStatusType["Started"] = "started";
})(TimelineHuddleStatusType = exports.TimelineHuddleStatusType || (exports.TimelineHuddleStatusType = {}));
/**
 * Turing bot exit action when Turing is unable to deflect the
 * conversation.
 */
var TuringAnswersGroupExitAction;
(function (TuringAnswersGroupExitAction) {
    TuringAnswersGroupExitAction["CreateTicket"] = "create_ticket";
    TuringAnswersGroupExitAction["RouteConversation"] = "route_conversation";
})(TuringAnswersGroupExitAction = exports.TuringAnswersGroupExitAction || (exports.TuringAnswersGroupExitAction = {}));
/** Language preference for Turing Answers. */
var TuringAnswersGroupLanguage;
(function (TuringAnswersGroupLanguage) {
    TuringAnswersGroupLanguage["English"] = "english";
    TuringAnswersGroupLanguage["Spanish"] = "spanish";
})(TuringAnswersGroupLanguage = exports.TuringAnswersGroupLanguage || (exports.TuringAnswersGroupLanguage = {}));
var TuringRteRequestAction;
(function (TuringRteRequestAction) {
    TuringRteRequestAction["ChangeTone"] = "change_tone";
    TuringRteRequestAction["FixGrammar"] = "fix_grammar";
    TuringRteRequestAction["Lengthen"] = "lengthen";
    TuringRteRequestAction["Shorten"] = "shorten";
})(TuringRteRequestAction = exports.TuringRteRequestAction || (exports.TuringRteRequestAction = {}));
var TuringRteRequestChangeToneTone;
(function (TuringRteRequestChangeToneTone) {
    TuringRteRequestChangeToneTone["Casual"] = "casual";
    TuringRteRequestChangeToneTone["Friendly"] = "friendly";
    TuringRteRequestChangeToneTone["Professional"] = "professional";
})(TuringRteRequestChangeToneTone = exports.TuringRteRequestChangeToneTone || (exports.TuringRteRequestChangeToneTone = {}));
var TuringSourcesType;
(function (TuringSourcesType) {
    TuringSourcesType["Article"] = "article";
    TuringSourcesType["QuestionAnswer"] = "question_answer";
})(TuringSourcesType = exports.TuringSourcesType || (exports.TuringSourcesType = {}));
var TuringSpacebarResponseCommandNameValue;
(function (TuringSpacebarResponseCommandNameValue) {
    TuringSpacebarResponseCommandNameValue["Capi"] = "capi";
    TuringSpacebarResponseCommandNameValue["Grow"] = "grow";
    TuringSpacebarResponseCommandNameValue["SqlQueryBuilder"] = "sql_query_builder";
    TuringSpacebarResponseCommandNameValue["Widget"] = "widget";
})(TuringSpacebarResponseCommandNameValue = exports.TuringSpacebarResponseCommandNameValue || (exports.TuringSpacebarResponseCommandNameValue = {}));
/** Interface of interaction with Turing. */
var TuringSurface;
(function (TuringSurface) {
    TuringSurface["Conversation"] = "conversation";
    TuringSurface["Plug"] = "plug";
    TuringSurface["Portal"] = "portal";
    TuringSurface["Spacebar"] = "spacebar";
    TuringSurface["Unknown"] = "unknown";
    TuringSurface["Wedge"] = "wedge";
})(TuringSurface = exports.TuringSurface || (exports.TuringSurface = {}));
/** Field types for typeahead recommendation. */
var TypeAheadRequestedField;
(function (TypeAheadRequestedField) {
    TypeAheadRequestedField["Body"] = "body";
    TypeAheadRequestedField["Title"] = "title";
})(TypeAheadRequestedField = exports.TypeAheadRequestedField || (exports.TypeAheadRequestedField = {}));
/**
 * This defines the UOM unit type. For example, for 'number of video
 * calls', unit type will be a number.
 */
var UnitType;
(function (UnitType) {
    UnitType["Boolean"] = "boolean";
    UnitType["Number"] = "number";
})(UnitType = exports.UnitType || (exports.UnitType = {}));
/**
 * The granularity at which the metrics ingestion data is to be emitted
 * for the UOM.
 */
var UomMetricScope;
(function (UomMetricScope) {
    UomMetricScope["Org"] = "org";
    UomMetricScope["User"] = "user";
})(UomMetricScope = exports.UomMetricScope || (exports.UomMetricScope = {}));
/** User action types. */
var UserAction;
(function (UserAction) {
    UserAction["CreatePart"] = "create_part";
    UserAction["CreateWork"] = "create_work";
    UserAction["UpdatePart"] = "update_part";
    UserAction["UpdateWork"] = "update_work";
})(UserAction = exports.UserAction || (exports.UserAction = {}));
/** The latest type of the activity triggering the notification. */
var UserParticipationNotificationLatestActivityType;
(function (UserParticipationNotificationLatestActivityType) {
    UserParticipationNotificationLatestActivityType["Comment"] = "comment";
    UserParticipationNotificationLatestActivityType["Event"] = "event";
})(UserParticipationNotificationLatestActivityType = exports.UserParticipationNotificationLatestActivityType || (exports.UserParticipationNotificationLatestActivityType = {}));
/** App theme mode. */
var UserPreferencesThemeMode;
(function (UserPreferencesThemeMode) {
    UserPreferencesThemeMode["Auto"] = "auto";
    UserPreferencesThemeMode["Dark"] = "dark";
    UserPreferencesThemeMode["Light"] = "light";
})(UserPreferencesThemeMode = exports.UserPreferencesThemeMode || (exports.UserPreferencesThemeMode = {}));
var UserPresenceValue;
(function (UserPresenceValue) {
    UserPresenceValue["Offline"] = "offline";
    UserPresenceValue["Online"] = "online";
})(UserPresenceValue = exports.UserPresenceValue || (exports.UserPresenceValue = {}));
var UserPrivilegesRequestTargetType;
(function (UserPrivilegesRequestTargetType) {
    UserPrivilegesRequestTargetType["GroupMemberTargetInfo"] = "group_member_target_info";
    UserPrivilegesRequestTargetType["None"] = "none";
    UserPrivilegesRequestTargetType["TargetId"] = "target_id";
    UserPrivilegesRequestTargetType["TargetInfo"] = "target_info";
    UserPrivilegesRequestTargetType["TimelineTargetInfo"] = "timeline_target_info";
})(UserPrivilegesRequestTargetType = exports.UserPrivilegesRequestTargetType || (exports.UserPrivilegesRequestTargetType = {}));
/** Browser name associated with the user session. */
var UserSessionBrowserInfoBrowserName;
(function (UserSessionBrowserInfoBrowserName) {
    UserSessionBrowserInfoBrowserName["Brave"] = "brave";
    UserSessionBrowserInfoBrowserName["Chrome"] = "chrome";
    UserSessionBrowserInfoBrowserName["Edge"] = "edge";
    UserSessionBrowserInfoBrowserName["Firefox"] = "firefox";
    UserSessionBrowserInfoBrowserName["Opera"] = "opera";
    UserSessionBrowserInfoBrowserName["Other"] = "other";
    UserSessionBrowserInfoBrowserName["Safari"] = "safari";
})(UserSessionBrowserInfoBrowserName = exports.UserSessionBrowserInfoBrowserName || (exports.UserSessionBrowserInfoBrowserName = {}));
/** Operating system associated with the user session. */
var UserSessionBrowserInfoOperatingSystem;
(function (UserSessionBrowserInfoOperatingSystem) {
    UserSessionBrowserInfoOperatingSystem["Linux"] = "linux";
    UserSessionBrowserInfoOperatingSystem["Macos"] = "macos";
    UserSessionBrowserInfoOperatingSystem["Other"] = "other";
    UserSessionBrowserInfoOperatingSystem["Windows"] = "windows";
})(UserSessionBrowserInfoOperatingSystem = exports.UserSessionBrowserInfoOperatingSystem || (exports.UserSessionBrowserInfoOperatingSystem = {}));
/** State of the user. */
var UserState;
(function (UserState) {
    UserState["Active"] = "active";
    UserState["Connected"] = "connected";
    UserState["Deactivated"] = "deactivated";
    UserState["Deleted"] = "deleted";
    UserState["Locked"] = "locked";
    UserState["Shadow"] = "shadow";
    UserState["Unassigned"] = "unassigned";
})(UserState = exports.UserState || (exports.UserState = {}));
var UserType;
(function (UserType) {
    UserType["DevUser"] = "dev_user";
    UserType["DevrevProfile"] = "devrev_profile";
    UserType["RevUser"] = "rev_user";
    UserType["ServiceAccount"] = "service_account";
    UserType["SysUser"] = "sys_user";
})(UserType = exports.UserType || (exports.UserType = {}));
var VertexV2ObjectType;
(function (VertexV2ObjectType) {
    VertexV2ObjectType["Capability"] = "capability";
    VertexV2ObjectType["CustomPart"] = "custom_part";
    VertexV2ObjectType["Enhancement"] = "enhancement";
    VertexV2ObjectType["Feature"] = "feature";
    VertexV2ObjectType["Linkable"] = "linkable";
    VertexV2ObjectType["Product"] = "product";
    VertexV2ObjectType["Runnable"] = "runnable";
})(VertexV2ObjectType = exports.VertexV2ObjectType || (exports.VertexV2ObjectType = {}));
/** View type of vista/vista_group_item. */
var ViewType;
(function (ViewType) {
    ViewType["ListView"] = "list_view";
    ViewType["TimelineView"] = "timeline_view";
})(ViewType = exports.ViewType || (exports.ViewType = {}));
/** Type of DevRev object for which the vista group item is applicable. */
var VistaGroupItemGroupObjectType;
(function (VistaGroupItemGroupObjectType) {
    VistaGroupItemGroupObjectType["Conversation"] = "conversation";
    VistaGroupItemGroupObjectType["Part"] = "part";
    VistaGroupItemGroupObjectType["Work"] = "work";
})(VistaGroupItemGroupObjectType = exports.VistaGroupItemGroupObjectType || (exports.VistaGroupItemGroupObjectType = {}));
/** Defines the state of the group item. */
var VistaGroupItemState;
(function (VistaGroupItemState) {
    VistaGroupItemState["Active"] = "active";
    VistaGroupItemState["Completed"] = "completed";
    VistaGroupItemState["Planned"] = "planned";
})(VistaGroupItemState = exports.VistaGroupItemState || (exports.VistaGroupItemState = {}));
/** Type of the group object. */
var VistaGroupItemType;
(function (VistaGroupItemType) {
    VistaGroupItemType["Curated"] = "curated";
    VistaGroupItemType["Dynamic"] = "dynamic";
})(VistaGroupItemType = exports.VistaGroupItemType || (exports.VistaGroupItemType = {}));
/** View type of vista group item. */
var VistaGroupItemViewType;
(function (VistaGroupItemViewType) {
    VistaGroupItemViewType["ListView"] = "list_view";
    VistaGroupItemViewType["TimelineView"] = "timeline_view";
})(VistaGroupItemViewType = exports.VistaGroupItemViewType || (exports.VistaGroupItemViewType = {}));
/** Type of reference point positions. */
var VistaReferencePointPositionType;
(function (VistaReferencePointPositionType) {
    VistaReferencePointPositionType["After"] = "after";
    VistaReferencePointPositionType["Before"] = "before";
    VistaReferencePointPositionType["Bottom"] = "bottom";
    VistaReferencePointPositionType["Top"] = "top";
})(VistaReferencePointPositionType = exports.VistaReferencePointPositionType || (exports.VistaReferencePointPositionType = {}));
/** Type of vista object. */
var VistaType;
(function (VistaType) {
    VistaType["Curated"] = "curated";
    VistaType["Dynamic"] = "dynamic";
    VistaType["Grouped"] = "grouped";
})(VistaType = exports.VistaType || (exports.VistaType = {}));
var VistasFilterFlavorOperatorType;
(function (VistasFilterFlavorOperatorType) {
    VistasFilterFlavorOperatorType["Any"] = "any";
    VistasFilterFlavorOperatorType["NotAny"] = "not_any";
    VistasFilterFlavorOperatorType["NotNull"] = "not_null";
    VistasFilterFlavorOperatorType["Null"] = "null";
})(VistasFilterFlavorOperatorType = exports.VistasFilterFlavorOperatorType || (exports.VistasFilterFlavorOperatorType = {}));
/** The type of the color. */
var VisualizationAxisColorType;
(function (VisualizationAxisColorType) {
    VisualizationAxisColorType["KeyLookup"] = "key_lookup";
    VisualizationAxisColorType["Static"] = "static";
})(VisualizationAxisColorType = exports.VisualizationAxisColorType || (exports.VisualizationAxisColorType = {}));
/** Describes the types of watch events present on an object. */
var WatchEvent;
(function (WatchEvent) {
    WatchEvent["Comments"] = "comments";
    WatchEvent["Mentions"] = "mentions";
    WatchEvent["Updates"] = "updates";
})(WatchEvent = exports.WatchEvent || (exports.WatchEvent = {}));
/** State of the web crawler job. */
var WebCrawlerJobState;
(function (WebCrawlerJobState) {
    WebCrawlerJobState["Aborted"] = "aborted";
    WebCrawlerJobState["Completed"] = "completed";
    WebCrawlerJobState["Running"] = "running";
    WebCrawlerJobState["Scheduled"] = "scheduled";
    WebCrawlerJobState["Suspended"] = "suspended";
})(WebCrawlerJobState = exports.WebCrawlerJobState || (exports.WebCrawlerJobState = {}));
var WebCrawlerJobsControlRequestAction;
(function (WebCrawlerJobsControlRequestAction) {
    WebCrawlerJobsControlRequestAction["Abort"] = "abort";
    WebCrawlerJobsControlRequestAction["Pause"] = "pause";
    WebCrawlerJobsControlRequestAction["Resume"] = "resume";
})(WebCrawlerJobsControlRequestAction = exports.WebCrawlerJobsControlRequestAction || (exports.WebCrawlerJobsControlRequestAction = {}));
/** The event types that the webhook will receive. */
var WebhookEventType;
(function (WebhookEventType) {
    WebhookEventType["AccountCreated"] = "account_created";
    WebhookEventType["AccountDeleted"] = "account_deleted";
    WebhookEventType["AccountUpdated"] = "account_updated";
    WebhookEventType["ArticleCreated"] = "article_created";
    WebhookEventType["ArticleDeleted"] = "article_deleted";
    WebhookEventType["ArticleUpdated"] = "article_updated";
    WebhookEventType["ArtifactCreated"] = "artifact_created";
    WebhookEventType["ArtifactDeleted"] = "artifact_deleted";
    WebhookEventType["ArtifactUpdated"] = "artifact_updated";
    WebhookEventType["ChatCreated"] = "chat_created";
    WebhookEventType["ChatDeleted"] = "chat_deleted";
    WebhookEventType["ChatUpdated"] = "chat_updated";
    WebhookEventType["CommandCreated"] = "command_created";
    WebhookEventType["CommandDeleted"] = "command_deleted";
    WebhookEventType["CommandUpdated"] = "command_updated";
    WebhookEventType["ConversationCreated"] = "conversation_created";
    WebhookEventType["ConversationDeleted"] = "conversation_deleted";
    WebhookEventType["ConversationUpdated"] = "conversation_updated";
    WebhookEventType["CreditCreated"] = "credit_created";
    WebhookEventType["CreditDeleted"] = "credit_deleted";
    WebhookEventType["CreditUpdated"] = "credit_updated";
    WebhookEventType["CustomSchemaFragmentCreated"] = "custom_schema_fragment_created";
    WebhookEventType["CustomSchemaFragmentDeleted"] = "custom_schema_fragment_deleted";
    WebhookEventType["CustomSchemaFragmentUpdated"] = "custom_schema_fragment_updated";
    WebhookEventType["CustomStageCreated"] = "custom_stage_created";
    WebhookEventType["CustomStageUpdated"] = "custom_stage_updated";
    WebhookEventType["CustomStateCreated"] = "custom_state_created";
    WebhookEventType["CustomStateUpdated"] = "custom_state_updated";
    WebhookEventType["DevUserCreated"] = "dev_user_created";
    WebhookEventType["DevUserDeleted"] = "dev_user_deleted";
    WebhookEventType["DevUserUpdated"] = "dev_user_updated";
    WebhookEventType["EngagementCreated"] = "engagement_created";
    WebhookEventType["EngagementDeleted"] = "engagement_deleted";
    WebhookEventType["EngagementUpdated"] = "engagement_updated";
    WebhookEventType["ExternalSyncUnitDiscovered"] = "external_sync_unit_discovered";
    WebhookEventType["FlowCreated"] = "flow_created";
    WebhookEventType["FlowDeleted"] = "flow_deleted";
    WebhookEventType["FlowUpdated"] = "flow_updated";
    WebhookEventType["IncidentCreated"] = "incident_created";
    WebhookEventType["IncidentDeleted"] = "incident_deleted";
    WebhookEventType["IncidentUpdated"] = "incident_updated";
    WebhookEventType["InvoiceCreated"] = "invoice_created";
    WebhookEventType["InvoiceDeleted"] = "invoice_deleted";
    WebhookEventType["InvoiceUpdated"] = "invoice_updated";
    WebhookEventType["JobCreated"] = "job_created";
    WebhookEventType["JobDeleted"] = "job_deleted";
    WebhookEventType["JobUpdated"] = "job_updated";
    WebhookEventType["LinkCreated"] = "link_created";
    WebhookEventType["LinkDeleted"] = "link_deleted";
    WebhookEventType["LinkUpdated"] = "link_updated";
    WebhookEventType["MarketplaceItemCreated"] = "marketplace_item_created";
    WebhookEventType["MarketplaceItemDeleted"] = "marketplace_item_deleted";
    WebhookEventType["MarketplaceItemUpdated"] = "marketplace_item_updated";
    WebhookEventType["MeetingCreated"] = "meeting_created";
    WebhookEventType["MeetingDeleted"] = "meeting_deleted";
    WebhookEventType["MeetingUpdated"] = "meeting_updated";
    WebhookEventType["NotificationCreated"] = "notification_created";
    WebhookEventType["NotificationDeleted"] = "notification_deleted";
    WebhookEventType["NotificationUpdated"] = "notification_updated";
    WebhookEventType["PartCreated"] = "part_created";
    WebhookEventType["PartDeleted"] = "part_deleted";
    WebhookEventType["PartUpdated"] = "part_updated";
    WebhookEventType["QuoteCreated"] = "quote_created";
    WebhookEventType["QuoteDeleted"] = "quote_deleted";
    WebhookEventType["QuoteUpdated"] = "quote_updated";
    WebhookEventType["RevOrgCreated"] = "rev_org_created";
    WebhookEventType["RevOrgDeleted"] = "rev_org_deleted";
    WebhookEventType["RevOrgUpdated"] = "rev_org_updated";
    WebhookEventType["RevUserCreated"] = "rev_user_created";
    WebhookEventType["RevUserDeleted"] = "rev_user_deleted";
    WebhookEventType["RevUserUpdated"] = "rev_user_updated";
    WebhookEventType["SlaTrackerCreated"] = "sla_tracker_created";
    WebhookEventType["SlaTrackerDeleted"] = "sla_tracker_deleted";
    WebhookEventType["SlaTrackerUpdated"] = "sla_tracker_updated";
    WebhookEventType["SnapInCreated"] = "snap_in_created";
    WebhookEventType["SnapInDeleted"] = "snap_in_deleted";
    WebhookEventType["SnapInUpdated"] = "snap_in_updated";
    WebhookEventType["StageDiagramCreated"] = "stage_diagram_created";
    WebhookEventType["StageDiagramUpdated"] = "stage_diagram_updated";
    WebhookEventType["StockSchemaFragmentUpdated"] = "stock_schema_fragment_updated";
    WebhookEventType["SurveyResponseCreated"] = "survey_response_created";
    WebhookEventType["SurveyResponseDeleted"] = "survey_response_deleted";
    WebhookEventType["SurveyResponseUpdated"] = "survey_response_updated";
    WebhookEventType["SyncUnitCreated"] = "sync_unit_created";
    WebhookEventType["SyncUnitDeleted"] = "sync_unit_deleted";
    WebhookEventType["SyncUnitUpdated"] = "sync_unit_updated";
    WebhookEventType["TagCreated"] = "tag_created";
    WebhookEventType["TagDeleted"] = "tag_deleted";
    WebhookEventType["TagUpdated"] = "tag_updated";
    WebhookEventType["TimelineEntryCreated"] = "timeline_entry_created";
    WebhookEventType["TimelineEntryDeleted"] = "timeline_entry_deleted";
    WebhookEventType["TimelineEntryUpdated"] = "timeline_entry_updated";
    WebhookEventType["Verify"] = "verify";
    WebhookEventType["VistaCreated"] = "vista_created";
    WebhookEventType["VistaDeleted"] = "vista_deleted";
    WebhookEventType["VistaGroupItemCreated"] = "vista_group_item_created";
    WebhookEventType["VistaGroupItemDeleted"] = "vista_group_item_deleted";
    WebhookEventType["VistaGroupItemUpdated"] = "vista_group_item_updated";
    WebhookEventType["VistaUpdated"] = "vista_updated";
    WebhookEventType["WebhookCreated"] = "webhook_created";
    WebhookEventType["WebhookDeleted"] = "webhook_deleted";
    WebhookEventType["WebhookUpdated"] = "webhook_updated";
    WebhookEventType["WorkCreated"] = "work_created";
    WebhookEventType["WorkDeleted"] = "work_deleted";
    WebhookEventType["WorkUpdated"] = "work_updated";
})(WebhookEventType = exports.WebhookEventType || (exports.WebhookEventType = {}));
/** The status of the webhook. */
var WebhookStatus;
(function (WebhookStatus) {
    WebhookStatus["Active"] = "active";
    WebhookStatus["Inactive"] = "inactive";
    WebhookStatus["Unverified"] = "unverified";
})(WebhookStatus = exports.WebhookStatus || (exports.WebhookStatus = {}));
/** The action to update the webhook's status. */
var WebhooksUpdateAction;
(function (WebhooksUpdateAction) {
    WebhooksUpdateAction["Activate"] = "activate";
    WebhooksUpdateAction["Deactivate"] = "deactivate";
})(WebhooksUpdateAction = exports.WebhooksUpdateAction || (exports.WebhooksUpdateAction = {}));
/** The type of the column. */
var WidgetColumnProjectionType;
(function (WidgetColumnProjectionType) {
    WidgetColumnProjectionType["CustomField"] = "custom_field";
    WidgetColumnProjectionType["Native"] = "native";
})(WidgetColumnProjectionType = exports.WidgetColumnProjectionType || (exports.WidgetColumnProjectionType = {}));
/** The type of the data source. */
var WidgetDataSourceType;
(function (WidgetDataSourceType) {
    WidgetDataSourceType["DataSource"] = "data_source";
    WidgetDataSourceType["ExternalDataSource"] = "external_data_source";
    WidgetDataSourceType["Oasis"] = "oasis";
})(WidgetDataSourceType = exports.WidgetDataSourceType || (exports.WidgetDataSourceType = {}));
/** Comparison operator for the display condition. */
var WidgetDeviceTypeDisplayConditionOperator;
(function (WidgetDeviceTypeDisplayConditionOperator) {
    WidgetDeviceTypeDisplayConditionOperator["Eq"] = "eq";
    WidgetDeviceTypeDisplayConditionOperator["Neq"] = "neq";
})(WidgetDeviceTypeDisplayConditionOperator = exports.WidgetDeviceTypeDisplayConditionOperator || (exports.WidgetDeviceTypeDisplayConditionOperator = {}));
/** The value against which the device type will be compared */
var WidgetDeviceTypeDisplayConditionValue;
(function (WidgetDeviceTypeDisplayConditionValue) {
    WidgetDeviceTypeDisplayConditionValue["DesktopWeb"] = "desktop_web";
    WidgetDeviceTypeDisplayConditionValue["MobileWeb"] = "mobile_web";
})(WidgetDeviceTypeDisplayConditionValue = exports.WidgetDeviceTypeDisplayConditionValue || (exports.WidgetDeviceTypeDisplayConditionValue = {}));
/** Logical operator to use. */
var WidgetDisplayExpressionOperator;
(function (WidgetDisplayExpressionOperator) {
    WidgetDisplayExpressionOperator["And"] = "and";
    WidgetDisplayExpressionOperator["Or"] = "or";
})(WidgetDisplayExpressionOperator = exports.WidgetDisplayExpressionOperator || (exports.WidgetDisplayExpressionOperator = {}));
/** Comparison operator for the display condition. */
var WidgetPageUrlDisplayConditionOperator;
(function (WidgetPageUrlDisplayConditionOperator) {
    WidgetPageUrlDisplayConditionOperator["Contains"] = "contains";
    WidgetPageUrlDisplayConditionOperator["Eq"] = "eq";
    WidgetPageUrlDisplayConditionOperator["Neq"] = "neq";
    WidgetPageUrlDisplayConditionOperator["NotContains"] = "not_contains";
})(WidgetPageUrlDisplayConditionOperator = exports.WidgetPageUrlDisplayConditionOperator || (exports.WidgetPageUrlDisplayConditionOperator = {}));
/** The direction of the sort. */
var WidgetQueryOrderByDirection;
(function (WidgetQueryOrderByDirection) {
    WidgetQueryOrderByDirection["Ascending"] = "ascending";
    WidgetQueryOrderByDirection["Descending"] = "descending";
})(WidgetQueryOrderByDirection = exports.WidgetQueryOrderByDirection || (exports.WidgetQueryOrderByDirection = {}));
/** Comparison operator for the display condition. */
var WidgetTimeOnPageDisplayConditionOperator;
(function (WidgetTimeOnPageDisplayConditionOperator) {
    WidgetTimeOnPageDisplayConditionOperator["Gte"] = "gte";
})(WidgetTimeOnPageDisplayConditionOperator = exports.WidgetTimeOnPageDisplayConditionOperator || (exports.WidgetTimeOnPageDisplayConditionOperator = {}));
/** Comparison operator for the display condition. */
var WidgetViewCountDisplayConditionOperator;
(function (WidgetViewCountDisplayConditionOperator) {
    WidgetViewCountDisplayConditionOperator["Lte"] = "lte";
})(WidgetViewCountDisplayConditionOperator = exports.WidgetViewCountDisplayConditionOperator || (exports.WidgetViewCountDisplayConditionOperator = {}));
/** The type of the visualization, such as line, bar, pie, etc. */
var WidgetVisualizationType;
(function (WidgetVisualizationType) {
    WidgetVisualizationType["Bar"] = "bar";
    WidgetVisualizationType["Column"] = "column";
    WidgetVisualizationType["Donut"] = "donut";
    WidgetVisualizationType["Line"] = "line";
    WidgetVisualizationType["Metric"] = "metric";
    WidgetVisualizationType["Pie"] = "pie";
    WidgetVisualizationType["Table"] = "table";
})(WidgetVisualizationType = exports.WidgetVisualizationType || (exports.WidgetVisualizationType = {}));
var WorkType;
(function (WorkType) {
    WorkType["CustomWork"] = "custom_work";
    WorkType["Issue"] = "issue";
    WorkType["Opportunity"] = "opportunity";
    WorkType["Project"] = "project";
    WorkType["Task"] = "task";
    WorkType["Ticket"] = "ticket";
})(WorkType = exports.WorkType || (exports.WorkType = {}));
/** Status of the workflow run. */
var WorkflowRunStatus;
(function (WorkflowRunStatus) {
    WorkflowRunStatus["Canceled"] = "canceled";
    WorkflowRunStatus["Completed"] = "completed";
    WorkflowRunStatus["Errored"] = "errored";
    WorkflowRunStatus["Running"] = "running";
    WorkflowRunStatus["Waiting"] = "waiting";
})(WorkflowRunStatus = exports.WorkflowRunStatus || (exports.WorkflowRunStatus = {}));
/** Status of the workflow. */
var WorkflowStatus;
(function (WorkflowStatus) {
    WorkflowStatus["Active"] = "active";
    WorkflowStatus["Draft"] = "draft";
    WorkflowStatus["Error"] = "error";
    WorkflowStatus["Paused"] = "paused";
    WorkflowStatus["Suspended"] = "suspended";
})(WorkflowStatus = exports.WorkflowStatus || (exports.WorkflowStatus = {}));
var WorksFilterCreatedByOperatorType;
(function (WorksFilterCreatedByOperatorType) {
    WorksFilterCreatedByOperatorType["Any"] = "any";
    WorksFilterCreatedByOperatorType["NotAny"] = "not_any";
})(WorksFilterCreatedByOperatorType = exports.WorksFilterCreatedByOperatorType || (exports.WorksFilterCreatedByOperatorType = {}));
var WorksFilterIssueAccountsOpOperatorType;
(function (WorksFilterIssueAccountsOpOperatorType) {
    WorksFilterIssueAccountsOpOperatorType["All"] = "all";
    WorksFilterIssueAccountsOpOperatorType["Any"] = "any";
    WorksFilterIssueAccountsOpOperatorType["Empty"] = "empty";
    WorksFilterIssueAccountsOpOperatorType["NotEmpty"] = "not_empty";
})(WorksFilterIssueAccountsOpOperatorType = exports.WorksFilterIssueAccountsOpOperatorType || (exports.WorksFilterIssueAccountsOpOperatorType = {}));
var WorksFilterIssueRevOrgsOpOperatorType;
(function (WorksFilterIssueRevOrgsOpOperatorType) {
    WorksFilterIssueRevOrgsOpOperatorType["All"] = "all";
    WorksFilterIssueRevOrgsOpOperatorType["Any"] = "any";
    WorksFilterIssueRevOrgsOpOperatorType["Empty"] = "empty";
    WorksFilterIssueRevOrgsOpOperatorType["NotEmpty"] = "not_empty";
})(WorksFilterIssueRevOrgsOpOperatorType = exports.WorksFilterIssueRevOrgsOpOperatorType || (exports.WorksFilterIssueRevOrgsOpOperatorType = {}));
var WorksFilterIssueSprintOpOperatorType;
(function (WorksFilterIssueSprintOpOperatorType) {
    WorksFilterIssueSprintOpOperatorType["Any"] = "any";
    WorksFilterIssueSprintOpOperatorType["Empty"] = "empty";
    WorksFilterIssueSprintOpOperatorType["NotEmpty"] = "not_empty";
})(WorksFilterIssueSprintOpOperatorType = exports.WorksFilterIssueSprintOpOperatorType || (exports.WorksFilterIssueSprintOpOperatorType = {}));
var WorksFilterLinkTargetObjectOperatorType;
(function (WorksFilterLinkTargetObjectOperatorType) {
    WorksFilterLinkTargetObjectOperatorType["Any"] = "any";
    WorksFilterLinkTargetObjectOperatorType["NotAny"] = "not_any";
})(WorksFilterLinkTargetObjectOperatorType = exports.WorksFilterLinkTargetObjectOperatorType || (exports.WorksFilterLinkTargetObjectOperatorType = {}));
var WorksFilterOpportunityContactsOpOperatorType;
(function (WorksFilterOpportunityContactsOpOperatorType) {
    WorksFilterOpportunityContactsOpOperatorType["All"] = "all";
    WorksFilterOpportunityContactsOpOperatorType["Any"] = "any";
    WorksFilterOpportunityContactsOpOperatorType["Empty"] = "empty";
    WorksFilterOpportunityContactsOpOperatorType["NotAny"] = "not_any";
    WorksFilterOpportunityContactsOpOperatorType["NotEmpty"] = "not_empty";
})(WorksFilterOpportunityContactsOpOperatorType = exports.WorksFilterOpportunityContactsOpOperatorType || (exports.WorksFilterOpportunityContactsOpOperatorType = {}));
var WorksFilterOwnedByOperatorType;
(function (WorksFilterOwnedByOperatorType) {
    WorksFilterOwnedByOperatorType["Any"] = "any";
    WorksFilterOwnedByOperatorType["NotAny"] = "not_any";
})(WorksFilterOwnedByOperatorType = exports.WorksFilterOwnedByOperatorType || (exports.WorksFilterOwnedByOperatorType = {}));
var WorksFilterReportedByOperatorType;
(function (WorksFilterReportedByOperatorType) {
    WorksFilterReportedByOperatorType["All"] = "all";
    WorksFilterReportedByOperatorType["Any"] = "any";
    WorksFilterReportedByOperatorType["Empty"] = "empty";
    WorksFilterReportedByOperatorType["NotAny"] = "not_any";
    WorksFilterReportedByOperatorType["NotEmpty"] = "not_empty";
})(WorksFilterReportedByOperatorType = exports.WorksFilterReportedByOperatorType || (exports.WorksFilterReportedByOperatorType = {}));
var WorksFilterTagIdsOperatorType;
(function (WorksFilterTagIdsOperatorType) {
    WorksFilterTagIdsOperatorType["All"] = "all";
    WorksFilterTagIdsOperatorType["Any"] = "any";
    WorksFilterTagIdsOperatorType["Empty"] = "empty";
    WorksFilterTagIdsOperatorType["NotAny"] = "not_any";
    WorksFilterTagIdsOperatorType["NotEmpty"] = "not_empty";
})(WorksFilterTagIdsOperatorType = exports.WorksFilterTagIdsOperatorType || (exports.WorksFilterTagIdsOperatorType = {}));
var WorksFilterTicketChannelsOperatorType;
(function (WorksFilterTicketChannelsOperatorType) {
    WorksFilterTicketChannelsOperatorType["All"] = "all";
    WorksFilterTicketChannelsOperatorType["Any"] = "any";
    WorksFilterTicketChannelsOperatorType["Empty"] = "empty";
    WorksFilterTicketChannelsOperatorType["NotEmpty"] = "not_empty";
})(WorksFilterTicketChannelsOperatorType = exports.WorksFilterTicketChannelsOperatorType || (exports.WorksFilterTicketChannelsOperatorType = {}));
var WorksFilterTicketGroupsOpOperatorType;
(function (WorksFilterTicketGroupsOpOperatorType) {
    WorksFilterTicketGroupsOpOperatorType["All"] = "all";
    WorksFilterTicketGroupsOpOperatorType["Any"] = "any";
    WorksFilterTicketGroupsOpOperatorType["Empty"] = "empty";
    WorksFilterTicketGroupsOpOperatorType["NotAny"] = "not_any";
    WorksFilterTicketGroupsOpOperatorType["NotEmpty"] = "not_empty";
})(WorksFilterTicketGroupsOpOperatorType = exports.WorksFilterTicketGroupsOpOperatorType || (exports.WorksFilterTicketGroupsOpOperatorType = {}));
var WorksFilterTicketRevOrgIDsOperatorType;
(function (WorksFilterTicketRevOrgIDsOperatorType) {
    WorksFilterTicketRevOrgIDsOperatorType["Any"] = "any";
    WorksFilterTicketRevOrgIDsOperatorType["Empty"] = "empty";
    WorksFilterTicketRevOrgIDsOperatorType["NotAny"] = "not_any";
    WorksFilterTicketRevOrgIDsOperatorType["NotEmpty"] = "not_empty";
})(WorksFilterTicketRevOrgIDsOperatorType = exports.WorksFilterTicketRevOrgIDsOperatorType || (exports.WorksFilterTicketRevOrgIDsOperatorType = {}));
/** Type of works vista group item. */
var WorksVistaGroupItemType;
(function (WorksVistaGroupItemType) {
    WorksVistaGroupItemType["Curated"] = "curated";
    WorksVistaGroupItemType["Dynamic"] = "dynamic";
})(WorksVistaGroupItemType = exports.WorksVistaGroupItemType || (exports.WorksVistaGroupItemType = {}));
const axios_1 = __importDefault(require("axios"));
var ContentType;
(function (ContentType) {
    ContentType["Json"] = "application/json";
    ContentType["FormData"] = "multipart/form-data";
    ContentType["UrlEncoded"] = "application/x-www-form-urlencoded";
    ContentType["Text"] = "text/plain";
})(ContentType = exports.ContentType || (exports.ContentType = {}));
class HttpClient {
    constructor(_a = {}) {
        var { securityWorker, secure, format } = _a, axiosConfig = __rest(_a, ["securityWorker", "secure", "format"]);
        this.securityData = null;
        this.setSecurityData = (data) => {
            this.securityData = data;
        };
        this.request = (_b) => __awaiter(this, void 0, void 0, function* () {
            var { secure, path, type, query, format, body } = _b, params = __rest(_b, ["secure", "path", "type", "query", "format", "body"]);
            const secureParams = ((typeof secure === 'boolean' ? secure : this.secure) &&
                this.securityWorker &&
                (yield this.securityWorker(this.securityData))) ||
                {};
            const requestParams = this.mergeRequestParams(params, secureParams);
            const responseFormat = format || this.format || undefined;
            if (type === ContentType.FormData &&
                body &&
                body !== null &&
                typeof body === 'object') {
                body = this.createFormData(body);
            }
            if (type === ContentType.Text &&
                body &&
                body !== null &&
                typeof body !== 'string') {
                body = JSON.stringify(body);
            }
            return this.instance.request(Object.assign(Object.assign({}, requestParams), { headers: Object.assign(Object.assign({}, (requestParams.headers || {})), (type && type !== ContentType.FormData
                    ? { 'Content-Type': type }
                    : {})), params: query, responseType: responseFormat, data: body, url: path }));
        });
        this.instance = axios_1.default.create(Object.assign(Object.assign({}, axiosConfig), { baseURL: axiosConfig.baseURL || '{protocol}://{hostname}' }));
        this.secure = secure;
        this.format = format;
        this.securityWorker = securityWorker;
    }
    mergeRequestParams(params1, params2) {
        const method = params1.method || (params2 && params2.method);
        return Object.assign(Object.assign(Object.assign(Object.assign({}, this.instance.defaults), params1), (params2 || {})), { headers: Object.assign(Object.assign(Object.assign({}, ((method &&
                this.instance.defaults.headers[method.toLowerCase()]) ||
                {})), (params1.headers || {})), ((params2 && params2.headers) || {})) });
    }
    stringifyFormItem(formItem) {
        if (typeof formItem === 'object' && formItem !== null) {
            return JSON.stringify(formItem);
        }
        else {
            return `${formItem}`;
        }
    }
    createFormData(input) {
        return Object.keys(input || {}).reduce((formData, key) => {
            const property = input[key];
            const propertyContent = property instanceof Array ? property : [property];
            for (const formItem of propertyContent) {
                const isFileType = formItem instanceof Blob || formItem instanceof File;
                formData.append(key, isFileType ? formItem : this.stringifyFormItem(formItem));
            }
            return formData;
        }, new FormData());
    }
}
exports.HttpClient = HttpClient;
/**
 * @title DevRev REST API
 * @version 2022-10-20
 * @baseUrl {protocol}://{hostname}
 *
 * DevRev's REST API.
 */
class Api extends HttpClient {
    constructor() {
        super(...arguments);
        /**
         * @description Gets Account's commerce details.
         *
         * @tags commerce
         * @name AccountsCommerceDetailsGet
         * @request GET:/internal/accounts.commerce-details.get
         * @secure
         */
        this.accountsCommerceDetailsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/accounts.commerce-details.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets Account's commerce details.
         *
         * @tags commerce
         * @name AccountsCommerceDetailsGetPost
         * @request POST:/internal/accounts.commerce-details.get
         * @secure
         */
        this.accountsCommerceDetailsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/accounts.commerce-details.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description List Account's commerce details.
         *
         * @tags commerce
         * @name AccountsCommerceDetailsList
         * @request GET:/internal/accounts.commerce-details.list
         * @secure
         */
        this.accountsCommerceDetailsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/accounts.commerce-details.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description List Account's commerce details.
         *
         * @tags commerce
         * @name AccountsCommerceDetailsListPost
         * @request POST:/internal/accounts.commerce-details.list
         * @secure
         */
        this.accountsCommerceDetailsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/accounts.commerce-details.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates Account's commerce details.
         *
         * @tags commerce
         * @name AccountsCommerceDetailsUpdate
         * @request POST:/internal/accounts.commerce-details.update
         * @secure
         */
        this.accountsCommerceDetailsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/accounts.commerce-details.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: akanksha.deswal@devrev.ai ### Gets the count of accounts matching given filter.
         *
         * @tags accounts
         * @name AccountsCount
         * @request GET:/internal/accounts.count
         * @secure
         */
        this.accountsCount = (query, params = {}) => this.request(Object.assign({ path: `/internal/accounts.count`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the count of accounts matching given filter.
         *
         * @tags accounts
         * @name AccountsCountPost
         * @request POST:/internal/accounts.count
         * @secure
         */
        this.accountsCountPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/accounts.count`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates an account, which is a record representing a customer or an organization.
         *
         * @tags accounts
         * @name AccountsCreate
         * @request POST:/internal/accounts.create
         * @secure
         */
        this.accountsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/accounts.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates bulk accounts.
         *
         * @tags accounts
         * @name AccountsBulkCreate
         * @request POST:/internal/accounts.create.bulk.csv
         * @secure
         */
        this.accountsBulkCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/accounts.create.bulk.csv`, method: 'POST', body: data, secure: true, type: ContentType.FormData, format: 'json' }, params));
        /**
         * @description Deletes an account.
         *
         * @tags accounts
         * @name AccountsDelete
         * @request POST:/internal/accounts.delete
         * @secure
         */
        this.accountsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/accounts.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Checks if an account can be deleted.
         *
         * @tags accounts
         * @name AccountsDeleteValidate
         * @request POST:/internal/accounts.delete.validate
         * @secure
         */
        this.accountsDeleteValidate = (data, params = {}) => this.request(Object.assign({ path: `/internal/accounts.delete.validate`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Counts duplicate accounts.
         *
         * @tags accounts
         * @name DuplicateAccountPairsCount
         * @request GET:/internal/accounts.duplicates.count
         * @secure
         */
        this.duplicateAccountPairsCount = (params = {}) => this.request(Object.assign({ path: `/internal/accounts.duplicates.count`, method: 'GET', secure: true, format: 'json' }, params));
        /**
         * @description Counts duplicate accounts.
         *
         * @tags accounts
         * @name DuplicateAccountPairsCountPost
         * @request POST:/internal/accounts.duplicates.count
         * @secure
         */
        this.duplicateAccountPairsCountPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/accounts.duplicates.count`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates an object member.
         *
         * @tags accounts
         * @name DuplicateAccountPairsIgnore
         * @request POST:/internal/accounts.duplicates.ignore
         * @secure
         */
        this.duplicateAccountPairsIgnore = (data, params = {}) => this.request(Object.assign({ path: `/internal/accounts.duplicates.ignore`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists duplicate accounts.
         *
         * @tags accounts
         * @name DuplicateAccountPairsList
         * @request GET:/internal/accounts.duplicates.list
         * @secure
         */
        this.duplicateAccountPairsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/accounts.duplicates.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists duplicate accounts.
         *
         * @tags accounts
         * @name DuplicateAccountPairsListPost
         * @request POST:/internal/accounts.duplicates.list
         * @secure
         */
        this.duplicateAccountPairsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/accounts.duplicates.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: akanksha.deswal@devrev.ai ### Exports a collection of accounts.
         *
         * @tags accounts
         * @name AccountsExport
         * @request GET:/internal/accounts.export
         * @secure
         */
        this.accountsExport = (query, params = {}) => this.request(Object.assign({ path: `/internal/accounts.export`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Exports a collection of accounts.
         *
         * @tags accounts
         * @name AccountsExportPost
         * @request POST:/internal/accounts.export
         * @secure
         */
        this.accountsExportPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/accounts.export`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: akanksha.deswal@devrev.ai ### Retrieves an account's information.
         *
         * @tags accounts
         * @name AccountsGet
         * @request GET:/internal/accounts.get
         * @secure
         */
        this.accountsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/accounts.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Retrieves an account's information.
         *
         * @tags accounts
         * @name AccountsGetPost
         * @request POST:/internal/accounts.get
         * @secure
         */
        this.accountsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/accounts.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: adwait.kulkarni@devrev.ai ### Gets the SLA that will apply on supported objects for this account, if any.
         *
         * @tags accounts, slas
         * @name AccountsGetSla
         * @request GET:/internal/accounts.get-sla
         * @secure
         */
        this.accountsGetSla = (query, params = {}) => this.request(Object.assign({ path: `/internal/accounts.get-sla`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the SLA that will apply on supported objects for this account, if any.
         *
         * @tags accounts, slas
         * @name AccountsGetSlaPost
         * @request POST:/internal/accounts.get-sla
         * @secure
         */
        this.accountsGetSlaPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/accounts.get-sla`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: akanksha.deswal@devrev.ai ### Lists collections of accounts by groups.
         *
         * @tags accounts
         * @name AccountsGroup
         * @request GET:/internal/accounts.group
         * @secure
         */
        this.accountsGroup = (query, params = {}) => this.request(Object.assign({ path: `/internal/accounts.group`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists collections of accounts by groups.
         *
         * @tags accounts
         * @name AccountsGroupPost
         * @request POST:/internal/accounts.group
         * @secure
         */
        this.accountsGroupPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/accounts.group`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: akanksha.deswal@devrev.ai ### Gets a list of accounts.
         *
         * @tags accounts
         * @name AccountsList
         * @request GET:/internal/accounts.list
         * @secure
         */
        this.accountsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/accounts.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a list of accounts.
         *
         * @tags accounts
         * @name AccountsListPost
         * @request POST:/internal/accounts.list
         * @secure
         */
        this.accountsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/accounts.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Merges two accounts.
         *
         * @tags accounts
         * @name AccountsMerge
         * @request POST:/internal/accounts.merge
         * @secure
         */
        this.accountsMerge = (data, params = {}) => this.request(Object.assign({ path: `/internal/accounts.merge`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: akanksha.deswal@devrev.ai ### Fetches sample CSV for bulk import.
         *
         * @tags accounts
         * @name GetAccountsSampleCsv
         * @request GET:/internal/accounts.sample-csv.get
         * @secure
         */
        this.getAccountsSampleCsv = (params = {}) => this.request(Object.assign({ path: `/internal/accounts.sample-csv.get`, method: 'GET', secure: true, format: 'json' }, params));
        /**
         * @description Fetches sample CSV for bulk import.
         *
         * @tags accounts
         * @name GetAccountsSampleCsvPost
         * @request POST:/internal/accounts.sample-csv.get
         * @secure
         */
        this.getAccountsSampleCsvPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/accounts.sample-csv.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates an account's information.
         *
         * @tags accounts
         * @name AccountsUpdate
         * @request POST:/internal/accounts.update
         * @secure
         */
        this.accountsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/accounts.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Upgrades all accounts schema.
         *
         * @tags accounts
         * @name AccountsUpgrade
         * @request POST:/internal/accounts.upgrade
         * @secure
         */
        this.accountsUpgrade = (data, params = {}) => this.request(Object.assign({ path: `/internal/accounts.upgrade`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates an addon rule
         *
         * @tags commerce
         * @name AddonRulesCreate
         * @request POST:/internal/addon-rules.create
         * @secure
         */
        this.addonRulesCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/addon-rules.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes an addon rule object.
         *
         * @tags commerce
         * @name AddonRulesDelete
         * @request POST:/internal/addon-rules.delete
         * @secure
         */
        this.addonRulesDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/addon-rules.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Gets an addon rule
         *
         * @tags commerce
         * @name AddonRulesGet
         * @request GET:/internal/addon-rules.get
         * @secure
         */
        this.addonRulesGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/addon-rules.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets an addon rule
         *
         * @tags commerce
         * @name AddonRulesGetPost
         * @request POST:/internal/addon-rules.get
         * @secure
         */
        this.addonRulesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/addon-rules.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the addon rule objects based on the given filters.
         *
         * @tags commerce
         * @name AddonRulesList
         * @request GET:/internal/addon-rules.list
         * @secure
         */
        this.addonRulesList = (query, params = {}) => this.request(Object.assign({ path: `/internal/addon-rules.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the addon rule objects based on the given filters.
         *
         * @tags commerce
         * @name AddonRulesListPost
         * @request POST:/internal/addon-rules.list
         * @secure
         */
        this.addonRulesListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/addon-rules.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates an addon rule
         *
         * @tags commerce
         * @name AddonRulesUpdate
         * @request POST:/internal/addon-rules.update
         * @secure
         */
        this.addonRulesUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/addon-rules.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a new AI agent.
         *
         * @tags ai-agents
         * @name AiAgentsCreate
         * @request POST:/internal/ai-agents.create
         * @secure
         */
        this.aiAgentsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/ai-agents.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes an AI agent.
         *
         * @tags ai-agents
         * @name AiAgentsDelete
         * @request POST:/internal/ai-agents.delete
         * @secure
         */
        this.aiAgentsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/ai-agents.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Consume an AI agent event asynchronously.
         *
         * @tags ai-agents
         * @name AiAgentEventsExecuteAsync
         * @request POST:/internal/ai-agents.events.execute-async
         * @secure
         */
        this.aiAgentEventsExecuteAsync = (data, params = {}) => this.request(Object.assign({ path: `/internal/ai-agents.events.execute-async`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Consume an AI agent event synchronously.
         *
         * @tags ai-agents
         * @name AiAgentEventsExecuteSync
         * @request POST:/internal/ai-agents.events.execute-sync
         * @secure
         */
        this.aiAgentEventsExecuteSync = (data, params = {}) => this.request(Object.assign({ path: `/internal/ai-agents.events.execute-sync`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: i-sankalp.kulkarni@devrev.ai ### Gets an AI agent.
         *
         * @tags ai-agents
         * @name AiAgentsGet
         * @request GET:/internal/ai-agents.get
         * @secure
         */
        this.aiAgentsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/ai-agents.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets an AI agent.
         *
         * @tags ai-agents
         * @name AiAgentsGetPost
         * @request POST:/internal/ai-agents.get
         * @secure
         */
        this.aiAgentsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/ai-agents.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: i-sankalp.kulkarni@devrev.ai ### Lists AI agents.
         *
         * @tags ai-agents
         * @name AiAgentsList
         * @request GET:/internal/ai-agents.list
         * @secure
         */
        this.aiAgentsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/ai-agents.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists AI agents.
         *
         * @tags ai-agents
         * @name AiAgentsListPost
         * @request POST:/internal/ai-agents.list
         * @secure
         */
        this.aiAgentsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/ai-agents.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: i-sankalp.kulkarni@devrev.ai ### Get an AI agent session.
         *
         * @tags ai-agents
         * @name AiAgentSessionsGet
         * @request GET:/internal/ai-agents.sessions.get
         * @secure
         */
        this.aiAgentSessionsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/ai-agents.sessions.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Get an AI agent session.
         *
         * @tags ai-agents
         * @name AiAgentSessionsGetPost
         * @request POST:/internal/ai-agents.sessions.get
         * @secure
         */
        this.aiAgentSessionsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/ai-agents.sessions.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: i-sankalp.kulkarni@devrev.ai ### List AI agent sessions.
         *
         * @tags ai-agents
         * @name AiAgentSessionsList
         * @request GET:/internal/ai-agents.sessions.list
         * @secure
         */
        this.aiAgentSessionsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/ai-agents.sessions.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description List AI agent sessions.
         *
         * @tags ai-agents
         * @name AiAgentSessionsListPost
         * @request POST:/internal/ai-agents.sessions.list
         * @secure
         */
        this.aiAgentSessionsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/ai-agents.sessions.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates an  AI agent.
         *
         * @tags ai-agents
         * @name AiAgentsUpdate
         * @request POST:/internal/ai-agents.update
         * @secure
         */
        this.aiAgentsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/ai-agents.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: dario.gavranovic@devrev.ai ### Gets the capabilities of airdrop.
         *
         * @tags airdrop
         * @name AirdropCapabilitiesGet
         * @request GET:/internal/airdrop.capabilities.get
         * @secure
         */
        this.airdropCapabilitiesGet = (params = {}) => this.request(Object.assign({ path: `/internal/airdrop.capabilities.get`, method: 'GET', secure: true, format: 'json' }, params));
        /**
         * @description Gets the capabilities of airdrop.
         *
         * @tags airdrop
         * @name AirdropCapabilitiesGetPost
         * @request POST:/internal/airdrop.capabilities.get
         * @secure
         */
        this.airdropCapabilitiesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/airdrop.capabilities.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Resource for external extractor messages.
         *
         * @tags airdrop
         * @name AirdropExternalExtractorMessage
         * @request POST:/internal/airdrop.external-extractor.message
         * @secure
         */
        this.airdropExternalExtractorMessage = (data, params = {}) => this.request(Object.assign({ path: `/internal/airdrop.external-extractor.message`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Request to discover external sync units on a given external system of record.
         *
         * @tags airdrop
         * @name AirdropExternalSyncUnitsDiscover
         * @request POST:/internal/airdrop.external-sync-units.discover
         * @secure
         */
        this.airdropExternalSyncUnitsDiscover = (data, params = {}) => this.request(Object.assign({ path: `/internal/airdrop.external-sync-units.discover`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: dario.gavranovic@devrev.ai ### Lists external sync units.
         *
         * @tags airdrop
         * @name AirdropExternalSyncUnitsList
         * @request GET:/internal/airdrop.external-sync-units.list
         * @secure
         */
        this.airdropExternalSyncUnitsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/airdrop.external-sync-units.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists external sync units.
         *
         * @tags airdrop
         * @name AirdropExternalSyncUnitsListPost
         * @request POST:/internal/airdrop.external-sync-units.list
         * @secure
         */
        this.airdropExternalSyncUnitsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/airdrop.external-sync-units.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: lorinc.body@devrev.ai ### Gets all the filters that are currently associated with the given sync unit.
         *
         * @tags airdrop
         * @name AssociatedFiltersCurrentGet
         * @request GET:/internal/airdrop.recipe.associated-filters.all-current-get
         * @secure
         */
        this.associatedFiltersCurrentGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/airdrop.recipe.associated-filters.all-current-get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets all the filters that are currently associated with the given sync unit.
         *
         * @tags airdrop
         * @name AssociatedFiltersCurrentGetPost
         * @request POST:/internal/airdrop.recipe.associated-filters.all-current-get
         * @secure
         */
        this.associatedFiltersCurrentGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/airdrop.recipe.associated-filters.all-current-get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Associates a filter with a given sync unit and external item type, applying it in any future runs.
         *
         * @tags airdrop
         * @name FiltersAssociate
         * @request POST:/internal/airdrop.recipe.associated-filters.create
         * @secure
         */
        this.filtersAssociate = (data, params = {}) => this.request(Object.assign({ path: `/internal/airdrop.recipe.associated-filters.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: lorinc.body@devrev.ai ### Gets the filter that was associated with the given sync unit at the given sync history ID.
         *
         * @tags airdrop
         * @name AssociatedFiltersGet
         * @request GET:/internal/airdrop.recipe.associated-filters.get
         * @secure
         */
        this.associatedFiltersGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/airdrop.recipe.associated-filters.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the filter that was associated with the given sync unit at the given sync history ID.
         *
         * @tags airdrop
         * @name AssociatedFiltersGetPost
         * @request POST:/internal/airdrop.recipe.associated-filters.get
         * @secure
         */
        this.associatedFiltersGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/airdrop.recipe.associated-filters.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: lorinc.body@devrev.ai ### Retrieves the filtering options (which fields can be used to setup filters), for the given sync unit and external item type.
         *
         * @tags airdrop
         * @name FilterOptionsGet
         * @request GET:/internal/airdrop.recipe.filter-options.get
         * @secure
         */
        this.filterOptionsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/airdrop.recipe.filter-options.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Retrieves the filtering options (which fields can be used to setup filters), for the given sync unit and external item type.
         *
         * @tags airdrop
         * @name FilterOptionsGetPost
         * @request POST:/internal/airdrop.recipe.filter-options.get
         * @secure
         */
        this.filterOptionsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/airdrop.recipe.filter-options.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a filter (useable for filtering out a subset of items from an import/sync), unattached to any particular recipe or sync unit.
         *
         * @tags airdrop
         * @name FiltersCreate
         * @request POST:/internal/airdrop.recipe.filters.create
         * @secure
         */
        this.filtersCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/airdrop.recipe.filters.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: lorinc.body@devrev.ai ### Retrieves a filter by ID, irrespective of whether it is in any current import/snyc.
         *
         * @tags airdrop
         * @name FiltersGet
         * @request GET:/internal/airdrop.recipe.filters.get
         * @secure
         */
        this.filtersGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/airdrop.recipe.filters.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Retrieves a filter by ID, irrespective of whether it is in any current import/snyc.
         *
         * @tags airdrop
         * @name FiltersGetPost
         * @request POST:/internal/airdrop.recipe.filters.get
         * @secure
         */
        this.filtersGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/airdrop.recipe.filters.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: gasper.senk@devrev.ai ### Gets a single sync modification record.
         *
         * @tags airdrop
         * @name AirdropSyncModificationRecordGet
         * @request GET:/internal/airdrop.sync-modification-record.get
         * @secure
         */
        this.airdropSyncModificationRecordGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/airdrop.sync-modification-record.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a single sync modification record.
         *
         * @tags airdrop
         * @name AirdropSyncModificationRecordGetPost
         * @request POST:/internal/airdrop.sync-modification-record.get
         * @secure
         */
        this.airdropSyncModificationRecordGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/airdrop.sync-modification-record.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: gasper.senk@devrev.ai ### Gets a single sync modification record.
         *
         * @tags airdrop
         * @name AirdropSyncModificationRecordGetByTarget
         * @request GET:/internal/airdrop.sync-modification-record.get-by-target
         * @secure
         */
        this.airdropSyncModificationRecordGetByTarget = (query, params = {}) => this.request(Object.assign({ path: `/internal/airdrop.sync-modification-record.get-by-target`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a single sync modification record.
         *
         * @tags airdrop
         * @name AirdropSyncModificationRecordGetByTargetPost
         * @request POST:/internal/airdrop.sync-modification-record.get-by-target
         * @secure
         */
        this.airdropSyncModificationRecordGetByTargetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/airdrop.sync-modification-record.get-by-target`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Requests an action on a single sync unit.
         *
         * @tags airdrop
         * @name AirdropTriggerSyncUnitsAction
         * @request POST:/internal/airdrop.sync-units.action
         * @secure
         */
        this.airdropTriggerSyncUnitsAction = (data, params = {}) => this.request(Object.assign({ path: `/internal/airdrop.sync-units.action`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates sync unit that is used for syncs between DevRev and external system of records.
         *
         * @tags airdrop
         * @name AirdropSyncUnitsCreate
         * @request POST:/internal/airdrop.sync-units.create
         * @secure
         */
        this.airdropSyncUnitsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/airdrop.sync-units.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates sync units that are used for syncs between DevRev and external systems of record.
         *
         * @tags airdrop
         * @name AirdropSyncUnitsBulkCreate
         * @request POST:/internal/airdrop.sync-units.create.bulk
         * @secure
         */
        this.airdropSyncUnitsBulkCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/airdrop.sync-units.create.bulk`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: dario.gavranovic@devrev.ai ### Gets a single sync unit's information.
         *
         * @tags airdrop
         * @name AirdropSyncUnitsGet
         * @request GET:/internal/airdrop.sync-units.get
         * @secure
         */
        this.airdropSyncUnitsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/airdrop.sync-units.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a single sync unit's information.
         *
         * @tags airdrop
         * @name AirdropSyncUnitsGetPost
         * @request POST:/internal/airdrop.sync-units.get
         * @secure
         */
        this.airdropSyncUnitsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/airdrop.sync-units.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: dario.gavranovic@devrev.ai ### Gets a list of sync unit historical records.
         *
         * @tags airdrop
         * @name AirdropSyncUnitsHistory
         * @request GET:/internal/airdrop.sync-units.history
         * @secure
         */
        this.airdropSyncUnitsHistory = (query, params = {}) => this.request(Object.assign({ path: `/internal/airdrop.sync-units.history`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a list of sync unit historical records.
         *
         * @tags airdrop
         * @name AirdropSyncUnitsHistoryPost
         * @request POST:/internal/airdrop.sync-units.history
         * @secure
         */
        this.airdropSyncUnitsHistoryPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/airdrop.sync-units.history`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: dario.gavranovic@devrev.ai ### Gets a list of sync units.
         *
         * @tags airdrop
         * @name AirdropSyncUnitsList
         * @request GET:/internal/airdrop.sync-units.list
         * @secure
         */
        this.airdropSyncUnitsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/airdrop.sync-units.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a list of sync units.
         *
         * @tags airdrop
         * @name AirdropSyncUnitsListPost
         * @request POST:/internal/airdrop.sync-units.list
         * @secure
         */
        this.airdropSyncUnitsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/airdrop.sync-units.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a single sync unit.
         *
         * @tags airdrop
         * @name AirdropSyncUnitsUpdate
         * @request POST:/internal/airdrop.sync-units.update
         * @secure
         */
        this.airdropSyncUnitsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/airdrop.sync-units.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the specified article's ancestors.
         *
         * @tags articles
         * @name ArticleAncestors
         * @request GET:/internal/articles.ancestors
         * @secure
         */
        this.articleAncestors = (query, params = {}) => this.request(Object.assign({ path: `/internal/articles.ancestors`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the specified article's ancestors.
         *
         * @tags articles
         * @name ArticleAncestorsPost
         * @request POST:/internal/articles.ancestors
         * @secure
         */
        this.articleAncestorsPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/articles.ancestors`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates multiple articles.
         *
         * @tags articles
         * @name CreateArticles
         * @request POST:/internal/articles.bulk.create
         * @secure
         */
        this.createArticles = (data, params = {}) => this.request(Object.assign({ path: `/internal/articles.bulk.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: prabhat.tiwari@devrev.ai ### Get count of articles matching given filter.
         *
         * @tags articles
         * @name ArticlesCount
         * @request GET:/internal/articles.count
         * @secure
         */
        this.articlesCount = (query, params = {}) => this.request(Object.assign({ path: `/internal/articles.count`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Get count of articles matching given filter.
         *
         * @tags articles
         * @name ArticlesCountPost
         * @request POST:/internal/articles.count
         * @secure
         */
        this.articlesCountPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/articles.count`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Article is an object which can contain a URL or artifacts in the resource. It also contains the data regarding the owner, author, status and published date of the object. This call creates an article.
         *
         * @tags articles
         * @name CreateArticle
         * @request POST:/internal/articles.create
         * @secure
         */
        this.createArticle = (data, params = {}) => this.request(Object.assign({ path: `/internal/articles.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes an article.
         *
         * @tags articles
         * @name DeleteArticle
         * @request POST:/internal/articles.delete
         * @secure
         */
        this.deleteArticle = (data, params = {}) => this.request(Object.assign({ path: `/internal/articles.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: prabhat.tiwari@devrev.ai ### Gets an article.
         *
         * @tags articles
         * @name GetArticle
         * @request GET:/internal/articles.get
         * @secure
         */
        this.getArticle = (query, params = {}) => this.request(Object.assign({ path: `/internal/articles.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets an article.
         *
         * @tags articles
         * @name GetArticlePost
         * @request POST:/internal/articles.get
         * @secure
         */
        this.getArticlePost = (data, params = {}) => this.request(Object.assign({ path: `/internal/articles.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists collections of articles by groups.
         *
         * @tags articles
         * @name GroupArticles
         * @request POST:/internal/articles.group
         * @secure
         */
        this.groupArticles = (data, params = {}) => this.request(Object.assign({ path: `/internal/articles.group`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: prabhat.tiwari@devrev.ai ### Lists a collection of articles.
         *
         * @tags articles
         * @name ListArticles
         * @request GET:/internal/articles.list
         * @secure
         */
        this.listArticles = (query, params = {}) => this.request(Object.assign({ path: `/internal/articles.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists a collection of articles.
         *
         * @tags articles
         * @name ListArticlesPost
         * @request POST:/internal/articles.list
         * @secure
         */
        this.listArticlesPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/articles.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates an article.
         *
         * @tags articles
         * @name UpdateArticle
         * @request POST:/internal/articles.update
         * @secure
         */
        this.updateArticle = (data, params = {}) => this.request(Object.assign({ path: `/internal/articles.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the vote of a Rev user on an article.
         *
         * @tags articles
         * @name ArticlesVotersGet
         * @request GET:/internal/articles.voters.get
         * @secure
         */
        this.articlesVotersGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/articles.voters.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the vote of a Rev user on an article.
         *
         * @tags articles
         * @name ArticlesVotersGetPost
         * @request POST:/internal/articles.voters.get
         * @secure
         */
        this.articlesVotersGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/articles.voters.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists the voters of an article.
         *
         * @tags articles
         * @name ArticlesVotersList
         * @request GET:/internal/articles.voters.list
         * @secure
         */
        this.articlesVotersList = (query, params = {}) => this.request(Object.assign({ path: `/internal/articles.voters.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the voters of an article.
         *
         * @tags articles
         * @name ArticlesVotersListPost
         * @request POST:/internal/articles.voters.list
         * @secure
         */
        this.articlesVotersListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/articles.voters.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the vote of a Rev user on an article.
         *
         * @tags articles
         * @name ArticlesVotersUpdate
         * @request POST:/internal/articles.voters.update
         * @secure
         */
        this.articlesVotersUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/articles.voters.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a copy of an artifact.
         *
         * @tags artifacts
         * @name ArtifactsCopy
         * @request POST:/internal/artifacts.copy
         * @secure
         */
        this.artifactsCopy = (data, params = {}) => this.request(Object.assign({ path: `/internal/artifacts.copy`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the requested artifact's information.
         *
         * @tags artifacts
         * @name ArtifactsGet
         * @request GET:/internal/artifacts.get
         * @secure
         */
        this.artifactsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/artifacts.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the requested artifact's information.
         *
         * @tags artifacts
         * @name ArtifactsGetPost
         * @request POST:/internal/artifacts.get
         * @secure
         */
        this.artifactsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/artifacts.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description List the artifacts attached to an object.
         *
         * @tags artifacts
         * @name ArtifactsList
         * @request GET:/internal/artifacts.list
         * @secure
         */
        this.artifactsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/artifacts.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description List the artifacts attached to an object.
         *
         * @tags artifacts
         * @name ArtifactsListPost
         * @request POST:/internal/artifacts.list
         * @secure
         */
        this.artifactsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/artifacts.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the download URL for the artifact.
         *
         * @tags artifacts
         * @name ArtifactsLocate
         * @request GET:/internal/artifacts.locate
         * @secure
         */
        this.artifactsLocate = (query, params = {}) => this.request(Object.assign({ path: `/internal/artifacts.locate`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the download URL for the artifact.
         *
         * @tags artifacts
         * @name ArtifactsLocatePost
         * @request POST:/internal/artifacts.locate
         * @secure
         */
        this.artifactsLocatePost = (data, params = {}) => this.request(Object.assign({ path: `/internal/artifacts.locate`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates an artifact and generates an upload URL for its data.
         *
         * @tags artifacts
         * @name ArtifactsPrepare
         * @request POST:/internal/artifacts.prepare
         * @secure
         */
        this.artifactsPrepare = (data, params = {}) => this.request(Object.assign({ path: `/internal/artifacts.prepare`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Permanently deletes a version of an artifact.
         *
         * @tags artifacts
         * @name ArtifactsHardDeleteVersion
         * @request POST:/internal/artifacts.versions.delete
         * @secure
         */
        this.artifactsHardDeleteVersion = (data, params = {}) => this.request(Object.assign({ path: `/internal/artifacts.versions.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description List the versions of an artifact.
         *
         * @tags artifacts
         * @name ArtifactsVersionsList
         * @request GET:/internal/artifacts.versions.list
         * @secure
         */
        this.artifactsVersionsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/artifacts.versions.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description List the versions of an artifact.
         *
         * @tags artifacts
         * @name ArtifactsVersionsListPost
         * @request POST:/internal/artifacts.versions.list
         * @secure
         */
        this.artifactsVersionsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/artifacts.versions.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Prepares a new version for an artifact, returning the URL and form data to upload the updated file.
         *
         * @tags artifacts
         * @name ArtifactsVersionsPrepare
         * @request POST:/internal/artifacts.versions.prepare
         * @secure
         */
        this.artifactsVersionsPrepare = (data, params = {}) => this.request(Object.assign({ path: `/internal/artifacts.versions.prepare`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: brian.byrne@devrev.ai ### Gets the data for an object.
         *
         * @name AtomsGet
         * @request GET:/internal/atoms.get
         * @secure
         */
        this.atomsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/atoms.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the data for an object.
         *
         * @name AtomsGetPost
         * @request POST:/internal/atoms.get
         * @secure
         */
        this.atomsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/atoms.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: brian.byrne@devrev.ai ### Gets the summary for an object.
         *
         * @name AtomsSummary
         * @request GET:/internal/atoms.summary
         * @secure
         */
        this.atomsSummary = (query, params = {}) => this.request(Object.assign({ path: `/internal/atoms.summary`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the summary for an object.
         *
         * @name AtomsSummaryPost
         * @request POST:/internal/atoms.summary
         * @secure
         */
        this.atomsSummaryPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/atoms.summary`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a JWT corresponding to the requested token type for the authenticated user.
         *
         * @tags auth-tokens
         * @name AuthTokensCreate
         * @request POST:/internal/auth-tokens.create
         * @secure
         */
        this.authTokensCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/auth-tokens.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Revokes the token that matches the given token ID issued under the given Dev organization.
         *
         * @tags auth-tokens
         * @name AuthTokensDelete
         * @request POST:/internal/auth-tokens.delete
         * @secure
         */
        this.authTokensDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/auth-tokens.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Gets the token metadata corresponding to the given token ID under the given Dev organization.
         *
         * @tags auth-tokens
         * @name AuthTokensGet
         * @request GET:/internal/auth-tokens.get
         * @secure
         */
        this.authTokensGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/auth-tokens.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the token metadata corresponding to the given token ID under the given Dev organization.
         *
         * @tags auth-tokens
         * @name AuthTokensGetPost
         * @request POST:/internal/auth-tokens.get
         * @secure
         */
        this.authTokensGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/auth-tokens.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the token metadata for all the tokens corresponding to the given token type issued for a given subject.
         *
         * @tags auth-tokens
         * @name AuthTokensList
         * @request GET:/internal/auth-tokens.list
         * @secure
         */
        this.authTokensList = (query, params = {}) => this.request(Object.assign({ path: `/internal/auth-tokens.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the token metadata for all the tokens corresponding to the given token type issued for a given subject.
         *
         * @tags auth-tokens
         * @name AuthTokensListPost
         * @request POST:/internal/auth-tokens.list
         * @secure
         */
        this.authTokensListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/auth-tokens.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Revokes all the tokens that matches the given token type created by the authenticated user.
         *
         * @tags auth-tokens
         * @name AuthTokensSelfDelete
         * @request POST:/internal/auth-tokens.self.delete
         * @secure
         */
        this.authTokensSelfDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/auth-tokens.self.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Updates token metadata of a token issued under a given Dev organization.
         *
         * @tags auth-tokens
         * @name AuthTokensUpdate
         * @request POST:/internal/auth-tokens.update
         * @secure
         */
        this.authTokensUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/auth-tokens.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Performs a batch of operations.
         *
         * @name BatchApply
         * @request POST:/internal/batch.apply
         * @secure
         */
        this.batchApply = (data, params = {}) => this.request(Object.assign({ path: `/internal/batch.apply`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: i-sankalp.kulkarni@devrev.ai ### Get the bot status.
         *
         * @name BotStatusGet
         * @request GET:/internal/bot.status
         * @secure
         */
        this.botStatusGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/bot.status`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Get the bot status.
         *
         * @name BotStatusGetPost
         * @request POST:/internal/bot.status
         * @secure
         */
        this.botStatusGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/bot.status`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the bot.
         *
         * @name UpdateBotFromYaml
         * @request POST:/internal/bot.update
         * @secure
         */
        this.updateBotFromYaml = (data, params = {}) => this.request(Object.assign({ path: `/internal/bot.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a new chat.
         *
         * @tags chats
         * @name ChatsCreate
         * @request POST:/internal/chats.create
         * @secure
         */
        this.chatsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/chats.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a chat.
         *
         * @tags chats
         * @name ChatsDelete
         * @request POST:/internal/chats.delete
         * @secure
         */
        this.chatsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/chats.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: brian.byrne@devrev.ai ### Gets a chat's information.
         *
         * @tags chats
         * @name ChatsGet
         * @request GET:/internal/chats.get
         * @secure
         */
        this.chatsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/chats.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a chat's information.
         *
         * @tags chats
         * @name ChatsGetPost
         * @request POST:/internal/chats.get
         * @secure
         */
        this.chatsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/chats.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: brian.byrne@devrev.ai ### Lists a collection of chats.
         *
         * @tags chats
         * @name ChatsList
         * @request GET:/internal/chats.list
         * @secure
         */
        this.chatsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/chats.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists a collection of chats.
         *
         * @tags chats
         * @name ChatsListPost
         * @request POST:/internal/chats.list
         * @secure
         */
        this.chatsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/chats.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a chat's information.
         *
         * @tags chats
         * @name ChatsUpdate
         * @request POST:/internal/chats.update
         * @secure
         */
        this.chatsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/chats.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a code change object.
         *
         * @tags code-changes
         * @name CodeChangesCreate
         * @request POST:/internal/code-changes.create
         * @secure
         */
        this.codeChangesCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/code-changes.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a code change object.
         *
         * @tags code-changes
         * @name CodeChangesDelete
         * @request POST:/internal/code-changes.delete
         * @secure
         */
        this.codeChangesDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/code-changes.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: srividya.tata@devrev.ai ### Gets a code change object.
         *
         * @tags code-changes
         * @name CodeChangesGet
         * @request GET:/internal/code-changes.get
         * @secure
         */
        this.codeChangesGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/code-changes.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a code change object.
         *
         * @tags code-changes
         * @name CodeChangesGetPost
         * @request POST:/internal/code-changes.get
         * @secure
         */
        this.codeChangesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/code-changes.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: srividya.tata@devrev.ai ### Lists code change objects.
         *
         * @tags code-changes
         * @name CodeChangesList
         * @request GET:/internal/code-changes.list
         * @secure
         */
        this.codeChangesList = (query, params = {}) => this.request(Object.assign({ path: `/internal/code-changes.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists code change objects.
         *
         * @tags code-changes
         * @name CodeChangesListPost
         * @request POST:/internal/code-changes.list
         * @secure
         */
        this.codeChangesListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/code-changes.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a code change object.
         *
         * @tags code-changes
         * @name CodeChangesUpdate
         * @request POST:/internal/code-changes.update
         * @secure
         */
        this.codeChangesUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/code-changes.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a command.
         *
         * @tags command
         * @name CommandsCreate
         * @request POST:/internal/commands.create
         * @secure
         */
        this.commandsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/commands.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a command.
         *
         * @tags command
         * @name CommandsDelete
         * @request POST:/internal/commands.delete
         * @secure
         */
        this.commandsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/commands.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Executes a command.
         *
         * @tags command
         * @name CommandsExecute
         * @request POST:/internal/commands.execute
         * @secure
         */
        this.commandsExecute = (data, params = {}) => this.request(Object.assign({ path: `/internal/commands.execute`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a command.
         *
         * @tags command
         * @name CommandsGet
         * @request GET:/internal/commands.get
         * @secure
         */
        this.commandsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/commands.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a command.
         *
         * @tags command
         * @name CommandsGetPost
         * @request POST:/internal/commands.get
         * @secure
         */
        this.commandsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/commands.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists commands for a Dev organization.
         *
         * @tags command
         * @name CommandsList
         * @request GET:/internal/commands.list
         * @secure
         */
        this.commandsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/commands.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists commands for a Dev organization.
         *
         * @tags command
         * @name CommandsListPost
         * @request POST:/internal/commands.list
         * @secure
         */
        this.commandsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/commands.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a command.
         *
         * @tags command
         * @name CommandsUpdate
         * @request POST:/internal/commands.update
         * @secure
         */
        this.commandsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/commands.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a new connection.
         *
         * @tags connections
         * @name ConnectionsCreate
         * @request POST:/internal/connections.create
         * @secure
         */
        this.connectionsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/connections.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a connection.
         *
         * @tags connections
         * @name ConnectionsDelete
         * @request POST:/internal/connections.delete
         * @secure
         */
        this.connectionsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/connections.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: brian.byrne@devrev.ai ### Gets a connection's information.
         *
         * @tags connections
         * @name ConnectionsGet
         * @request GET:/internal/connections.get
         * @secure
         */
        this.connectionsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/connections.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a connection's information.
         *
         * @tags connections
         * @name ConnectionsGetPost
         * @request POST:/internal/connections.get
         * @secure
         */
        this.connectionsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/connections.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: brian.byrne@devrev.ai ### Lists the connections.
         *
         * @tags connections
         * @name ConnectionsList
         * @request GET:/internal/connections.list
         * @secure
         */
        this.connectionsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/connections.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the connections.
         *
         * @tags connections
         * @name ConnectionsListPost
         * @request POST:/internal/connections.list
         * @secure
         */
        this.connectionsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/connections.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Opens a connection for the authenticated user.
         *
         * @tags connections
         * @name ConnectionsOpen
         * @request POST:/internal/connections.open
         * @secure
         */
        this.connectionsOpen = (data, params = {}) => this.request(Object.assign({ path: `/internal/connections.open`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates an existing connection.
         *
         * @tags connections
         * @name ConnectionsUpdate
         * @request POST:/internal/connections.update
         * @secure
         */
        this.connectionsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/connections.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Create the content template.
         *
         * @tags notifications
         * @name ContentTemplateCreate
         * @request POST:/internal/content-template.create
         * @secure
         */
        this.contentTemplateCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/content-template.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Get the content template.
         *
         * @tags notifications
         * @name ContentTemplateGet
         * @request GET:/internal/content-template.get
         * @secure
         */
        this.contentTemplateGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/content-template.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Get the content template.
         *
         * @tags notifications
         * @name ContentTemplateGetPost
         * @request POST:/internal/content-template.get
         * @secure
         */
        this.contentTemplateGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/content-template.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists the content templates.
         *
         * @tags notifications
         * @name ContentTemplateList
         * @request GET:/internal/content-template.list
         * @secure
         */
        this.contentTemplateList = (query, params = {}) => this.request(Object.assign({ path: `/internal/content-template.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the content templates.
         *
         * @tags notifications
         * @name ContentTemplateListPost
         * @request POST:/internal/content-template.list
         * @secure
         */
        this.contentTemplateListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/content-template.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the content template.
         *
         * @tags notifications
         * @name ContentTemplateUpdate
         * @request POST:/internal/content-template.update
         * @secure
         */
        this.contentTemplateUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/content-template.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists recommended objects, which can assist the conversation.
         *
         * @tags recommendations
         * @name ConversationAssist
         * @request GET:/internal/conversations.assist
         * @secure
         */
        this.conversationAssist = (query, params = {}) => this.request(Object.assign({ path: `/internal/conversations.assist`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists recommended objects, which can assist the conversation.
         *
         * @tags recommendations
         * @name ConversationAssistPost
         * @request POST:/internal/conversations.assist
         * @secure
         */
        this.conversationAssistPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/conversations.assist`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Get count of conversations matching given filter.
         *
         * @tags conversations
         * @name ConversationsCount
         * @request GET:/internal/conversations.count
         * @secure
         */
        this.conversationsCount = (query, params = {}) => this.request(Object.assign({ path: `/internal/conversations.count`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Get count of conversations matching given filter.
         *
         * @tags conversations
         * @name ConversationsCountPost
         * @request POST:/internal/conversations.count
         * @secure
         */
        this.conversationsCountPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/conversations.count`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a conversation.
         *
         * @tags conversations
         * @name ConversationsCreate
         * @request POST:/internal/conversations.create
         * @secure
         */
        this.conversationsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/conversations.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes the requested conversation.
         *
         * @tags conversations
         * @name ConversationsDelete
         * @request POST:/internal/conversations.delete
         * @secure
         */
        this.conversationsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/conversations.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Exports a collection of conversation items.
         *
         * @tags conversations
         * @name ConversationsExport
         * @request GET:/internal/conversations.export
         * @secure
         */
        this.conversationsExport = (query, params = {}) => this.request(Object.assign({ path: `/internal/conversations.export`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Exports a collection of conversation items.
         *
         * @tags conversations
         * @name ConversationsExportPost
         * @request POST:/internal/conversations.export
         * @secure
         */
        this.conversationsExportPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/conversations.export`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the requested conversation's information.
         *
         * @tags conversations
         * @name ConversationsGet
         * @request GET:/internal/conversations.get
         * @secure
         */
        this.conversationsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/conversations.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the requested conversation's information.
         *
         * @tags conversations
         * @name ConversationsGetPost
         * @request POST:/internal/conversations.get
         * @secure
         */
        this.conversationsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/conversations.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists collections of conversations by groups.
         *
         * @tags conversations
         * @name ConversationsGroup
         * @request GET:/internal/conversations.group
         * @secure
         */
        this.conversationsGroup = (query, params = {}) => this.request(Object.assign({ path: `/internal/conversations.group`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists collections of conversations by groups.
         *
         * @tags conversations
         * @name ConversationsGroupPost
         * @request POST:/internal/conversations.group
         * @secure
         */
        this.conversationsGroupPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/conversations.group`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists the available conversations.
         *
         * @tags conversations
         * @name ConversationsList
         * @request GET:/internal/conversations.list
         * @secure
         */
        this.conversationsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/conversations.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the available conversations.
         *
         * @tags conversations
         * @name ConversationsListPost
         * @request POST:/internal/conversations.list
         * @secure
         */
        this.conversationsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/conversations.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the requested conversation.
         *
         * @tags conversations
         * @name ConversationsUpdate
         * @request POST:/internal/conversations.update
         * @secure
         */
        this.conversationsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/conversations.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Applies a credit coupon object.
         *
         * @tags commerce
         * @name CreditCouponsApply
         * @request POST:/internal/credit-coupons.apply
         * @secure
         */
        this.creditCouponsApply = (data, params = {}) => this.request(Object.assign({ path: `/internal/credit-coupons.apply`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a credit coupon object.
         *
         * @tags commerce
         * @name CreditCouponsCreate
         * @request POST:/internal/credit-coupons.create
         * @secure
         */
        this.creditCouponsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/credit-coupons.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a credit coupon object.
         *
         * @tags commerce
         * @name CreditCouponsDelete
         * @request POST:/internal/credit-coupons.delete
         * @secure
         */
        this.creditCouponsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/credit-coupons.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Gets a credit coupon object.
         *
         * @tags commerce
         * @name CreditCouponsGet
         * @request GET:/internal/credit-coupons.get
         * @secure
         */
        this.creditCouponsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/credit-coupons.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a credit coupon object.
         *
         * @tags commerce
         * @name CreditCouponsGetPost
         * @request POST:/internal/credit-coupons.get
         * @secure
         */
        this.creditCouponsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/credit-coupons.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a credit coupon object.
         *
         * @tags commerce
         * @name CreditCouponsUpdate
         * @request POST:/internal/credit-coupons.update
         * @secure
         */
        this.creditCouponsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/credit-coupons.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Validates a credit coupon object.
         *
         * @tags commerce
         * @name CreditCouponsValidate
         * @request POST:/internal/credit-coupons.validate
         * @secure
         */
        this.creditCouponsValidate = (data, params = {}) => this.request(Object.assign({ path: `/internal/credit-coupons.validate`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a credit object.
         *
         * @tags commerce
         * @name CreditsCreate
         * @request POST:/internal/credits.create
         * @secure
         */
        this.creditsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/credits.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a credit object.
         *
         * @tags commerce
         * @name CreditsDelete
         * @request POST:/internal/credits.delete
         * @secure
         */
        this.creditsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/credits.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Gets a credit object.
         *
         * @tags commerce
         * @name CreditsGet
         * @request GET:/internal/credits.get
         * @secure
         */
        this.creditsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/credits.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a credit object.
         *
         * @tags commerce
         * @name CreditsGetPost
         * @request POST:/internal/credits.get
         * @secure
         */
        this.creditsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/credits.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the credit objects based on the given filters.
         *
         * @tags commerce
         * @name CreditsList
         * @request GET:/internal/credits.list
         * @secure
         */
        this.creditsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/credits.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the credit objects based on the given filters.
         *
         * @tags commerce
         * @name CreditsListPost
         * @request POST:/internal/credits.list
         * @secure
         */
        this.creditsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/credits.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a credit object.
         *
         * @tags commerce
         * @name CreditsUpdate
         * @request POST:/internal/credits.update
         * @secure
         */
        this.creditsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/credits.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a custom object.
         *
         * @tags customization
         * @name CustomObjectsCreate
         * @request POST:/internal/custom-objects.create
         * @secure
         */
        this.customObjectsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/custom-objects.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a custom object.
         *
         * @tags customization
         * @name CustomObjectsDelete
         * @request POST:/internal/custom-objects.delete
         * @secure
         */
        this.customObjectsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/custom-objects.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a custom object.
         *
         * @tags customization
         * @name CustomObjectsGet
         * @request GET:/internal/custom-objects.get
         * @secure
         */
        this.customObjectsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/custom-objects.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a custom object.
         *
         * @tags customization
         * @name CustomObjectsGetPost
         * @request POST:/internal/custom-objects.get
         * @secure
         */
        this.customObjectsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/custom-objects.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists custom objects.
         *
         * @tags customization
         * @name CustomObjectsList
         * @request GET:/internal/custom-objects.list
         * @secure
         */
        this.customObjectsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/custom-objects.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists custom objects.
         *
         * @tags customization
         * @name CustomObjectsListPost
         * @request POST:/internal/custom-objects.list
         * @secure
         */
        this.customObjectsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/custom-objects.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a custom object.
         *
         * @tags customization
         * @name CustomObjectsUpdate
         * @request POST:/internal/custom-objects.update
         * @secure
         */
        this.customObjectsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/custom-objects.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Returns the supported languages for translations.
         *
         * @tags translation
         * @name TranslationsLanguagesList
         * @request GET:/internal/dalmatin.translations.languages.list
         * @secure
         */
        this.translationsLanguagesList = (params = {}) => this.request(Object.assign({ path: `/internal/dalmatin.translations.languages.list`, method: 'GET', secure: true, format: 'json' }, params));
        /**
         * @description Returns the supported languages for translations.
         *
         * @tags translation
         * @name TranslationsLanguagesListPost
         * @request POST:/internal/dalmatin.translations.languages.list
         * @secure
         */
        this.translationsLanguagesListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/dalmatin.translations.languages.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Returns translation text for the requested namespaces and target languages.
         *
         * @tags translation
         * @name TranslationsList
         * @request GET:/internal/dalmatin.translations.list
         * @secure
         */
        this.translationsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/dalmatin.translations.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Returns translation text for the requested namespaces and target languages.
         *
         * @tags translation
         * @name TranslationsListPost
         * @request POST:/internal/dalmatin.translations.list
         * @secure
         */
        this.translationsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/dalmatin.translations.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a new dashboard.
         *
         * @tags dashboards
         * @name DashboardsCreate
         * @request POST:/internal/dashboards.create
         * @secure
         */
        this.dashboardsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/dashboards.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes the dashboard.
         *
         * @tags dashboards
         * @name DashboardsDelete
         * @request POST:/internal/dashboards.delete
         * @secure
         */
        this.dashboardsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/dashboards.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description ### Owner: madhav.sikka@devrev.ai ### Returns the requested dashboard.
         *
         * @tags dashboards
         * @name DashboardsGet
         * @request GET:/internal/dashboards.get
         * @secure
         */
        this.dashboardsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/dashboards.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Returns the requested dashboard.
         *
         * @tags dashboards
         * @name DashboardsGetPost
         * @request POST:/internal/dashboards.get
         * @secure
         */
        this.dashboardsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/dashboards.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: madhav.sikka@devrev.ai ### Returns the list of dashboards.
         *
         * @tags dashboards
         * @name DashboardsList
         * @request GET:/internal/dashboards.list
         * @secure
         */
        this.dashboardsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/dashboards.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Returns the list of dashboards.
         *
         * @tags dashboards
         * @name DashboardsListPost
         * @request POST:/internal/dashboards.list
         * @secure
         */
        this.dashboardsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/dashboards.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the dashboard.
         *
         * @tags dashboards
         * @name DashboardsUpdate
         * @request POST:/internal/dashboards.update
         * @secure
         */
        this.dashboardsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/dashboards.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a new data source.
         *
         * @tags data-sources
         * @name DataSourcesCreate
         * @request POST:/internal/data-sources.create
         * @secure
         */
        this.dataSourcesCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/data-sources.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes the data source.
         *
         * @tags data-sources
         * @name DataSourcesDelete
         * @request POST:/internal/data-sources.delete
         * @secure
         */
        this.dataSourcesDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/data-sources.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description ### Owner: madhav.sikka@devrev.ai ### Returns the requested data source.
         *
         * @tags data-sources
         * @name DataSourcesGet
         * @request GET:/internal/data-sources.get
         * @secure
         */
        this.dataSourcesGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/data-sources.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Returns the requested data source.
         *
         * @tags data-sources
         * @name DataSourcesGetPost
         * @request POST:/internal/data-sources.get
         * @secure
         */
        this.dataSourcesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/data-sources.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: madhav.sikka@devrev.ai ### Returns the list of data sources.
         *
         * @tags data-sources
         * @name DataSourcesList
         * @request GET:/internal/data-sources.list
         * @secure
         */
        this.dataSourcesList = (query, params = {}) => this.request(Object.assign({ path: `/internal/data-sources.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Returns the list of data sources.
         *
         * @tags data-sources
         * @name DataSourcesListPost
         * @request POST:/internal/data-sources.list
         * @secure
         */
        this.dataSourcesListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/data-sources.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the data source.
         *
         * @tags data-sources
         * @name DataSourcesUpdate
         * @request POST:/internal/data-sources.update
         * @secure
         */
        this.dataSourcesUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/data-sources.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a new enterprise authentication connection for a Dev organization. This authentication connection will not be enabled by default for the organization and the user will need to explicitly enable this. Keep in mind that at a time, only one authentication connection can be enabled for a Dev organization. At present, only 5 enterprise connections can be created by an organization.
         *
         * @tags auth-connection, dev-orgs
         * @name DevOrgAuthConnectionsCreate
         * @request POST:/internal/dev-orgs.auth-connections.create
         * @secure
         */
        this.devOrgAuthConnectionsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.auth-connections.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes an authentication connection. Only enterprise connections which are explicitly set up for a Dev organization can be deleted. Default connections can not be deleted using this method.
         *
         * @tags auth-connection, dev-orgs
         * @name DevOrgAuthConnectionsDelete
         * @request POST:/internal/dev-orgs.auth-connections.delete
         * @secure
         */
        this.devOrgAuthConnectionsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.auth-connections.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description ### Owner: sambhav.jain@devrev.ai ### Retrieves the details for an authentication connection.
         *
         * @tags auth-connection, dev-orgs
         * @name DevOrgAuthConnectionsGet
         * @request GET:/internal/dev-orgs.auth-connections.get
         * @secure
         */
        this.devOrgAuthConnectionsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.auth-connections.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Retrieves the details for an authentication connection.
         *
         * @tags auth-connection, dev-orgs
         * @name DevOrgAuthConnectionsGetPost
         * @request POST:/internal/dev-orgs.auth-connections.get
         * @secure
         */
        this.devOrgAuthConnectionsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.auth-connections.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: sambhav.jain@devrev.ai ### Lists all the authentication connections available for a Dev organization. This list will include both social and enterprise connections which are either available by default or are explicitly created by the user.
         *
         * @tags auth-connection, dev-orgs
         * @name DevOrgAuthConnectionsList
         * @request GET:/internal/dev-orgs.auth-connections.list
         * @secure
         */
        this.devOrgAuthConnectionsList = (params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.auth-connections.list`, method: 'GET', secure: true, format: 'json' }, params));
        /**
         * @description Lists all the authentication connections available for a Dev organization. This list will include both social and enterprise connections which are either available by default or are explicitly created by the user.
         *
         * @tags auth-connection, dev-orgs
         * @name DevOrgAuthConnectionsListPost
         * @request POST:/internal/dev-orgs.auth-connections.list
         * @secure
         */
        this.devOrgAuthConnectionsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.auth-connections.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Enable or disable an authentication connection for a Dev organization. Currently, only 1 authentication connection can be enabled at a time. When a new authentication connection is enabled, the connection which is currently enabled for the Dev organization is automatically disabled.
         *
         * @tags auth-connection, dev-orgs
         * @name DevOrgAuthConnectionsToggle
         * @request POST:/internal/dev-orgs.auth-connections.toggle
         * @secure
         */
        this.devOrgAuthConnectionsToggle = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.auth-connections.toggle`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Updates an authentication connection.
         *
         * @tags auth-connection, dev-orgs
         * @name DevOrgAuthConnectionsUpdate
         * @request POST:/internal/dev-orgs.auth-connections.update
         * @secure
         */
        this.devOrgAuthConnectionsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.auth-connections.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Create DevOrg commerce details.
         *
         * @tags commerce
         * @name DevOrgsCommerceDetailsCreate
         * @request POST:/internal/dev-orgs.commerce-details.create
         * @secure
         */
        this.devOrgsCommerceDetailsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.commerce-details.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets DevOrg commerce details.
         *
         * @tags commerce
         * @name DevOrgsCommerceDetailsGet
         * @request GET:/internal/dev-orgs.commerce-details.get
         * @secure
         */
        this.devOrgsCommerceDetailsGet = (params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.commerce-details.get`, method: 'GET', secure: true, format: 'json' }, params));
        /**
         * @description Gets DevOrg commerce details.
         *
         * @tags commerce
         * @name DevOrgsCommerceDetailsGetPost
         * @request POST:/internal/dev-orgs.commerce-details.get
         * @secure
         */
        this.devOrgsCommerceDetailsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.commerce-details.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates DevOrg commerce details.
         *
         * @tags commerce
         * @name DevOrgsCommerceDetailsUpdate
         * @request POST:/internal/dev-orgs.commerce-details.update
         * @secure
         */
        this.devOrgsCommerceDetailsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.commerce-details.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a Dev organization for the authenticated user.
         *
         * @tags dev-orgs
         * @name DevOrgsCreate
         * @request POST:/internal/dev-orgs.create
         * @secure
         */
        this.devOrgsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Delete the Dev organization of the authenticated user.
         *
         * @tags dev-orgs
         * @name DevOrgsDelete
         * @request POST:/internal/dev-orgs.delete
         * @secure
         */
        this.devOrgsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: sambhav.jain@devrev.ai ### Gets the Dev organization's information of the authenticated user.
         *
         * @tags dev-orgs
         * @name DevOrgsGet
         * @request GET:/internal/dev-orgs.get
         * @secure
         */
        this.devOrgsGet = (params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.get`, method: 'GET', secure: true, format: 'json' }, params));
        /**
         * @description Gets the Dev organization's information of the authenticated user.
         *
         * @tags dev-orgs
         * @name DevOrgsGetPost
         * @request POST:/internal/dev-orgs.get
         * @secure
         */
        this.devOrgsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Completes creating a new global Dev organization.
         *
         * @tags dev-orgs, dev-orgs-global
         * @name DevOrgsGlobalCreateCommit
         * @request POST:/internal/dev-orgs.global.create-commit
         * @secure
         */
        this.devOrgsGlobalCreateCommit = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.global.create-commit`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Prepares to create a new global Dev organization and locks the Dev slug.
         *
         * @tags dev-orgs, dev-orgs-global
         * @name DevOrgsGlobalCreatePrepare
         * @request POST:/internal/dev-orgs.global.create-prepare
         * @secure
         */
        this.devOrgsGlobalCreatePrepare = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.global.create-prepare`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Rolls back a created Dev organization and releases the locked Dev slug.
         *
         * @tags dev-orgs, dev-orgs-global
         * @name DevOrgsGlobalCreateRollback
         * @request POST:/internal/dev-orgs.global.create-rollback
         * @secure
         */
        this.devOrgsGlobalCreateRollback = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.global.create-rollback`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a global Dev organization.
         *
         * @tags dev-orgs, dev-orgs-global
         * @name DevOrgsGlobalDelete
         * @request POST:/internal/dev-orgs.global.delete
         * @secure
         */
        this.devOrgsGlobalDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.global.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: prabath.siriwardena@devrev.ai ### Returns a global Dev organization.
         *
         * @tags dev-orgs, dev-orgs-global
         * @name DevOrgsGlobalGet
         * @request GET:/internal/dev-orgs.global.get
         * @secure
         */
        this.devOrgsGlobalGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.global.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Returns a global Dev organization.
         *
         * @tags dev-orgs, dev-orgs-global
         * @name DevOrgsGlobalGetPost
         * @request POST:/internal/dev-orgs.global.get
         * @secure
         */
        this.devOrgsGlobalGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.global.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: prabath.siriwardena@devrev.ai ### Returns a list of global Dev organization.
         *
         * @tags dev-orgs, dev-orgs-global
         * @name DevOrgsGlobalList
         * @request GET:/internal/dev-orgs.global.list
         * @secure
         */
        this.devOrgsGlobalList = (query, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.global.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Returns a list of global Dev organization.
         *
         * @tags dev-orgs, dev-orgs-global
         * @name DevOrgsGlobalListPost
         * @request POST:/internal/dev-orgs.global.list
         * @secure
         */
        this.devOrgsGlobalListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.global.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: prabath.siriwardena@devrev.ai ### Returns the public info of a global Dev organization.
         *
         * @tags dev-orgs, dev-orgs-global
         * @name DevOrgsGlobalPublicInfo
         * @request GET:/internal/dev-orgs.global.public-info.get
         * @secure
         */
        this.devOrgsGlobalPublicInfo = (query, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.global.public-info.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Returns the public info of a global Dev organization.
         *
         * @tags dev-orgs, dev-orgs-global
         * @name DevOrgsGlobalPublicInfoPost
         * @request POST:/internal/dev-orgs.global.public-info.get
         * @secure
         */
        this.devOrgsGlobalPublicInfoPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.global.public-info.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Completes updating a global Dev organization.
         *
         * @tags dev-orgs, dev-orgs-global
         * @name DevOrgsGlobalUpdateCommit
         * @request POST:/internal/dev-orgs.global.update-commit
         * @secure
         */
        this.devOrgsGlobalUpdateCommit = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.global.update-commit`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Prepares to update a global Dev organization and locks the new Dev slug.
         *
         * @tags dev-orgs, dev-orgs-global
         * @name DevOrgsGlobalUpdatePrepare
         * @request POST:/internal/dev-orgs.global.update-prepare
         * @secure
         */
        this.devOrgsGlobalUpdatePrepare = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.global.update-prepare`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Rolls back a non committed update on a global Dev organization.
         *
         * @tags dev-orgs, dev-orgs-global
         * @name DevOrgsGlobalUpdateRollback
         * @request POST:/internal/dev-orgs.global.update-rollback
         * @secure
         */
        this.devOrgsGlobalUpdateRollback = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.global.update-rollback`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Create an invitation to a user.
         *
         * @tags dev-orgs
         * @name DevOrgsInvitesCreate
         * @request POST:/internal/dev-orgs.invites.create
         * @secure
         */
        this.devOrgsInvitesCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.invites.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: sambhav.jain@devrev.ai ### Gets the list of Dev user invitations in the user's Dev organization.
         *
         * @tags dev-orgs
         * @name DevOrgsInvitesList
         * @request GET:/internal/dev-orgs.invites.list
         * @secure
         */
        this.devOrgsInvitesList = (query, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.invites.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the list of Dev user invitations in the user's Dev organization.
         *
         * @tags dev-orgs
         * @name DevOrgsInvitesListPost
         * @request POST:/internal/dev-orgs.invites.list
         * @secure
         */
        this.devOrgsInvitesListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.invites.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: sambhav.jain@devrev.ai ### Gets a short-lived invitation url to join the organisation on the basis of email domain.
         *
         * @tags dev-orgs
         * @name DevOrgsJoin
         * @request GET:/internal/dev-orgs.join
         * @secure
         */
        this.devOrgsJoin = (query, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.join`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a short-lived invitation url to join the organisation on the basis of email domain.
         *
         * @tags dev-orgs
         * @name DevOrgsJoinPost
         * @request POST:/internal/dev-orgs.join
         * @secure
         */
        this.devOrgsJoinPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.join`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: sambhav.jain@devrev.ai ### Gets the list of Dev organizations for the authenticated Dev user.
         *
         * @tags dev-orgs
         * @name DevOrgsList
         * @request GET:/internal/dev-orgs.list
         * @secure
         */
        this.devOrgsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the list of Dev organizations for the authenticated Dev user.
         *
         * @tags dev-orgs
         * @name DevOrgsListPost
         * @request POST:/internal/dev-orgs.list
         * @secure
         */
        this.devOrgsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: sambhav.jain@devrev.ai ### Gets public information of a Dev organization from Slug.
         *
         * @tags dev-orgs
         * @name DevOrgPublicInfo
         * @request GET:/internal/dev-orgs.public-info.get
         */
        this.devOrgPublicInfo = (query, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.public-info.get`, method: 'GET', query: query, format: 'json' }, params));
        /**
         * @description Gets public information of a Dev organization from Slug.
         *
         * @tags dev-orgs
         * @name DevOrgPublicInfoPost
         * @request POST:/internal/dev-orgs.public-info.get
         * @secure
         */
        this.devOrgPublicInfoPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.public-info.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: sambhav.jain@devrev.ai ### Gets the authenticated user's Dev organization information.
         *
         * @tags dev-orgs
         * @name DevOrgsSelf
         * @request GET:/internal/dev-orgs.self
         * @secure
         */
        this.devOrgsSelf = (params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.self`, method: 'GET', secure: true, format: 'json' }, params));
        /**
         * @description Gets the authenticated user's Dev organization information.
         *
         * @tags dev-orgs
         * @name DevOrgsSelfPost
         * @request POST:/internal/dev-orgs.self
         * @secure
         */
        this.devOrgsSelfPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.self`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: sambhav.jain@devrev.ai ### Gets the authenticated user's Dev organization information.
         *
         * @tags dev-orgs
         * @name DevOrgsSelfGet
         * @request GET:/internal/dev-orgs.self.get
         * @secure
         */
        this.devOrgsSelfGet = (params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.self.get`, method: 'GET', secure: true, format: 'json' }, params));
        /**
         * @description Gets the authenticated user's Dev organization information.
         *
         * @tags dev-orgs
         * @name DevOrgsSelfGetPost
         * @request POST:/internal/dev-orgs.self.get
         * @secure
         */
        this.devOrgsSelfGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.self.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the Dev organization's information of the authenticated user.
         *
         * @tags dev-orgs
         * @name DevOrgsUpdate
         * @request POST:/internal/dev-orgs.update
         * @secure
         */
        this.devOrgsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-orgs.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Activates the requested user.
         *
         * @tags dev-users
         * @name DevUsersActivate
         * @request POST:/internal/dev-users.activate
         * @secure
         */
        this.devUsersActivate = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-users.activate`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Counts users within your organization.
         *
         * @tags dev-users
         * @name DevUsersCount
         * @request GET:/internal/dev-users.count
         * @secure
         */
        this.devUsersCount = (query, params = {}) => this.request(Object.assign({ path: `/internal/dev-users.count`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Counts users within your organization.
         *
         * @tags dev-users
         * @name DevUsersCountPost
         * @request POST:/internal/dev-users.count
         * @secure
         */
        this.devUsersCountPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-users.count`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a Dev User for a Dev Organization.
         *
         * @tags dev-users
         * @name DevUsersCreate
         * @request POST:/internal/dev-users.create
         * @secure
         */
        this.devUsersCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-users.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deactivates the requested user.
         *
         * @tags dev-users
         * @name DevUsersDeactivate
         * @request POST:/internal/dev-users.deactivate
         * @secure
         */
        this.devUsersDeactivate = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-users.deactivate`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes the requested user.
         *
         * @tags dev-users
         * @name DevUsersDelete
         * @request POST:/internal/dev-users.delete
         * @secure
         */
        this.devUsersDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-users.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Checks if a display handle is available for the authenticated user or not.
         *
         * @tags dev-users
         * @name DevUsersIsDisplayHandleAvailable
         * @request GET:/internal/dev-users.display-handles.is-available
         * @secure
         */
        this.devUsersIsDisplayHandleAvailable = (query, params = {}) => this.request(Object.assign({ path: `/internal/dev-users.display-handles.is-available`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Checks if a display handle is available for the authenticated user or not.
         *
         * @tags dev-users
         * @name DevUsersIsDisplayHandleAvailablePost
         * @request POST:/internal/dev-users.display-handles.is-available
         * @secure
         */
        this.devUsersIsDisplayHandleAvailablePost = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-users.display-handles.is-available`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the display picture of a Dev User
         *
         * @tags dev-users
         * @name DevUserUpdateDisplayPicture
         * @request POST:/internal/dev-users.display-picture
         * @secure
         */
        this.devUserUpdateDisplayPicture = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-users.display-picture`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the requested user's information.
         *
         * @tags dev-users
         * @name DevUsersGet
         * @request GET:/internal/dev-users.get
         * @secure
         */
        this.devUsersGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/dev-users.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the requested user's information.
         *
         * @tags dev-users
         * @name DevUsersGetPost
         * @request POST:/internal/dev-users.get
         * @secure
         */
        this.devUsersGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-users.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Links an external/secondary identity to the Dev user.
         *
         * @tags dev-users
         * @name DevUsersIdentitiesLink
         * @request POST:/internal/dev-users.identities.link
         * @secure
         */
        this.devUsersIdentitiesLink = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-users.identities.link`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Unlinks an external/secondary identity from the Dev user.
         *
         * @tags dev-users
         * @name DevUsersIdentitiesUnlink
         * @request POST:/internal/dev-users.identities.unlink
         * @secure
         */
        this.devUsersIdentitiesUnlink = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-users.identities.unlink`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists users within your organization.
         *
         * @tags dev-users
         * @name DevUsersList
         * @request GET:/internal/dev-users.list
         * @secure
         */
        this.devUsersList = (query, params = {}) => this.request(Object.assign({ path: `/internal/dev-users.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists users within your organization.
         *
         * @tags dev-users
         * @name DevUsersListPost
         * @request POST:/internal/dev-users.list
         * @secure
         */
        this.devUsersListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-users.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Logout from a Dev organization.
         *
         * @tags dev-users
         * @name DevUsersLogout
         * @request POST:/internal/dev-users.logout
         * @secure
         */
        this.devUsersLogout = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-users.logout`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Merges the identity of a secondary Dev user with the primary Dev user.The account of the secondary Dev user will be deactivated and will no longer be able to log into DevRev. All objects - issues, tickets, parts etc. owned by the secondary Dev user will be transferred to the primary Dev user.
         *
         * @tags dev-users
         * @name DevUsersMerge
         * @request POST:/internal/dev-users.merge
         * @secure
         */
        this.devUsersMerge = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-users.merge`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the user's phone number if the verification code entered by the user is valid.
         *
         * @tags dev-users
         * @name DevUsersCheckPhoneNumberCode
         * @request POST:/internal/dev-users.phonenumbers.check-code
         * @secure
         */
        this.devUsersCheckPhoneNumberCode = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-users.phonenumbers.check-code`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Sends a verification code to the user's phone number.
         *
         * @tags dev-users
         * @name DevUsersSendPhoneNumberCode
         * @request POST:/internal/dev-users.phonenumbers.send-code
         * @secure
         */
        this.devUsersSendPhoneNumberCode = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-users.phonenumbers.send-code`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Request made by UI to perform first set of operations when Dev user logs into a Dev organization.
         *
         * @tags dev-users
         * @name DevUsersPostLogin
         * @request POST:/internal/dev-users.post-login
         * @secure
         */
        this.devUsersPostLogin = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-users.post-login`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the authenticated user's information.
         *
         * @tags dev-users
         * @name DevUsersSelf
         * @request GET:/internal/dev-users.self
         * @secure
         */
        this.devUsersSelf = (params = {}) => this.request(Object.assign({ path: `/internal/dev-users.self`, method: 'GET', secure: true, format: 'json' }, params));
        /**
         * @description Gets the authenticated user's information.
         *
         * @tags dev-users
         * @name DevUsersSelfPost
         * @request POST:/internal/dev-users.self
         * @secure
         */
        this.devUsersSelfPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-users.self`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes the authenticated user.
         *
         * @tags dev-users
         * @name DevUsersSelfDelete
         * @request POST:/internal/dev-users.self.delete
         * @secure
         */
        this.devUsersSelfDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-users.self.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the authenticated user.
         *
         * @tags dev-users
         * @name DevUsersSelfUpdate
         * @request POST:/internal/dev-users.self.update
         * @secure
         */
        this.devUsersSelfUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-users.self.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the user corresponding to the input Id.
         *
         * @tags dev-users
         * @name DevUsersUpdate
         * @request POST:/internal/dev-users.update
         * @secure
         */
        this.devUsersUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/dev-users.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the specified directory's ancestors.
         *
         * @tags directory
         * @name DirectoryAncestors
         * @request GET:/internal/directories.ancestors
         * @secure
         */
        this.directoryAncestors = (query, params = {}) => this.request(Object.assign({ path: `/internal/directories.ancestors`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the specified directory's ancestors.
         *
         * @tags directory
         * @name DirectoryAncestorsPost
         * @request POST:/internal/directories.ancestors
         * @secure
         */
        this.directoryAncestorsPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/directories.ancestors`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Get count of directories matching given filter.
         *
         * @tags directory
         * @name DirectoriesCount
         * @request GET:/internal/directories.count
         * @secure
         */
        this.directoriesCount = (query, params = {}) => this.request(Object.assign({ path: `/internal/directories.count`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Get count of directories matching given filter.
         *
         * @tags directory
         * @name DirectoriesCountPost
         * @request POST:/internal/directories.count
         * @secure
         */
        this.directoriesCountPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/directories.count`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a directory for the specified inputs.
         *
         * @tags directory
         * @name DirectoriesCreate
         * @request POST:/internal/directories.create
         * @secure
         */
        this.directoriesCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/directories.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Delete the specified directory.
         *
         * @tags directory
         * @name DirectoriesDelete
         * @request POST:/internal/directories.delete
         * @secure
         */
        this.directoriesDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/directories.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the specified directory.
         *
         * @tags directory
         * @name DirectoriesGet
         * @request GET:/internal/directories.get
         * @secure
         */
        this.directoriesGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/directories.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the specified directory.
         *
         * @tags directory
         * @name DirectoriesGetPost
         * @request POST:/internal/directories.get
         * @secure
         */
        this.directoriesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/directories.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists directories matching the request.
         *
         * @tags directory
         * @name DirectoriesList
         * @request GET:/internal/directories.list
         * @secure
         */
        this.directoriesList = (query, params = {}) => this.request(Object.assign({ path: `/internal/directories.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists directories matching the request.
         *
         * @tags directory
         * @name DirectoriesListPost
         * @request POST:/internal/directories.list
         * @secure
         */
        this.directoriesListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/directories.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Get the directory tree for the specified directory.
         *
         * @tags directory
         * @name DirectoriesTree
         * @request GET:/internal/directories.tree
         * @secure
         */
        this.directoriesTree = (query, params = {}) => this.request(Object.assign({ path: `/internal/directories.tree`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Get the directory tree for the specified directory.
         *
         * @tags directory
         * @name DirectoriesTreePost
         * @request POST:/internal/directories.tree
         * @secure
         */
        this.directoriesTreePost = (data, params = {}) => this.request(Object.assign({ path: `/internal/directories.tree`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the specified directory.
         *
         * @tags directory
         * @name DirectoriesUpdate
         * @request POST:/internal/directories.update
         * @secure
         */
        this.directoriesUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/directories.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Schedule data collection for discovery.
         *
         * @tags discovery
         * @name ScheduleDataCollection
         * @request POST:/internal/discovery.data-collection.schedule
         * @secure
         */
        this.scheduleDataCollection = (data, params = {}) => this.request(Object.assign({ path: `/internal/discovery.data-collection.schedule`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Start data collection for discovery.
         *
         * @tags discovery
         * @name StartDataCollection
         * @request POST:/internal/discovery.data-collection.start
         * @secure
         */
        this.startDataCollection = (data, params = {}) => this.request(Object.assign({ path: `/internal/discovery.data-collection.start`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Unschedule data collection for discovery.
         *
         * @tags discovery
         * @name UnscheduleDataCollection
         * @request POST:/internal/discovery.data-collection.unschedule
         * @secure
         */
        this.unscheduleDataCollection = (data, params = {}) => this.request(Object.assign({ path: `/internal/discovery.data-collection.unschedule`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Create discovery profile.
         *
         * @tags discovery
         * @name CreateDiscoveryProfile
         * @request POST:/internal/discovery.profiles.create
         * @secure
         */
        this.createDiscoveryProfile = (data, params = {}) => this.request(Object.assign({ path: `/internal/discovery.profiles.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Delete discovery profile.
         *
         * @tags discovery
         * @name DeleteDiscoveryProfile
         * @request POST:/internal/discovery.profiles.delete
         * @secure
         */
        this.deleteDiscoveryProfile = (data, params = {}) => this.request(Object.assign({ path: `/internal/discovery.profiles.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Get discovery profile.
         *
         * @tags discovery
         * @name GetDiscoveryProfile
         * @request POST:/internal/discovery.profiles.get
         * @secure
         */
        this.getDiscoveryProfile = (data, params = {}) => this.request(Object.assign({ path: `/internal/discovery.profiles.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description List discovery profiles.
         *
         * @tags discovery
         * @name ListDiscoveryProfiles
         * @request GET:/internal/discovery.profiles.list
         * @secure
         */
        this.listDiscoveryProfiles = (query, params = {}) => this.request(Object.assign({ path: `/internal/discovery.profiles.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description List discovery profiles.
         *
         * @tags discovery
         * @name ListDiscoveryProfilesPost
         * @request POST:/internal/discovery.profiles.list
         * @secure
         */
        this.listDiscoveryProfilesPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/discovery.profiles.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Update discovery profile.
         *
         * @tags discovery
         * @name UpdateDiscoveryProfile
         * @request POST:/internal/discovery.profiles.update
         * @secure
         */
        this.updateDiscoveryProfile = (data, params = {}) => this.request(Object.assign({ path: `/internal/discovery.profiles.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Run discovery using profile.
         *
         * @tags discovery
         * @name RunDiscovery
         * @request POST:/internal/discovery.run
         * @secure
         */
        this.runDiscovery = (data, params = {}) => this.request(Object.assign({ path: `/internal/discovery.run`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Get discovery run status.
         *
         * @tags discovery
         * @name GetDiscoveryRun
         * @request GET:/internal/discovery.run.status
         * @secure
         */
        this.getDiscoveryRun = (query, params = {}) => this.request(Object.assign({ path: `/internal/discovery.run.status`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Get discovery run status.
         *
         * @tags discovery
         * @name GetDiscoveryRunPost
         * @request POST:/internal/discovery.run.status
         * @secure
         */
        this.getDiscoveryRunPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/discovery.run.status`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Schedule discovery run.
         *
         * @tags discovery
         * @name ScheduleDiscovery
         * @request POST:/internal/discovery.schedule
         * @secure
         */
        this.scheduleDiscovery = (data, params = {}) => this.request(Object.assign({ path: `/internal/discovery.schedule`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Create discovery Settings.
         *
         * @tags discovery
         * @name CreateDiscoverySettings
         * @request POST:/internal/discovery.settings.create
         * @secure
         */
        this.createDiscoverySettings = (data, params = {}) => this.request(Object.assign({ path: `/internal/discovery.settings.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Delete discovery Settings.
         *
         * @tags discovery
         * @name DeleteDiscoverySettings
         * @request POST:/internal/discovery.settings.delete
         * @secure
         */
        this.deleteDiscoverySettings = (data, params = {}) => this.request(Object.assign({ path: `/internal/discovery.settings.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Get discovery Settings.
         *
         * @tags discovery
         * @name GetDiscoverySettings
         * @request GET:/internal/discovery.settings.get
         * @secure
         */
        this.getDiscoverySettings = (query, params = {}) => this.request(Object.assign({ path: `/internal/discovery.settings.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Get discovery Settings.
         *
         * @tags discovery
         * @name GetDiscoverySettingsPost
         * @request POST:/internal/discovery.settings.get
         * @secure
         */
        this.getDiscoverySettingsPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/discovery.settings.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Update discovery Settings.
         *
         * @tags discovery
         * @name UpdateDiscoverySettings
         * @request POST:/internal/discovery.settings.update
         * @secure
         */
        this.updateDiscoverySettings = (data, params = {}) => this.request(Object.assign({ path: `/internal/discovery.settings.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description List discovery sources.
         *
         * @tags discovery
         * @name ListDiscoverySources
         * @request GET:/internal/discovery.sources.list
         * @secure
         */
        this.listDiscoverySources = (query, params = {}) => this.request(Object.assign({ path: `/internal/discovery.sources.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description List discovery sources.
         *
         * @tags discovery
         * @name ListDiscoverySourcesPost
         * @request POST:/internal/discovery.sources.list
         * @secure
         */
        this.listDiscoverySourcesPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/discovery.sources.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Unschedule discovery run.
         *
         * @tags discovery
         * @name UnscheduleDiscovery
         * @request POST:/internal/discovery.unschedule
         * @secure
         */
        this.unscheduleDiscovery = (data, params = {}) => this.request(Object.assign({ path: `/internal/discovery.unschedule`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Sends an email from the devorg
         *
         * @tags dmarc
         * @name DmarcSendEmail
         * @request POST:/internal/dmarc.send-email
         * @secure
         */
        this.dmarcSendEmail = (data, params = {}) => this.request(Object.assign({ path: `/internal/dmarc.send-email`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates domain identity for the supplied domain
         *
         * @tags domain-identity
         * @name DomainIdentitiesCreate
         * @request POST:/internal/domain-identities.create
         * @secure
         */
        this.domainIdentitiesCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/domain-identities.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Syncs the domain identity verification status
         *
         * @tags domain-identity
         * @name DomainIdentitiesSync
         * @request POST:/internal/domain-identities.sync
         * @secure
         */
        this.domainIdentitiesSync = (data, params = {}) => this.request(Object.assign({ path: `/internal/domain-identities.sync`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a new emoji.
         *
         * @tags emojis
         * @name EmojisCreate
         * @request POST:/internal/emojis.create
         * @secure
         */
        this.emojisCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/emojis.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes an emoji.
         *
         * @tags emojis
         * @name EmojisDelete
         * @request POST:/internal/emojis.delete
         * @secure
         */
        this.emojisDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/emojis.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: brian.byrne@devrev.ai ### Looks up an emoji.
         *
         * @tags emojis
         * @name EmojisGet
         * @request GET:/internal/emojis.get
         * @secure
         */
        this.emojisGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/emojis.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Looks up an emoji.
         *
         * @tags emojis
         * @name EmojisGetPost
         * @request POST:/internal/emojis.get
         * @secure
         */
        this.emojisGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/emojis.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: brian.byrne@devrev.ai ### Lists the emojis.
         *
         * @tags emojis
         * @name EmojisList
         * @request GET:/internal/emojis.list
         * @secure
         */
        this.emojisList = (query, params = {}) => this.request(Object.assign({ path: `/internal/emojis.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the emojis.
         *
         * @tags emojis
         * @name EmojisListPost
         * @request POST:/internal/emojis.list
         * @secure
         */
        this.emojisListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/emojis.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: brian.byrne@devrev.ai ### Searches the emojis.
         *
         * @tags emojis
         * @name EmojisSearch
         * @request GET:/internal/emojis.search
         * @secure
         */
        this.emojisSearch = (query, params = {}) => this.request(Object.assign({ path: `/internal/emojis.search`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Searches the emojis.
         *
         * @tags emojis
         * @name EmojisSearchPost
         * @request POST:/internal/emojis.search
         * @secure
         */
        this.emojisSearchPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/emojis.search`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates an emoji.
         *
         * @tags emojis
         * @name EmojisUpdate
         * @request POST:/internal/emojis.update
         * @secure
         */
        this.emojisUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/emojis.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: rahul.jain@devrev.ai ### Counts the engagement records.
         *
         * @tags engagements
         * @name EngagementsCount
         * @request GET:/internal/engagements.count
         * @secure
         */
        this.engagementsCount = (query, params = {}) => this.request(Object.assign({ path: `/internal/engagements.count`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Counts the engagement records.
         *
         * @tags engagements
         * @name EngagementsCountPost
         * @request POST:/internal/engagements.count
         * @secure
         */
        this.engagementsCountPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/engagements.count`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a new engagement record.
         *
         * @tags engagements
         * @name EngagementsCreate
         * @request POST:/internal/engagements.create
         * @secure
         */
        this.engagementsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/engagements.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes the engagement record.
         *
         * @tags engagements
         * @name EngagementsDelete
         * @request POST:/internal/engagements.delete
         * @secure
         */
        this.engagementsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/engagements.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: rahul.jain@devrev.ai ### Gets the engagement record.
         *
         * @tags engagements
         * @name EngagementsGet
         * @request GET:/internal/engagements.get
         * @secure
         */
        this.engagementsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/engagements.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the engagement record.
         *
         * @tags engagements
         * @name EngagementsGetPost
         * @request POST:/internal/engagements.get
         * @secure
         */
        this.engagementsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/engagements.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: rahul.jain@devrev.ai ### Lists the engagement records.
         *
         * @tags engagements
         * @name EngagementsList
         * @request GET:/internal/engagements.list
         * @secure
         */
        this.engagementsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/engagements.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the engagement records.
         *
         * @tags engagements
         * @name EngagementsListPost
         * @request POST:/internal/engagements.list
         * @secure
         */
        this.engagementsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/engagements.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the engagement record.
         *
         * @tags engagements
         * @name EngagementsUpdate
         * @request POST:/internal/engagements.update
         * @secure
         */
        this.engagementsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/engagements.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates an event source.
         *
         * @tags event-source
         * @name EventSourcesCreate
         * @request POST:/internal/event-sources.create
         * @secure
         */
        this.eventSourcesCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/event-sources.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes an event source.
         *
         * @tags event-source
         * @name EventSourceDelete
         * @request POST:/internal/event-sources.delete
         * @secure
         */
        this.eventSourceDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/event-sources.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Gets an event source.
         *
         * @tags event-source
         * @name EventSourcesGet
         * @request GET:/internal/event-sources.get
         * @secure
         */
        this.eventSourcesGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/event-sources.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets an event source.
         *
         * @tags event-source
         * @name EventSourcesGetPost
         * @request POST:/internal/event-sources.get
         * @secure
         */
        this.eventSourcesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/event-sources.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists event sources for a Dev organization.
         *
         * @tags event-source
         * @name EventSourcesList
         * @request GET:/internal/event-sources.list
         * @secure
         */
        this.eventSourcesList = (query, params = {}) => this.request(Object.assign({ path: `/internal/event-sources.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists event sources for a Dev organization.
         *
         * @tags event-source
         * @name EventSourcesListPost
         * @request POST:/internal/event-sources.list
         * @secure
         */
        this.eventSourcesListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/event-sources.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Schedules an event to be published to the specified event source.
         *
         * @tags event-source
         * @name EventSourcesScheduleEvent
         * @request POST:/internal/event-sources.schedule
         * @secure
         */
        this.eventSourcesScheduleEvent = (data, params = {}) => this.request(Object.assign({ path: `/internal/event-sources.schedule`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes an event scheduled for the specified event source.
         *
         * @tags event-source
         * @name EventSourcesDeleteScheduledEvent
         * @request POST:/internal/event-sources.unschedule
         * @secure
         */
        this.eventSourcesDeleteScheduledEvent = (data, params = {}) => this.request(Object.assign({ path: `/internal/event-sources.unschedule`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Updates an event source.
         *
         * @tags event-source
         * @name EventSourceUpdate
         * @request POST:/internal/event-sources.update
         * @secure
         */
        this.eventSourceUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/event-sources.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: brian.byrne@devrev.ai ### Gets the flags for a user.
         *
         * @tags experience
         * @name ExperienceFlagsGet
         * @request GET:/internal/experience.flags.get
         */
        this.experienceFlagsGet = (params = {}) => this.request(Object.assign({ path: `/internal/experience.flags.get`, method: 'GET', format: 'json' }, params));
        /**
         * @description Gets the flags for a user.
         *
         * @tags experience
         * @name ExperienceFlagsGetPost
         * @request POST:/internal/experience.flags.get
         * @secure
         */
        this.experienceFlagsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/experience.flags.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: brian.byrne@devrev.ai ### Gets toggles for a user or organization.
         *
         * @tags experience
         * @name ExperienceTogglesGet
         * @request GET:/internal/experience.toggles.get
         * @secure
         */
        this.experienceTogglesGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/experience.toggles.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets toggles for a user or organization.
         *
         * @tags experience
         * @name ExperienceTogglesGetPost
         * @request POST:/internal/experience.toggles.get
         * @secure
         */
        this.experienceTogglesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/experience.toggles.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Sets toggles for a user or organization.
         *
         * @tags experience
         * @name ExperienceTogglesSet
         * @request POST:/internal/experience.toggles.set
         * @secure
         */
        this.experienceTogglesSet = (data, params = {}) => this.request(Object.assign({ path: `/internal/experience.toggles.set`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: amisha.kothari@devrev.ai ### List all explore views of a section.
         *
         * @tags menu
         * @name ExploreViewsList
         * @request GET:/internal/explore-views.list
         * @secure
         */
        this.exploreViewsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/explore-views.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description List all explore views of a section.
         *
         * @tags menu
         * @name ExploreViewsListPost
         * @request POST:/internal/explore-views.list
         * @secure
         */
        this.exploreViewsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/explore-views.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Evaluates a boolean expression.
         *
         * @tags expressions
         * @name BooleanExpressionsEvaluate
         * @request POST:/internal/expressions.boolean.evaluate
         * @secure
         */
        this.booleanExpressionsEvaluate = (data, params = {}) => this.request(Object.assign({ path: `/internal/expressions.boolean.evaluate`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Validates a boolean expression.
         *
         * @tags expressions
         * @name BooleanExpressionsValidate
         * @request POST:/internal/expressions.boolean.validate
         * @secure
         */
        this.booleanExpressionsValidate = (data, params = {}) => this.request(Object.assign({ path: `/internal/expressions.boolean.validate`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a flow.
         *
         * @tags flows
         * @name FlowDelete
         * @request POST:/internal/flows.delete
         * @secure
         */
        this.flowDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/flows.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Gets a Flow.
         *
         * @tags flows
         * @name FlowGet
         * @request GET:/internal/flows.get
         * @secure
         */
        this.flowGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/flows.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a Flow.
         *
         * @tags flows
         * @name FlowGetPost
         * @request POST:/internal/flows.get
         * @secure
         */
        this.flowGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/flows.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates GitHub flow with the given parameters.
         *
         * @tags flows
         * @name FlowsGithubCreate
         * @request POST:/internal/flows.github.create
         * @secure
         */
        this.flowsGithubCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/flows.github.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists flows for a Dev organization.
         *
         * @tags flows
         * @name FlowsList
         * @request GET:/internal/flows.list
         * @secure
         */
        this.flowsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/flows.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists flows for a Dev organization.
         *
         * @tags flows
         * @name FlowsListPost
         * @request POST:/internal/flows.list
         * @secure
         */
        this.flowsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/flows.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a Flow.
         *
         * @tags flows
         * @name FlowUpdate
         * @request POST:/internal/flows.update
         * @secure
         */
        this.flowUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/flows.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Validates the flow template and version update
         *
         * @tags flows
         * @name ValidateFlowTemplate
         * @request POST:/internal/flows.validate.template
         * @secure
         */
        this.validateFlowTemplate = (data, params = {}) => this.request(Object.assign({ path: `/internal/flows.validate.template`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Replication of a keyring from one region to global.
         *
         * @tags keyring
         * @name GlobalKeyringCreate
         * @request POST:/internal/global.keyrings.create
         * @secure
         */
        this.globalKeyringCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/global.keyrings.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: sathish.kumarhs@devrev.ai ### Get a keyring from global.
         *
         * @tags keyring
         * @name GlobalKeyringGet
         * @request GET:/internal/global.keyrings.get
         * @secure
         */
        this.globalKeyringGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/global.keyrings.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Get a keyring from global.
         *
         * @tags keyring
         * @name GlobalKeyringGetPost
         * @request POST:/internal/global.keyrings.get
         * @secure
         */
        this.globalKeyringGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/global.keyrings.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Update a keyring in global.
         *
         * @tags keyring
         * @name GlobalKeyringUpdate
         * @request POST:/internal/global.keyrings.update
         * @secure
         */
        this.globalKeyringUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/global.keyrings.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a new marketplace category.
         *
         * @tags marketplace, marketplace-global-store
         * @name GlobalStoreMarketplaceCategoriesCreate
         * @request POST:/internal/global.marketplace-categories.create
         * @secure
         */
        this.globalStoreMarketplaceCategoriesCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/global.marketplace-categories.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a marketplace category.
         *
         * @tags marketplace, marketplace-global-store
         * @name GlobalStoreMarketplaceCategoriesDelete
         * @request POST:/internal/global.marketplace-categories.delete
         * @secure
         */
        this.globalStoreMarketplaceCategoriesDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/global.marketplace-categories.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: luka.kosenina@devrev.ai ### Gets a marketplace category.
         *
         * @tags marketplace, marketplace-global-store
         * @name GlobalStoreMarketplaceCategoriesGet
         * @request GET:/internal/global.marketplace-categories.get
         * @secure
         */
        this.globalStoreMarketplaceCategoriesGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/global.marketplace-categories.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a marketplace category.
         *
         * @tags marketplace, marketplace-global-store
         * @name GlobalStoreMarketplaceCategoriesGetPost
         * @request POST:/internal/global.marketplace-categories.get
         * @secure
         */
        this.globalStoreMarketplaceCategoriesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/global.marketplace-categories.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: luka.kosenina@devrev.ai ### Gets the categories for a marketplace.
         *
         * @tags marketplace, marketplace-global-store
         * @name GlobalStoreMarketplaceCategoriesList
         * @request GET:/internal/global.marketplace-categories.list
         * @secure
         */
        this.globalStoreMarketplaceCategoriesList = (query, params = {}) => this.request(Object.assign({ path: `/internal/global.marketplace-categories.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the categories for a marketplace.
         *
         * @tags marketplace, marketplace-global-store
         * @name GlobalStoreMarketplaceCategoriesListPost
         * @request POST:/internal/global.marketplace-categories.list
         * @secure
         */
        this.globalStoreMarketplaceCategoriesListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/global.marketplace-categories.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a marketplace category.
         *
         * @tags marketplace, marketplace-global-store
         * @name GlobalStoreMarketplaceCategoriesUpdate
         * @request POST:/internal/global.marketplace-categories.update
         * @secure
         */
        this.globalStoreMarketplaceCategoriesUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/global.marketplace-categories.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a marketplace item.
         *
         * @tags marketplace, marketplace-global-store
         * @name GlobalStoreMarketplaceItemsCreate
         * @request POST:/internal/global.marketplace-items.create
         * @secure
         */
        this.globalStoreMarketplaceItemsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/global.marketplace-items.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a marketplace item.
         *
         * @tags marketplace, marketplace-global-store
         * @name GlobalStoreMarketplaceItemsDelete
         * @request POST:/internal/global.marketplace-items.delete
         * @secure
         */
        this.globalStoreMarketplaceItemsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/global.marketplace-items.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description ### Owner: luka.kosenina@devrev.ai ### Gets a marketplace item.
         *
         * @tags marketplace, marketplace-global-store
         * @name GlobalStoreMarketplaceItemsGet
         * @request GET:/internal/global.marketplace-items.get
         * @secure
         */
        this.globalStoreMarketplaceItemsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/global.marketplace-items.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a marketplace item.
         *
         * @tags marketplace, marketplace-global-store
         * @name GlobalStoreMarketplaceItemsGetPost
         * @request POST:/internal/global.marketplace-items.get
         * @secure
         */
        this.globalStoreMarketplaceItemsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/global.marketplace-items.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Invites a dev org to access marketplace item.
         *
         * @tags marketplace, marketplace-global-store
         * @name GlobalStoreMarketplaceItemsInvite
         * @request POST:/internal/global.marketplace-items.invite
         * @secure
         */
        this.globalStoreMarketplaceItemsInvite = (data, params = {}) => this.request(Object.assign({ path: `/internal/global.marketplace-items.invite`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the marketplace items.
         *
         * @tags marketplace, marketplace-global-store
         * @name GlobalStoreMarketplaceItemsList
         * @request GET:/internal/global.marketplace-items.list
         * @secure
         */
        this.globalStoreMarketplaceItemsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/global.marketplace-items.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the marketplace items.
         *
         * @tags marketplace, marketplace-global-store
         * @name GlobalStoreMarketplaceItemsListPost
         * @request POST:/internal/global.marketplace-items.list
         * @secure
         */
        this.globalStoreMarketplaceItemsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/global.marketplace-items.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the meta score for the provided marketplace item. This is only applicable to the marketplace owners.
         *
         * @tags marketplace, marketplace-global-store
         * @name GlobalStoreMarketplaceItemsRank
         * @request POST:/internal/global.marketplace-items.rank
         * @secure
         */
        this.globalStoreMarketplaceItemsRank = (data, params = {}) => this.request(Object.assign({ path: `/internal/global.marketplace-items.rank`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: gokul.ks@devrev.ai ### Searches marketplace items.
         *
         * @tags marketplace, marketplace-global-store
         * @name GlobalStoreMarketplaceItemsSearch
         * @request GET:/internal/global.marketplace-items.search
         * @secure
         */
        this.globalStoreMarketplaceItemsSearch = (query, params = {}) => this.request(Object.assign({ path: `/internal/global.marketplace-items.search`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Searches marketplace items.
         *
         * @tags marketplace, marketplace-global-store
         * @name GlobalStoreMarketplaceItemsSearchPost
         * @request POST:/internal/global.marketplace-items.search
         * @secure
         */
        this.globalStoreMarketplaceItemsSearchPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/global.marketplace-items.search`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Puts a marketplace item in desired state.
         *
         * @tags marketplace, marketplace-global-store
         * @name GlobalStoreMarketplaceItemsTransition
         * @request POST:/internal/global.marketplace-items.transition
         * @secure
         */
        this.globalStoreMarketplaceItemsTransition = (data, params = {}) => this.request(Object.assign({ path: `/internal/global.marketplace-items.transition`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a marketplace item.
         *
         * @tags marketplace, marketplace-global-store
         * @name GlobalStoreMarketplaceItemsUpdate
         * @request POST:/internal/global.marketplace-items.update
         * @secure
         */
        this.globalStoreMarketplaceItemsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/global.marketplace-items.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: luka.kosenina@devrev.ai ### Gets a marketplace.
         *
         * @tags marketplace, marketplace-global-store
         * @name GlobalStoreMarketplacesGet
         * @request GET:/internal/global.marketplaces.get
         * @secure
         */
        this.globalStoreMarketplacesGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/global.marketplaces.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a marketplace.
         *
         * @tags marketplace, marketplace-global-store
         * @name GlobalStoreMarketplacesGetPost
         * @request POST:/internal/global.marketplaces.get
         * @secure
         */
        this.globalStoreMarketplacesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/global.marketplaces.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: luka.kosenina@devrev.ai ### Gets the marketplaces.
         *
         * @tags marketplace, marketplace-global-store
         * @name GlobalStoreMarketplacesList
         * @request GET:/internal/global.marketplaces.list
         * @secure
         */
        this.globalStoreMarketplacesList = (params = {}) => this.request(Object.assign({ path: `/internal/global.marketplaces.list`, method: 'GET', secure: true, format: 'json' }, params));
        /**
         * @description Gets the marketplaces.
         *
         * @tags marketplace, marketplace-global-store
         * @name GlobalStoreMarketplacesListPost
         * @request POST:/internal/global.marketplaces.list
         * @secure
         */
        this.globalStoreMarketplacesListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/global.marketplaces.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Executes a GraphQL request.
         *
         * @name Graphql
         * @request POST:/internal/graphql.execute
         * @secure
         */
        this.graphql = (data, params = {}) => this.request(Object.assign({ path: `/internal/graphql.execute`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a new group. A group is a collection of users.
         *
         * @tags groups
         * @name GroupsCreate
         * @request POST:/internal/groups.create
         * @secure
         */
        this.groupsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/groups.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes the requested group.
         *
         * @tags groups
         * @name GroupsDelete
         * @request POST:/internal/groups.delete
         * @secure
         */
        this.groupsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/groups.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: akanksha.deswal@devrev.ai ### Gets the requested group.
         *
         * @tags groups
         * @name GroupsGet
         * @request GET:/internal/groups.get
         * @secure
         */
        this.groupsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/groups.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the requested group.
         *
         * @tags groups
         * @name GroupsGetPost
         * @request POST:/internal/groups.get
         * @secure
         */
        this.groupsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/groups.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: akanksha.deswal@devrev.ai ### Lists the available groups.
         *
         * @tags groups
         * @name GroupsList
         * @request GET:/internal/groups.list
         * @secure
         */
        this.groupsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/groups.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the available groups.
         *
         * @tags groups
         * @name GroupsListPost
         * @request POST:/internal/groups.list
         * @secure
         */
        this.groupsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/groups.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Adds a member to a group.
         *
         * @tags groups
         * @name GroupMembersAdd
         * @request POST:/internal/groups.members.add
         * @secure
         */
        this.groupMembersAdd = (data, params = {}) => this.request(Object.assign({ path: `/internal/groups.members.add`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: akanksha.deswal@devrev.ai ### Lists the members in a group.
         *
         * @tags groups
         * @name GroupMembersList
         * @request GET:/internal/groups.members.list
         * @secure
         */
        this.groupMembersList = (query, params = {}) => this.request(Object.assign({ path: `/internal/groups.members.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the members in a group.
         *
         * @tags groups
         * @name GroupMembersListPost
         * @request POST:/internal/groups.members.list
         * @secure
         */
        this.groupMembersListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/groups.members.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Removes a member from a group.
         *
         * @tags groups
         * @name GroupMembersRemove
         * @request POST:/internal/groups.members.remove
         * @secure
         */
        this.groupMembersRemove = (data, params = {}) => this.request(Object.assign({ path: `/internal/groups.members.remove`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the requested group.
         *
         * @tags groups
         * @name GroupsUpdate
         * @request POST:/internal/groups.update
         * @secure
         */
        this.groupsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/groups.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Counts the number of incidents based on the given filters.
         *
         * @tags operate
         * @name IncidentsCount
         * @request GET:/internal/incidents.count
         * @secure
         */
        this.incidentsCount = (query, params = {}) => this.request(Object.assign({ path: `/internal/incidents.count`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Counts the number of incidents based on the given filters.
         *
         * @tags operate
         * @name IncidentsCountPost
         * @request POST:/internal/incidents.count
         * @secure
         */
        this.incidentsCountPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/incidents.count`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates an incident.
         *
         * @tags operate
         * @name IncidentsCreate
         * @request POST:/internal/incidents.create
         * @secure
         */
        this.incidentsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/incidents.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes an incident.
         *
         * @tags operate
         * @name IncidentsDelete
         * @request POST:/internal/incidents.delete
         * @secure
         */
        this.incidentsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/incidents.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets an incident.
         *
         * @tags operate
         * @name IncidentsGet
         * @request GET:/internal/incidents.get
         * @secure
         */
        this.incidentsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/incidents.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets an incident.
         *
         * @tags operate
         * @name IncidentsGetPost
         * @request POST:/internal/incidents.get
         * @secure
         */
        this.incidentsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/incidents.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists collections of incidents by groups.
         *
         * @tags operate
         * @name IncidentsGroup
         * @request GET:/internal/incidents.group
         * @secure
         */
        this.incidentsGroup = (query, params = {}) => this.request(Object.assign({ path: `/internal/incidents.group`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists collections of incidents by groups.
         *
         * @tags operate
         * @name IncidentsGroupPost
         * @request POST:/internal/incidents.group
         * @secure
         */
        this.incidentsGroupPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/incidents.group`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists incidents.
         *
         * @tags operate
         * @name IncidentsList
         * @request GET:/internal/incidents.list
         * @secure
         */
        this.incidentsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/incidents.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists incidents.
         *
         * @tags operate
         * @name IncidentsListPost
         * @request POST:/internal/incidents.list
         * @secure
         */
        this.incidentsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/incidents.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates an incident.
         *
         * @tags operate
         * @name IncidentsUpdate
         * @request POST:/internal/incidents.update
         * @secure
         */
        this.incidentsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/incidents.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets an Insight.
         *
         * @tags insights
         * @name InsightsGet
         * @request GET:/internal/insights.get
         * @secure
         */
        this.insightsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/insights.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets an Insight.
         *
         * @tags insights
         * @name InsightsGetPost
         * @request POST:/internal/insights.get
         * @secure
         */
        this.insightsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/insights.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists insights.
         *
         * @tags insights
         * @name InsightsList
         * @request GET:/internal/insights.list
         * @secure
         */
        this.insightsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/insights.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists insights.
         *
         * @tags insights
         * @name InsightsListPost
         * @request POST:/internal/insights.list
         * @secure
         */
        this.insightsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/insights.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists insight values.
         *
         * @tags insights
         * @name InsightsValuesList
         * @request GET:/internal/insights.values.list
         * @secure
         */
        this.insightsValuesList = (query, params = {}) => this.request(Object.assign({ path: `/internal/insights.values.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists insight values.
         *
         * @tags insights
         * @name InsightsValuesListPost
         * @request POST:/internal/insights.values.list
         * @secure
         */
        this.insightsValuesListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/insights.values.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates an interaction.
         *
         * @tags interactions
         * @name InteractionsCreate
         * @request POST:/internal/interactions.create
         * @secure
         */
        this.interactionsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/interactions.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes an interaction.
         *
         * @tags interactions
         * @name InteractionsDelete
         * @request POST:/internal/interactions.delete
         * @secure
         */
        this.interactionsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/interactions.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Embeds interaction into parent object.
         *
         * @tags interactions
         * @name InteractionsEmbed
         * @request POST:/internal/interactions.embed
         * @secure
         */
        this.interactionsEmbed = (data, params = {}) => this.request(Object.assign({ path: `/internal/interactions.embed`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: nitesh.dubey@devrev.ai ### Gets an interaction.
         *
         * @tags interactions
         * @name InteractionsGet
         * @request GET:/internal/interactions.get
         * @secure
         */
        this.interactionsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/interactions.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets an interaction.
         *
         * @tags interactions
         * @name InteractionsGetPost
         * @request POST:/internal/interactions.get
         * @secure
         */
        this.interactionsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/interactions.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: nitesh.dubey@devrev.ai ### Lists interactions.
         *
         * @tags interactions
         * @name InteractionsList
         * @request GET:/internal/interactions.list
         * @secure
         */
        this.interactionsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/interactions.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists interactions.
         *
         * @tags interactions
         * @name InteractionsListPost
         * @request POST:/internal/interactions.list
         * @secure
         */
        this.interactionsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/interactions.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates an interaction.
         *
         * @tags interactions
         * @name InteractionsUpdate
         * @request POST:/internal/interactions.update
         * @secure
         */
        this.interactionsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/interactions.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Counts the number of invoices based on the given filters.
         *
         * @tags commerce
         * @name InvoicesCount
         * @request GET:/internal/invoices.count
         * @secure
         */
        this.invoicesCount = (query, params = {}) => this.request(Object.assign({ path: `/internal/invoices.count`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Counts the number of invoices based on the given filters.
         *
         * @tags commerce
         * @name InvoicesCountPost
         * @request POST:/internal/invoices.count
         * @secure
         */
        this.invoicesCountPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/invoices.count`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes an invoice.
         *
         * @tags commerce
         * @name InvoicesDelete
         * @request POST:/internal/invoices.delete
         * @secure
         */
        this.invoicesDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/invoices.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Returns the invoice download url.
         *
         * @tags commerce
         * @name InvoicesDownload
         * @request GET:/internal/invoices.download
         * @secure
         */
        this.invoicesDownload = (query, params = {}) => this.request(Object.assign({ path: `/internal/invoices.download`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Returns the invoice download url.
         *
         * @tags commerce
         * @name InvoicesDownloadPost
         * @request POST:/internal/invoices.download
         * @secure
         */
        this.invoicesDownloadPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/invoices.download`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Returns the invoice.
         *
         * @tags commerce
         * @name InvoicesGet
         * @request GET:/internal/invoices.get
         * @secure
         */
        this.invoicesGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/invoices.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Returns the invoice.
         *
         * @tags commerce
         * @name InvoicesGetPost
         * @request POST:/internal/invoices.get
         * @secure
         */
        this.invoicesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/invoices.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description List invoices for a customer.
         *
         * @tags commerce
         * @name InvoicesList
         * @request GET:/internal/invoices.list
         * @secure
         */
        this.invoicesList = (query, params = {}) => this.request(Object.assign({ path: `/internal/invoices.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description List invoices for a customer.
         *
         * @tags commerce
         * @name InvoicesListPost
         * @request POST:/internal/invoices.list
         * @secure
         */
        this.invoicesListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/invoices.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a one time invoice.
         *
         * @tags commerce
         * @name InvoicesOneTimeCreate
         * @request POST:/internal/invoices.one-time.create
         * @secure
         */
        this.invoicesOneTimeCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/invoices.one-time.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Returns the invoice pay url.
         *
         * @tags commerce
         * @name InvoicesPay
         * @request GET:/internal/invoices.pay
         * @secure
         */
        this.invoicesPay = (query, params = {}) => this.request(Object.assign({ path: `/internal/invoices.pay`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Returns the invoice pay url.
         *
         * @tags commerce
         * @name InvoicesPayPost
         * @request POST:/internal/invoices.pay
         * @secure
         */
        this.invoicesPayPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/invoices.pay`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a invoice.
         *
         * @tags commerce
         * @name InvoicesUpdate
         * @request POST:/internal/invoices.update
         * @secure
         */
        this.invoicesUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/invoices.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: shams.ansari@devrev.ai ### Retrieves a job's information.
         *
         * @tags jobstore
         * @name GetJob
         * @request GET:/internal/jobs.get
         * @secure
         */
        this.getJob = (query, params = {}) => this.request(Object.assign({ path: `/internal/jobs.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Retrieves a job's information.
         *
         * @tags jobstore
         * @name GetJobPost
         * @request POST:/internal/jobs.get
         * @secure
         */
        this.getJobPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/jobs.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a list of jobs.
         *
         * @tags jobstore
         * @name ListJobs
         * @request POST:/internal/jobs.list
         * @secure
         */
        this.listJobs = (data, params = {}) => this.request(Object.assign({ path: `/internal/jobs.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description OAuth2 authorization callback.
         *
         * @tags keyring
         * @name KeyringsCreateCallback
         * @request GET:/internal/keyrings.authorize
         */
        this.keyringsCreateCallback = (query, params = {}) => this.request(Object.assign({ path: `/internal/keyrings.authorize`, method: 'GET', query: query }, params));
        /**
         * @description OAuth2 authorization callback.
         *
         * @tags keyring
         * @name KeyringsCreateCallbackPost
         * @request POST:/internal/keyrings.authorize
         * @secure
         */
        this.keyringsCreateCallbackPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/keyrings.authorize`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Lists capabilities.
         *
         * @tags keyring
         * @name CapabilitiesList
         * @request GET:/internal/keyrings.capability.list
         * @secure
         */
        this.capabilitiesList = (params = {}) => this.request(Object.assign({ path: `/internal/keyrings.capability.list`, method: 'GET', secure: true, format: 'json' }, params));
        /**
         * @description Lists capabilities.
         *
         * @tags keyring
         * @name CapabilitiesListPost
         * @request POST:/internal/keyrings.capability.list
         * @secure
         */
        this.capabilitiesListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/keyrings.capability.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a keyring.
         *
         * @tags keyring
         * @name KeyringsCreate
         * @request POST:/internal/keyrings.create
         * @secure
         */
        this.keyringsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/keyrings.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a keyring.
         *
         * @tags keyring
         * @name KeyringsDelete
         * @request POST:/internal/keyrings.delete
         * @secure
         */
        this.keyringsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/keyrings.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Lists external organiztaions linked to a keyring.
         *
         * @tags keyring
         * @name ExternalOrgsList
         * @request GET:/internal/keyrings.external_org.list
         * @secure
         */
        this.externalOrgsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/keyrings.external_org.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists external organiztaions linked to a keyring.
         *
         * @tags keyring
         * @name ExternalOrgsListPost
         * @request POST:/internal/keyrings.external_org.list
         * @secure
         */
        this.externalOrgsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/keyrings.external_org.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a keyring.
         *
         * @tags keyring
         * @name KeyringsGet
         * @request GET:/internal/keyrings.get
         * @secure
         */
        this.keyringsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/keyrings.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a keyring.
         *
         * @tags keyring
         * @name KeyringsGetPost
         * @request POST:/internal/keyrings.get
         * @secure
         */
        this.keyringsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/keyrings.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists keyrings for a Dev organization.
         *
         * @tags keyring
         * @name KeyringsList
         * @request GET:/internal/keyrings.list
         * @secure
         */
        this.keyringsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/keyrings.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists keyrings for a Dev organization.
         *
         * @tags keyring
         * @name KeyringsListPost
         * @request POST:/internal/keyrings.list
         * @secure
         */
        this.keyringsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/keyrings.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a keyring.
         *
         * @tags keyring
         * @name KeyringsUpdate
         * @request POST:/internal/keyrings.update
         * @secure
         */
        this.keyringsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/keyrings.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists all the vertices and edges in knowledge graph.
         *
         * @tags parts
         * @name KnowledgeV2
         * @request GET:/internal/knowledge
         * @secure
         */
        this.knowledgeV2 = (params = {}) => this.request(Object.assign({ path: `/internal/knowledge`, method: 'GET', secure: true, format: 'json' }, params));
        /**
         * @description Lists all the vertices and edges in knowledge graph.
         *
         * @tags parts
         * @name KnowledgeV2Post
         * @request POST:/internal/knowledge
         * @secure
         */
        this.knowledgeV2Post = (data, params = {}) => this.request(Object.assign({ path: `/internal/knowledge`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a license assignment.
         *
         * @tags commerce
         * @name LicenseAssignmentsCreate
         * @request POST:/internal/license-assignments.create
         * @secure
         */
        this.licenseAssignmentsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/license-assignments.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes the license assignment.
         *
         * @tags commerce
         * @name LicenseAssignmentsDelete
         * @request POST:/internal/license-assignments.delete
         * @secure
         */
        this.licenseAssignmentsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/license-assignments.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Returns the license assignment.
         *
         * @tags commerce
         * @name LicenseAssignmentsGet
         * @request GET:/internal/license-assignments.get
         * @secure
         */
        this.licenseAssignmentsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/license-assignments.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Returns the license assignment.
         *
         * @tags commerce
         * @name LicenseAssignmentsGetPost
         * @request POST:/internal/license-assignments.get
         * @secure
         */
        this.licenseAssignmentsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/license-assignments.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description List license assignments.
         *
         * @tags commerce
         * @name LicenseAssignmentsList
         * @request GET:/internal/license-assignments.list
         * @secure
         */
        this.licenseAssignmentsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/license-assignments.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description List license assignments.
         *
         * @tags commerce
         * @name LicenseAssignmentsListPost
         * @request POST:/internal/license-assignments.list
         * @secure
         */
        this.licenseAssignmentsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/license-assignments.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates license assignments.
         *
         * @tags commerce
         * @name LicenseAssignmentsUpdate
         * @request POST:/internal/license-assignments.update
         * @secure
         */
        this.licenseAssignmentsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/license-assignments.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a link between two objects to indicate a relationship.
         *
         * @tags links
         * @name LinksCreate
         * @request POST:/internal/links.create
         * @secure
         */
        this.linksCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/links.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a link.
         *
         * @tags links
         * @name LinksDelete
         * @request POST:/internal/links.delete
         * @secure
         */
        this.linksDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/links.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the requested link's information.
         *
         * @tags links
         * @name LinksGet
         * @request GET:/internal/links.get
         * @secure
         */
        this.linksGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/links.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the requested link's information.
         *
         * @tags links
         * @name LinksGetPost
         * @request POST:/internal/links.get
         * @secure
         */
        this.linksGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/links.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists collections of links by groups.
         *
         * @tags links
         * @name LinksGroup
         * @request GET:/internal/links.group
         * @secure
         */
        this.linksGroup = (query, params = {}) => this.request(Object.assign({ path: `/internal/links.group`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists collections of links by groups.
         *
         * @tags links
         * @name LinksGroupPost
         * @request POST:/internal/links.group
         * @secure
         */
        this.linksGroupPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/links.group`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists the available links.
         *
         * @tags links
         * @name LinksList
         * @request GET:/internal/links.list
         * @secure
         */
        this.linksList = (query, params = {}) => this.request(Object.assign({ path: `/internal/links.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the available links.
         *
         * @tags links
         * @name LinksListPost
         * @request POST:/internal/links.list
         * @secure
         */
        this.linksListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/links.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Replaces a link.
         *
         * @tags links
         * @name LinksReplace
         * @request POST:/internal/links.replace
         * @secure
         */
        this.linksReplace = (data, params = {}) => this.request(Object.assign({ path: `/internal/links.replace`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists the available lobbies.
         *
         * @tags lobbies
         * @name LobbiesList
         * @request GET:/internal/lobbies.list
         * @secure
         */
        this.lobbiesList = (query, params = {}) => this.request(Object.assign({ path: `/internal/lobbies.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the available lobbies.
         *
         * @tags lobbies
         * @name LobbiesListPost
         * @request POST:/internal/lobbies.list
         * @secure
         */
        this.lobbiesListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/lobbies.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a new marketplace category.
         *
         * @tags marketplace
         * @name MarketplaceCategoriesCreate
         * @request POST:/internal/marketplace-categories.create
         * @secure
         */
        this.marketplaceCategoriesCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/marketplace-categories.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a marketplace category.
         *
         * @tags marketplace
         * @name MarketplaceCategoriesDelete
         * @request POST:/internal/marketplace-categories.delete
         * @secure
         */
        this.marketplaceCategoriesDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/marketplace-categories.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: luka.kosenina@devrev.ai ### Gets a marketplace category.
         *
         * @tags marketplace
         * @name MarketplaceCategoriesGet
         * @request GET:/internal/marketplace-categories.get
         * @secure
         */
        this.marketplaceCategoriesGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/marketplace-categories.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a marketplace category.
         *
         * @tags marketplace
         * @name MarketplaceCategoriesGetPost
         * @request POST:/internal/marketplace-categories.get
         * @secure
         */
        this.marketplaceCategoriesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/marketplace-categories.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: luka.kosenina@devrev.ai ### Gets the categories for a marketplace.
         *
         * @tags marketplace
         * @name MarketplaceCategoriesList
         * @request GET:/internal/marketplace-categories.list
         * @secure
         */
        this.marketplaceCategoriesList = (query, params = {}) => this.request(Object.assign({ path: `/internal/marketplace-categories.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the categories for a marketplace.
         *
         * @tags marketplace
         * @name MarketplaceCategoriesListPost
         * @request POST:/internal/marketplace-categories.list
         * @secure
         */
        this.marketplaceCategoriesListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/marketplace-categories.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a marketplace category.
         *
         * @tags marketplace
         * @name MarketplaceCategoriesUpdate
         * @request POST:/internal/marketplace-categories.update
         * @secure
         */
        this.marketplaceCategoriesUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/marketplace-categories.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a marketplace item.
         *
         * @tags marketplace
         * @name MarketplaceItemsCreate
         * @request POST:/internal/marketplace-items.create
         * @secure
         */
        this.marketplaceItemsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/marketplace-items.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a marketplace item.
         *
         * @tags marketplace
         * @name MarketplaceItemsDelete
         * @request POST:/internal/marketplace-items.delete
         * @secure
         */
        this.marketplaceItemsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/marketplace-items.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description ### Owner: luka.kosenina@devrev.ai ### Gets a marketplace item.
         *
         * @tags marketplace
         * @name MarketplaceItemsGet
         * @request GET:/internal/marketplace-items.get
         * @secure
         */
        this.marketplaceItemsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/marketplace-items.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a marketplace item.
         *
         * @tags marketplace
         * @name MarketplaceItemsGetPost
         * @request POST:/internal/marketplace-items.get
         * @secure
         */
        this.marketplaceItemsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/marketplace-items.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Installs a flow or vista for the marketplace item.
         *
         * @tags marketplace
         * @name MarketplaceItemsInstall
         * @request POST:/internal/marketplace-items.install
         * @secure
         */
        this.marketplaceItemsInstall = (data, params = {}) => this.request(Object.assign({ path: `/internal/marketplace-items.install`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Invites a dev org to access marketplace item.
         *
         * @tags marketplace
         * @name MarketplaceItemsInvite
         * @request POST:/internal/marketplace-items.invite
         * @secure
         */
        this.marketplaceItemsInvite = (data, params = {}) => this.request(Object.assign({ path: `/internal/marketplace-items.invite`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the marketplace items.
         *
         * @tags marketplace
         * @name MarketplaceItemsList
         * @request GET:/internal/marketplace-items.list
         * @secure
         */
        this.marketplaceItemsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/marketplace-items.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the marketplace items.
         *
         * @tags marketplace
         * @name MarketplaceItemsListPost
         * @request POST:/internal/marketplace-items.list
         * @secure
         */
        this.marketplaceItemsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/marketplace-items.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Publishes a marketplace submission and creates a new marketplace item in state 'published'.Previously published marketplace item will be archived (transitioned to state 'end_of_sale').
         *
         * @tags marketplace
         * @name MarketplaceItemsPublish
         * @request POST:/internal/marketplace-items.publish
         * @secure
         */
        this.marketplaceItemsPublish = (data, params = {}) => this.request(Object.assign({ path: `/internal/marketplace-items.publish`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description meta score for the provided marketplace item. This is only applicable to the marketplace owners.
         *
         * @tags marketplace
         * @name MarketplaceItemsRank
         * @request POST:/internal/marketplace-items.rank
         * @secure
         */
        this.marketplaceItemsRank = (data, params = {}) => this.request(Object.assign({ path: `/internal/marketplace-items.rank`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: gokul.ks@devrev.ai ### Searches marketplace items.
         *
         * @tags marketplace
         * @name MarketplaceItemsSearch
         * @request GET:/internal/marketplace-items.search
         * @secure
         */
        this.marketplaceItemsSearch = (query, params = {}) => this.request(Object.assign({ path: `/internal/marketplace-items.search`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Searches marketplace items.
         *
         * @tags marketplace
         * @name MarketplaceItemsSearchPost
         * @request POST:/internal/marketplace-items.search
         * @secure
         */
        this.marketplaceItemsSearchPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/marketplace-items.search`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Puts a marketplace item in desired state.
         *
         * @tags marketplace
         * @name MarketplaceItemsTransition
         * @request POST:/internal/marketplace-items.transition
         * @secure
         */
        this.marketplaceItemsTransition = (data, params = {}) => this.request(Object.assign({ path: `/internal/marketplace-items.transition`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a marketplace item.
         *
         * @tags marketplace
         * @name MarketplaceItemsUpdate
         * @request POST:/internal/marketplace-items.update
         * @secure
         */
        this.marketplaceItemsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/marketplace-items.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a marketplace submission.
         *
         * @tags marketplace
         * @name MarketplaceSubmissionsCreate
         * @request POST:/internal/marketplace-submissions.create
         * @secure
         */
        this.marketplaceSubmissionsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/marketplace-submissions.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a marketplace submission.
         *
         * @tags marketplace
         * @name MarketplaceSubmissionsDelete
         * @request POST:/internal/marketplace-submissions.delete
         * @secure
         */
        this.marketplaceSubmissionsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/marketplace-submissions.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: luka.kosenina@devrev.ai ### Gets a marketplace submission.
         *
         * @tags marketplace
         * @name MarketplaceSubmissionsGet
         * @request GET:/internal/marketplace-submissions.get
         * @secure
         */
        this.marketplaceSubmissionsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/marketplace-submissions.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a marketplace submission.
         *
         * @tags marketplace
         * @name MarketplaceSubmissionsGetPost
         * @request POST:/internal/marketplace-submissions.get
         * @secure
         */
        this.marketplaceSubmissionsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/marketplace-submissions.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: luka.kosenina@devrev.ai ### Gets the marketplace submissions.
         *
         * @tags marketplace
         * @name MarketplaceSubmissionsList
         * @request GET:/internal/marketplace-submissions.list
         * @secure
         */
        this.marketplaceSubmissionsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/marketplace-submissions.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the marketplace submissions.
         *
         * @tags marketplace
         * @name MarketplaceSubmissionsListPost
         * @request POST:/internal/marketplace-submissions.list
         * @secure
         */
        this.marketplaceSubmissionsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/marketplace-submissions.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Puts a marketplace submission in desired state.
         *
         * @tags marketplace
         * @name MarketplaceSubmissionsTransition
         * @request POST:/internal/marketplace-submissions.transition
         * @secure
         */
        this.marketplaceSubmissionsTransition = (data, params = {}) => this.request(Object.assign({ path: `/internal/marketplace-submissions.transition`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a marketplace submission.
         *
         * @tags marketplace
         * @name MarketplaceSubmissionsUpdate
         * @request POST:/internal/marketplace-submissions.update
         * @secure
         */
        this.marketplaceSubmissionsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/marketplace-submissions.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Validates a request for creating a new marketplace submission. This endpoint is intended to be used only internally (marketplace-items workflow).
         *
         * @tags marketplace
         * @name MarketplaceSubmissionsValidateCreateRequest
         * @request POST:/internal/marketplace-submissions.validate-create-request
         * @secure
         */
        this.marketplaceSubmissionsValidateCreateRequest = (data, params = {}) => this.request(Object.assign({ path: `/internal/marketplace-submissions.validate-create-request`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Validates a request for updating a marketplace submission. This endpoint is intended to be used only internally (marketplace-items workflow).
         *
         * @tags marketplace
         * @name MarketplaceSubmissionsValidateUpdateRequest
         * @request POST:/internal/marketplace-submissions.validate-update-request
         * @secure
         */
        this.marketplaceSubmissionsValidateUpdateRequest = (data, params = {}) => this.request(Object.assign({ path: `/internal/marketplace-submissions.validate-update-request`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Aborts slug registration.
         *
         * @tags marketplace, marketplace-global-store
         * @name MarketplaceSlugRegistrationsAbort
         * @request POST:/internal/marketplace.slugs.abort
         * @secure
         */
        this.marketplaceSlugRegistrationsAbort = (data, params = {}) => this.request(Object.assign({ path: `/internal/marketplace.slugs.abort`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Commits slug registration.
         *
         * @tags marketplace, marketplace-global-store
         * @name MarketplaceSlugRegistrationsCommit
         * @request POST:/internal/marketplace.slugs.commit
         * @secure
         */
        this.marketplaceSlugRegistrationsCommit = (data, params = {}) => this.request(Object.assign({ path: `/internal/marketplace.slugs.commit`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: luka.kosenina@devrev.ai ### Checks if the slug is available for registration.
         *
         * @tags marketplace, marketplace-global-store
         * @name MarketplaceSlugRegistrationsIsAvailable
         * @request GET:/internal/marketplace.slugs.is-available
         * @secure
         */
        this.marketplaceSlugRegistrationsIsAvailable = (query, params = {}) => this.request(Object.assign({ path: `/internal/marketplace.slugs.is-available`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Checks if the slug is available for registration.
         *
         * @tags marketplace, marketplace-global-store
         * @name MarketplaceSlugRegistrationsIsAvailablePost
         * @request POST:/internal/marketplace.slugs.is-available
         * @secure
         */
        this.marketplaceSlugRegistrationsIsAvailablePost = (data, params = {}) => this.request(Object.assign({ path: `/internal/marketplace.slugs.is-available`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Locks slug registration.
         *
         * @tags marketplace, marketplace-global-store
         * @name MarketplaceSlugRegistrationsPrepare
         * @request POST:/internal/marketplace.slugs.prepare
         * @secure
         */
        this.marketplaceSlugRegistrationsPrepare = (data, params = {}) => this.request(Object.assign({ path: `/internal/marketplace.slugs.prepare`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: luka.kosenina@devrev.ai ### Gets a marketplace.
         *
         * @tags marketplace
         * @name MarketplacesGet
         * @request GET:/internal/marketplaces.get
         * @secure
         */
        this.marketplacesGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/marketplaces.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a marketplace.
         *
         * @tags marketplace
         * @name MarketplacesGetPost
         * @request POST:/internal/marketplaces.get
         * @secure
         */
        this.marketplacesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/marketplaces.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: luka.kosenina@devrev.ai ### Gets the marketplaces.
         *
         * @tags marketplace
         * @name MarketplacesList
         * @request GET:/internal/marketplaces.list
         * @secure
         */
        this.marketplacesList = (params = {}) => this.request(Object.assign({ path: `/internal/marketplaces.list`, method: 'GET', secure: true, format: 'json' }, params));
        /**
         * @description Gets the marketplaces.
         *
         * @tags marketplace
         * @name MarketplacesListPost
         * @request POST:/internal/marketplaces.list
         * @secure
         */
        this.marketplacesListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/marketplaces.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: rahul.jain@devrev.ai ### Counts the meeting records.
         *
         * @tags meetings
         * @name MeetingsCount
         * @request GET:/internal/meetings.count
         * @secure
         */
        this.meetingsCount = (query, params = {}) => this.request(Object.assign({ path: `/internal/meetings.count`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Counts the meeting records.
         *
         * @tags meetings
         * @name MeetingsCountPost
         * @request POST:/internal/meetings.count
         * @secure
         */
        this.meetingsCountPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/meetings.count`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a new meeting record.
         *
         * @tags meetings
         * @name MeetingsCreate
         * @request POST:/internal/meetings.create
         * @secure
         */
        this.meetingsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/meetings.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes the meeting record.
         *
         * @tags meetings
         * @name MeetingsDelete
         * @request POST:/internal/meetings.delete
         * @secure
         */
        this.meetingsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/meetings.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: rahul.jain@devrev.ai ### Gets the meeting record.
         *
         * @tags meetings
         * @name MeetingsGet
         * @request GET:/internal/meetings.get
         * @secure
         */
        this.meetingsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/meetings.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the meeting record.
         *
         * @tags meetings
         * @name MeetingsGetPost
         * @request POST:/internal/meetings.get
         * @secure
         */
        this.meetingsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/meetings.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Acquires a token to join a meeting.
         *
         * @tags meetings
         * @name MeetingsJoin
         * @request POST:/internal/meetings.join
         * @secure
         */
        this.meetingsJoin = (data, params = {}) => this.request(Object.assign({ path: `/internal/meetings.join`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: rahul.jain@devrev.ai ### Lists the meeting records.
         *
         * @tags meetings
         * @name MeetingsList
         * @request GET:/internal/meetings.list
         * @secure
         */
        this.meetingsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/meetings.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the meeting records.
         *
         * @tags meetings
         * @name MeetingsListPost
         * @request POST:/internal/meetings.list
         * @secure
         */
        this.meetingsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/meetings.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the meeting record.
         *
         * @tags meetings
         * @name MeetingsUpdate
         * @request POST:/internal/meetings.update
         * @secure
         */
        this.meetingsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/meetings.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: amisha.kothari@devrev.ai ### Get a menu object.
         *
         * @tags menu
         * @name MenuGet
         * @request GET:/internal/menus.get
         * @secure
         */
        this.menuGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/menus.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Get a menu object.
         *
         * @tags menu
         * @name MenuGetPost
         * @request POST:/internal/menus.get
         * @secure
         */
        this.menuGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/menus.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: amisha.kothari@devrev.ai ### List all menus.
         *
         * @tags menu
         * @name MenuList
         * @request GET:/internal/menus.list
         * @secure
         */
        this.menuList = (query, params = {}) => this.request(Object.assign({ path: `/internal/menus.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description List all menus.
         *
         * @tags menu
         * @name MenuListPost
         * @request POST:/internal/menus.list
         * @secure
         */
        this.menuListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/menus.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description update view of menu.
         *
         * @tags menu
         * @name MenuViewUpdate
         * @request POST:/internal/menus.view.update
         * @secure
         */
        this.menuViewUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/menus.view.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Executes the metric action on the given object.
         *
         * @tags slas
         * @name MetricActionExecute
         * @request POST:/internal/metric-action.execute
         * @secure
         */
        this.metricActionExecute = (data, params = {}) => this.request(Object.assign({ path: `/internal/metric-action.execute`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a custom metric definition
         *
         * @tags slas
         * @name MetricDefinitionsCreate
         * @request POST:/internal/metric-definitions.create
         * @secure
         */
        this.metricDefinitionsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/metric-definitions.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a custom metric definition
         *
         * @tags slas
         * @name MetricDefinitionsDelete
         * @request POST:/internal/metric-definitions.delete
         * @secure
         */
        this.metricDefinitionsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/metric-definitions.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: adwait.kulkarni@devrev.ai ### Gets a custom metric definition
         *
         * @tags slas
         * @name MetricDefinitionsGet
         * @request GET:/internal/metric-definitions.get
         * @secure
         */
        this.metricDefinitionsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/metric-definitions.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a custom metric definition
         *
         * @tags slas
         * @name MetricDefinitionsGetPost
         * @request POST:/internal/metric-definitions.get
         * @secure
         */
        this.metricDefinitionsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/metric-definitions.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: lorinc.body@devrev.ai ### Lists metric definitions matching a filter.
         *
         * @tags slas
         * @name MetricDefinitionsList
         * @request GET:/internal/metric-definitions.list
         * @secure
         */
        this.metricDefinitionsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/metric-definitions.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists metric definitions matching a filter.
         *
         * @tags slas
         * @name MetricDefinitionsListPost
         * @request POST:/internal/metric-definitions.list
         * @secure
         */
        this.metricDefinitionsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/metric-definitions.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a custom metric definition
         *
         * @tags slas
         * @name MetricDefinitionsUpdate
         * @request POST:/internal/metric-definitions.update
         * @secure
         */
        this.metricDefinitionsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/metric-definitions.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a new metric set.
         *
         * @tags alchemy
         * @name MetricSetsCreate
         * @request POST:/internal/metric-sets.create
         * @secure
         */
        this.metricSetsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/metric-sets.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a metric set by ID.
         *
         * @tags alchemy
         * @name MetricSetsDelete
         * @request POST:/internal/metric-sets.delete
         * @secure
         */
        this.metricSetsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/metric-sets.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a metric set by ID.
         *
         * @tags alchemy
         * @name MetricSetsGet
         * @request GET:/internal/metric-sets.get
         * @secure
         */
        this.metricSetsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/metric-sets.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a metric set by ID.
         *
         * @tags alchemy
         * @name MetricSetsGetPost
         * @request POST:/internal/metric-sets.get
         * @secure
         */
        this.metricSetsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/metric-sets.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists all the available metric sets.
         *
         * @tags alchemy
         * @name MetricSetsList
         * @request GET:/internal/metric-sets.list
         * @secure
         */
        this.metricSetsList = (params = {}) => this.request(Object.assign({ path: `/internal/metric-sets.list`, method: 'GET', secure: true, format: 'json' }, params));
        /**
         * @description Lists all the available metric sets.
         *
         * @tags alchemy
         * @name MetricSetsListPost
         * @request POST:/internal/metric-sets.list
         * @secure
         */
        this.metricSetsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/metric-sets.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a metric set by ID.
         *
         * @tags alchemy
         * @name MetricSetsUpdate
         * @request POST:/internal/metric-sets.update
         * @secure
         */
        this.metricSetsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/metric-sets.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Ingest endpoint for DevRev metrics data from clients.
         *
         * @tags product-usage
         * @name MetricsDevrevIngest
         * @request POST:/internal/metrics.devrev.ingest
         * @secure
         */
        this.metricsDevrevIngest = (data, params = {}) => this.request(Object.assign({ path: `/internal/metrics.devrev.ingest`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Gets a metric by ID.
         *
         * @tags alchemy
         * @name MetricsGet
         * @request GET:/internal/metrics.get
         * @secure
         */
        this.metricsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/metrics.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a metric by ID.
         *
         * @tags alchemy
         * @name MetricsGetPost
         * @request POST:/internal/metrics.get
         * @secure
         */
        this.metricsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/metrics.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists all the available metrics.
         *
         * @tags alchemy
         * @name MetricsList
         * @request GET:/internal/metrics.list
         * @secure
         */
        this.metricsList = (params = {}) => this.request(Object.assign({ path: `/internal/metrics.list`, method: 'GET', secure: true, format: 'json' }, params));
        /**
         * @description Lists all the available metrics.
         *
         * @tags alchemy
         * @name MetricsListPost
         * @request POST:/internal/metrics.list
         * @secure
         */
        this.metricsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/metrics.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Write endpoint for OTLP metrics data from clients.
         *
         * @tags telemetry
         * @name MetricsOtlpWrite
         * @request POST:/internal/metrics.otlp.write
         * @secure
         */
        this.metricsOtlpWrite = (data, params = {}) => this.request(Object.assign({ path: `/internal/metrics.otlp.write`, method: 'POST', body: data, secure: true }, params));
        /**
         * @description Write endpoint for Prometheus metrics data from clients.
         *
         * @tags telemetry
         * @name MetricsPrometheusWrite
         * @request POST:/internal/metrics.prometheus.write
         * @secure
         */
        this.metricsPrometheusWrite = (data, params = {}) => this.request(Object.assign({ path: `/internal/metrics.prometheus.write`, method: 'POST', body: data, secure: true }, params));
        /**
         * @description Seeds default configuration of groups, conditional roles and group members for the dev organization.
         *
         * @tags dev-orgs
         * @name MfzDefaultsSeed
         * @request POST:/internal/mfz-defaults.seed
         * @secure
         */
        this.mfzDefaultsSeed = (data, params = {}) => this.request(Object.assign({ path: `/internal/mfz-defaults.seed`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Logs ML feedback.
         *
         * @name LogMlFeedback
         * @request POST:/internal/ml-feedback
         * @secure
         */
        this.logMlFeedback = (data, params = {}) => this.request(Object.assign({ path: `/internal/ml-feedback`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a news item.
         *
         * @tags news
         * @name NewsCreate
         * @request POST:/internal/news.create
         * @secure
         */
        this.newsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/news.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a news item.
         *
         * @tags news
         * @name NewsDelete
         * @request POST:/internal/news.delete
         * @secure
         */
        this.newsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/news.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Gets a news item.
         *
         * @tags news
         * @name NewsGet
         * @request GET:/internal/news.get
         * @secure
         */
        this.newsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/news.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a news item.
         *
         * @tags news
         * @name NewsGetPost
         * @request POST:/internal/news.get
         * @secure
         */
        this.newsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/news.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists news items.
         *
         * @tags news
         * @name NewsList
         * @request GET:/internal/news.list
         * @secure
         */
        this.newsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/news.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists news items.
         *
         * @tags news
         * @name NewsListPost
         * @request POST:/internal/news.list
         * @secure
         */
        this.newsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/news.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Get content for notification channel.
         *
         * @tags notifications
         * @name NotificationsChannelContent
         * @request POST:/internal/notifications.channel-content
         * @secure
         */
        this.notificationsChannelContent = (data, params = {}) => this.request(Object.assign({ path: `/internal/notifications.channel-content`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists the notifications channels for Android.
         *
         * @tags notifications
         * @name NotificationsChannels
         * @request GET:/internal/notifications.channels
         * @secure
         */
        this.notificationsChannels = (query, params = {}) => this.request(Object.assign({ path: `/internal/notifications.channels`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the notifications channels for Android.
         *
         * @tags notifications
         * @name NotificationsChannelsPost
         * @request POST:/internal/notifications.channels
         * @secure
         */
        this.notificationsChannelsPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/notifications.channels`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists the notifications by groups.
         *
         * @tags notifications
         * @name NotificationsGroup
         * @request GET:/internal/notifications.group
         * @secure
         */
        this.notificationsGroup = (query, params = {}) => this.request(Object.assign({ path: `/internal/notifications.group`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the notifications by groups.
         *
         * @tags notifications
         * @name NotificationsGroupPost
         * @request POST:/internal/notifications.group
         * @secure
         */
        this.notificationsGroupPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/notifications.group`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists the notifications.
         *
         * @tags notifications
         * @name NotificationsList
         * @request GET:/internal/notifications.list
         * @secure
         */
        this.notificationsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/notifications.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the notifications.
         *
         * @tags notifications
         * @name NotificationsListPost
         * @request POST:/internal/notifications.list
         * @secure
         */
        this.notificationsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/notifications.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the state of the notifications.
         *
         * @tags notifications
         * @name NotificationsMark
         * @request POST:/internal/notifications.mark
         * @secure
         */
        this.notificationsMark = (data, params = {}) => this.request(Object.assign({ path: `/internal/notifications.mark`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Generate a notification.
         *
         * @tags notifications
         * @name NotificationsSend
         * @request POST:/internal/notifications.send
         * @secure
         */
        this.notificationsSend = (data, params = {}) => this.request(Object.assign({ path: `/internal/notifications.send`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Copy data file to the oasis dataset.
         *
         * @tags oasis
         * @name OasisDataCopy
         * @request POST:/internal/oasis.data.copy
         * @secure
         */
        this.oasisDataCopy = (data, params = {}) => this.request(Object.assign({ path: `/internal/oasis.data.copy`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates the Oasis data for the table.
         *
         * @tags oasis
         * @name OasisDataCreate
         * @request POST:/internal/oasis.data.create
         * @secure
         */
        this.oasisDataCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/oasis.data.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes the Oasis data item.
         *
         * @tags oasis
         * @name OasisDataDelete
         * @request POST:/internal/oasis.data.delete
         * @secure
         */
        this.oasisDataDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/oasis.data.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description ### Owner: bhavani.hari@devrev.ai ### Returns the Oasis data for the table.
         *
         * @tags oasis
         * @name OasisDataFetch
         * @request GET:/internal/oasis.data.fetch
         * @secure
         */
        this.oasisDataFetch = (query, params = {}) => this.request(Object.assign({ path: `/internal/oasis.data.fetch`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Returns the Oasis data for the table.
         *
         * @tags oasis
         * @name OasisDataFetchPost
         * @request POST:/internal/oasis.data.fetch
         * @secure
         */
        this.oasisDataFetchPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/oasis.data.fetch`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: bhavani.hari@devrev.ai ### Returns the filtered data from a oasis partition.
         *
         * @tags oasis
         * @name PartitionFilter
         * @request GET:/internal/oasis.data.filter
         * @secure
         */
        this.partitionFilter = (query, params = {}) => this.request(Object.assign({ path: `/internal/oasis.data.filter`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Returns the filtered data from a oasis partition.
         *
         * @tags oasis
         * @name PartitionFilterPost
         * @request POST:/internal/oasis.data.filter
         * @secure
         */
        this.partitionFilterPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/oasis.data.filter`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: bhavani.hari@devrev.ai ### Returns the filtered data from a oasis partition. This skips the fastly cache.
         *
         * @tags oasis
         * @name PartitionFilterNoCache
         * @request GET:/internal/oasis.data.filter-nocache
         * @secure
         */
        this.partitionFilterNoCache = (query, params = {}) => this.request(Object.assign({ path: `/internal/oasis.data.filter-nocache`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Returns the filtered data from a oasis partition. This skips the fastly cache.
         *
         * @tags oasis
         * @name PartitionFilterNoCachePost
         * @request POST:/internal/oasis.data.filter-nocache
         * @secure
         */
        this.partitionFilterNoCachePost = (data, params = {}) => this.request(Object.assign({ path: `/internal/oasis.data.filter-nocache`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: amit.gosavi@devrev.ai ### Prepares the Oasis data for the faster data response.
         *
         * @tags oasis
         * @name OasisDataPrepare
         * @request GET:/internal/oasis.data.prepare
         * @secure
         */
        this.oasisDataPrepare = (query, params = {}) => this.request(Object.assign({ path: `/internal/oasis.data.prepare`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Prepares the Oasis data for the faster data response.
         *
         * @tags oasis
         * @name OasisDataPreparePost
         * @request POST:/internal/oasis.data.prepare
         * @secure
         */
        this.oasisDataPreparePost = (data, params = {}) => this.request(Object.assign({ path: `/internal/oasis.data.prepare`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Returns the Oasis data after executing the query.
         *
         * @tags oasis
         * @name OasisDataQuery
         * @request POST:/internal/oasis.data.query
         * @secure
         */
        this.oasisDataQuery = (data, params = {}) => this.request(Object.assign({ path: `/internal/oasis.data.query`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Streams the data for the oasis dataset.
         *
         * @tags oasis
         * @name OasisDataStream
         * @request POST:/internal/oasis.data.stream
         * @secure
         */
        this.oasisDataStream = (data, params = {}) => this.request(Object.assign({ path: `/internal/oasis.data.stream`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Sync the data from S3.
         *
         * @tags oasis
         * @name OasisDataSync
         * @request POST:/internal/oasis.data.sync
         * @secure
         */
        this.oasisDataSync = (data, params = {}) => this.request(Object.assign({ path: `/internal/oasis.data.sync`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the dataset access level and version. This call is internal to DevRev and can be only called by Data Owners group members.
         *
         * @tags oasis
         * @name DatasetAccessAndVersionControl
         * @request POST:/internal/oasis.dataset.access-and-version-control
         * @secure
         */
        this.datasetAccessAndVersionControl = (data, params = {}) => this.request(Object.assign({ path: `/internal/oasis.dataset.access-and-version-control`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates the Oasis data for the table.
         *
         * @tags oasis
         * @name DatasetCreate
         * @request POST:/internal/oasis.dataset.create
         * @secure
         */
        this.datasetCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/oasis.dataset.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes the dataset.
         *
         * @tags oasis
         * @name DatasetDelete
         * @request POST:/internal/oasis.dataset.delete
         * @secure
         */
        this.datasetDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/oasis.dataset.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description ### Owner: bhavani.hari@devrev.ai ### Returns the dataset requested.
         *
         * @tags oasis
         * @name OasisDatasetGet
         * @request GET:/internal/oasis.dataset.get
         * @secure
         */
        this.oasisDatasetGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/oasis.dataset.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Returns the dataset requested.
         *
         * @tags oasis
         * @name OasisDatasetGetPost
         * @request POST:/internal/oasis.dataset.get
         * @secure
         */
        this.oasisDatasetGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/oasis.dataset.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: bhavani.hari@devrev.ai ### Returns the list of datasets that match the filter.
         *
         * @tags oasis
         * @name DatasetList
         * @request GET:/internal/oasis.dataset.list
         * @secure
         */
        this.datasetList = (query, params = {}) => this.request(Object.assign({ path: `/internal/oasis.dataset.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Returns the list of datasets that match the filter.
         *
         * @tags oasis
         * @name DatasetListPost
         * @request POST:/internal/oasis.dataset.list
         * @secure
         */
        this.datasetListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/oasis.dataset.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the dataset.
         *
         * @tags oasis
         * @name DatasetUpdate
         * @request POST:/internal/oasis.dataset.update
         * @secure
         */
        this.datasetUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/oasis.dataset.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates the Oasis job.
         *
         * @tags oasis
         * @name OasisJobCreate
         * @request POST:/internal/oasis.job.create
         * @secure
         */
        this.oasisJobCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/oasis.job.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Executes the Oasis job.
         *
         * @tags oasis
         * @name OasisJobExecute
         * @request POST:/internal/oasis.job.execute
         * @secure
         */
        this.oasisJobExecute = (data, params = {}) => this.request(Object.assign({ path: `/internal/oasis.job.execute`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: amit.gosavi@devrev.ai ### Gets the Oasis job.
         *
         * @tags oasis
         * @name OasisJobGet
         * @request GET:/internal/oasis.job.get
         * @secure
         */
        this.oasisJobGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/oasis.job.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the Oasis job.
         *
         * @tags oasis
         * @name OasisJobGetPost
         * @request POST:/internal/oasis.job.get
         * @secure
         */
        this.oasisJobGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/oasis.job.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the Oasis job.
         *
         * @tags oasis
         * @name OasisJobUpdate
         * @request POST:/internal/oasis.job.update
         * @secure
         */
        this.oasisJobUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/oasis.job.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: i-aman.singh@devrev.ai ### Connects to an open oasis socket.
         *
         * @tags sockets
         * @name OasisSocketsConnect
         * @request GET:/internal/oasis.sockets.connect
         * @secure
         */
        this.oasisSocketsConnect = (query, params = {}) => this.request(Object.assign({ path: `/internal/oasis.sockets.connect`, method: 'GET', query: query, secure: true }, params));
        /**
         * @description Connects to an open oasis socket.
         *
         * @tags sockets
         * @name OasisSocketsConnectPost
         * @request POST:/internal/oasis.sockets.connect
         * @secure
         */
        this.oasisSocketsConnectPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/oasis.sockets.connect`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Opens a new oasis socket.
         *
         * @tags sockets
         * @name OasisSocketsOpen
         * @request POST:/internal/oasis.sockets.open
         * @secure
         */
        this.oasisSocketsOpen = (data, params = {}) => this.request(Object.assign({ path: `/internal/oasis.sockets.open`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Returns the total count of the object members satisfying the request parameters.
         *
         * @tags object-members
         * @name ObjectMembersCount
         * @request GET:/internal/object-members.count
         * @secure
         */
        this.objectMembersCount = (query, params = {}) => this.request(Object.assign({ path: `/internal/object-members.count`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Returns the total count of the object members satisfying the request parameters.
         *
         * @tags object-members
         * @name ObjectMembersCountPost
         * @request POST:/internal/object-members.count
         * @secure
         */
        this.objectMembersCountPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/object-members.count`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates an object member.
         *
         * @tags object-members
         * @name ObjectMembersCreate
         * @request POST:/internal/object-members.create
         * @secure
         */
        this.objectMembersCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/object-members.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets an object member.
         *
         * @tags object-members
         * @name ObjectMembersGet
         * @request GET:/internal/object-members.get
         * @secure
         */
        this.objectMembersGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/object-members.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets an object member.
         *
         * @tags object-members
         * @name ObjectMembersGetPost
         * @request POST:/internal/object-members.get
         * @secure
         */
        this.objectMembersGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/object-members.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists object members satisfying the request parameters.
         *
         * @tags object-members
         * @name ObjectMembersList
         * @request GET:/internal/object-members.list
         * @secure
         */
        this.objectMembersList = (query, params = {}) => this.request(Object.assign({ path: `/internal/object-members.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists object members satisfying the request parameters.
         *
         * @tags object-members
         * @name ObjectMembersListPost
         * @request POST:/internal/object-members.list
         * @secure
         */
        this.objectMembersListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/object-members.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Removes an object member.
         *
         * @tags object-members
         * @name ObjectMembersRemove
         * @request POST:/internal/object-members.remove
         * @secure
         */
        this.objectMembersRemove = (data, params = {}) => this.request(Object.assign({ path: `/internal/object-members.remove`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates and returns the available tasks for the authenticated user.
         *
         * @tags onboarding
         * @name OnboardingTasksApply
         * @request POST:/internal/onboarding-tasks.apply
         * @secure
         */
        this.onboardingTasksApply = (data, params = {}) => this.request(Object.assign({ path: `/internal/onboarding-tasks.apply`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the one time line item objects based on the given filters.
         *
         * @tags commerce
         * @name OneTimeItemsList
         * @request GET:/internal/one-time-line-items.list
         * @secure
         */
        this.oneTimeItemsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/one-time-line-items.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the one time line item objects based on the given filters.
         *
         * @tags commerce
         * @name OneTimeItemsListPost
         * @request POST:/internal/one-time-line-items.list
         * @secure
         */
        this.oneTimeItemsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/one-time-line-items.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: abhishek.bansal@devrev.ai ### Lists all operations.
         *
         * @tags operation
         * @name ListOperations
         * @request GET:/internal/operations.list
         * @secure
         */
        this.listOperations = (query, params = {}) => this.request(Object.assign({ path: `/internal/operations.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists all operations.
         *
         * @tags operation
         * @name ListOperationsPost
         * @request POST:/internal/operations.list
         * @secure
         */
        this.listOperationsPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/operations.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: abhishek.bansal@devrev.ai ### Get an operation's schema.
         *
         * @tags operation
         * @name GetSchemaOperation
         * @request GET:/internal/operations.schema
         * @secure
         */
        this.getSchemaOperation = (query, params = {}) => this.request(Object.assign({ path: `/internal/operations.schema`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Get an operation's schema.
         *
         * @tags operation
         * @name GetSchemaOperationPost
         * @request POST:/internal/operations.schema
         * @secure
         */
        this.getSchemaOperationPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/operations.schema`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates an organization schedule fragment.
         *
         * @tags schedules
         * @name OrgScheduleFragmentsCreate
         * @request POST:/internal/org-schedule-fragments.create
         * @secure
         */
        this.orgScheduleFragmentsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/org-schedule-fragments.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: lorinc.body@devrev.ai ### Gets an organization schedule fragment.
         *
         * @tags schedules
         * @name OrgScheduleFragmentsGet
         * @request GET:/internal/org-schedule-fragments.get
         * @secure
         */
        this.orgScheduleFragmentsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/org-schedule-fragments.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets an organization schedule fragment.
         *
         * @tags schedules
         * @name OrgScheduleFragmentsGetPost
         * @request POST:/internal/org-schedule-fragments.get
         * @secure
         */
        this.orgScheduleFragmentsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/org-schedule-fragments.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Changes stage of an organization schedule fragment.
         *
         * @tags schedules
         * @name OrgScheduleFragmentsTransition
         * @request POST:/internal/org-schedule-fragments.transition
         * @secure
         */
        this.orgScheduleFragmentsTransition = (data, params = {}) => this.request(Object.assign({ path: `/internal/org-schedule-fragments.transition`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates an organization schedule with a default weekly organization schedule and a list of organization schedule fragments.
         *
         * @tags schedules
         * @name OrgSchedulesCreate
         * @request POST:/internal/org-schedules.create
         * @secure
         */
        this.orgSchedulesCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/org-schedules.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: lorinc.body@devrev.ai ### Gets an organization schedule.
         *
         * @tags schedules
         * @name OrgSchedulesGet
         * @request GET:/internal/org-schedules.get
         * @secure
         */
        this.orgSchedulesGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/org-schedules.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets an organization schedule.
         *
         * @tags schedules
         * @name OrgSchedulesGetPost
         * @request POST:/internal/org-schedules.get
         * @secure
         */
        this.orgSchedulesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/org-schedules.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: suraj.narra@devrev.ai ### Gets list of organization schedules.
         *
         * @tags schedules
         * @name OrgSchedulesList
         * @request GET:/internal/org-schedules.list
         * @secure
         */
        this.orgSchedulesList = (query, params = {}) => this.request(Object.assign({ path: `/internal/org-schedules.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets list of organization schedules.
         *
         * @tags schedules
         * @name OrgSchedulesListPost
         * @request POST:/internal/org-schedules.list
         * @secure
         */
        this.orgSchedulesListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/org-schedules.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Sets next organization schedule fragment which must begin the day the last existing fragment ends.
         *
         * @tags schedules
         * @name OrgSchedulesSetFuture
         * @request POST:/internal/org-schedules.set-future
         * @secure
         */
        this.orgSchedulesSetFuture = (data, params = {}) => this.request(Object.assign({ path: `/internal/org-schedules.set-future`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Publishes or archives an organization schedule.
         *
         * @tags schedules
         * @name OrgSchedulesTransition
         * @request POST:/internal/org-schedules.transition
         * @secure
         */
        this.orgSchedulesTransition = (data, params = {}) => this.request(Object.assign({ path: `/internal/org-schedules.transition`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates an organization schedule.
         *
         * @tags schedules
         * @name OrgSchedulesUpdate
         * @request POST:/internal/org-schedules.update
         * @secure
         */
        this.orgSchedulesUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/org-schedules.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists top contributors of a part.
         *
         * @tags parts
         * @name PartsContributorsList
         * @request GET:/internal/parts.contributors.list
         * @secure
         */
        this.partsContributorsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/parts.contributors.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists top contributors of a part.
         *
         * @tags parts
         * @name PartsContributorsListPost
         * @request POST:/internal/parts.contributors.list
         * @secure
         */
        this.partsContributorsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/parts.contributors.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Get count of parts matching given filter.
         *
         * @tags parts
         * @name PartsCount
         * @request GET:/internal/parts.count
         * @secure
         */
        this.partsCount = (query, params = {}) => this.request(Object.assign({ path: `/internal/parts.count`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Get count of parts matching given filter.
         *
         * @tags parts
         * @name PartsCountPost
         * @request POST:/internal/parts.count
         * @secure
         */
        this.partsCountPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/parts.count`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates new [part](https://devrev.ai/docs/product/parts).
         *
         * @tags parts
         * @name PartsCreate
         * @request POST:/internal/parts.create
         * @secure
         */
        this.partsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/parts.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists top customers of a part.
         *
         * @tags parts
         * @name PartsCustomersList
         * @request GET:/internal/parts.customers.list
         * @secure
         */
        this.partsCustomersList = (query, params = {}) => this.request(Object.assign({ path: `/internal/parts.customers.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists top customers of a part.
         *
         * @tags parts
         * @name PartsCustomersListPost
         * @request POST:/internal/parts.customers.list
         * @secure
         */
        this.partsCustomersListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/parts.customers.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a [part](https://devrev.ai/docs/product/parts).
         *
         * @tags parts
         * @name PartsDelete
         * @request POST:/internal/parts.delete
         * @secure
         */
        this.partsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/parts.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Get links for part hierarchy
         *
         * @tags parts
         * @name PartsDescendantLinksTraverse
         * @request GET:/internal/parts.descendant-links.traverse
         * @secure
         */
        this.partsDescendantLinksTraverse = (query, params = {}) => this.request(Object.assign({ path: `/internal/parts.descendant-links.traverse`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Get links for part hierarchy
         *
         * @tags parts
         * @name PartsDescendantLinksTraversePost
         * @request POST:/internal/parts.descendant-links.traverse
         * @secure
         */
        this.partsDescendantLinksTraversePost = (data, params = {}) => this.request(Object.assign({ path: `/internal/parts.descendant-links.traverse`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Exports a list of parts.
         *
         * @tags parts
         * @name PartsExport
         * @request POST:/internal/parts.export
         * @secure
         */
        this.partsExport = (data, params = {}) => this.request(Object.assign({ path: `/internal/parts.export`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes API endpoints from a feature.
         *
         * @tags parts
         * @name PartsFeaturesApiEndpointsDelete
         * @request POST:/internal/parts.features.api-endpoints.delete
         * @secure
         */
        this.partsFeaturesApiEndpointsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/parts.features.api-endpoints.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Merges API endpoints across two features.
         *
         * @tags parts
         * @name PartsFeaturesApiEndpointsMerge
         * @request POST:/internal/parts.features.api-endpoints.merge
         * @secure
         */
        this.partsFeaturesApiEndpointsMerge = (data, params = {}) => this.request(Object.assign({ path: `/internal/parts.features.api-endpoints.merge`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes API operations from a feature.
         *
         * @tags parts
         * @name PartsFeaturesApiOperationsDelete
         * @request POST:/internal/parts.features.api-operations.delete
         * @secure
         */
        this.partsFeaturesApiOperationsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/parts.features.api-operations.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Merges API operations across two features.
         *
         * @tags parts
         * @name PartsFeaturesApiOperationsMerge
         * @request POST:/internal/parts.features.api-operations.merge
         * @secure
         */
        this.partsFeaturesApiOperationsMerge = (data, params = {}) => this.request(Object.assign({ path: `/internal/parts.features.api-operations.merge`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a [part's](https://devrev.ai/docs/product/parts) information.
         *
         * @tags parts
         * @name PartsGet
         * @request GET:/internal/parts.get
         * @secure
         */
        this.partsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/parts.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a [part's](https://devrev.ai/docs/product/parts) information.
         *
         * @tags parts
         * @name PartsGetPost
         * @request POST:/internal/parts.get
         * @secure
         */
        this.partsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/parts.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists collections of parts by groups.
         *
         * @tags parts
         * @name PartsGroup
         * @request GET:/internal/parts.group
         * @secure
         */
        this.partsGroup = (query, params = {}) => this.request(Object.assign({ path: `/internal/parts.group`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists collections of parts by groups.
         *
         * @tags parts
         * @name PartsGroupPost
         * @request POST:/internal/parts.group
         * @secure
         */
        this.partsGroupPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/parts.group`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists a collection of [parts](https://devrev.ai/docs/product/parts).
         *
         * @tags parts
         * @name PartsList
         * @request GET:/internal/parts.list
         * @secure
         */
        this.partsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/parts.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists a collection of [parts](https://devrev.ai/docs/product/parts).
         *
         * @tags parts
         * @name PartsListPost
         * @request POST:/internal/parts.list
         * @secure
         */
        this.partsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/parts.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Mutate a part to either promote or merge it.
         *
         * @tags parts
         * @name PartsMutate
         * @request GET:/internal/parts.mutate
         * @secure
         */
        this.partsMutate = (query, params = {}) => this.request(Object.assign({ path: `/internal/parts.mutate`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Mutate a part to either promote or merge it.
         *
         * @tags parts
         * @name PartsMutatePost
         * @request POST:/internal/parts.mutate
         * @secure
         */
        this.partsMutatePost = (data, params = {}) => this.request(Object.assign({ path: `/internal/parts.mutate`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists top supporters of a part.
         *
         * @tags parts
         * @name PartsSupportersList
         * @request GET:/internal/parts.supporters.list
         * @secure
         */
        this.partsSupportersList = (query, params = {}) => this.request(Object.assign({ path: `/internal/parts.supporters.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists top supporters of a part.
         *
         * @tags parts
         * @name PartsSupportersListPost
         * @request POST:/internal/parts.supporters.list
         * @secure
         */
        this.partsSupportersListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/parts.supporters.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a [part's](https://devrev.ai/docs/product/parts) information.
         *
         * @tags parts
         * @name PartsUpdate
         * @request POST:/internal/parts.update
         * @secure
         */
        this.partsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/parts.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Update payment intent object.
         *
         * @tags commerce
         * @name PaymentIntentsUpdate
         * @request POST:/internal/payment-intents.update
         * @secure
         */
        this.paymentIntentsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/payment-intents.update`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Deletes the payment method from the customer configuration.
         *
         * @tags commerce
         * @name PaymentMethodsDelete
         * @request POST:/internal/payment-methods.delete
         * @secure
         */
        this.paymentMethodsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/payment-methods.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Returns the payment method.
         *
         * @tags commerce
         * @name PaymentMethodsGet
         * @request GET:/internal/payment-methods.get
         * @secure
         */
        this.paymentMethodsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/payment-methods.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Returns the payment method.
         *
         * @tags commerce
         * @name PaymentMethodsGetPost
         * @request POST:/internal/payment-methods.get
         * @secure
         */
        this.paymentMethodsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/payment-methods.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description List payment methods for a customer.
         *
         * @tags commerce
         * @name PaymentMethodsList
         * @request GET:/internal/payment-methods.list
         * @secure
         */
        this.paymentMethodsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/payment-methods.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description List payment methods for a customer.
         *
         * @tags commerce
         * @name PaymentMethodsListPost
         * @request POST:/internal/payment-methods.list
         * @secure
         */
        this.paymentMethodsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/payment-methods.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Sets the payment method as default in the customer configuration.
         *
         * @tags commerce
         * @name PaymentMethodsSetDefault
         * @request POST:/internal/payment-methods.set-default
         * @secure
         */
        this.paymentMethodsSetDefault = (data, params = {}) => this.request(Object.assign({ path: `/internal/payment-methods.set-default`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Setup intent initiates the process of saving a payment method details in the customer's configuration. The API returns a client key which is to be used on the front end side to call Stripe to verify and save the user entered payment method details for the customer on Stripe.
         *
         * @tags commerce
         * @name PaymentMethodsSetupIntentCreate
         * @request POST:/internal/payment-methods.setup-intent.create
         * @secure
         */
        this.paymentMethodsSetupIntentCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/payment-methods.setup-intent.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Create a plug setting object.
         *
         * @tags plug-settings
         * @name PlugSettingsCreate
         * @request POST:/internal/plug-settings.create
         * @secure
         */
        this.plugSettingsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/plug-settings.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Create a default plug setting object.
         *
         * @tags plug-settings
         * @name PlugSettingsDefaultCreate
         * @request POST:/internal/plug-settings.default.create
         * @secure
         */
        this.plugSettingsDefaultCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/plug-settings.default.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a plug setting object.
         *
         * @tags plug-settings
         * @name PlugSettingsDelete
         * @request POST:/internal/plug-settings.delete
         * @secure
         */
        this.plugSettingsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/plug-settings.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: madhav.sikka@devrev.ai ### Get plug setting object.
         *
         * @tags plug-settings
         * @name PlugSettingsGet
         * @request GET:/internal/plug-settings.get
         * @secure
         */
        this.plugSettingsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/plug-settings.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Get plug setting object.
         *
         * @tags plug-settings
         * @name PlugSettingsGetPost
         * @request POST:/internal/plug-settings.get
         * @secure
         */
        this.plugSettingsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/plug-settings.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: madhav.sikka@devrev.ai ### Lists plug setting objects.
         *
         * @tags plug-settings
         * @name PlugSettingsList
         * @request GET:/internal/plug-settings.list
         * @secure
         */
        this.plugSettingsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/plug-settings.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists plug setting objects.
         *
         * @tags plug-settings
         * @name PlugSettingsListPost
         * @request POST:/internal/plug-settings.list
         * @secure
         */
        this.plugSettingsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/plug-settings.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Update plug setting object.
         *
         * @tags plug-settings
         * @name PlugSettingsUpdate
         * @request POST:/internal/plug-settings.update
         * @secure
         */
        this.plugSettingsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/plug-settings.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Get the preferences object.
         *
         * @tags preferences
         * @name PreferencesGet
         * @request GET:/internal/preferences.get
         * @secure
         */
        this.preferencesGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/preferences.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Get the preferences object.
         *
         * @tags preferences
         * @name PreferencesGetPost
         * @request POST:/internal/preferences.get
         * @secure
         */
        this.preferencesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/preferences.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists the preferences defined for a particular object.
         *
         * @tags preferences
         * @name PreferencesList
         * @request GET:/internal/preferences.list
         * @secure
         */
        this.preferencesList = (query, params = {}) => this.request(Object.assign({ path: `/internal/preferences.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the preferences defined for a particular object.
         *
         * @tags preferences
         * @name PreferencesListPost
         * @request POST:/internal/preferences.list
         * @secure
         */
        this.preferencesListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/preferences.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists the preferences snap kit JSON for a particular object.
         *
         * @tags preferences
         * @name PreferencesSnapKitList
         * @request GET:/internal/preferences.snap-kit.list
         * @secure
         */
        this.preferencesSnapKitList = (query, params = {}) => this.request(Object.assign({ path: `/internal/preferences.snap-kit.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the preferences snap kit JSON for a particular object.
         *
         * @tags preferences
         * @name PreferencesSnapKitListPost
         * @request POST:/internal/preferences.snap-kit.list
         * @secure
         */
        this.preferencesSnapKitListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/preferences.snap-kit.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the preference for a particular object.
         *
         * @tags preferences
         * @name PreferencesUpdate
         * @request POST:/internal/preferences.update
         * @secure
         */
        this.preferencesUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/preferences.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Counts the number of price book objects based on the given filters.
         *
         * @tags commerce
         * @name PriceBooksCount
         * @request GET:/internal/price-books.count
         * @secure
         */
        this.priceBooksCount = (query, params = {}) => this.request(Object.assign({ path: `/internal/price-books.count`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Counts the number of price book objects based on the given filters.
         *
         * @tags commerce
         * @name PriceBooksCountPost
         * @request POST:/internal/price-books.count
         * @secure
         */
        this.priceBooksCountPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/price-books.count`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a price book object.
         *
         * @tags commerce
         * @name PriceBooksCreate
         * @request POST:/internal/price-books.create
         * @secure
         */
        this.priceBooksCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/price-books.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a price book object.
         *
         * @tags commerce
         * @name PriceBooksDelete
         * @request POST:/internal/price-books.delete
         * @secure
         */
        this.priceBooksDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/price-books.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Gets a price book object.
         *
         * @tags commerce
         * @name PriceBooksGet
         * @request GET:/internal/price-books.get
         * @secure
         */
        this.priceBooksGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/price-books.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a price book object.
         *
         * @tags commerce
         * @name PriceBooksGetPost
         * @request POST:/internal/price-books.get
         * @secure
         */
        this.priceBooksGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/price-books.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the price book objects based on the given filters.
         *
         * @tags commerce
         * @name PriceBooksList
         * @request GET:/internal/price-books.list
         * @secure
         */
        this.priceBooksList = (query, params = {}) => this.request(Object.assign({ path: `/internal/price-books.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the price book objects based on the given filters.
         *
         * @tags commerce
         * @name PriceBooksListPost
         * @request POST:/internal/price-books.list
         * @secure
         */
        this.priceBooksListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/price-books.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a price book object.
         *
         * @tags commerce
         * @name PriceBooksUpdate
         * @request POST:/internal/price-books.update
         * @secure
         */
        this.priceBooksUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/price-books.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Counts the number of pricing objects based on the given filters.
         *
         * @tags commerce
         * @name PricingsCount
         * @request GET:/internal/pricings.count
         * @secure
         */
        this.pricingsCount = (query, params = {}) => this.request(Object.assign({ path: `/internal/pricings.count`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Counts the number of pricing objects based on the given filters.
         *
         * @tags commerce
         * @name PricingsCountPost
         * @request POST:/internal/pricings.count
         * @secure
         */
        this.pricingsCountPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/pricings.count`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a pricing object.
         *
         * @tags commerce
         * @name PricingsCreate
         * @request POST:/internal/pricings.create
         * @secure
         */
        this.pricingsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/pricings.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a pricing object.
         *
         * @tags commerce
         * @name PricingsDelete
         * @request POST:/internal/pricings.delete
         * @secure
         */
        this.pricingsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/pricings.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Gets a pricing object.
         *
         * @tags commerce
         * @name PricingsGet
         * @request GET:/internal/pricings.get
         * @secure
         */
        this.pricingsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/pricings.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a pricing object.
         *
         * @tags commerce
         * @name PricingsGetPost
         * @request POST:/internal/pricings.get
         * @secure
         */
        this.pricingsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/pricings.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the pricing objects based on the given filters.
         *
         * @tags commerce
         * @name PricingsList
         * @request GET:/internal/pricings.list
         * @secure
         */
        this.pricingsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/pricings.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the pricing objects based on the given filters.
         *
         * @tags commerce
         * @name PricingsListPost
         * @request POST:/internal/pricings.list
         * @secure
         */
        this.pricingsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/pricings.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a pricing object.
         *
         * @tags commerce
         * @name PricingsUpdate
         * @request POST:/internal/pricings.update
         * @secure
         */
        this.pricingsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/pricings.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description DevRev Profile is a user's personal profile to promote themselves and connect with other professionals. This method returns a successful response if a profile is created with a unique email and display handle. If another login option with same email is used, the existing profile is updated. Otherwise, the method returns conflict response due to already existing profile. Also, the method requires authorization token obtained from DevRev platform through the login workflow.
         *
         * @tags profiles
         * @name ProfilesCreate
         * @request POST:/internal/profiles.create
         * @secure
         */
        this.profilesCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/profiles.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the profile's public information of a user on the DevRev platform using display-handle. The method returns not-found response if the profile's visibility is private or if it does not exist. Also note that display-handle can also be changed by the user.
         *
         * @tags profiles
         * @name ProfilesGetByHandle
         * @request GET:/internal/profiles.get-by-handle
         */
        this.profilesGetByHandle = (query, params = {}) => this.request(Object.assign({ path: `/internal/profiles.get-by-handle`, method: 'GET', query: query, format: 'json' }, params));
        /**
         * @description Gets the profile's public information of a user on the DevRev platform using display-handle. The method returns not-found response if the profile's visibility is private or if it does not exist. Also note that display-handle can also be changed by the user.
         *
         * @tags profiles
         * @name ProfilesGetByHandlePost
         * @request POST:/internal/profiles.get-by-handle
         * @secure
         */
        this.profilesGetByHandlePost = (data, params = {}) => this.request(Object.assign({ path: `/internal/profiles.get-by-handle`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Checks to ensure that the desired display handle is not already in use. This does not secure the handle, so it is possible that the check would be successful and a subsequent call to create a profile with the checked display handle might fail due to a race condition.
         *
         * @tags profiles
         * @name ProfilesIsDisplayHandleAvailable
         * @request GET:/internal/profiles.is-display-handle-available
         * @secure
         */
        this.profilesIsDisplayHandleAvailable = (query, params = {}) => this.request(Object.assign({ path: `/internal/profiles.is-display-handle-available`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Checks to ensure that the desired display handle is not already in use. This does not secure the handle, so it is possible that the check would be successful and a subsequent call to create a profile with the checked display handle might fail due to a race condition.
         *
         * @tags profiles
         * @name ProfilesIsDisplayHandleAvailablePost
         * @request POST:/internal/profiles.is-display-handle-available
         * @secure
         */
        this.profilesIsDisplayHandleAvailablePost = (data, params = {}) => this.request(Object.assign({ path: `/internal/profiles.is-display-handle-available`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the currently logged in user's profile information.
         *
         * @tags profiles
         * @name ProfilesSelf
         * @request GET:/internal/profiles.self
         * @secure
         */
        this.profilesSelf = (params = {}) => this.request(Object.assign({ path: `/internal/profiles.self`, method: 'GET', secure: true, format: 'json' }, params));
        /**
         * @description Gets the currently logged in user's profile information.
         *
         * @tags profiles
         * @name ProfilesSelfPost
         * @request POST:/internal/profiles.self
         * @secure
         */
        this.profilesSelfPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/profiles.self`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes the currently logged in user profile from the DevRev platform.
         *
         * @tags profiles
         * @name ProfilesSelfDelete
         * @request POST:/internal/profiles.self.delete
         * @secure
         */
        this.profilesSelfDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/profiles.self.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the currently logged-in user's profile information. Beware, the links to your profile page will return a not-found error on changing your display-handle. Also, your old display-handle becomes available for anyone else to claim.
         *
         * @tags profiles
         * @name ProfilesSelfUpdate
         * @request POST:/internal/profiles.self.update
         * @secure
         */
        this.profilesSelfUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/profiles.self.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Registers a push device.
         *
         * @tags notifications
         * @name PushDevicesRegister
         * @request POST:/internal/push-devices.register
         * @secure
         */
        this.pushDevicesRegister = (data, params = {}) => this.request(Object.assign({ path: `/internal/push-devices.register`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Unregisters a push device.
         *
         * @tags notifications
         * @name PushDevicesUnregister
         * @request POST:/internal/push-devices.unregister
         * @secure
         */
        this.pushDevicesUnregister = (data, params = {}) => this.request(Object.assign({ path: `/internal/push-devices.unregister`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Updates the timestamp on a device.
         *
         * @tags notifications
         * @name PushDevicesUpdate
         * @request POST:/internal/push-devices.update
         * @secure
         */
        this.pushDevicesUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/push-devices.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a question-answer.
         *
         * @tags question-answers
         * @name CreateQuestionAnswer
         * @request POST:/internal/question-answers.create
         * @secure
         */
        this.createQuestionAnswer = (data, params = {}) => this.request(Object.assign({ path: `/internal/question-answers.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a question-answer.
         *
         * @tags question-answers
         * @name DeleteQuestionAnswer
         * @request POST:/internal/question-answers.delete
         * @secure
         */
        this.deleteQuestionAnswer = (data, params = {}) => this.request(Object.assign({ path: `/internal/question-answers.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description ### Owner: dd@devrev.ai ### Gets a question-answer.
         *
         * @tags question-answers
         * @name GetQuestionAnswer
         * @request GET:/internal/question-answers.get
         * @secure
         */
        this.getQuestionAnswer = (query, params = {}) => this.request(Object.assign({ path: `/internal/question-answers.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a question-answer.
         *
         * @tags question-answers
         * @name GetQuestionAnswerPost
         * @request POST:/internal/question-answers.get
         * @secure
         */
        this.getQuestionAnswerPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/question-answers.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: dd@devrev.ai ### Lists a collection of question-answers.
         *
         * @tags question-answers
         * @name ListQuestionAnswers
         * @request GET:/internal/question-answers.list
         * @secure
         */
        this.listQuestionAnswers = (query, params = {}) => this.request(Object.assign({ path: `/internal/question-answers.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists a collection of question-answers.
         *
         * @tags question-answers
         * @name ListQuestionAnswersPost
         * @request POST:/internal/question-answers.list
         * @secure
         */
        this.listQuestionAnswersPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/question-answers.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a question-answer.
         *
         * @tags question-answers
         * @name UpdateQuestionAnswer
         * @request POST:/internal/question-answers.update
         * @secure
         */
        this.updateQuestionAnswer = (data, params = {}) => this.request(Object.assign({ path: `/internal/question-answers.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Clones a quote object and returns the cloned object.
         *
         * @tags commerce
         * @name QuotesClone
         * @request POST:/internal/quotes.clone
         * @secure
         */
        this.quotesClone = (data, params = {}) => this.request(Object.assign({ path: `/internal/quotes.clone`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Counts the number of quote objects based on the given filters.
         *
         * @tags commerce
         * @name QuotesCount
         * @request GET:/internal/quotes.count
         * @secure
         */
        this.quotesCount = (query, params = {}) => this.request(Object.assign({ path: `/internal/quotes.count`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Counts the number of quote objects based on the given filters.
         *
         * @tags commerce
         * @name QuotesCountPost
         * @request POST:/internal/quotes.count
         * @secure
         */
        this.quotesCountPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/quotes.count`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a quote object.
         *
         * @tags commerce
         * @name QuotesCreate
         * @request POST:/internal/quotes.create
         * @secure
         */
        this.quotesCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/quotes.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a quote object.
         *
         * @tags commerce
         * @name QuotesDelete
         * @request POST:/internal/quotes.delete
         * @secure
         */
        this.quotesDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/quotes.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Generates a quote pdf.
         *
         * @tags commerce
         * @name QuotesGeneratePdf
         * @request POST:/internal/quotes.generate-pdf
         * @secure
         */
        this.quotesGeneratePdf = (data, params = {}) => this.request(Object.assign({ path: `/internal/quotes.generate-pdf`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a quote object.
         *
         * @tags commerce
         * @name QuotesGet
         * @request GET:/internal/quotes.get
         * @secure
         */
        this.quotesGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/quotes.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a quote object.
         *
         * @tags commerce
         * @name QuotesGetPost
         * @request POST:/internal/quotes.get
         * @secure
         */
        this.quotesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/quotes.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the quote objects based on the given filters.
         *
         * @tags commerce
         * @name QuotesList
         * @request GET:/internal/quotes.list
         * @secure
         */
        this.quotesList = (query, params = {}) => this.request(Object.assign({ path: `/internal/quotes.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the quote objects based on the given filters.
         *
         * @tags commerce
         * @name QuotesListPost
         * @request POST:/internal/quotes.list
         * @secure
         */
        this.quotesListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/quotes.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a quote object.
         *
         * @tags commerce
         * @name QuotesUpdate
         * @request POST:/internal/quotes.update
         * @secure
         */
        this.quotesUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/quotes.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description List the reactors for an object.
         *
         * @tags timeline-entries, works
         * @name ReactionsList
         * @request GET:/internal/reactions.list
         * @secure
         */
        this.reactionsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/reactions.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description List the reactors for an object.
         *
         * @tags timeline-entries, works
         * @name ReactionsListPost
         * @request POST:/internal/reactions.list
         * @secure
         */
        this.reactionsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/reactions.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a reaction to an object.
         *
         * @tags timeline-entries, works
         * @name ReactionsUpdate
         * @request POST:/internal/reactions.update
         * @secure
         */
        this.reactionsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/reactions.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists suggestions for given input fields.
         *
         * @tags recommendations
         * @name AutoSuggest
         * @request POST:/internal/recommendations.autosuggest
         * @secure
         */
        this.autoSuggest = (data, params = {}) => this.request(Object.assign({ path: `/internal/recommendations.autosuggest`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Returns a completion for the chat messages.
         *
         * @tags recommendations
         * @name ChatComplete
         * @request POST:/internal/recommendations.chat.complete
         * @secure
         */
        this.chatComplete = (data, params = {}) => this.request(Object.assign({ path: `/internal/recommendations.chat.complete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Classifies a given inquiry as spam or not.
         *
         * @name ClassifyInquiry
         * @request POST:/internal/recommendations.classify-inquiry
         * @secure
         */
        this.classifyInquiry = (data, params = {}) => this.request(Object.assign({ path: `/internal/recommendations.classify-inquiry`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Evaluates the sentiment of a given object.
         *
         * @tags recommendations
         * @name EvaluateSentiment
         * @request POST:/internal/recommendations.evaluate.sentiment
         * @secure
         */
        this.evaluateSentiment = (data, params = {}) => this.request(Object.assign({ path: `/internal/recommendations.evaluate.sentiment`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a reply for a user query.
         *
         * @tags recommendations
         * @name GetReply
         * @request POST:/internal/recommendations.get-reply
         * @secure
         */
        this.getReply = (data, params = {}) => this.request(Object.assign({ path: `/internal/recommendations.get-reply`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists link target recommendations.
         *
         * @tags recommendations
         * @name LinkTarget
         * @request POST:/internal/recommendations.link.target
         * @secure
         */
        this.linkTarget = (data, params = {}) => this.request(Object.assign({ path: `/internal/recommendations.link.target`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Suggest parts that can be attributed to a given object.
         *
         * @tags recommendations
         * @name PartsSuggest
         * @request POST:/internal/recommendations.parts.suggest
         * @secure
         */
        this.partsSuggest = (data, params = {}) => this.request(Object.assign({ path: `/internal/recommendations.parts.suggest`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists personalized work items for a user.
         *
         * @tags recommendations
         * @name PersonalizedList
         * @request POST:/internal/recommendations.personalized.list
         * @secure
         */
        this.personalizedList = (data, params = {}) => this.request(Object.assign({ path: `/internal/recommendations.personalized.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Returns relevant context for a given query.
         *
         * @tags recommendations
         * @name GetRelevantContext
         * @request GET:/internal/recommendations.relevant-context
         * @secure
         */
        this.getRelevantContext = (query, params = {}) => this.request(Object.assign({ path: `/internal/recommendations.relevant-context`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Returns relevant context for a given query.
         *
         * @tags recommendations
         * @name GetRelevantContextPost
         * @request POST:/internal/recommendations.relevant-context
         * @secure
         */
        this.getRelevantContextPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/recommendations.relevant-context`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Returns resolved entities for a given text.
         *
         * @tags recommendations
         * @name ResolveEntities
         * @request POST:/internal/recommendations.resolve-entities
         * @secure
         */
        this.resolveEntities = (data, params = {}) => this.request(Object.assign({ path: `/internal/recommendations.resolve-entities`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Returns a list of completions for the given query.
         *
         * @tags recommendations
         * @name SearchAutoComplete
         * @request POST:/internal/recommendations.search.complete
         * @secure
         */
        this.searchAutoComplete = (data, params = {}) => this.request(Object.assign({ path: `/internal/recommendations.search.complete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Returns similar objects for a given object.
         *
         * @tags recommendations
         * @name GetSimilarObjects
         * @request GET:/internal/recommendations.suggest-objects
         * @secure
         */
        this.getSimilarObjects = (query, params = {}) => this.request(Object.assign({ path: `/internal/recommendations.suggest-objects`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Returns similar objects for a given object.
         *
         * @tags recommendations
         * @name GetSimilarObjectsPost
         * @request POST:/internal/recommendations.suggest-objects
         * @secure
         */
        this.getSimilarObjectsPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/recommendations.suggest-objects`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Typeahead recommendation.
         *
         * @tags recommendations
         * @name TypeAhead
         * @request POST:/internal/recommendations.typeahead
         * @secure
         */
        this.typeAhead = (data, params = {}) => this.request(Object.assign({ path: `/internal/recommendations.typeahead`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists similar work items.
         *
         * @tags recommendations
         * @name WorkDeflect
         * @request POST:/internal/recommendations.works.deflect
         * @secure
         */
        this.workDeflect = (data, params = {}) => this.request(Object.assign({ path: `/internal/recommendations.works.deflect`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a record template object.
         *
         * @tags record-templates
         * @name RecordTemplateCreate
         * @request POST:/internal/record-templates.create
         * @secure
         */
        this.recordTemplateCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/record-templates.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a record template object.
         *
         * @tags record-templates
         * @name RecordTemplateDelete
         * @request POST:/internal/record-templates.delete
         * @secure
         */
        this.recordTemplateDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/record-templates.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: altaf.ahmad@devrev.ai ### Gets a record template object.
         *
         * @tags record-templates
         * @name RecordTemplateGet
         * @request GET:/internal/record-templates.get
         * @secure
         */
        this.recordTemplateGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/record-templates.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a record template object.
         *
         * @tags record-templates
         * @name RecordTemplateGetPost
         * @request POST:/internal/record-templates.get
         * @secure
         */
        this.recordTemplateGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/record-templates.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: altaf.ahmad@devrev.ai ### Lists record template objects.
         *
         * @tags record-templates
         * @name RecordTemplateList
         * @request GET:/internal/record-templates.list
         * @secure
         */
        this.recordTemplateList = (query, params = {}) => this.request(Object.assign({ path: `/internal/record-templates.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists record template objects.
         *
         * @tags record-templates
         * @name RecordTemplateListPost
         * @request POST:/internal/record-templates.list
         * @secure
         */
        this.recordTemplateListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/record-templates.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a record template object.
         *
         * @tags record-templates
         * @name RecordTemplateUpdate
         * @request POST:/internal/record-templates.update
         * @secure
         */
        this.recordTemplateUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/record-templates.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Generates release notes for a given part in date range
         *
         * @name GenerateReleaseNotes
         * @request POST:/internal/release-notes.generate
         * @secure
         */
        this.generateReleaseNotes = (data, params = {}) => this.request(Object.assign({ path: `/internal/release-notes.generate`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a Rev org's commerce details.
         *
         * @tags commerce
         * @name RevOrgsCommerceDetailsGet
         * @request GET:/internal/rev-orgs.commerce-details.get
         * @secure
         */
        this.revOrgsCommerceDetailsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/rev-orgs.commerce-details.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a Rev org's commerce details.
         *
         * @tags commerce
         * @name RevOrgsCommerceDetailsGetPost
         * @request POST:/internal/rev-orgs.commerce-details.get
         * @secure
         */
        this.revOrgsCommerceDetailsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-orgs.commerce-details.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description List Rev org's commerce details.
         *
         * @tags commerce
         * @name RevOrgsCommerceDetailsList
         * @request GET:/internal/rev-orgs.commerce-details.list
         * @secure
         */
        this.revOrgsCommerceDetailsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/rev-orgs.commerce-details.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description List Rev org's commerce details.
         *
         * @tags commerce
         * @name RevOrgsCommerceDetailsListPost
         * @request POST:/internal/rev-orgs.commerce-details.list
         * @secure
         */
        this.revOrgsCommerceDetailsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-orgs.commerce-details.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a Rev org's commerce details.
         *
         * @tags commerce
         * @name RevOrgsCommerceDetailsUpdate
         * @request POST:/internal/rev-orgs.commerce-details.update
         * @secure
         */
        this.revOrgsCommerceDetailsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-orgs.commerce-details.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: akanksha.deswal@devrev.ai ### Gets the count of Rev organizations matching given filter.
         *
         * @tags rev-orgs
         * @name RevOrgsCount
         * @request GET:/internal/rev-orgs.count
         * @secure
         */
        this.revOrgsCount = (query, params = {}) => this.request(Object.assign({ path: `/internal/rev-orgs.count`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the count of Rev organizations matching given filter.
         *
         * @tags rev-orgs
         * @name RevOrgsCountPost
         * @request POST:/internal/rev-orgs.count
         * @secure
         */
        this.revOrgsCountPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-orgs.count`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a Rev organization in the authenticated user's Dev organization.
         *
         * @tags rev-orgs
         * @name RevOrgsCreate
         * @request POST:/internal/rev-orgs.create
         * @secure
         */
        this.revOrgsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-orgs.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates bulk Rev organizations for the authenticated user's Dev organization.
         *
         * @tags rev-orgs
         * @name RevOrgsBulkCreate
         * @request POST:/internal/rev-orgs.create.bulk.csv
         * @secure
         */
        this.revOrgsBulkCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-orgs.create.bulk.csv`, method: 'POST', body: data, secure: true, type: ContentType.FormData, format: 'json' }, params));
        /**
         * @description Deletes the Rev organization.
         *
         * @tags rev-orgs
         * @name RevOrgsDelete
         * @request POST:/internal/rev-orgs.delete
         * @secure
         */
        this.revOrgsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-orgs.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Checks if a Rev organization can be deleted.
         *
         * @tags rev-orgs
         * @name RevOrgsDeleteValidate
         * @request POST:/internal/rev-orgs.delete.validate
         * @secure
         */
        this.revOrgsDeleteValidate = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-orgs.delete.validate`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Exports a list of revorgs.
         *
         * @tags rev-orgs
         * @name RevOrgsExport
         * @request POST:/internal/rev-orgs.export
         * @secure
         */
        this.revOrgsExport = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-orgs.export`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: akanksha.deswal@devrev.ai ### Retrieves the Rev organization's information.
         *
         * @tags rev-orgs
         * @name RevOrgsGet
         * @request GET:/internal/rev-orgs.get
         * @secure
         */
        this.revOrgsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/rev-orgs.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Retrieves the Rev organization's information.
         *
         * @tags rev-orgs
         * @name RevOrgsGetPost
         * @request POST:/internal/rev-orgs.get
         * @secure
         */
        this.revOrgsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-orgs.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: akanksha.deswal@devrev.ai ### Lists collections of Rev organizations by groups.
         *
         * @tags rev-orgs
         * @name RevOrgsGroup
         * @request GET:/internal/rev-orgs.group
         * @secure
         */
        this.revOrgsGroup = (query, params = {}) => this.request(Object.assign({ path: `/internal/rev-orgs.group`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists collections of Rev organizations by groups.
         *
         * @tags rev-orgs
         * @name RevOrgsGroupPost
         * @request POST:/internal/rev-orgs.group
         * @secure
         */
        this.revOrgsGroupPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-orgs.group`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: akanksha.deswal@devrev.ai ### Gets the list of Rev organizations' information belonging to the authenticated user's Dev Organization which the user is also authorized to access.
         *
         * @tags rev-orgs
         * @name RevOrgsList
         * @request GET:/internal/rev-orgs.list
         * @secure
         */
        this.revOrgsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/rev-orgs.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the list of Rev organizations' information belonging to the authenticated user's Dev Organization which the user is also authorized to access.
         *
         * @tags rev-orgs
         * @name RevOrgsListPost
         * @request POST:/internal/rev-orgs.list
         * @secure
         */
        this.revOrgsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-orgs.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Merges the identity of a secondary Rev org with the primary Rev org.Secondary Rev org will be deleted.All objects - issues, tickets, conversations, rev users etc. referencing the secondary Rev org will be transferred to the primary Rev org.
         *
         * @tags rev-orgs
         * @name RevOrgsMerge
         * @request POST:/internal/rev-orgs.merge
         * @secure
         */
        this.revOrgsMerge = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-orgs.merge`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: akanksha.deswal@devrev.ai ### Fetches sample csv for bulk import.
         *
         * @tags rev-orgs
         * @name GetRevOrgSampleCsv
         * @request GET:/internal/rev-orgs.sample-csv.get
         * @secure
         */
        this.getRevOrgSampleCsv = (params = {}) => this.request(Object.assign({ path: `/internal/rev-orgs.sample-csv.get`, method: 'GET', secure: true, format: 'json' }, params));
        /**
         * @description Fetches sample csv for bulk import.
         *
         * @tags rev-orgs
         * @name GetRevOrgSampleCsvPost
         * @request POST:/internal/rev-orgs.sample-csv.get
         * @secure
         */
        this.getRevOrgSampleCsvPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-orgs.sample-csv.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the Rev organization's information.
         *
         * @tags rev-orgs
         * @name RevOrgsUpdate
         * @request POST:/internal/rev-orgs.update
         * @secure
         */
        this.revOrgsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-orgs.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Upgrades all Rev Orgs schema.
         *
         * @tags accounts
         * @name RevOrgsUpgrade
         * @request POST:/internal/rev-orgs.upgrade
         * @secure
         */
        this.revOrgsUpgrade = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-orgs.upgrade`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Discover Rev Part Hierarchy for a given DevOrg
         *
         * @tags parts
         * @name DiscoverRevParts
         * @request POST:/internal/rev-parts.discover
         * @secure
         */
        this.discoverRevParts = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-parts.discover`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the list of Rev users' information across all Rev organizations in user's Dev organization.
         *
         * @tags rev-users
         * @name RevUsersListAll
         * @request GET:/internal/rev-users.all.list
         * @secure
         */
        this.revUsersListAll = (query, params = {}) => this.request(Object.assign({ path: `/internal/rev-users.all.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the list of Rev users' information across all Rev organizations in user's Dev organization.
         *
         * @tags rev-users
         * @name RevUsersListAllPost
         * @request POST:/internal/rev-users.all.list
         * @secure
         */
        this.revUsersListAllPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-users.all.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: akanksha.deswal@devrev.ai ### Gets the count of Rev users matching given filter.
         *
         * @tags rev-users
         * @name RevUsersCount
         * @request GET:/internal/rev-users.count
         * @secure
         */
        this.revUsersCount = (query, params = {}) => this.request(Object.assign({ path: `/internal/rev-users.count`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the count of Rev users matching given filter.
         *
         * @tags rev-users
         * @name RevUsersCountPost
         * @request POST:/internal/rev-users.count
         * @secure
         */
        this.revUsersCountPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-users.count`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a Rev user for a Rev organization. Rev user can be a customer or a lead of an organization.
         *
         * @tags rev-users
         * @name RevUsersCreate
         * @request POST:/internal/rev-users.create
         * @secure
         */
        this.revUsersCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-users.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates bulk Rev users.
         *
         * @tags rev-users
         * @name RevUsersBulkCreate
         * @request POST:/internal/rev-users.create.bulk.csv
         * @secure
         */
        this.revUsersBulkCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-users.create.bulk.csv`, method: 'POST', body: data, secure: true, type: ContentType.FormData, format: 'json' }, params));
        /**
         * @description Deletes a Rev user.
         *
         * @tags rev-users
         * @name RevUsersDelete
         * @request POST:/internal/rev-users.delete
         * @secure
         */
        this.revUsersDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-users.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Exports a list of rev-users.
         *
         * @tags rev-users
         * @name RevUsersExport
         * @request POST:/internal/rev-users.export
         * @secure
         */
        this.revUsersExport = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-users.export`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Returns the Rev user of a Rev organization by its ID.
         *
         * @tags rev-users
         * @name RevUsersGet
         * @request GET:/internal/rev-users.get
         * @secure
         */
        this.revUsersGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/rev-users.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Returns the Rev user of a Rev organization by its ID.
         *
         * @tags rev-users
         * @name RevUsersGetPost
         * @request POST:/internal/rev-users.get
         * @secure
         */
        this.revUsersGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-users.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists collections of Rev users by groups.
         *
         * @tags rev-users
         * @name RevUsersGroup
         * @request GET:/internal/rev-users.group
         * @secure
         */
        this.revUsersGroup = (query, params = {}) => this.request(Object.assign({ path: `/internal/rev-users.group`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists collections of Rev users by groups.
         *
         * @tags rev-users
         * @name RevUsersGroupPost
         * @request POST:/internal/rev-users.group
         * @secure
         */
        this.revUsersGroupPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-users.group`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Returns a Rev session token for leads.
         *
         * @tags rev-users
         * @name RevUsersIdentify
         * @request POST:/internal/rev-users.identify
         * @secure
         */
        this.revUsersIdentify = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-users.identify`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Links a rev user to a rev org.
         *
         * @tags rev-users
         * @name LinkRevUserToRevOrg
         * @request POST:/internal/rev-users.link
         * @secure
         */
        this.linkRevUserToRevOrg = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-users.link`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Returns a list of all Rev Users belonging to the authenticated user's Dev Organization.
         *
         * @tags rev-users
         * @name RevUsersList
         * @request GET:/internal/rev-users.list
         * @secure
         */
        this.revUsersList = (query, params = {}) => this.request(Object.assign({ path: `/internal/rev-users.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Returns a list of all Rev Users belonging to the authenticated user's Dev Organization.
         *
         * @tags rev-users
         * @name RevUsersListPost
         * @request POST:/internal/rev-users.list
         * @secure
         */
        this.revUsersListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-users.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Merges the identity of a secondary Rev user with the primary Rev user.The account of the secondary Rev user will be deleted.All objects - issues, tickets, conversations etc. referencing the secondary Rev user will be transferred to the primary Rev user.
         *
         * @tags rev-users
         * @name RevUsersMerge
         * @request POST:/internal/rev-users.merge
         * @secure
         */
        this.revUsersMerge = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-users.merge`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Moves the Rev User to the target Rev organization under a Dev organization.
         *
         * @tags rev-users
         * @name RevUsersMove
         * @request POST:/internal/rev-users.move
         * @secure
         */
        this.revUsersMove = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-users.move`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Validates the request for Rev User's move operation.
         *
         * @tags rev-users
         * @name RevUsersMoveValidate
         * @request POST:/internal/rev-users.move.validate
         * @secure
         */
        this.revUsersMoveValidate = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-users.move.validate`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: akanksha.deswal@devrev.ai ### Fetches sample csv for bulk import.
         *
         * @tags rev-users
         * @name GetRevUserSampleCsv
         * @request GET:/internal/rev-users.sample-csv.get
         * @secure
         */
        this.getRevUserSampleCsv = (params = {}) => this.request(Object.assign({ path: `/internal/rev-users.sample-csv.get`, method: 'GET', secure: true, format: 'json' }, params));
        /**
         * @description Fetches sample csv for bulk import.
         *
         * @tags rev-users
         * @name GetRevUserSampleCsvPost
         * @request POST:/internal/rev-users.sample-csv.get
         * @secure
         */
        this.getRevUserSampleCsvPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-users.sample-csv.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the authenticated Rev user's information.
         *
         * @tags rev-users
         * @name RevUsersSelfGet
         * @request GET:/internal/rev-users.self.get
         * @secure
         */
        this.revUsersSelfGet = (params = {}) => this.request(Object.assign({ path: `/internal/rev-users.self.get`, method: 'GET', secure: true, format: 'json' }, params));
        /**
         * @description Gets the authenticated Rev user's information.
         *
         * @tags rev-users
         * @name RevUsersSelfGetPost
         * @request POST:/internal/rev-users.self.get
         * @secure
         */
        this.revUsersSelfGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-users.self.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the authenticated Rev user.
         *
         * @tags rev-users
         * @name RevUsersSelfUpdate
         * @request POST:/internal/rev-users.self.update
         * @secure
         */
        this.revUsersSelfUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-users.self.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Unlinks a rev user from a rev org.
         *
         * @tags rev-users
         * @name UnlinkRevUserFromRevOrg
         * @request POST:/internal/rev-users.unlink
         * @secure
         */
        this.unlinkRevUserFromRevOrg = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-users.unlink`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a Rev user.
         *
         * @tags rev-users
         * @name RevUsersUpdate
         * @request POST:/internal/rev-users.update
         * @secure
         */
        this.revUsersUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-users.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Upgrades all Rev Users schema.
         *
         * @tags accounts
         * @name RevUsersUpgrade
         * @request POST:/internal/rev-users.upgrade
         * @secure
         */
        this.revUsersUpgrade = (data, params = {}) => this.request(Object.assign({ path: `/internal/rev-users.upgrade`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the reward transactions based on the given filters.
         *
         * @tags commerce
         * @name RewardTransactionsList
         * @request GET:/internal/reward.transactions.list
         * @secure
         */
        this.rewardTransactionsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/reward.transactions.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the reward transactions based on the given filters.
         *
         * @tags commerce
         * @name RewardTransactionsListPost
         * @request POST:/internal/reward.transactions.list
         * @secure
         */
        this.rewardTransactionsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/reward.transactions.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a reward.
         *
         * @tags commerce
         * @name RewardsCreate
         * @request POST:/internal/rewards.create
         * @secure
         */
        this.rewardsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/rewards.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a reward.
         *
         * @tags commerce
         * @name RewardsGet
         * @request GET:/internal/rewards.get
         * @secure
         */
        this.rewardsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/rewards.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a reward.
         *
         * @tags commerce
         * @name RewardsGetPost
         * @request POST:/internal/rewards.get
         * @secure
         */
        this.rewardsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/rewards.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the rewards based on the given filters.
         *
         * @tags commerce
         * @name RewardsList
         * @request GET:/internal/rewards.list
         * @secure
         */
        this.rewardsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/rewards.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the rewards based on the given filters.
         *
         * @tags commerce
         * @name RewardsListPost
         * @request POST:/internal/rewards.list
         * @secure
         */
        this.rewardsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/rewards.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Transfers rewards from a rev user to its own rev org or to a rev user of the same rev org.
         *
         * @tags commerce
         * @name RewardsTransfer
         * @request POST:/internal/rewards.transfer
         * @secure
         */
        this.rewardsTransfer = (data, params = {}) => this.request(Object.assign({ path: `/internal/rewards.transfer`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Converts rewards to credits for a rev org.
         *
         * @tags commerce
         * @name RewardsTransferToCredits
         * @request POST:/internal/rewards.transfer-to-credits
         * @secure
         */
        this.rewardsTransferToCredits = (data, params = {}) => this.request(Object.assign({ path: `/internal/rewards.transfer-to-credits`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Assigns or revokes roles of a principal.
         *
         * @tags roles
         * @name RolesApply
         * @request POST:/internal/roles.apply
         * @secure
         */
        this.rolesApply = (data, params = {}) => this.request(Object.assign({ path: `/internal/roles.apply`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Clones roles of a target for its subtype.
         *
         * @tags roles
         * @name RolesClone
         * @request POST:/internal/roles.clone
         * @secure
         */
        this.rolesClone = (data, params = {}) => this.request(Object.assign({ path: `/internal/roles.clone`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a new role.
         *
         * @tags roles
         * @name RolesCreate
         * @request POST:/internal/roles.create
         * @secure
         */
        this.rolesCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/roles.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a role.
         *
         * @tags roles
         * @name RolesDelete
         * @request POST:/internal/roles.delete
         * @secure
         */
        this.rolesDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/roles.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the requested role's information.
         *
         * @tags roles
         * @name RolesGet
         * @request GET:/internal/roles.get
         * @secure
         */
        this.rolesGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/roles.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the requested role's information.
         *
         * @tags roles
         * @name RolesGetPost
         * @request POST:/internal/roles.get
         * @secure
         */
        this.rolesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/roles.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists the available roles.
         *
         * @tags roles
         * @name RolesList
         * @request GET:/internal/roles.list
         * @secure
         */
        this.rolesList = (query, params = {}) => this.request(Object.assign({ path: `/internal/roles.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the available roles.
         *
         * @tags roles
         * @name RolesListPost
         * @request POST:/internal/roles.list
         * @secure
         */
        this.rolesListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/roles.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists the principals the set of roles are assigned to.
         *
         * @tags roles
         * @name PrincipalsList
         * @request GET:/internal/roles.principals.list
         * @secure
         */
        this.principalsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/roles.principals.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the principals the set of roles are assigned to.
         *
         * @tags roles
         * @name PrincipalsListPost
         * @request POST:/internal/roles.principals.list
         * @secure
         */
        this.principalsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/roles.principals.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates an existing role.
         *
         * @tags roles
         * @name RolesUpdate
         * @request POST:/internal/roles.update
         * @secure
         */
        this.rolesUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/roles.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a room and returns the room details.
         *
         * @tags rooms
         * @name RoomsCreate
         * @request POST:/internal/rooms.create
         * @secure
         */
        this.roomsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/rooms.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Informs a room of a user update.
         *
         * @tags rooms
         * @name RoomsInform
         * @request POST:/internal/rooms.inform
         * @secure
         */
        this.roomsInform = (data, params = {}) => this.request(Object.assign({ path: `/internal/rooms.inform`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the specified rule node.
         *
         * @tags rules
         * @name RuleNodesGet
         * @request GET:/internal/rule-nodes.get
         * @secure
         */
        this.ruleNodesGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/rule-nodes.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the specified rule node.
         *
         * @tags rules
         * @name RuleNodesGetPost
         * @request POST:/internal/rule-nodes.get
         * @secure
         */
        this.ruleNodesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/rule-nodes.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists rule nodes matching the request.
         *
         * @tags rules
         * @name RuleNodesList
         * @request GET:/internal/rule-nodes.list
         * @secure
         */
        this.ruleNodesList = (query, params = {}) => this.request(Object.assign({ path: `/internal/rule-nodes.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists rule nodes matching the request.
         *
         * @tags rules
         * @name RuleNodesListPost
         * @request POST:/internal/rule-nodes.list
         * @secure
         */
        this.ruleNodesListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/rule-nodes.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a rule for the specified inputs.
         *
         * @tags rules
         * @name RulesCreate
         * @request POST:/internal/rules.create
         * @secure
         */
        this.rulesCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/rules.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Delete the specified rule.
         *
         * @tags rules
         * @name RulesDelete
         * @request POST:/internal/rules.delete
         * @secure
         */
        this.rulesDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/rules.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Fills the inputs for a node in a rule.
         *
         * @tags rules
         * @name RulesFillNode
         * @request POST:/internal/rules.fill-node
         * @secure
         */
        this.rulesFillNode = (data, params = {}) => this.request(Object.assign({ path: `/internal/rules.fill-node`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Generates a rule through natural language prompt.
         *
         * @tags rules
         * @name RulesGenerate
         * @request POST:/internal/rules.generate
         * @secure
         */
        this.rulesGenerate = (data, params = {}) => this.request(Object.assign({ path: `/internal/rules.generate`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Generates the structure for a rule through natural language prompt.
         *
         * @tags rules
         * @name RulesGenerateStructure
         * @request POST:/internal/rules.generate-structure
         * @secure
         */
        this.rulesGenerateStructure = (data, params = {}) => this.request(Object.assign({ path: `/internal/rules.generate-structure`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the specified rule.
         *
         * @tags rules
         * @name RulesGet
         * @request GET:/internal/rules.get
         * @secure
         */
        this.rulesGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/rules.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the specified rule.
         *
         * @tags rules
         * @name RulesGetPost
         * @request POST:/internal/rules.get
         * @secure
         */
        this.rulesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/rules.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists rules matching the request.
         *
         * @tags rules
         * @name RulesList
         * @request GET:/internal/rules.list
         * @secure
         */
        this.rulesList = (query, params = {}) => this.request(Object.assign({ path: `/internal/rules.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists rules matching the request.
         *
         * @tags rules
         * @name RulesListPost
         * @request POST:/internal/rules.list
         * @secure
         */
        this.rulesListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/rules.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Suggests the 'rule-node-id' and 'display-id' for a node in a rule.
         *
         * @tags rules
         * @name RulesSuggestNode
         * @request POST:/internal/rules.suggest-node
         * @secure
         */
        this.rulesSuggestNode = (data, params = {}) => this.request(Object.assign({ path: `/internal/rules.suggest-node`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the specified rule.
         *
         * @tags rules
         * @name RulesUpdate
         * @request POST:/internal/rules.update
         * @secure
         */
        this.rulesUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/rules.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the aggregated schema.
         *
         * @tags customization
         * @name AggregatedSchemaGet
         * @request GET:/internal/schemas.aggregated.get
         * @secure
         */
        this.aggregatedSchemaGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/schemas.aggregated.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the aggregated schema.
         *
         * @tags customization
         * @name AggregatedSchemaGetPost
         * @request POST:/internal/schemas.aggregated.get
         * @secure
         */
        this.aggregatedSchemaGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/schemas.aggregated.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the aggregated schema.
         *
         * @tags customization
         * @name AggregatedSchemaGetPrivate
         * @request GET:/internal/schemas.aggregated.get.private
         * @secure
         */
        this.aggregatedSchemaGetPrivate = (query, params = {}) => this.request(Object.assign({ path: `/internal/schemas.aggregated.get.private`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the aggregated schema.
         *
         * @tags customization
         * @name AggregatedSchemaGetPrivatePost
         * @request POST:/internal/schemas.aggregated.get.private
         * @secure
         */
        this.aggregatedSchemaGetPrivatePost = (data, params = {}) => this.request(Object.assign({ path: `/internal/schemas.aggregated.get.private`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a custom schema fragment.
         *
         * @tags customization
         * @name CustomSchemaFragmentsGet
         * @request GET:/internal/schemas.custom.get
         * @secure
         */
        this.customSchemaFragmentsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/schemas.custom.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a custom schema fragment.
         *
         * @tags customization
         * @name CustomSchemaFragmentsGetPost
         * @request POST:/internal/schemas.custom.get
         * @secure
         */
        this.customSchemaFragmentsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/schemas.custom.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a custom schema fragment.
         *
         * @tags customization
         * @name CustomSchemaFragmentsGetPrivate
         * @request GET:/internal/schemas.custom.get.private
         * @secure
         */
        this.customSchemaFragmentsGetPrivate = (query, params = {}) => this.request(Object.assign({ path: `/internal/schemas.custom.get.private`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a custom schema fragment.
         *
         * @tags customization
         * @name CustomSchemaFragmentsGetPrivatePost
         * @request POST:/internal/schemas.custom.get.private
         * @secure
         */
        this.customSchemaFragmentsGetPrivatePost = (data, params = {}) => this.request(Object.assign({ path: `/internal/schemas.custom.get.private`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists custom schema fragments.
         *
         * @tags customization
         * @name CustomSchemaFragmentsList
         * @request GET:/internal/schemas.custom.list
         * @secure
         */
        this.customSchemaFragmentsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/schemas.custom.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists custom schema fragments.
         *
         * @tags customization
         * @name CustomSchemaFragmentsListPost
         * @request POST:/internal/schemas.custom.list
         * @secure
         */
        this.customSchemaFragmentsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/schemas.custom.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists custom schema fragments.
         *
         * @tags customization
         * @name CustomSchemaFragmentsListPrivate
         * @request GET:/internal/schemas.custom.list.private
         * @secure
         */
        this.customSchemaFragmentsListPrivate = (query, params = {}) => this.request(Object.assign({ path: `/internal/schemas.custom.list.private`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists custom schema fragments.
         *
         * @tags customization
         * @name CustomSchemaFragmentsListPrivatePost
         * @request POST:/internal/schemas.custom.list.private
         * @secure
         */
        this.customSchemaFragmentsListPrivatePost = (data, params = {}) => this.request(Object.assign({ path: `/internal/schemas.custom.list.private`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates or updates a custom schema fragment.
         *
         * @tags customization
         * @name CustomSchemaFragmentsSet
         * @request POST:/internal/schemas.custom.set
         * @secure
         */
        this.customSchemaFragmentsSet = (data, params = {}) => this.request(Object.assign({ path: `/internal/schemas.custom.set`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates or updates a custom schema fragment.
         *
         * @tags customization
         * @name CustomSchemaFragmentsSetPrivate
         * @request POST:/internal/schemas.custom.set.private
         * @secure
         */
        this.customSchemaFragmentsSetPrivate = (data, params = {}) => this.request(Object.assign({ path: `/internal/schemas.custom.set.private`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a stock schema fragment.
         *
         * @tags customization
         * @name StockSchemaFragmentsGet
         * @request GET:/internal/schemas.stock.get
         * @secure
         */
        this.stockSchemaFragmentsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/schemas.stock.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a stock schema fragment.
         *
         * @tags customization
         * @name StockSchemaFragmentsGetPost
         * @request POST:/internal/schemas.stock.get
         * @secure
         */
        this.stockSchemaFragmentsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/schemas.stock.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a stock schema fragment.
         *
         * @tags customization
         * @name StockSchemaFragmentsGetPrivate
         * @request GET:/internal/schemas.stock.get.private
         * @secure
         */
        this.stockSchemaFragmentsGetPrivate = (query, params = {}) => this.request(Object.assign({ path: `/internal/schemas.stock.get.private`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a stock schema fragment.
         *
         * @tags customization
         * @name StockSchemaFragmentsGetPrivatePost
         * @request POST:/internal/schemas.stock.get.private
         * @secure
         */
        this.stockSchemaFragmentsGetPrivatePost = (data, params = {}) => this.request(Object.assign({ path: `/internal/schemas.stock.get.private`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists stock schema fragments.
         *
         * @tags customization
         * @name StockSchemaFragmentsList
         * @request GET:/internal/schemas.stock.list
         * @secure
         */
        this.stockSchemaFragmentsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/schemas.stock.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists stock schema fragments.
         *
         * @tags customization
         * @name StockSchemaFragmentsListPost
         * @request POST:/internal/schemas.stock.list
         * @secure
         */
        this.stockSchemaFragmentsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/schemas.stock.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists stock schema fragments.
         *
         * @tags customization
         * @name StockSchemaFragmentsListPrivate
         * @request GET:/internal/schemas.stock.list.private
         * @secure
         */
        this.stockSchemaFragmentsListPrivate = (query, params = {}) => this.request(Object.assign({ path: `/internal/schemas.stock.list.private`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists stock schema fragments.
         *
         * @tags customization
         * @name StockSchemaFragmentsListPrivatePost
         * @request POST:/internal/schemas.stock.list.private
         * @secure
         */
        this.stockSchemaFragmentsListPrivatePost = (data, params = {}) => this.request(Object.assign({ path: `/internal/schemas.stock.list.private`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists subtypes.
         *
         * @tags customization
         * @name SubtypesList
         * @request GET:/internal/schemas.subtypes.list
         * @secure
         */
        this.subtypesList = (query, params = {}) => this.request(Object.assign({ path: `/internal/schemas.subtypes.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists subtypes.
         *
         * @tags customization
         * @name SubtypesListPost
         * @request POST:/internal/schemas.subtypes.list
         * @secure
         */
        this.subtypesListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/schemas.subtypes.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the new fragment IDs and fields resulting from changing a subtype.
         *
         * @tags customization
         * @name SchemasSubtypePrepareUpdateGet
         * @request POST:/internal/schemas.subtypes.prepare-update
         * @secure
         */
        this.schemasSubtypePrepareUpdateGet = (data, params = {}) => this.request(Object.assign({ path: `/internal/schemas.subtypes.prepare-update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a new score.
         *
         * @tags alchemy
         * @name ScoresCreate
         * @request POST:/internal/scores.create
         * @secure
         */
        this.scoresCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/scores.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a score by ID.
         *
         * @tags alchemy
         * @name ScoresDelete
         * @request POST:/internal/scores.delete
         * @secure
         */
        this.scoresDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/scores.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a score by ID.
         *
         * @tags alchemy
         * @name ScoresGet
         * @request GET:/internal/scores.get
         * @secure
         */
        this.scoresGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/scores.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a score by ID.
         *
         * @tags alchemy
         * @name ScoresGetPost
         * @request POST:/internal/scores.get
         * @secure
         */
        this.scoresGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/scores.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists all the available scores.
         *
         * @tags alchemy
         * @name ScoresList
         * @request GET:/internal/scores.list
         * @secure
         */
        this.scoresList = (params = {}) => this.request(Object.assign({ path: `/internal/scores.list`, method: 'GET', secure: true, format: 'json' }, params));
        /**
         * @description Lists all the available scores.
         *
         * @tags alchemy
         * @name ScoresListPost
         * @request POST:/internal/scores.list
         * @secure
         */
        this.scoresListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/scores.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a score by ID.
         *
         * @tags alchemy
         * @name ScoresUpdate
         * @request POST:/internal/scores.update
         * @secure
         */
        this.scoresUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/scores.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Searches for KB articles for the provided query.
         *
         * @tags search
         * @name SearchArticles
         * @request GET:/internal/search.articles
         * @secure
         */
        this.searchArticles = (query, params = {}) => this.request(Object.assign({ path: `/internal/search.articles`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Searches for KB articles for the provided query.
         *
         * @tags search
         * @name SearchArticlesPost
         * @request POST:/internal/search.articles
         * @secure
         */
        this.searchArticlesPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/search.articles`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: ashwini.vasanth@devrev.ai ### Searches for records based on a given query.
         *
         * @tags search
         * @name SearchCore
         * @request GET:/internal/search.core
         * @secure
         */
        this.searchCore = (query, params = {}) => this.request(Object.assign({ path: `/internal/search.core`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Searches for records based on a given query.
         *
         * @tags search
         * @name SearchCorePost
         * @request POST:/internal/search.core
         * @secure
         */
        this.searchCorePost = (data, params = {}) => this.request(Object.assign({ path: `/internal/search.core`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: dd@devrev.ai ### Performs search, using a combination of syntactic and semantic search.
         *
         * @tags search
         * @name SearchHybrid
         * @request GET:/internal/search.hybrid
         * @secure
         */
        this.searchHybrid = (query, params = {}) => this.request(Object.assign({ path: `/internal/search.hybrid`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Performs search, using a combination of syntactic and semantic search.
         *
         * @tags search
         * @name SearchHybridPost
         * @request POST:/internal/search.hybrid
         * @secure
         */
        this.searchHybridPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/search.hybrid`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Performs search, encompassing exact, prefix and infix matches on the specified query.
         *
         * @tags search
         * @name SearchSuggest
         * @request GET:/internal/search.suggest
         * @secure
         */
        this.searchSuggest = (query, params = {}) => this.request(Object.assign({ path: `/internal/search.suggest`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Performs search, encompassing exact, prefix and infix matches on the specified query.
         *
         * @tags search
         * @name SearchSuggestPost
         * @request POST:/internal/search.suggest
         * @secure
         */
        this.searchSuggestPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/search.suggest`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Typeahead search.
         *
         * @tags search
         * @name SearchTypeahead
         * @request GET:/internal/search.typeahead
         * @secure
         */
        this.searchTypeahead = (query, params = {}) => this.request(Object.assign({ path: `/internal/search.typeahead`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Typeahead search.
         *
         * @tags search
         * @name SearchTypeaheadPost
         * @request POST:/internal/search.typeahead
         * @secure
         */
        this.searchTypeaheadPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/search.typeahead`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a service account.
         *
         * @tags service-accounts
         * @name ServiceAccountsCreate
         * @request POST:/internal/service-accounts.create
         * @secure
         */
        this.serviceAccountsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/service-accounts.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a service account.
         *
         * @tags service-accounts
         * @name ServiceAccountsDelete
         * @request POST:/internal/service-accounts.delete
         * @secure
         */
        this.serviceAccountsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/service-accounts.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: prabath.siriwardena@devrev.ai ### Gets a service account.
         *
         * @tags service-accounts
         * @name ServiceAccountsGet
         * @request GET:/internal/service-accounts.get
         * @secure
         */
        this.serviceAccountsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/service-accounts.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a service account.
         *
         * @tags service-accounts
         * @name ServiceAccountsGetPost
         * @request POST:/internal/service-accounts.get
         * @secure
         */
        this.serviceAccountsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/service-accounts.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a keyring under the corresponding service account.
         *
         * @tags service-accounts
         * @name ServiceAccountsKeyringsCreate
         * @request POST:/internal/service-accounts.keyrings.create
         * @secure
         */
        this.serviceAccountsKeyringsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/service-accounts.keyrings.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a keyring under the corresponding service account.
         *
         * @tags service-accounts
         * @name ServiceAccountsKeyringsDelete
         * @request POST:/internal/service-accounts.keyrings.delete
         * @secure
         */
        this.serviceAccountsKeyringsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/service-accounts.keyrings.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: prabath.siriwardena@devrev.ai ### Gets a keyring under the corresponding service account.
         *
         * @tags service-accounts
         * @name ServiceAccountsKeyringsGet
         * @request GET:/internal/service-accounts.keyrings.get
         * @secure
         */
        this.serviceAccountsKeyringsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/service-accounts.keyrings.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a keyring under the corresponding service account.
         *
         * @tags service-accounts
         * @name ServiceAccountsKeyringsGetPost
         * @request POST:/internal/service-accounts.keyrings.get
         * @secure
         */
        this.serviceAccountsKeyringsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/service-accounts.keyrings.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a keyring under the corresponding service account.
         *
         * @tags service-accounts
         * @name ServiceAccountsKeyringsUpdate
         * @request POST:/internal/service-accounts.keyrings.update
         * @secure
         */
        this.serviceAccountsKeyringsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/service-accounts.keyrings.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: prabath.siriwardena@devrev.ai ### Lists the service accounts.
         *
         * @tags service-accounts
         * @name ServiceAccountsList
         * @request GET:/internal/service-accounts.list
         * @secure
         */
        this.serviceAccountsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/service-accounts.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the service accounts.
         *
         * @tags service-accounts
         * @name ServiceAccountsListPost
         * @request POST:/internal/service-accounts.list
         * @secure
         */
        this.serviceAccountsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/service-accounts.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a service account.
         *
         * @tags service-accounts
         * @name ServiceAccountsUpdate
         * @request POST:/internal/service-accounts.update
         * @secure
         */
        this.serviceAccountsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/service-accounts.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Cancels a service plan.
         *
         * @tags commerce
         * @name ServicePlansCancel
         * @request POST:/internal/service-plans.cancel
         * @secure
         */
        this.servicePlansCancel = (data, params = {}) => this.request(Object.assign({ path: `/internal/service-plans.cancel`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Counts the number of service plan objects based on the given filters.
         *
         * @tags commerce
         * @name ServicePlansCount
         * @request GET:/internal/service-plans.count
         * @secure
         */
        this.servicePlansCount = (query, params = {}) => this.request(Object.assign({ path: `/internal/service-plans.count`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Counts the number of service plan objects based on the given filters.
         *
         * @tags commerce
         * @name ServicePlansCountPost
         * @request POST:/internal/service-plans.count
         * @secure
         */
        this.servicePlansCountPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/service-plans.count`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a service plan object.
         *
         * @tags commerce
         * @name ServicePlansCreate
         * @request POST:/internal/service-plans.create
         * @secure
         */
        this.servicePlansCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/service-plans.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a service plan object.
         *
         * @tags commerce
         * @name ServicePlansGet
         * @request GET:/internal/service-plans.get
         * @secure
         */
        this.servicePlansGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/service-plans.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a service plan object.
         *
         * @tags commerce
         * @name ServicePlansGetPost
         * @request POST:/internal/service-plans.get
         * @secure
         */
        this.servicePlansGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/service-plans.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets compatible skus that can be purchased with the current configuration of the service plan.
         *
         * @tags commerce
         * @name ServicePlansGetCompatibleSkus
         * @request GET:/internal/service-plans.get-compatible-skus
         * @secure
         */
        this.servicePlansGetCompatibleSkus = (query, params = {}) => this.request(Object.assign({ path: `/internal/service-plans.get-compatible-skus`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets compatible skus that can be purchased with the current configuration of the service plan.
         *
         * @tags commerce
         * @name ServicePlansGetCompatibleSkusPost
         * @request POST:/internal/service-plans.get-compatible-skus
         * @secure
         */
        this.servicePlansGetCompatibleSkusPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/service-plans.get-compatible-skus`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the service plan objects based on the given filters.
         *
         * @tags commerce
         * @name ServicePlansList
         * @request GET:/internal/service-plans.list
         * @secure
         */
        this.servicePlansList = (query, params = {}) => this.request(Object.assign({ path: `/internal/service-plans.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the service plan objects based on the given filters.
         *
         * @tags commerce
         * @name ServicePlansListPost
         * @request POST:/internal/service-plans.list
         * @secure
         */
        this.servicePlansListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/service-plans.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a service plan object.
         *
         * @tags commerce
         * @name ServicePlansUpdate
         * @request POST:/internal/service-plans.update
         * @secure
         */
        this.servicePlansUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/service-plans.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a sku rule.
         *
         * @tags commerce
         * @name SkuRulesCreate
         * @request POST:/internal/skurules.create
         * @secure
         */
        this.skuRulesCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/skurules.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a sku rule.
         *
         * @tags commerce
         * @name SkuRulesDelete
         * @request POST:/internal/skurules.delete
         * @secure
         */
        this.skuRulesDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/skurules.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Gets a sku rule.
         *
         * @tags commerce
         * @name SkuRulesGet
         * @request GET:/internal/skurules.get
         * @secure
         */
        this.skuRulesGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/skurules.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a sku rule.
         *
         * @tags commerce
         * @name SkuRulesGetPost
         * @request POST:/internal/skurules.get
         * @secure
         */
        this.skuRulesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/skurules.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the sku rules based on the given filters.
         *
         * @tags commerce
         * @name SkuRulesList
         * @request GET:/internal/skurules.list
         * @secure
         */
        this.skuRulesList = (query, params = {}) => this.request(Object.assign({ path: `/internal/skurules.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the sku rules based on the given filters.
         *
         * @tags commerce
         * @name SkuRulesListPost
         * @request POST:/internal/skurules.list
         * @secure
         */
        this.skuRulesListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/skurules.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a sku rule.
         *
         * @tags commerce
         * @name SkuRulesUpdate
         * @request POST:/internal/skurules.update
         * @secure
         */
        this.skuRulesUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/skurules.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Counts the number of SKUs based on the given filters.
         *
         * @tags commerce
         * @name SkusCount
         * @request GET:/internal/skus.count
         * @secure
         */
        this.skusCount = (query, params = {}) => this.request(Object.assign({ path: `/internal/skus.count`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Counts the number of SKUs based on the given filters.
         *
         * @tags commerce
         * @name SkusCountPost
         * @request POST:/internal/skus.count
         * @secure
         */
        this.skusCountPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/skus.count`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a SKU.
         *
         * @tags commerce
         * @name SkusCreate
         * @request POST:/internal/skus.create
         * @secure
         */
        this.skusCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/skus.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a SKU.
         *
         * @tags commerce
         * @name SkusDelete
         * @request POST:/internal/skus.delete
         * @secure
         */
        this.skusDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/skus.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Gets a SKU.
         *
         * @tags commerce
         * @name SkusGet
         * @request GET:/internal/skus.get
         * @secure
         */
        this.skusGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/skus.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a SKU.
         *
         * @tags commerce
         * @name SkusGetPost
         * @request POST:/internal/skus.get
         * @secure
         */
        this.skusGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/skus.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the SKUs based on the given filters.
         *
         * @tags commerce
         * @name SkusList
         * @request GET:/internal/skus.list
         * @secure
         */
        this.skusList = (query, params = {}) => this.request(Object.assign({ path: `/internal/skus.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the SKUs based on the given filters.
         *
         * @tags commerce
         * @name SkusListPost
         * @request POST:/internal/skus.list
         * @secure
         */
        this.skusListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/skus.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a SKU.
         *
         * @tags commerce
         * @name SkusUpdate
         * @request POST:/internal/skus.update
         * @secure
         */
        this.skusUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/skus.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Versions a SKU.
         *
         * @tags commerce
         * @name SkusVersion
         * @request POST:/internal/skus.version
         * @secure
         */
        this.skusVersion = (data, params = {}) => this.request(Object.assign({ path: `/internal/skus.version`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates an SLA assignment rule.
         *
         * @tags slas
         * @name SlaAssignmentRulesCreate
         * @request POST:/internal/sla-assignment-rules.create
         * @secure
         */
        this.slaAssignmentRulesCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/sla-assignment-rules.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes an SLA assignment rule.
         *
         * @tags slas
         * @name SlaAssignmentRulesDelete
         * @request POST:/internal/sla-assignment-rules.delete
         * @secure
         */
        this.slaAssignmentRulesDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/sla-assignment-rules.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: suraj.narra@devrev.ai ### Gets an SLA assignment rule.
         *
         * @tags slas
         * @name SlaAssignmentRulesGet
         * @request GET:/internal/sla-assignment-rules.get
         * @secure
         */
        this.slaAssignmentRulesGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/sla-assignment-rules.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets an SLA assignment rule.
         *
         * @tags slas
         * @name SlaAssignmentRulesGetPost
         * @request POST:/internal/sla-assignment-rules.get
         * @secure
         */
        this.slaAssignmentRulesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/sla-assignment-rules.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: suraj.narra@devrev.ai ### Gets a list of SLA assignment rules.
         *
         * @tags slas
         * @name SlaAssignmentRulesList
         * @request GET:/internal/sla-assignment-rules.list
         * @secure
         */
        this.slaAssignmentRulesList = (query, params = {}) => this.request(Object.assign({ path: `/internal/sla-assignment-rules.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a list of SLA assignment rules.
         *
         * @tags slas
         * @name SlaAssignmentRulesListPost
         * @request POST:/internal/sla-assignment-rules.list
         * @secure
         */
        this.slaAssignmentRulesListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/sla-assignment-rules.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates an SLA assignment rule.
         *
         * @tags slas
         * @name SlaAssignmentRulesUpdate
         * @request POST:/internal/sla-assignment-rules.update
         * @secure
         */
        this.slaAssignmentRulesUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/sla-assignment-rules.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: prashant.kumar@devrev.ai ### Gets an SLA tracker.
         *
         * @tags slas
         * @name SlaTrackersGet
         * @request GET:/internal/sla-trackers.get
         * @secure
         */
        this.slaTrackersGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/sla-trackers.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets an SLA tracker.
         *
         * @tags slas
         * @name SlaTrackersGetPost
         * @request POST:/internal/sla-trackers.get
         * @secure
         */
        this.slaTrackersGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/sla-trackers.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description  Assigns the SLA to a set of Rev organizations.
         *
         * @tags slas
         * @name SlasAssign
         * @request POST:/internal/slas.assign
         * @secure
         */
        this.slasAssign = (data, params = {}) => this.request(Object.assign({ path: `/internal/slas.assign`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates an SLA in draft status.
         *
         * @tags slas
         * @name SlasCreate
         * @request POST:/internal/slas.create
         * @secure
         */
        this.slasCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/slas.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: lorinc.body@devrev.ai ### Gets an SLA.
         *
         * @tags slas
         * @name SlasGet
         * @request GET:/internal/slas.get
         * @secure
         */
        this.slasGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/slas.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets an SLA.
         *
         * @tags slas
         * @name SlasGetPost
         * @request POST:/internal/slas.get
         * @secure
         */
        this.slasGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/slas.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: lorinc.body@devrev.ai ### Lists SLAs matching a filter.
         *
         * @tags slas
         * @name SlasList
         * @request GET:/internal/slas.list
         * @secure
         */
        this.slasList = (query, params = {}) => this.request(Object.assign({ path: `/internal/slas.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists SLAs matching a filter.
         *
         * @tags slas
         * @name SlasListPost
         * @request POST:/internal/slas.list
         * @secure
         */
        this.slasListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/slas.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Changes the status of an SLA.
         *
         * @tags slas
         * @name SlasTransition
         * @request POST:/internal/slas.transition
         * @secure
         */
        this.slasTransition = (data, params = {}) => this.request(Object.assign({ path: `/internal/slas.transition`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a draft SLA.
         *
         * @tags slas
         * @name SlasUpdate
         * @request POST:/internal/slas.update
         * @secure
         */
        this.slasUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/slas.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Initialize snap component.
         *
         * @tags snap-components
         * @name InitializeSnapComponent
         * @request POST:/internal/snap-components.initialize
         * @secure
         */
        this.initializeSnapComponent = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-components.initialize`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: srividya.tata@devrev.ai ### List snap components.
         *
         * @tags snap-components
         * @name ListSnapComponents
         * @request GET:/internal/snap-components.list
         * @secure
         */
        this.listSnapComponents = (query, params = {}) => this.request(Object.assign({ path: `/internal/snap-components.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description List snap components.
         *
         * @tags snap-components
         * @name ListSnapComponentsPost
         * @request POST:/internal/snap-components.list
         * @secure
         */
        this.listSnapComponentsPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-components.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a snap-in package.
         *
         * @tags snap-in-packages
         * @name SnapInPackagesCreate
         * @request POST:/internal/snap-in-packages.create
         * @secure
         */
        this.snapInPackagesCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-in-packages.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a snap-in package.
         *
         * @tags snap-in-packages
         * @name SnapInPackagesDelete
         * @request POST:/internal/snap-in-packages.delete
         * @secure
         */
        this.snapInPackagesDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-in-packages.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description ### Owner: peter.marinsek@devrev.ai ### Gets a snap-in package.
         *
         * @tags snap-in-packages
         * @name SnapInPackagesGet
         * @request GET:/internal/snap-in-packages.get
         * @secure
         */
        this.snapInPackagesGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/snap-in-packages.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a snap-in package.
         *
         * @tags snap-in-packages
         * @name SnapInPackagesGetPost
         * @request POST:/internal/snap-in-packages.get
         * @secure
         */
        this.snapInPackagesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-in-packages.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: peter.marinsek@devrev.ai ### Lists snap-in packages for a Dev organization.
         *
         * @tags snap-in-packages
         * @name SnapInPackagesList
         * @request GET:/internal/snap-in-packages.list
         * @secure
         */
        this.snapInPackagesList = (query, params = {}) => this.request(Object.assign({ path: `/internal/snap-in-packages.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists snap-in packages for a Dev organization.
         *
         * @tags snap-in-packages
         * @name SnapInPackagesListPost
         * @request POST:/internal/snap-in-packages.list
         * @secure
         */
        this.snapInPackagesListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-in-packages.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: umang.malik@devrev.ai ### Fetches the logs for the snap-in-package based on the filters specified.
         *
         * @tags snap-in-packages
         * @name SnapInPackagesLogsFetch
         * @request GET:/internal/snap-in-packages.logs.fetch
         * @secure
         */
        this.snapInPackagesLogsFetch = (query, params = {}) => this.request(Object.assign({ path: `/internal/snap-in-packages.logs.fetch`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Fetches the logs for the snap-in-package based on the filters specified.
         *
         * @tags snap-in-packages
         * @name SnapInPackagesLogsFetchPost
         * @request POST:/internal/snap-in-packages.logs.fetch
         * @secure
         */
        this.snapInPackagesLogsFetchPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-in-packages.logs.fetch`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a snap-in package.
         *
         * @tags snap-in-packages
         * @name SnapInPackagesUpdate
         * @request POST:/internal/snap-in-packages.update
         * @secure
         */
        this.snapInPackagesUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-in-packages.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Validates a Snap-in package's slug.
         *
         * @tags snap-in-packages
         * @name SnapInPackagesValidateSlug
         * @request POST:/internal/snap-in-packages.validate-slug
         * @secure
         */
        this.snapInPackagesValidateSlug = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-in-packages.validate-slug`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates snap-in preferences for a user in a snap-in.
         *
         * @tags snap-ins
         * @name SnapInPreferencesCreate
         * @request POST:/internal/snap-in-preferences.create
         * @secure
         */
        this.snapInPreferencesCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-in-preferences.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: navneel.mandal@devrev.ai ### Gets snap-in preferences for a user in a snap-in.
         *
         * @tags snap-ins
         * @name SnapInPreferencesGet
         * @request GET:/internal/snap-in-preferences.get
         * @secure
         */
        this.snapInPreferencesGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/snap-in-preferences.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets snap-in preferences for a user in a snap-in.
         *
         * @tags snap-ins
         * @name SnapInPreferencesGetPost
         * @request POST:/internal/snap-in-preferences.get
         * @secure
         */
        this.snapInPreferencesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-in-preferences.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates snap-in preferences' state for a user in a snap-in.
         *
         * @tags snap-ins
         * @name SnapInPreferencesStateUpdate
         * @request POST:/internal/snap-in-preferences.state-update
         * @secure
         */
        this.snapInPreferencesStateUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-in-preferences.state-update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates snap-in preferences for a user in a snap-in.
         *
         * @tags snap-ins
         * @name SnapInPreferencesUpdate
         * @request POST:/internal/snap-in-preferences.update
         * @secure
         */
        this.snapInPreferencesUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-in-preferences.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a snap-in version.
         *
         * @tags snap-in-versions
         * @name SnapInVersionsCreate
         * @request POST:/internal/snap-in-versions.create
         * @secure
         */
        this.snapInVersionsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-in-versions.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a snap-in version.
         *
         * @tags snap-in-versions
         * @name SnapInVersionsDelete
         * @request POST:/internal/snap-in-versions.delete
         * @secure
         */
        this.snapInVersionsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-in-versions.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description ### Owner: peter.marinsek@devrev.ai ### Gets a snap-in version.
         *
         * @tags snap-in-versions
         * @name SnapInVersionsGet
         * @request GET:/internal/snap-in-versions.get
         * @secure
         */
        this.snapInVersionsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/snap-in-versions.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a snap-in version.
         *
         * @tags snap-in-versions
         * @name SnapInVersionsGetPost
         * @request POST:/internal/snap-in-versions.get
         * @secure
         */
        this.snapInVersionsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-in-versions.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: harpinder.singh@devrev.ai ### Lists snap-in versions for a Dev organization.
         *
         * @tags snap-in-versions
         * @name SnapInVersionsList
         * @request GET:/internal/snap-in-versions.list
         * @secure
         */
        this.snapInVersionsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/snap-in-versions.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists snap-in versions for a Dev organization.
         *
         * @tags snap-in-versions
         * @name SnapInVersionsListPost
         * @request POST:/internal/snap-in-versions.list
         * @secure
         */
        this.snapInVersionsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-in-versions.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Checks whether a Snap-in version is upgradable to new definition.
         *
         * @tags snap-in-versions
         * @name SnapInVersionsUpgradabilityCheck
         * @request POST:/internal/snap-in-versions.upgradability-check
         * @secure
         */
        this.snapInVersionsUpgradabilityCheck = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-in-versions.upgradability-check`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Upgrades the given snap-in version.
         *
         * @tags snap-in-versions
         * @name SnapInVersionsUpgrade
         * @request POST:/internal/snap-in-versions.upgrade
         * @secure
         */
        this.snapInVersionsUpgrade = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-in-versions.upgrade`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Validates a Snap-in version's manifest.
         *
         * @tags snap-in-versions
         * @name SnapInVersionsValidateManifest
         * @request POST:/internal/snap-in-versions.validate-manifest
         * @secure
         */
        this.snapInVersionsValidateManifest = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-in-versions.validate-manifest`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Activates a snap-in.
         *
         * @tags snap-ins
         * @name SnapInsActivate
         * @request POST:/internal/snap-ins.activate
         * @secure
         */
        this.snapInsActivate = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-ins.activate`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deactivates a snap-in.
         *
         * @tags snap-ins
         * @name SnapInsDeactivate
         * @request POST:/internal/snap-ins.deactivate
         * @secure
         */
        this.snapInsDeactivate = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-ins.deactivate`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a snap-in.
         *
         * @tags snap-ins
         * @name SnapInsDelete
         * @request POST:/internal/snap-ins.delete
         * @secure
         */
        this.snapInsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-ins.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Creates a draft snap-in from given snap-in version.
         *
         * @tags snap-ins
         * @name SnapInsDraftCreate
         * @request POST:/internal/snap-ins.draft.create
         * @secure
         */
        this.snapInsDraftCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-ins.draft.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: harpinder.singh@devrev.ai ### Gets a snap-in.
         *
         * @tags snap-ins
         * @name SnapInsGet
         * @request GET:/internal/snap-ins.get
         * @secure
         */
        this.snapInsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/snap-ins.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a snap-in.
         *
         * @tags snap-ins
         * @name SnapInsGetPost
         * @request POST:/internal/snap-ins.get
         * @secure
         */
        this.snapInsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-ins.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: harpinder.singh@devrev.ai ### Lists snap-ins for a Dev organization.
         *
         * @tags snap-ins
         * @name SnapInsList
         * @request GET:/internal/snap-ins.list
         * @secure
         */
        this.snapInsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/snap-ins.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists snap-ins for a Dev organization.
         *
         * @tags snap-ins
         * @name SnapInsListPost
         * @request POST:/internal/snap-ins.list
         * @secure
         */
        this.snapInsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-ins.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: navneel.mandal@devrev.ai ### Gets snap-in resources for a user in a snap-in.
         *
         * @tags snap-ins
         * @name SnapInsResources
         * @request GET:/internal/snap-ins.resources
         * @secure
         */
        this.snapInsResources = (query, params = {}) => this.request(Object.assign({ path: `/internal/snap-ins.resources`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets snap-in resources for a user in a snap-in.
         *
         * @tags snap-ins
         * @name SnapInsResourcesPost
         * @request POST:/internal/snap-ins.resources
         * @secure
         */
        this.snapInsResourcesPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-ins.resources`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description System updates of a snap-in.
         *
         * @tags snap-ins
         * @name SnapInsSystemUpdate
         * @request POST:/internal/snap-ins.system-update
         * @secure
         */
        this.snapInsSystemUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-ins.system-update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a snap-in.
         *
         * @tags snap-ins
         * @name SnapInsUpdate
         * @request POST:/internal/snap-ins.update
         * @secure
         */
        this.snapInsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-ins.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a deferred snap-kit action which gets executed at later point.
         *
         * @tags snap-kit-execution
         * @name SnapKitActionCreateDeferred
         * @request POST:/internal/snap-kit-action.create.deferred
         * @secure
         */
        this.snapKitActionCreateDeferred = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-kit-action.create.deferred`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Executes snap kit actions.
         *
         * @name ExecuteSnapKitAction
         * @request POST:/internal/snap-kit-action.execute
         * @secure
         */
        this.executeSnapKitAction = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-kit-action.execute`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Executes deferred snap-kit actions.
         *
         * @tags snap-kit-execution
         * @name SnapKitActionExecuteDeferred
         * @request POST:/internal/snap-kit-action.execute.deferred
         * @secure
         */
        this.snapKitActionExecuteDeferred = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-kit-action.execute.deferred`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Generate Snap-kit through natural language prompts within a multi-turn conversation context. Generates complete Snap-kit that can be rendered on various surfaces within the DevRev App.
         *
         * @name GenerateSnapKit
         * @request POST:/internal/snap-kit.generate
         * @secure
         */
        this.generateSnapKit = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-kit.generate`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Create a snap widget object.
         *
         * @tags snap-widgets
         * @name SnapWidgetsCreate
         * @request POST:/internal/snap-widgets.create
         * @secure
         */
        this.snapWidgetsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-widgets.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Delete a snap widget object.
         *
         * @tags snap-widgets
         * @name SnapWidgetsDelete
         * @request POST:/internal/snap-widgets.delete
         * @secure
         */
        this.snapWidgetsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-widgets.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: madhav.sikka@devrev.ai ### Get a snap widget object.
         *
         * @tags snap-widgets
         * @name SnapWidgetsGet
         * @request GET:/internal/snap-widgets.get
         * @secure
         */
        this.snapWidgetsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/snap-widgets.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Get a snap widget object.
         *
         * @tags snap-widgets
         * @name SnapWidgetsGetPost
         * @request POST:/internal/snap-widgets.get
         * @secure
         */
        this.snapWidgetsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-widgets.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: madhav.sikka@devrev.ai ### List snap widget objects.
         *
         * @tags snap-widgets
         * @name SnapWidgetsList
         * @request GET:/internal/snap-widgets.list
         * @secure
         */
        this.snapWidgetsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/snap-widgets.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description List snap widget objects.
         *
         * @tags snap-widgets
         * @name SnapWidgetsListPost
         * @request POST:/internal/snap-widgets.list
         * @secure
         */
        this.snapWidgetsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-widgets.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Update a snap widget object.
         *
         * @tags snap-widgets
         * @name SnapWidgetsUpdate
         * @request POST:/internal/snap-widgets.update
         * @secure
         */
        this.snapWidgetsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/snap-widgets.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: harpinder.singh@devrev.ai ### Lists snaps for a Dev organization.
         *
         * @tags flows, snap-ins
         * @name SnapsList
         * @request GET:/internal/snaps.list
         * @secure
         */
        this.snapsList = (params = {}) => this.request(Object.assign({ path: `/internal/snaps.list`, method: 'GET', secure: true, format: 'json' }, params));
        /**
         * @description Lists snaps for a Dev organization.
         *
         * @tags flows, snap-ins
         * @name SnapsListPost
         * @request POST:/internal/snaps.list
         * @secure
         */
        this.snapsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/snaps.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: brian.byrne@devrev.ai ### Connects to an open socket.
         *
         * @tags sockets
         * @name SocketsConnect
         * @request GET:/internal/sockets.connect
         * @secure
         */
        this.socketsConnect = (query, params = {}) => this.request(Object.assign({ path: `/internal/sockets.connect`, method: 'GET', query: query, secure: true }, params));
        /**
         * @description Connects to an open socket.
         *
         * @tags sockets
         * @name SocketsConnectPost
         * @request POST:/internal/sockets.connect
         * @secure
         */
        this.socketsConnectPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/sockets.connect`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Opens a new socket.
         *
         * @tags sockets
         * @name SocketsOpen
         * @request POST:/internal/sockets.open
         * @secure
         */
        this.socketsOpen = (data, params = {}) => this.request(Object.assign({ path: `/internal/sockets.open`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Publishes socket actions on behalf of the client.
         *
         * @tags sockets
         * @name SocketsPublish
         * @request POST:/internal/sockets.publish
         * @secure
         */
        this.socketsPublish = (data, params = {}) => this.request(Object.assign({ path: `/internal/sockets.publish`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a stage diagram.
         *
         * @tags customization
         * @name StageDiagramsCreate
         * @request POST:/internal/stage-diagrams.create
         * @secure
         */
        this.stageDiagramsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/stage-diagrams.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a stage diagram.
         *
         * @tags customization
         * @name StageDiagramsGet
         * @request GET:/internal/stage-diagrams.get
         * @secure
         */
        this.stageDiagramsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/stage-diagrams.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a stage diagram.
         *
         * @tags customization
         * @name StageDiagramsGetPost
         * @request POST:/internal/stage-diagrams.get
         * @secure
         */
        this.stageDiagramsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/stage-diagrams.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists stage diagrams.
         *
         * @tags customization
         * @name StageDiagramsList
         * @request GET:/internal/stage-diagrams.list
         * @secure
         */
        this.stageDiagramsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/stage-diagrams.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists stage diagrams.
         *
         * @tags customization
         * @name StageDiagramsListPost
         * @request POST:/internal/stage-diagrams.list
         * @secure
         */
        this.stageDiagramsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/stage-diagrams.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a stage diagram.
         *
         * @tags customization
         * @name StageDiagramsUpdate
         * @request POST:/internal/stage-diagrams.update
         * @secure
         */
        this.stageDiagramsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/stage-diagrams.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a custom stage.
         *
         * @tags customization
         * @name CustomStagesCreate
         * @request POST:/internal/stages.custom.create
         * @secure
         */
        this.customStagesCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/stages.custom.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a custom stage.
         *
         * @tags customization
         * @name CustomStagesGet
         * @request GET:/internal/stages.custom.get
         * @secure
         */
        this.customStagesGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/stages.custom.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a custom stage.
         *
         * @tags customization
         * @name CustomStagesGetPost
         * @request POST:/internal/stages.custom.get
         * @secure
         */
        this.customStagesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/stages.custom.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists custom stages.
         *
         * @tags customization
         * @name CustomStagesList
         * @request GET:/internal/stages.custom.list
         * @secure
         */
        this.customStagesList = (query, params = {}) => this.request(Object.assign({ path: `/internal/stages.custom.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists custom stages.
         *
         * @tags customization
         * @name CustomStagesListPost
         * @request POST:/internal/stages.custom.list
         * @secure
         */
        this.customStagesListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/stages.custom.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a custom stage.
         *
         * @tags customization
         * @name CustomStagesUpdate
         * @request POST:/internal/stages.custom.update
         * @secure
         */
        this.customStagesUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/stages.custom.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a custom state.
         *
         * @tags customization
         * @name CustomStatesCreate
         * @request POST:/internal/states.custom.create
         * @secure
         */
        this.customStatesCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/states.custom.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a custom state.
         *
         * @tags customization
         * @name CustomStatesGet
         * @request GET:/internal/states.custom.get
         * @secure
         */
        this.customStatesGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/states.custom.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a custom state.
         *
         * @tags customization
         * @name CustomStatesGetPost
         * @request POST:/internal/states.custom.get
         * @secure
         */
        this.customStatesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/states.custom.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists custom states.
         *
         * @tags customization
         * @name CustomStatesList
         * @request GET:/internal/states.custom.list
         * @secure
         */
        this.customStatesList = (query, params = {}) => this.request(Object.assign({ path: `/internal/states.custom.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists custom states.
         *
         * @tags customization
         * @name CustomStatesListPost
         * @request POST:/internal/states.custom.list
         * @secure
         */
        this.customStatesListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/states.custom.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a custom state.
         *
         * @tags customization
         * @name CustomStatesUpdate
         * @request POST:/internal/states.custom.update
         * @secure
         */
        this.customStatesUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/states.custom.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deregisters an email event source from the support settings.
         *
         * @tags support-settings
         * @name DeregisterEmailEventSource
         * @request POST:/internal/support-settings.event-source-subdomains.deregister
         * @secure
         */
        this.deregisterEmailEventSource = (data, params = {}) => this.request(Object.assign({ path: `/internal/support-settings.event-source-subdomains.deregister`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the event source id from the default sub domain in support settings.
         *
         * @tags support-settings
         * @name GetEmailEventSource
         * @request POST:/internal/support-settings.event-source-subdomains.get
         * @secure
         */
        this.getEmailEventSource = (data, params = {}) => this.request(Object.assign({ path: `/internal/support-settings.event-source-subdomains.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Registers an email event source in the support settings.
         *
         * @tags support-settings
         * @name RegisterEmailEventSource
         * @request POST:/internal/support-settings.event-source-subdomains.register
         * @secure
         */
        this.registerEmailEventSource = (data, params = {}) => this.request(Object.assign({ path: `/internal/support-settings.event-source-subdomains.register`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a schema for survey, which includes name and description of schema.
         *
         * @tags surveys
         * @name SurveysCreate
         * @request POST:/internal/surveys.create
         * @secure
         */
        this.surveysCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/surveys.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes the specified survey.
         *
         * @tags surveys
         * @name SurveysDelete
         * @request POST:/internal/surveys.delete
         * @secure
         */
        this.surveysDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/surveys.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: i-praneeth.bala@devrev.ai ### Gets a survey given the ID.
         *
         * @tags surveys
         * @name SurveysGet
         * @request GET:/internal/surveys.get
         * @secure
         */
        this.surveysGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/surveys.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a survey given the ID.
         *
         * @tags surveys
         * @name SurveysGetPost
         * @request POST:/internal/surveys.get
         * @secure
         */
        this.surveysGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/surveys.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: amit.gosavi@devrev.ai ### List surveys requested by the user.
         *
         * @tags surveys
         * @name SurveysList
         * @request GET:/internal/surveys.list
         * @secure
         */
        this.surveysList = (query, params = {}) => this.request(Object.assign({ path: `/internal/surveys.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description List surveys requested by the user.
         *
         * @tags surveys
         * @name SurveysListPost
         * @request POST:/internal/surveys.list
         * @secure
         */
        this.surveysListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/surveys.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: amit.gosavi@devrev.ai ### List survey responses requested by the user.
         *
         * @tags surveys
         * @name SurveysResponsesList
         * @request GET:/internal/surveys.responses.list
         * @secure
         */
        this.surveysResponsesList = (query, params = {}) => this.request(Object.assign({ path: `/internal/surveys.responses.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description List survey responses requested by the user.
         *
         * @tags surveys
         * @name SurveysResponsesListPost
         * @request POST:/internal/surveys.responses.list
         * @secure
         */
        this.surveysResponsesListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/surveys.responses.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a user's survey response for the provided dispatch ID.
         *
         * @tags surveys
         * @name SurveysResponsesUpdate
         * @request POST:/internal/surveys.responses.update
         * @secure
         */
        this.surveysResponsesUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/surveys.responses.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Sends a survey on the specified channels.
         *
         * @tags surveys
         * @name SurveysSend
         * @request POST:/internal/surveys.send
         * @secure
         */
        this.surveysSend = (data, params = {}) => this.request(Object.assign({ path: `/internal/surveys.send`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Submits a user response to a survey, which is defined by the survey ID.
         *
         * @tags surveys
         * @name SurveysSubmit
         * @request POST:/internal/surveys.submit
         * @secure
         */
        this.surveysSubmit = (data, params = {}) => this.request(Object.assign({ path: `/internal/surveys.submit`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the requested user's information.
         *
         * @tags sys-users
         * @name SysUsersGet
         * @request GET:/internal/sys-users.get
         * @secure
         */
        this.sysUsersGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/sys-users.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the requested user's information.
         *
         * @tags sys-users
         * @name SysUsersGetPost
         * @request POST:/internal/sys-users.get
         * @secure
         */
        this.sysUsersGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/sys-users.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: akanksha.deswal@devrev.ai ### Lists system users within your organization.
         *
         * @tags sys-users
         * @name SysUsersList
         * @request GET:/internal/sys-users.list
         * @secure
         */
        this.sysUsersList = (query, params = {}) => this.request(Object.assign({ path: `/internal/sys-users.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists system users within your organization.
         *
         * @tags sys-users
         * @name SysUsersListPost
         * @request POST:/internal/sys-users.list
         * @secure
         */
        this.sysUsersListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/sys-users.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the system user.
         *
         * @tags sys-users
         * @name SysUsersUpdate
         * @request POST:/internal/sys-users.update
         * @secure
         */
        this.sysUsersUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/sys-users.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a new tag, which is used to create associations between objects and a logical concept denoted by the tag's name.
         *
         * @tags tags
         * @name TagsCreate
         * @request POST:/internal/tags.create
         * @secure
         */
        this.tagsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/tags.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a tag.
         *
         * @tags tags
         * @name TagsDelete
         * @request POST:/internal/tags.delete
         * @secure
         */
        this.tagsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/tags.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets a tag's information.
         *
         * @tags tags
         * @name TagsGet
         * @request GET:/internal/tags.get
         * @secure
         */
        this.tagsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/tags.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a tag's information.
         *
         * @tags tags
         * @name TagsGetPost
         * @request POST:/internal/tags.get
         * @secure
         */
        this.tagsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/tags.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists the available tags.
         *
         * @tags tags
         * @name TagsList
         * @request GET:/internal/tags.list
         * @secure
         */
        this.tagsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/tags.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the available tags.
         *
         * @tags tags
         * @name TagsListPost
         * @request POST:/internal/tags.list
         * @secure
         */
        this.tagsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/tags.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a tag's information.
         *
         * @tags tags
         * @name TagsUpdate
         * @request POST:/internal/tags.update
         * @secure
         */
        this.tagsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/tags.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the quote term templates objects based on the given filters.
         *
         * @tags commerce
         * @name QuoteTermTemplatesList
         * @request GET:/internal/term-templates.list
         * @secure
         */
        this.quoteTermTemplatesList = (query, params = {}) => this.request(Object.assign({ path: `/internal/term-templates.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the quote term templates objects based on the given filters.
         *
         * @tags commerce
         * @name QuoteTermTemplatesListPost
         * @request POST:/internal/term-templates.list
         * @secure
         */
        this.quoteTermTemplatesListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/term-templates.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a new entry on an object's timeline.
         *
         * @tags timeline-entries
         * @name TimelineEntriesCreate
         * @request POST:/internal/timeline-entries.create
         * @secure
         */
        this.timelineEntriesCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/timeline-entries.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes an entry from an object's timeline.
         *
         * @tags timeline-entries
         * @name TimelineEntriesDelete
         * @request POST:/internal/timeline-entries.delete
         * @secure
         */
        this.timelineEntriesDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/timeline-entries.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: brian.byrne@devrev.ai ### Gets an entry on an object's timeline.
         *
         * @tags timeline-entries
         * @name TimelineEntriesGet
         * @request GET:/internal/timeline-entries.get
         * @secure
         */
        this.timelineEntriesGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/timeline-entries.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets an entry on an object's timeline.
         *
         * @tags timeline-entries
         * @name TimelineEntriesGetPost
         * @request POST:/internal/timeline-entries.get
         * @secure
         */
        this.timelineEntriesGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/timeline-entries.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: brian.byrne@devrev.ai ### Lists the timeline entries for an object.
         *
         * @tags timeline-entries
         * @name TimelineEntriesList
         * @request GET:/internal/timeline-entries.list
         * @secure
         */
        this.timelineEntriesList = (query, params = {}) => this.request(Object.assign({ path: `/internal/timeline-entries.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the timeline entries for an object.
         *
         * @tags timeline-entries
         * @name TimelineEntriesListPost
         * @request POST:/internal/timeline-entries.list
         * @secure
         */
        this.timelineEntriesListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/timeline-entries.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates an entry on an object's timeline.
         *
         * @tags timeline-entries
         * @name TimelineEntriesUpdate
         * @request POST:/internal/timeline-entries.update
         * @secure
         */
        this.timelineEntriesUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/timeline-entries.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Converters DevRev Markdown to HTML
         *
         * @tags tools
         * @name ConvertMarkdownToHtml
         * @request POST:/internal/tools.convert-markdown-to-html
         * @secure
         */
        this.convertMarkdownToHtml = (data, params = {}) => this.request(Object.assign({ path: `/internal/tools.convert-markdown-to-html`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Allows publishing of events (example from plug widget).
         *
         * @tags event-source
         * @name TrackEventsPublish
         * @request POST:/internal/track-events.publish
         * @secure
         */
        this.trackEventsPublish = (data, params = {}) => this.request(Object.assign({ path: `/internal/track-events.publish`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Translates input text to specified target language.
         *
         * @tags translation
         * @name Translate
         * @request POST:/internal/translate
         * @secure
         */
        this.translate = (data, params = {}) => this.request(Object.assign({ path: `/internal/translate`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Returns the supported languages for translation.
         *
         * @tags translation
         * @name TranslationLanguagesList
         * @request GET:/internal/translation.languages.list
         * @secure
         */
        this.translationLanguagesList = (query, params = {}) => this.request(Object.assign({ path: `/internal/translation.languages.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Returns the supported languages for translation.
         *
         * @tags translation
         * @name TranslationLanguagesListPost
         * @request POST:/internal/translation.languages.list
         * @secure
         */
        this.translationLanguagesListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/translation.languages.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Translates input text to specified target language.
         *
         * @tags translation
         * @name TranslationTranslate
         * @request POST:/internal/translation.translate
         * @secure
         */
        this.translationTranslate = (data, params = {}) => this.request(Object.assign({ path: `/internal/translation.translate`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Spacebar suggestions.
         *
         * @name TuringSuggestions
         * @request POST:/internal/turing.suggestions
         * @secure
         */
        this.turingSuggestions = (data, params = {}) => this.request(Object.assign({ path: `/internal/turing.suggestions`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Counts the number of Unit of Measurements based on the given filters.
         *
         * @tags product-usage
         * @name UomsCount
         * @request GET:/internal/uoms.count
         * @secure
         */
        this.uomsCount = (query, params = {}) => this.request(Object.assign({ path: `/internal/uoms.count`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Counts the number of Unit of Measurements based on the given filters.
         *
         * @tags product-usage
         * @name UomsCountPost
         * @request POST:/internal/uoms.count
         * @secure
         */
        this.uomsCountPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/uoms.count`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a Unit of Measurement on a part.
         *
         * @tags product-usage
         * @name UomsCreate
         * @request POST:/internal/uoms.create
         * @secure
         */
        this.uomsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/uoms.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a Unit of Measurement.
         *
         * @tags product-usage
         * @name UomsDelete
         * @request POST:/internal/uoms.delete
         * @secure
         */
        this.uomsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/uoms.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description Gets a Unit of Measurement.
         *
         * @tags product-usage
         * @name UomsGet
         * @request GET:/internal/uoms.get
         * @secure
         */
        this.uomsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/uoms.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a Unit of Measurement.
         *
         * @tags product-usage
         * @name UomsGetPost
         * @request POST:/internal/uoms.get
         * @secure
         */
        this.uomsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/uoms.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the Unit of Measurements based on the given filters.
         *
         * @tags product-usage
         * @name UomsList
         * @request GET:/internal/uoms.list
         * @secure
         */
        this.uomsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/uoms.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the Unit of Measurements based on the given filters.
         *
         * @tags product-usage
         * @name UomsListPost
         * @request POST:/internal/uoms.list
         * @secure
         */
        this.uomsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/uoms.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a Unit of Measurement.
         *
         * @tags product-usage
         * @name UomsUpdate
         * @request POST:/internal/uoms.update
         * @secure
         */
        this.uomsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/uoms.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Create a user session object.
         *
         * @tags user-sessions
         * @name UserSessionCreate
         * @request POST:/internal/user-sessions.create
         * @secure
         */
        this.userSessionCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/user-sessions.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Delete a user session object.
         *
         * @tags user-sessions
         * @name UserSessionDelete
         * @request POST:/internal/user-sessions.delete
         * @secure
         */
        this.userSessionDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/user-sessions.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: i-harsh.agarwal@devrev.ai ### Get a user session object.
         *
         * @tags user-sessions
         * @name UserSessionGet
         * @request GET:/internal/user-sessions.get
         * @secure
         */
        this.userSessionGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/user-sessions.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Get a user session object.
         *
         * @tags user-sessions
         * @name UserSessionGetPost
         * @request POST:/internal/user-sessions.get
         * @secure
         */
        this.userSessionGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/user-sessions.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: i-harsh.agarwal@devrev.ai ### List user session objects.
         *
         * @tags user-sessions
         * @name UserSessionList
         * @request GET:/internal/user-sessions.list
         * @secure
         */
        this.userSessionList = (query, params = {}) => this.request(Object.assign({ path: `/internal/user-sessions.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description List user session objects.
         *
         * @tags user-sessions
         * @name UserSessionListPost
         * @request POST:/internal/user-sessions.list
         * @secure
         */
        this.userSessionListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/user-sessions.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Update a user session object.
         *
         * @tags user-sessions
         * @name UserSessionUpdate
         * @request POST:/internal/user-sessions.update
         * @secure
         */
        this.userSessionUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/user-sessions.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Returns the user's privileges for the target object.
         *
         * @tags users
         * @name UserPrivileges
         * @request GET:/internal/user.privileges
         * @secure
         */
        this.userPrivileges = (query, params = {}) => this.request(Object.assign({ path: `/internal/user.privileges`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Returns the user's privileges for the target object.
         *
         * @tags users
         * @name UserPrivilegesPost
         * @request POST:/internal/user.privileges
         * @secure
         */
        this.userPrivilegesPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/user.privileges`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Grants or revokes agents of a user.
         *
         * @tags users
         * @name UsersAgentsUpdate
         * @request POST:/internal/users.agents.update
         * @secure
         */
        this.usersAgentsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/users.agents.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: manan.sharma@devrev.ai ### Gets the list of Dev organizations that the Dev user is invited to.
         *
         * @tags dev-orgs, dev-orgs-global
         * @name DevUserGlobalInvitationsList
         * @request GET:/internal/users.global.invitations.list
         * @secure
         */
        this.devUserGlobalInvitationsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/users.global.invitations.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the list of Dev organizations that the Dev user is invited to.
         *
         * @tags dev-orgs, dev-orgs-global
         * @name DevUserGlobalInvitationsListPost
         * @request POST:/internal/users.global.invitations.list
         * @secure
         */
        this.devUserGlobalInvitationsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/users.global.invitations.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Delete the invitation sent to the user.
         *
         * @tags dev-users
         * @name UserInvitationDelete
         * @request POST:/internal/users.invitations.delete
         * @secure
         */
        this.userInvitationDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/users.invitations.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the list of Dev organizations that the Dev user is invited to.
         *
         * @tags dev-orgs
         * @name DevUserInvitationsList
         * @request GET:/internal/users.invitations.list
         * @secure
         */
        this.devUserInvitationsList = (params = {}) => this.request(Object.assign({ path: `/internal/users.invitations.list`, method: 'GET', secure: true, format: 'json' }, params));
        /**
         * @description Gets the list of Dev organizations that the Dev user is invited to.
         *
         * @tags dev-orgs
         * @name DevUserInvitationsListPost
         * @request POST:/internal/users.invitations.list
         * @secure
         */
        this.devUserInvitationsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/users.invitations.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Update an invitation to a user.
         *
         * @tags dev-users
         * @name UserInvitationUpdate
         * @request POST:/internal/users.invitations.update
         * @secure
         */
        this.userInvitationUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/users.invitations.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: dg@devrev.ai ### Get a UX store document.
         *
         * @tags ux-store
         * @name UxStoreGet
         * @request GET:/internal/ux-store.get
         * @secure
         */
        this.uxStoreGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/ux-store.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Get a UX store document.
         *
         * @tags ux-store
         * @name UxStoreGetPost
         * @request POST:/internal/ux-store.get
         * @secure
         */
        this.uxStoreGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/ux-store.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Insert or update the document.
         *
         * @tags ux-store
         * @name UxStoreUpsert
         * @request POST:/internal/ux-store.upsert
         * @secure
         */
        this.uxStoreUpsert = (data, params = {}) => this.request(Object.assign({ path: `/internal/ux-store.upsert`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates an index in DevRev vector store
         *
         * @tags vector-store
         * @name VectorStoreIndexCreate
         * @request POST:/internal/vector-store.index.create
         * @secure
         */
        this.vectorStoreIndexCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/vector-store.index.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Retrieves the ids of the most similar items, along with their similarity scores.
         *
         * @tags vector-store
         * @name VectorStoreIndexQuery
         * @request POST:/internal/vector-store.index.query
         * @secure
         */
        this.vectorStoreIndexQuery = (data, params = {}) => this.request(Object.assign({ path: `/internal/vector-store.index.query`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Add vectors to the specified index.
         *
         * @tags vector-store
         * @name VectorStoreIndexUpsert
         * @request POST:/internal/vector-store.index.upsert
         * @secure
         */
        this.vectorStoreIndexUpsert = (data, params = {}) => this.request(Object.assign({ path: `/internal/vector-store.index.upsert`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Checks the verification code that was sent to the phone number via previously invoked endpoint "verify.send-code". Verification codes are valid for a duration of 10-minute verification session.
         *
         * @tags verify
         * @name VerifyCheckCode
         * @request POST:/internal/verify.check-code
         * @secure
         */
        this.verifyCheckCode = (data, params = {}) => this.request(Object.assign({ path: `/internal/verify.check-code`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Sends an email to redirect mobile during signup.
         *
         * @tags verify
         * @name VerifyRedirectMobileSignup
         * @request POST:/internal/verify.redirect-mobile-signup
         * @secure
         */
        this.verifyRedirectMobileSignup = (data, params = {}) => this.request(Object.assign({ path: `/internal/verify.redirect-mobile-signup`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Sends a verification code to the given phone number. The code is valid for the duration of 10-minute verification session. During this session, reinvoking this endpoint will send the same verification code and the code's validity will not be extended.
         *
         * @tags verify
         * @name VerifySendCode
         * @request POST:/internal/verify.send-code
         * @secure
         */
        this.verifySendCode = (data, params = {}) => this.request(Object.assign({ path: `/internal/verify.send-code`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a vista.
         *
         * @tags vistas
         * @name VistasCreate
         * @request POST:/internal/vistas.create
         * @secure
         */
        this.vistasCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/vistas.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes the requested vista.
         *
         * @tags vistas
         * @name VistasDelete
         * @request POST:/internal/vistas.delete
         * @secure
         */
        this.vistasDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/vistas.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets the requested vistas's information.
         *
         * @tags vistas
         * @name VistasGet
         * @request GET:/internal/vistas.get
         * @secure
         */
        this.vistasGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/vistas.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the requested vistas's information.
         *
         * @tags vistas
         * @name VistasGetPost
         * @request POST:/internal/vistas.get
         * @secure
         */
        this.vistasGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/vistas.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a vista group item.
         *
         * @tags vistas
         * @name VistasGroupsCreate
         * @request POST:/internal/vistas.groups.create
         * @secure
         */
        this.vistasGroupsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/vistas.groups.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes the requested vista group item
         *
         * @tags vistas
         * @name VistasGroupsDelete
         * @request POST:/internal/vistas.groups.delete
         * @secure
         */
        this.vistasGroupsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/vistas.groups.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: shivam.gupta@devrev.ai ### Gets the requested vista group item's information.
         *
         * @tags vistas
         * @name VistasGroupsGet
         * @request GET:/internal/vistas.groups.get
         * @secure
         */
        this.vistasGroupsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/vistas.groups.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the requested vista group item's information.
         *
         * @tags vistas
         * @name VistasGroupsGetPost
         * @request POST:/internal/vistas.groups.get
         * @secure
         */
        this.vistasGroupsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/vistas.groups.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Moves the work items from one group to another.
         *
         * @tags vistas
         * @name VistasGroupItemsMove
         * @request POST:/internal/vistas.groups.items.move
         * @secure
         */
        this.vistasGroupItemsMove = (data, params = {}) => this.request(Object.assign({ path: `/internal/vistas.groups.items.move`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: shivam.gupta@devrev.ai ### Lists the available vista group items.
         *
         * @tags vistas
         * @name VistasGroupsList
         * @request GET:/internal/vistas.groups.list
         * @secure
         */
        this.vistasGroupsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/vistas.groups.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the available vista group items.
         *
         * @tags vistas
         * @name VistasGroupsListPost
         * @request POST:/internal/vistas.groups.list
         * @secure
         */
        this.vistasGroupsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/vistas.groups.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the requested vista group item.
         *
         * @tags vistas
         * @name VistasGroupsUpdate
         * @request POST:/internal/vistas.groups.update
         * @secure
         */
        this.vistasGroupsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/vistas.groups.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists the available vistas.
         *
         * @tags vistas
         * @name VistasList
         * @request GET:/internal/vistas.list
         * @secure
         */
        this.vistasList = (query, params = {}) => this.request(Object.assign({ path: `/internal/vistas.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the available vistas.
         *
         * @tags vistas
         * @name VistasListPost
         * @request POST:/internal/vistas.list
         * @secure
         */
        this.vistasListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/vistas.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists the parts to which the vistas are linked to.
         *
         * @tags vistas
         * @name VistasPartsList
         * @request GET:/internal/vistas.parts.list
         * @secure
         */
        this.vistasPartsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/vistas.parts.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists the parts to which the vistas are linked to.
         *
         * @tags vistas
         * @name VistasPartsListPost
         * @request POST:/internal/vistas.parts.list
         * @secure
         */
        this.vistasPartsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/vistas.parts.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the requested vista.
         *
         * @tags vistas
         * @name VistasUpdate
         * @request POST:/internal/vistas.update
         * @secure
         */
        this.vistasUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/vistas.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Gets requesting user watcher events for an object.
         *
         * @tags watchers
         * @name WatchersGet
         * @request GET:/internal/watchers.get
         * @secure
         */
        this.watchersGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/watchers.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets requesting user watcher events for an object.
         *
         * @tags watchers
         * @name WatchersGetPost
         * @request POST:/internal/watchers.get
         * @secure
         */
        this.watchersGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/watchers.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Lists watchers of an object.
         *
         * @tags watchers
         * @name WatchersList
         * @request GET:/internal/watchers.list
         * @secure
         */
        this.watchersList = (query, params = {}) => this.request(Object.assign({ path: `/internal/watchers.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists watchers of an object.
         *
         * @tags watchers
         * @name WatchersListPost
         * @request POST:/internal/watchers.list
         * @secure
         */
        this.watchersListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/watchers.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates watchers on the object.
         *
         * @tags watchers
         * @name WatchersUpdate
         * @request POST:/internal/watchers.update
         * @secure
         */
        this.watchersUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/watchers.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Change state of a web crawler job to pause or resume it back to running.
         *
         * @tags web-crawler-job
         * @name WebCrawlerJobsControl
         * @request POST:/internal/web-crawler-jobs.control
         * @secure
         */
        this.webCrawlerJobsControl = (data, params = {}) => this.request(Object.assign({ path: `/internal/web-crawler-jobs.control`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a web crawler job whose objective is to crawl the provided URLs/sitemaps and generate corresponding webpages as artifacts.
         *
         * @tags web-crawler-job
         * @name CreateWebCrawlerJob
         * @request POST:/internal/web-crawler-jobs.create
         * @secure
         */
        this.createWebCrawlerJob = (data, params = {}) => this.request(Object.assign({ path: `/internal/web-crawler-jobs.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: chirag.jain@devrev.ai ### Gets a web crawler job.
         *
         * @tags web-crawler-job
         * @name GetWebCrawlerJob
         * @request GET:/internal/web-crawler-jobs.get
         * @secure
         */
        this.getWebCrawlerJob = (query, params = {}) => this.request(Object.assign({ path: `/internal/web-crawler-jobs.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a web crawler job.
         *
         * @tags web-crawler-job
         * @name GetWebCrawlerJobPost
         * @request POST:/internal/web-crawler-jobs.get
         * @secure
         */
        this.getWebCrawlerJobPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/web-crawler-jobs.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: chirag.jain@devrev.ai ### Lists web crawler jobs.
         *
         * @tags web-crawler-job
         * @name ListWebCrawlerJobs
         * @request GET:/internal/web-crawler-jobs.list
         * @secure
         */
        this.listWebCrawlerJobs = (query, params = {}) => this.request(Object.assign({ path: `/internal/web-crawler-jobs.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists web crawler jobs.
         *
         * @tags web-crawler-job
         * @name ListWebCrawlerJobsPost
         * @request POST:/internal/web-crawler-jobs.list
         * @secure
         */
        this.listWebCrawlerJobsPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/web-crawler-jobs.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a new webhook target.
         *
         * @tags webhooks
         * @name WebhooksCreate
         * @request POST:/internal/webhooks.create
         * @secure
         */
        this.webhooksCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/webhooks.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes the requested webhook.
         *
         * @tags webhooks
         * @name WebhooksDelete
         * @request POST:/internal/webhooks.delete
         * @secure
         */
        this.webhooksDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/webhooks.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: brian.byrne@devrev.ai ### Gets the requested webhook's information.
         *
         * @tags webhooks
         * @name WebhooksGet
         * @request GET:/internal/webhooks.get
         * @secure
         */
        this.webhooksGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/webhooks.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets the requested webhook's information.
         *
         * @tags webhooks
         * @name WebhooksGetPost
         * @request POST:/internal/webhooks.get
         * @secure
         */
        this.webhooksGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/webhooks.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: brian.byrne@devrev.ai ### Lists the webhooks.
         *
         * @tags webhooks
         * @name WebhooksList
         * @request GET:/internal/webhooks.list
         * @secure
         */
        this.webhooksList = (params = {}) => this.request(Object.assign({ path: `/internal/webhooks.list`, method: 'GET', secure: true, format: 'json' }, params));
        /**
         * @description Lists the webhooks.
         *
         * @tags webhooks
         * @name WebhooksListPost
         * @request POST:/internal/webhooks.list
         * @secure
         */
        this.webhooksListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/webhooks.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the requested webhook.
         *
         * @tags webhooks
         * @name WebhooksUpdate
         * @request POST:/internal/webhooks.update
         * @secure
         */
        this.webhooksUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/webhooks.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a new widget.
         *
         * @tags widgets
         * @name WidgetsCreate
         * @request POST:/internal/widgets.create
         * @secure
         */
        this.widgetsCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/widgets.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes the widget.
         *
         * @tags widgets
         * @name WidgetsDelete
         * @request POST:/internal/widgets.delete
         * @secure
         */
        this.widgetsDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/widgets.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json }, params));
        /**
         * @description ### Owner: madhav.sikka@devrev.ai ### Returns the requested widget.
         *
         * @tags widgets
         * @name WidgetsGet
         * @request GET:/internal/widgets.get
         * @secure
         */
        this.widgetsGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/widgets.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Returns the requested widget.
         *
         * @tags widgets
         * @name WidgetsGetPost
         * @request POST:/internal/widgets.get
         * @secure
         */
        this.widgetsGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/widgets.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: madhav.sikka@devrev.ai ### Returns the list of widgets.
         *
         * @tags widgets
         * @name WidgetsList
         * @request GET:/internal/widgets.list
         * @secure
         */
        this.widgetsList = (query, params = {}) => this.request(Object.assign({ path: `/internal/widgets.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Returns the list of widgets.
         *
         * @tags widgets
         * @name WidgetsListPost
         * @request POST:/internal/widgets.list
         * @secure
         */
        this.widgetsListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/widgets.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the widget.
         *
         * @tags widgets
         * @name WidgetsUpdate
         * @request POST:/internal/widgets.update
         * @secure
         */
        this.widgetsUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/widgets.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: umang.malik@devrev.ai ### Retrieves a workflow run by ID.
         *
         * @tags workflow-run
         * @name GetWorkflowRun
         * @request GET:/internal/workflow-runs.get
         * @secure
         */
        this.getWorkflowRun = (query, params = {}) => this.request(Object.assign({ path: `/internal/workflow-runs.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Retrieves a workflow run by ID.
         *
         * @tags workflow-run
         * @name GetWorkflowRunPost
         * @request POST:/internal/workflow-runs.get
         * @secure
         */
        this.getWorkflowRunPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/workflow-runs.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: umang.malik@devrev.ai ### Lists all workflow runs.
         *
         * @tags workflow-run
         * @name ListWorkflowRuns
         * @request GET:/internal/workflow-runs.list
         * @secure
         */
        this.listWorkflowRuns = (query, params = {}) => this.request(Object.assign({ path: `/internal/workflow-runs.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists all workflow runs.
         *
         * @tags workflow-run
         * @name ListWorkflowRunsPost
         * @request POST:/internal/workflow-runs.list
         * @secure
         */
        this.listWorkflowRunsPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/workflow-runs.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a new workflow step.
         *
         * @tags workflow-step
         * @name CreateWorkflowStep
         * @request POST:/internal/workflow-steps.create
         * @secure
         */
        this.createWorkflowStep = (data, params = {}) => this.request(Object.assign({ path: `/internal/workflow-steps.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a workflow step.
         *
         * @tags workflow-step
         * @name DeleteWorkflowStep
         * @request POST:/internal/workflow-steps.delete
         * @secure
         */
        this.deleteWorkflowStep = (data, params = {}) => this.request(Object.assign({ path: `/internal/workflow-steps.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: vikas.sheoran@devrev.ai ### Retrieves a workflow step by ID.
         *
         * @tags workflow-step
         * @name GetWorkflowStep
         * @request GET:/internal/workflow-steps.get
         * @secure
         */
        this.getWorkflowStep = (query, params = {}) => this.request(Object.assign({ path: `/internal/workflow-steps.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Retrieves a workflow step by ID.
         *
         * @tags workflow-step
         * @name GetWorkflowStepPost
         * @request POST:/internal/workflow-steps.get
         * @secure
         */
        this.getWorkflowStepPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/workflow-steps.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: vikas.sheoran@devrev.ai ### Lists all workflow steps.
         *
         * @tags workflow-step
         * @name ListWorkflowSteps
         * @request GET:/internal/workflow-steps.list
         * @secure
         */
        this.listWorkflowSteps = (query, params = {}) => this.request(Object.assign({ path: `/internal/workflow-steps.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists all workflow steps.
         *
         * @tags workflow-step
         * @name ListWorkflowStepsPost
         * @request POST:/internal/workflow-steps.list
         * @secure
         */
        this.listWorkflowStepsPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/workflow-steps.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: umang.malik@devrev.ai ### Get schemas for workflow steps.
         *
         * @tags workflow-step
         * @name GetSchemaWorkflowSteps
         * @request GET:/internal/workflow-steps.schema
         * @secure
         */
        this.getSchemaWorkflowSteps = (query, params = {}) => this.request(Object.assign({ path: `/internal/workflow-steps.schema`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Get schemas for workflow steps.
         *
         * @tags workflow-step
         * @name GetSchemaWorkflowStepsPost
         * @request POST:/internal/workflow-steps.schema
         * @secure
         */
        this.getSchemaWorkflowStepsPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/workflow-steps.schema`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates an existing workflow step.
         *
         * @tags workflow-step
         * @name UpdateWorkflowStep
         * @request POST:/internal/workflow-steps.update
         * @secure
         */
        this.updateWorkflowStep = (data, params = {}) => this.request(Object.assign({ path: `/internal/workflow-steps.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates a new workflow.
         *
         * @tags workflow
         * @name CreateWorkflow
         * @request POST:/internal/workflows.create
         * @secure
         */
        this.createWorkflow = (data, params = {}) => this.request(Object.assign({ path: `/internal/workflows.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a workflow.
         *
         * @tags workflow
         * @name DeleteWorkflow
         * @request POST:/internal/workflows.delete
         * @secure
         */
        this.deleteWorkflow = (data, params = {}) => this.request(Object.assign({ path: `/internal/workflows.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: vikas.sheoran@devrev.ai ### Retrieves a workflow by ID.
         *
         * @tags workflow
         * @name GetWorkflow
         * @request GET:/internal/workflows.get
         * @secure
         */
        this.getWorkflow = (query, params = {}) => this.request(Object.assign({ path: `/internal/workflows.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Retrieves a workflow by ID.
         *
         * @tags workflow
         * @name GetWorkflowPost
         * @request POST:/internal/workflows.get
         * @secure
         */
        this.getWorkflowPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/workflows.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: vikas.sheoran@devrev.ai ### Lists all workflows.
         *
         * @tags workflow
         * @name ListWorkflows
         * @request GET:/internal/workflows.list
         * @secure
         */
        this.listWorkflows = (query, params = {}) => this.request(Object.assign({ path: `/internal/workflows.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists all workflows.
         *
         * @tags workflow
         * @name ListWorkflowsPost
         * @request POST:/internal/workflows.list
         * @secure
         */
        this.listWorkflowsPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/workflows.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates an existing workflow.
         *
         * @tags workflow
         * @name UpdateWorkflow
         * @request POST:/internal/workflows.update
         * @secure
         */
        this.updateWorkflow = (data, params = {}) => this.request(Object.assign({ path: `/internal/workflows.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates the status of a workflow.
         *
         * @tags workflow
         * @name UpdateStatusWorkflow
         * @request POST:/internal/workflows.update-status
         * @secure
         */
        this.updateStatusWorkflow = (data, params = {}) => this.request(Object.assign({ path: `/internal/workflows.update-status`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: dd@devrev.ai ### Gather summary information about work clusters.
         *
         * @tags works
         * @name WorksClustersGather
         * @request GET:/internal/works.clusters.gather
         * @secure
         */
        this.worksClustersGather = (query, params = {}) => this.request(Object.assign({ path: `/internal/works.clusters.gather`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gather summary information about work clusters.
         *
         * @tags works
         * @name WorksClustersGatherPost
         * @request POST:/internal/works.clusters.gather
         * @secure
         */
        this.worksClustersGatherPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/works.clusters.gather`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: dd@devrev.ai ### List the work items or IDs contained in a single work cluster or multiple clusters.
         *
         * @tags works
         * @name WorksClustersList
         * @request GET:/internal/works.clusters.list
         * @secure
         */
        this.worksClustersList = (query, params = {}) => this.request(Object.assign({ path: `/internal/works.clusters.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description List the work items or IDs contained in a single work cluster or multiple clusters.
         *
         * @tags works
         * @name WorksClustersListPost
         * @request POST:/internal/works.clusters.list
         * @secure
         */
        this.worksClustersListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/works.clusters.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: anshu.avinash@devrev.ai ### Get count of work matching given filter.
         *
         * @tags works
         * @name WorksCount
         * @request GET:/internal/works.count
         * @secure
         */
        this.worksCount = (query, params = {}) => this.request(Object.assign({ path: `/internal/works.count`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Get count of work matching given filter.
         *
         * @tags works
         * @name WorksCountPost
         * @request POST:/internal/works.count
         * @secure
         */
        this.worksCountPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/works.count`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Creates new work ([issue](https://devrev.ai/docs/product/build), [ticket](https://devrev.ai/docs/product/support)) item. [task](https://docs.devrev.ai/product/tasks) and opportunity work types are supported in the beta version.
         *
         * @tags works
         * @name WorksCreate
         * @request POST:/internal/works.create
         * @secure
         */
        this.worksCreate = (data, params = {}) => this.request(Object.assign({ path: `/internal/works.create`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Deletes a work item.
         *
         * @tags works
         * @name WorksDelete
         * @request POST:/internal/works.delete
         * @secure
         */
        this.worksDelete = (data, params = {}) => this.request(Object.assign({ path: `/internal/works.delete`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: anshu.avinash@devrev.ai ### Exports a collection of work items.
         *
         * @tags works
         * @name WorksExport
         * @request GET:/internal/works.export
         * @secure
         */
        this.worksExport = (query, params = {}) => this.request(Object.assign({ path: `/internal/works.export`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Exports a collection of work items.
         *
         * @tags works
         * @name WorksExportPost
         * @request POST:/internal/works.export
         * @secure
         */
        this.worksExportPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/works.export`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: anshu.avinash@devrev.ai ### Gets a work item's information.
         *
         * @tags works
         * @name WorksGet
         * @request GET:/internal/works.get
         * @secure
         */
        this.worksGet = (query, params = {}) => this.request(Object.assign({ path: `/internal/works.get`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Gets a work item's information.
         *
         * @tags works
         * @name WorksGetPost
         * @request POST:/internal/works.get
         * @secure
         */
        this.worksGetPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/works.get`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: anshu.avinash@devrev.ai ### Lists collections of works by groups.
         *
         * @tags works
         * @name WorksGroup
         * @request GET:/internal/works.group
         * @secure
         */
        this.worksGroup = (query, params = {}) => this.request(Object.assign({ path: `/internal/works.group`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists collections of works by groups.
         *
         * @tags works
         * @name WorksGroupPost
         * @request POST:/internal/works.group
         * @secure
         */
        this.worksGroupPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/works.group`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: anshu.avinash@devrev.ai ### Lists a collection of work items.
         *
         * @tags works
         * @name WorksList
         * @request GET:/internal/works.list
         * @secure
         */
        this.worksList = (query, params = {}) => this.request(Object.assign({ path: `/internal/works.list`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists a collection of work items.
         *
         * @tags works
         * @name WorksListPost
         * @request POST:/internal/works.list
         * @secure
         */
        this.worksListPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/works.list`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: anshu.avinash@devrev.ai ### Lists suggested works.
         *
         * @tags works
         * @name WorksSuggest
         * @request GET:/internal/works.suggest
         * @secure
         */
        this.worksSuggest = (query, params = {}) => this.request(Object.assign({ path: `/internal/works.suggest`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Lists suggested works.
         *
         * @tags works
         * @name WorksSuggestPost
         * @request POST:/internal/works.suggest
         * @secure
         */
        this.worksSuggestPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/works.suggest`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description ### Owner: anshu.avinash@devrev.ai ### Generate work info from given context.
         *
         * @tags works
         * @name WorksSuggestInfo
         * @request GET:/internal/works.suggest-info
         * @secure
         */
        this.worksSuggestInfo = (query, params = {}) => this.request(Object.assign({ path: `/internal/works.suggest-info`, method: 'GET', query: query, secure: true, format: 'json' }, params));
        /**
         * @description Generate work info from given context.
         *
         * @tags works
         * @name WorksSuggestInfoPost
         * @request POST:/internal/works.suggest-info
         * @secure
         */
        this.worksSuggestInfoPost = (data, params = {}) => this.request(Object.assign({ path: `/internal/works.suggest-info`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
        /**
         * @description Updates a work item's information.
         *
         * @tags works
         * @name WorksUpdate
         * @request POST:/internal/works.update
         * @secure
         */
        this.worksUpdate = (data, params = {}) => this.request(Object.assign({ path: `/internal/works.update`, method: 'POST', body: data, secure: true, type: ContentType.Json, format: 'json' }, params));
    }
    /**
     * @description List Account's commerce details.
     *
     * @tags commerce
     * @name AccountsCommerceDetailsList
     * @request GET:/internal/accounts.commerce-details.list
     * @secure */
    accountsCommerceDetailsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* accountsCommerceDetailsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.accountsCommerceDetailsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists duplicate accounts.
     *
     * @tags accounts
     * @name DuplicateAccountPairsList
     * @request GET:/internal/accounts.duplicates.list
     * @secure */
    duplicateAccountPairsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* duplicateAccountPairsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.duplicateAccountPairsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: akanksha.deswal@devrev.ai ### Lists collections of accounts by groups.
     *
     * @tags accounts
     * @name AccountsGroup
     * @request GET:/internal/accounts.group
     * @secure */
    accountsGroupPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* accountsGroupPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.accountsGroup(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: akanksha.deswal@devrev.ai ### Gets a list of accounts.
     *
     * @tags accounts
     * @name AccountsList
     * @request GET:/internal/accounts.list
     * @secure */
    accountsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* accountsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.accountsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Gets the addon rule objects based on the given filters.
     *
     * @tags commerce
     * @name AddonRulesList
     * @request GET:/internal/addon-rules.list
     * @secure */
    addonRulesListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* addonRulesListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.addonRulesList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: i-sankalp.kulkarni@devrev.ai ### Lists AI agents.
     *
     * @tags ai-agents
     * @name AiAgentsList
     * @request GET:/internal/ai-agents.list
     * @secure */
    aiAgentsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* aiAgentsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.aiAgentsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: i-sankalp.kulkarni@devrev.ai ### List AI agent sessions.
     *
     * @tags ai-agents
     * @name AiAgentSessionsList
     * @request GET:/internal/ai-agents.sessions.list
     * @secure */
    aiAgentSessionsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* aiAgentSessionsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.aiAgentSessionsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: dario.gavranovic@devrev.ai ### Lists external sync units.
     *
     * @tags airdrop
     * @name AirdropExternalSyncUnitsList
     * @request GET:/internal/airdrop.external-sync-units.list
     * @secure */
    airdropExternalSyncUnitsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* airdropExternalSyncUnitsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.airdropExternalSyncUnitsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: dario.gavranovic@devrev.ai ### Gets a list of sync unit historical records.
     *
     * @tags airdrop
     * @name AirdropSyncUnitsHistory
     * @request GET:/internal/airdrop.sync-units.history
     * @secure */
    airdropSyncUnitsHistoryPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* airdropSyncUnitsHistoryPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.airdropSyncUnitsHistory(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: dario.gavranovic@devrev.ai ### Gets a list of sync units.
     *
     * @tags airdrop
     * @name AirdropSyncUnitsList
     * @request GET:/internal/airdrop.sync-units.list
     * @secure */
    airdropSyncUnitsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* airdropSyncUnitsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.airdropSyncUnitsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: prabhat.tiwari@devrev.ai ### Lists a collection of articles.
     *
     * @tags articles
     * @name ListArticles
     * @request GET:/internal/articles.list
     * @secure */
    listArticlesPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* listArticlesPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.listArticles(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists the voters of an article.
     *
     * @tags articles
     * @name ArticlesVotersList
     * @request GET:/internal/articles.voters.list
     * @secure */
    articlesVotersListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* articlesVotersListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.articlesVotersList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: brian.byrne@devrev.ai ### Lists a collection of chats.
     *
     * @tags chats
     * @name ChatsList
     * @request GET:/internal/chats.list
     * @secure */
    chatsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* chatsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.chatsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: srividya.tata@devrev.ai ### Lists code change objects.
     *
     * @tags code-changes
     * @name CodeChangesList
     * @request GET:/internal/code-changes.list
     * @secure */
    codeChangesListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* codeChangesListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.codeChangesList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists commands for a Dev organization.
     *
     * @tags command
     * @name CommandsList
     * @request GET:/internal/commands.list
     * @secure */
    commandsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* commandsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.commandsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: brian.byrne@devrev.ai ### Lists the connections.
     *
     * @tags connections
     * @name ConnectionsList
     * @request GET:/internal/connections.list
     * @secure */
    connectionsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* connectionsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.connectionsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists the content templates.
     *
     * @tags notifications
     * @name ContentTemplateList
     * @request GET:/internal/content-template.list
     * @secure */
    contentTemplateListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* contentTemplateListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.contentTemplateList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists collections of conversations by groups.
     *
     * @tags conversations
     * @name ConversationsGroup
     * @request GET:/internal/conversations.group
     * @secure */
    conversationsGroupPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* conversationsGroupPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.conversationsGroup(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists the available conversations.
     *
     * @tags conversations
     * @name ConversationsList
     * @request GET:/internal/conversations.list
     * @secure */
    conversationsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* conversationsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.conversationsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Gets the credit objects based on the given filters.
     *
     * @tags commerce
     * @name CreditsList
     * @request GET:/internal/credits.list
     * @secure */
    creditsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* creditsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.creditsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists custom objects.
     *
     * @tags customization
     * @name CustomObjectsList
     * @request GET:/internal/custom-objects.list
     * @secure */
    customObjectsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* customObjectsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.customObjectsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: madhav.sikka@devrev.ai ### Returns the list of dashboards.
     *
     * @tags dashboards
     * @name DashboardsList
     * @request GET:/internal/dashboards.list
     * @secure */
    dashboardsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* dashboardsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.dashboardsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: madhav.sikka@devrev.ai ### Returns the list of data sources.
     *
     * @tags data-sources
     * @name DataSourcesList
     * @request GET:/internal/data-sources.list
     * @secure */
    dataSourcesListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* dataSourcesListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.dataSourcesList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: prabath.siriwardena@devrev.ai ### Returns a list of global Dev organization.
     *
     * @tags dev-orgs, dev-orgs-global
     * @name DevOrgsGlobalList
     * @request GET:/internal/dev-orgs.global.list
     * @secure */
    devOrgsGlobalListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* devOrgsGlobalListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.devOrgsGlobalList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: sambhav.jain@devrev.ai ### Gets the list of Dev user invitations in the user's Dev organization.
     *
     * @tags dev-orgs
     * @name DevOrgsInvitesList
     * @request GET:/internal/dev-orgs.invites.list
     * @secure */
    devOrgsInvitesListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* devOrgsInvitesListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.devOrgsInvitesList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: sambhav.jain@devrev.ai ### Gets the list of Dev organizations for the authenticated Dev user.
     *
     * @tags dev-orgs
     * @name DevOrgsList
     * @request GET:/internal/dev-orgs.list
     * @secure */
    devOrgsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* devOrgsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.devOrgsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists users within your organization.
     *
     * @tags dev-users
     * @name DevUsersList
     * @request GET:/internal/dev-users.list
     * @secure */
    devUsersListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* devUsersListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.devUsersList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists directories matching the request.
     *
     * @tags directory
     * @name DirectoriesList
     * @request GET:/internal/directories.list
     * @secure */
    directoriesListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* directoriesListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.directoriesList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description List discovery profiles.
     *
     * @tags discovery
     * @name ListDiscoveryProfiles
     * @request GET:/internal/discovery.profiles.list
     * @secure */
    listDiscoveryProfilesPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* listDiscoveryProfilesPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.listDiscoveryProfiles(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: brian.byrne@devrev.ai ### Lists the emojis.
     *
     * @tags emojis
     * @name EmojisList
     * @request GET:/internal/emojis.list
     * @secure */
    emojisListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* emojisListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.emojisList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: brian.byrne@devrev.ai ### Searches the emojis.
     *
     * @tags emojis
     * @name EmojisSearch
     * @request GET:/internal/emojis.search
     * @secure */
    emojisSearchPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* emojisSearchPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.emojisSearch(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: rahul.jain@devrev.ai ### Lists the engagement records.
     *
     * @tags engagements
     * @name EngagementsList
     * @request GET:/internal/engagements.list
     * @secure */
    engagementsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* engagementsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.engagementsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists event sources for a Dev organization.
     *
     * @tags event-source
     * @name EventSourcesList
     * @request GET:/internal/event-sources.list
     * @secure */
    eventSourcesListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* eventSourcesListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.eventSourcesList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: amisha.kothari@devrev.ai ### List all explore views of a section.
     *
     * @tags menu
     * @name ExploreViewsList
     * @request GET:/internal/explore-views.list
     * @secure */
    exploreViewsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* exploreViewsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.exploreViewsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists flows for a Dev organization.
     *
     * @tags flows
     * @name FlowsList
     * @request GET:/internal/flows.list
     * @secure */
    flowsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* flowsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.flowsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Gets the marketplace items.
     *
     * @tags marketplace, marketplace-global-store
     * @name GlobalStoreMarketplaceItemsList
     * @request GET:/internal/global.marketplace-items.list
     * @secure */
    globalStoreMarketplaceItemsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* globalStoreMarketplaceItemsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.globalStoreMarketplaceItemsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: akanksha.deswal@devrev.ai ### Lists the available groups.
     *
     * @tags groups
     * @name GroupsList
     * @request GET:/internal/groups.list
     * @secure */
    groupsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* groupsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.groupsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: akanksha.deswal@devrev.ai ### Lists the members in a group.
     *
     * @tags groups
     * @name GroupMembersList
     * @request GET:/internal/groups.members.list
     * @secure */
    groupMembersListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* groupMembersListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.groupMembersList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists collections of incidents by groups.
     *
     * @tags operate
     * @name IncidentsGroup
     * @request GET:/internal/incidents.group
     * @secure */
    incidentsGroupPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* incidentsGroupPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.incidentsGroup(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists incidents.
     *
     * @tags operate
     * @name IncidentsList
     * @request GET:/internal/incidents.list
     * @secure */
    incidentsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* incidentsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.incidentsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists insights.
     *
     * @tags insights
     * @name InsightsList
     * @request GET:/internal/insights.list
     * @secure */
    insightsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* insightsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.insightsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists insight values.
     *
     * @tags insights
     * @name InsightsValuesList
     * @request GET:/internal/insights.values.list
     * @secure */
    insightsValuesListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* insightsValuesListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.insightsValuesList(query, params));
                yield yield __await(response.data);
                cursor = response.data.cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: nitesh.dubey@devrev.ai ### Lists interactions.
     *
     * @tags interactions
     * @name InteractionsList
     * @request GET:/internal/interactions.list
     * @secure */
    interactionsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* interactionsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.interactionsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description List invoices for a customer.
     *
     * @tags commerce
     * @name InvoicesList
     * @request GET:/internal/invoices.list
     * @secure */
    invoicesListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* invoicesListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.invoicesList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists keyrings for a Dev organization.
     *
     * @tags keyring
     * @name KeyringsList
     * @request GET:/internal/keyrings.list
     * @secure */
    keyringsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* keyringsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.keyringsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description List license assignments.
     *
     * @tags commerce
     * @name LicenseAssignmentsList
     * @request GET:/internal/license-assignments.list
     * @secure */
    licenseAssignmentsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* licenseAssignmentsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.licenseAssignmentsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists collections of links by groups.
     *
     * @tags links
     * @name LinksGroup
     * @request GET:/internal/links.group
     * @secure */
    linksGroupPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* linksGroupPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.linksGroup(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists the available links.
     *
     * @tags links
     * @name LinksList
     * @request GET:/internal/links.list
     * @secure */
    linksListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* linksListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.linksList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists the available lobbies.
     *
     * @tags lobbies
     * @name LobbiesList
     * @request GET:/internal/lobbies.list
     * @secure */
    lobbiesListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* lobbiesListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.lobbiesList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Gets the marketplace items.
     *
     * @tags marketplace
     * @name MarketplaceItemsList
     * @request GET:/internal/marketplace-items.list
     * @secure */
    marketplaceItemsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* marketplaceItemsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.marketplaceItemsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: luka.kosenina@devrev.ai ### Gets the marketplace submissions.
     *
     * @tags marketplace
     * @name MarketplaceSubmissionsList
     * @request GET:/internal/marketplace-submissions.list
     * @secure */
    marketplaceSubmissionsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* marketplaceSubmissionsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.marketplaceSubmissionsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: rahul.jain@devrev.ai ### Lists the meeting records.
     *
     * @tags meetings
     * @name MeetingsList
     * @request GET:/internal/meetings.list
     * @secure */
    meetingsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* meetingsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.meetingsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: lorinc.body@devrev.ai ### Lists metric definitions matching a filter.
     *
     * @tags slas
     * @name MetricDefinitionsList
     * @request GET:/internal/metric-definitions.list
     * @secure */
    metricDefinitionsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* metricDefinitionsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.metricDefinitionsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists news items.
     *
     * @tags news
     * @name NewsList
     * @request GET:/internal/news.list
     * @secure */
    newsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* newsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.newsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists the notifications by groups.
     *
     * @tags notifications
     * @name NotificationsGroup
     * @request GET:/internal/notifications.group
     * @secure */
    notificationsGroupPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* notificationsGroupPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.notificationsGroup(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists the notifications.
     *
     * @tags notifications
     * @name NotificationsList
     * @request GET:/internal/notifications.list
     * @secure */
    notificationsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* notificationsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.notificationsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: bhavani.hari@devrev.ai ### Returns the Oasis data for the table.
     *
     * @tags oasis
     * @name OasisDataFetch
     * @request GET:/internal/oasis.data.fetch
     * @secure */
    oasisDataFetchPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* oasisDataFetchPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.oasisDataFetch(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: amit.gosavi@devrev.ai ### Prepares the Oasis data for the faster data response.
     *
     * @tags oasis
     * @name OasisDataPrepare
     * @request GET:/internal/oasis.data.prepare
     * @secure */
    oasisDataPreparePaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* oasisDataPreparePaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.oasisDataPrepare(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: bhavani.hari@devrev.ai ### Returns the list of datasets that match the filter.
     *
     * @tags oasis
     * @name DatasetList
     * @request GET:/internal/oasis.dataset.list
     * @secure */
    datasetListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* datasetListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.datasetList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists object members satisfying the request parameters.
     *
     * @tags object-members
     * @name ObjectMembersList
     * @request GET:/internal/object-members.list
     * @secure */
    objectMembersListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* objectMembersListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.objectMembersList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Gets the one time line item objects based on the given filters.
     *
     * @tags commerce
     * @name OneTimeItemsList
     * @request GET:/internal/one-time-line-items.list
     * @secure */
    oneTimeItemsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* oneTimeItemsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.oneTimeItemsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: abhishek.bansal@devrev.ai ### Lists all operations.
     *
     * @tags operation
     * @name ListOperations
     * @request GET:/internal/operations.list
     * @secure */
    listOperationsPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* listOperationsPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.listOperations(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: suraj.narra@devrev.ai ### Gets list of organization schedules.
     *
     * @tags schedules
     * @name OrgSchedulesList
     * @request GET:/internal/org-schedules.list
     * @secure */
    orgSchedulesListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* orgSchedulesListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.orgSchedulesList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Get links for part hierarchy
     *
     * @tags parts
     * @name PartsDescendantLinksTraverse
     * @request GET:/internal/parts.descendant-links.traverse
     * @secure */
    partsDescendantLinksTraversePaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* partsDescendantLinksTraversePaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.partsDescendantLinksTraverse(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists collections of parts by groups.
     *
     * @tags parts
     * @name PartsGroup
     * @request GET:/internal/parts.group
     * @secure */
    partsGroupPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* partsGroupPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.partsGroup(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists a collection of [parts](https://devrev.ai/docs/product/parts).
     *
     * @tags parts
     * @name PartsList
     * @request GET:/internal/parts.list
     * @secure */
    partsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* partsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.partsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: madhav.sikka@devrev.ai ### Lists plug setting objects.
     *
     * @tags plug-settings
     * @name PlugSettingsList
     * @request GET:/internal/plug-settings.list
     * @secure */
    plugSettingsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* plugSettingsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.plugSettingsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Gets the price book objects based on the given filters.
     *
     * @tags commerce
     * @name PriceBooksList
     * @request GET:/internal/price-books.list
     * @secure */
    priceBooksListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* priceBooksListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.priceBooksList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Gets the pricing objects based on the given filters.
     *
     * @tags commerce
     * @name PricingsList
     * @request GET:/internal/pricings.list
     * @secure */
    pricingsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* pricingsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.pricingsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: dd@devrev.ai ### Lists a collection of question-answers.
     *
     * @tags question-answers
     * @name ListQuestionAnswers
     * @request GET:/internal/question-answers.list
     * @secure */
    listQuestionAnswersPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* listQuestionAnswersPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.listQuestionAnswers(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Gets the quote objects based on the given filters.
     *
     * @tags commerce
     * @name QuotesList
     * @request GET:/internal/quotes.list
     * @secure */
    quotesListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* quotesListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.quotesList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description List the reactors for an object.
     *
     * @tags timeline-entries, works
     * @name ReactionsList
     * @request GET:/internal/reactions.list
     * @secure */
    reactionsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* reactionsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.reactionsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: altaf.ahmad@devrev.ai ### Lists record template objects.
     *
     * @tags record-templates
     * @name RecordTemplateList
     * @request GET:/internal/record-templates.list
     * @secure */
    recordTemplateListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* recordTemplateListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.recordTemplateList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description List Rev org's commerce details.
     *
     * @tags commerce
     * @name RevOrgsCommerceDetailsList
     * @request GET:/internal/rev-orgs.commerce-details.list
     * @secure */
    revOrgsCommerceDetailsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* revOrgsCommerceDetailsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.revOrgsCommerceDetailsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: akanksha.deswal@devrev.ai ### Lists collections of Rev organizations by groups.
     *
     * @tags rev-orgs
     * @name RevOrgsGroup
     * @request GET:/internal/rev-orgs.group
     * @secure */
    revOrgsGroupPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* revOrgsGroupPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.revOrgsGroup(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: akanksha.deswal@devrev.ai ### Gets the list of Rev organizations' information belonging to the authenticated user's Dev Organization which the user is also authorized to access.
     *
     * @tags rev-orgs
     * @name RevOrgsList
     * @request GET:/internal/rev-orgs.list
     * @secure */
    revOrgsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* revOrgsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.revOrgsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Gets the list of Rev users' information across all Rev organizations in user's Dev organization.
     *
     * @tags rev-users
     * @name RevUsersListAll
     * @request GET:/internal/rev-users.all.list
     * @secure */
    revUsersListAllPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* revUsersListAllPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.revUsersListAll(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists collections of Rev users by groups.
     *
     * @tags rev-users
     * @name RevUsersGroup
     * @request GET:/internal/rev-users.group
     * @secure */
    revUsersGroupPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* revUsersGroupPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.revUsersGroup(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Returns a list of all Rev Users belonging to the authenticated user's Dev Organization.
     *
     * @tags rev-users
     * @name RevUsersList
     * @request GET:/internal/rev-users.list
     * @secure */
    revUsersListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* revUsersListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.revUsersList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists custom schema fragments.
     *
     * @tags customization
     * @name CustomSchemaFragmentsList
     * @request GET:/internal/schemas.custom.list
     * @secure */
    customSchemaFragmentsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* customSchemaFragmentsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.customSchemaFragmentsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists custom schema fragments.
     *
     * @tags customization
     * @name CustomSchemaFragmentsListPrivate
     * @request GET:/internal/schemas.custom.list.private
     * @secure */
    customSchemaFragmentsListPrivatePaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* customSchemaFragmentsListPrivatePaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.customSchemaFragmentsListPrivate(query, params));
                yield yield __await(response.data);
                cursor = response.data.cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists stock schema fragments.
     *
     * @tags customization
     * @name StockSchemaFragmentsList
     * @request GET:/internal/schemas.stock.list
     * @secure */
    stockSchemaFragmentsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* stockSchemaFragmentsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.stockSchemaFragmentsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists stock schema fragments.
     *
     * @tags customization
     * @name StockSchemaFragmentsListPrivate
     * @request GET:/internal/schemas.stock.list.private
     * @secure */
    stockSchemaFragmentsListPrivatePaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* stockSchemaFragmentsListPrivatePaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.stockSchemaFragmentsListPrivate(query, params));
                yield yield __await(response.data);
                cursor = response.data.cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: ashwini.vasanth@devrev.ai ### Searches for records based on a given query.
     *
     * @tags search
     * @name SearchCore
     * @request GET:/internal/search.core
     * @secure */
    searchCorePaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* searchCorePaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.searchCore(query, params));
                yield yield __await(response.data);
                cursor = response.data.cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Performs search, encompassing exact, prefix and infix matches on the specified query.
     *
     * @tags search
     * @name SearchSuggest
     * @request GET:/internal/search.suggest
     * @secure */
    searchSuggestPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* searchSuggestPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.searchSuggest(query, params));
                yield yield __await(response.data);
                cursor = response.data.cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Typeahead search.
     *
     * @tags search
     * @name SearchTypeahead
     * @request GET:/internal/search.typeahead
     * @secure */
    searchTypeaheadPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* searchTypeaheadPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.searchTypeahead(query, params));
                yield yield __await(response.data);
                cursor = response.data.cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: prabath.siriwardena@devrev.ai ### Lists the service accounts.
     *
     * @tags service-accounts
     * @name ServiceAccountsList
     * @request GET:/internal/service-accounts.list
     * @secure */
    serviceAccountsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* serviceAccountsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.serviceAccountsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Gets the service plan objects based on the given filters.
     *
     * @tags commerce
     * @name ServicePlansList
     * @request GET:/internal/service-plans.list
     * @secure */
    servicePlansListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* servicePlansListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.servicePlansList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Gets the sku rules based on the given filters.
     *
     * @tags commerce
     * @name SkuRulesList
     * @request GET:/internal/skurules.list
     * @secure */
    skuRulesListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* skuRulesListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.skuRulesList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Gets the SKUs based on the given filters.
     *
     * @tags commerce
     * @name SkusList
     * @request GET:/internal/skus.list
     * @secure */
    skusListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* skusListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.skusList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: suraj.narra@devrev.ai ### Gets a list of SLA assignment rules.
     *
     * @tags slas
     * @name SlaAssignmentRulesList
     * @request GET:/internal/sla-assignment-rules.list
     * @secure */
    slaAssignmentRulesListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* slaAssignmentRulesListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.slaAssignmentRulesList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: lorinc.body@devrev.ai ### Lists SLAs matching a filter.
     *
     * @tags slas
     * @name SlasList
     * @request GET:/internal/slas.list
     * @secure */
    slasListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* slasListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.slasList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: srividya.tata@devrev.ai ### List snap components.
     *
     * @tags snap-components
     * @name ListSnapComponents
     * @request GET:/internal/snap-components.list
     * @secure */
    listSnapComponentsPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* listSnapComponentsPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.listSnapComponents(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: peter.marinsek@devrev.ai ### Lists snap-in packages for a Dev organization.
     *
     * @tags snap-in-packages
     * @name SnapInPackagesList
     * @request GET:/internal/snap-in-packages.list
     * @secure */
    snapInPackagesListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* snapInPackagesListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.snapInPackagesList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: umang.malik@devrev.ai ### Fetches the logs for the snap-in-package based on the filters specified.
     *
     * @tags snap-in-packages
     * @name SnapInPackagesLogsFetch
     * @request GET:/internal/snap-in-packages.logs.fetch
     * @secure */
    snapInPackagesLogsFetchPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* snapInPackagesLogsFetchPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.snapInPackagesLogsFetch(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: harpinder.singh@devrev.ai ### Lists snap-in versions for a Dev organization.
     *
     * @tags snap-in-versions
     * @name SnapInVersionsList
     * @request GET:/internal/snap-in-versions.list
     * @secure */
    snapInVersionsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* snapInVersionsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.snapInVersionsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: harpinder.singh@devrev.ai ### Lists snap-ins for a Dev organization.
     *
     * @tags snap-ins
     * @name SnapInsList
     * @request GET:/internal/snap-ins.list
     * @secure */
    snapInsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* snapInsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.snapInsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: madhav.sikka@devrev.ai ### List snap widget objects.
     *
     * @tags snap-widgets
     * @name SnapWidgetsList
     * @request GET:/internal/snap-widgets.list
     * @secure */
    snapWidgetsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* snapWidgetsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.snapWidgetsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists stage diagrams.
     *
     * @tags customization
     * @name StageDiagramsList
     * @request GET:/internal/stage-diagrams.list
     * @secure */
    stageDiagramsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* stageDiagramsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.stageDiagramsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists custom stages.
     *
     * @tags customization
     * @name CustomStagesList
     * @request GET:/internal/stages.custom.list
     * @secure */
    customStagesListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* customStagesListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.customStagesList(query, params));
                yield yield __await(response.data);
                cursor = response.data.cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists custom states.
     *
     * @tags customization
     * @name CustomStatesList
     * @request GET:/internal/states.custom.list
     * @secure */
    customStatesListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* customStatesListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.customStatesList(query, params));
                yield yield __await(response.data);
                cursor = response.data.cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: amit.gosavi@devrev.ai ### List surveys requested by the user.
     *
     * @tags surveys
     * @name SurveysList
     * @request GET:/internal/surveys.list
     * @secure */
    surveysListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* surveysListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.surveysList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: amit.gosavi@devrev.ai ### List survey responses requested by the user.
     *
     * @tags surveys
     * @name SurveysResponsesList
     * @request GET:/internal/surveys.responses.list
     * @secure */
    surveysResponsesListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* surveysResponsesListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.surveysResponsesList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: akanksha.deswal@devrev.ai ### Lists system users within your organization.
     *
     * @tags sys-users
     * @name SysUsersList
     * @request GET:/internal/sys-users.list
     * @secure */
    sysUsersListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* sysUsersListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.sysUsersList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists the available tags.
     *
     * @tags tags
     * @name TagsList
     * @request GET:/internal/tags.list
     * @secure */
    tagsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* tagsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.tagsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Gets the quote term templates objects based on the given filters.
     *
     * @tags commerce
     * @name QuoteTermTemplatesList
     * @request GET:/internal/term-templates.list
     * @secure */
    quoteTermTemplatesListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* quoteTermTemplatesListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.quoteTermTemplatesList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: brian.byrne@devrev.ai ### Lists the timeline entries for an object.
     *
     * @tags timeline-entries
     * @name TimelineEntriesList
     * @request GET:/internal/timeline-entries.list
     * @secure */
    timelineEntriesListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* timelineEntriesListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.timelineEntriesList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Gets the Unit of Measurements based on the given filters.
     *
     * @tags product-usage
     * @name UomsList
     * @request GET:/internal/uoms.list
     * @secure */
    uomsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* uomsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.uomsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: i-harsh.agarwal@devrev.ai ### List user session objects.
     *
     * @tags user-sessions
     * @name UserSessionList
     * @request GET:/internal/user-sessions.list
     * @secure */
    userSessionListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* userSessionListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.userSessionList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: shivam.gupta@devrev.ai ### Lists the available vista group items.
     *
     * @tags vistas
     * @name VistasGroupsList
     * @request GET:/internal/vistas.groups.list
     * @secure */
    vistasGroupsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* vistasGroupsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.vistasGroupsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists the available vistas.
     *
     * @tags vistas
     * @name VistasList
     * @request GET:/internal/vistas.list
     * @secure */
    vistasListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* vistasListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.vistasList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists the parts to which the vistas are linked to.
     *
     * @tags vistas
     * @name VistasPartsList
     * @request GET:/internal/vistas.parts.list
     * @secure */
    vistasPartsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* vistasPartsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.vistasPartsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description Lists watchers of an object.
     *
     * @tags watchers
     * @name WatchersList
     * @request GET:/internal/watchers.list
     * @secure */
    watchersListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* watchersListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.watchersList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: chirag.jain@devrev.ai ### Lists web crawler jobs.
     *
     * @tags web-crawler-job
     * @name ListWebCrawlerJobs
     * @request GET:/internal/web-crawler-jobs.list
     * @secure */
    listWebCrawlerJobsPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* listWebCrawlerJobsPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.listWebCrawlerJobs(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: madhav.sikka@devrev.ai ### Returns the list of widgets.
     *
     * @tags widgets
     * @name WidgetsList
     * @request GET:/internal/widgets.list
     * @secure */
    widgetsListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* widgetsListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.widgetsList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: umang.malik@devrev.ai ### Lists all workflow runs.
     *
     * @tags workflow-run
     * @name ListWorkflowRuns
     * @request GET:/internal/workflow-runs.list
     * @secure */
    listWorkflowRunsPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* listWorkflowRunsPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.listWorkflowRuns(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: vikas.sheoran@devrev.ai ### Lists all workflow steps.
     *
     * @tags workflow-step
     * @name ListWorkflowSteps
     * @request GET:/internal/workflow-steps.list
     * @secure */
    listWorkflowStepsPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* listWorkflowStepsPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.listWorkflowSteps(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: vikas.sheoran@devrev.ai ### Lists all workflows.
     *
     * @tags workflow
     * @name ListWorkflows
     * @request GET:/internal/workflows.list
     * @secure */
    listWorkflowsPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* listWorkflowsPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.listWorkflows(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: dd@devrev.ai ### Gather summary information about work clusters.
     *
     * @tags works
     * @name WorksClustersGather
     * @request GET:/internal/works.clusters.gather
     * @secure */
    worksClustersGatherPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* worksClustersGatherPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.worksClustersGather(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: dd@devrev.ai ### List the work items or IDs contained in a single work cluster or multiple clusters.
     *
     * @tags works
     * @name WorksClustersList
     * @request GET:/internal/works.clusters.list
     * @secure */
    worksClustersListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* worksClustersListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.worksClustersList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: anshu.avinash@devrev.ai ### Lists collections of works by groups.
     *
     * @tags works
     * @name WorksGroup
     * @request GET:/internal/works.group
     * @secure */
    worksGroupPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* worksGroupPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.worksGroup(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: anshu.avinash@devrev.ai ### Lists a collection of work items.
     *
     * @tags works
     * @name WorksList
     * @request GET:/internal/works.list
     * @secure */
    worksListPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* worksListPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.worksList(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
    /**
     * @description ### Owner: anshu.avinash@devrev.ai ### Lists suggested works.
     *
     * @tags works
     * @name WorksSuggest
     * @request GET:/internal/works.suggest
     * @secure */
    worksSuggestPaginator(query, params = {}) {
        return __asyncGenerator(this, arguments, function* worksSuggestPaginator_1() {
            let response, cursor;
            // shallow cloning the query object once here to avoid mutating the user provided object
            query = Object.assign({}, query);
            do {
                response = yield __await(this.worksSuggest(query, params));
                yield yield __await(response.data);
                cursor = response.data.next_cursor;
                if (cursor) {
                    query.cursor = cursor;
                }
            } while (cursor);
        });
    }
}
exports.Api = Api;
//# sourceMappingURL=private-internal-devrev-sdk.js.map