type UtilRequiredKeys<T, K extends keyof T> = Omit<T, K> & Required<Pick<T, K>>;
export declare enum AccessLevel {
    External = "external",
    Internal = "internal",
    Private = "private",
    Public = "public",
    Restricted = "restricted"
}
/** account */
export type Account = OrgBase & {
    /** The artifacts attached to the Account. */
    artifacts?: ArtifactSummary[];
    /** Custom fields. */
    custom_fields?: object;
    /**
     * Custom schema fragments.
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    custom_schema_fragments?: string[];
    /** Description of the corresponding Account. */
    description?: string;
    /** Company's domain names. Example - 'devrev.ai'. */
    domains?: string[];
    /**
     * External refs are unique identifiers from your customer system of
     * records, stored as a list.
     */
    external_refs: string[];
    /** Industry of the company. */
    industry?: string;
    /** Channel from which the rev identity is ingested. */
    ingestion_channel?: AccountIngestionChannel;
    /** Whether the object is archived or not. */
    is_archived?: boolean;
    /** The source that connected/introduced/referred the company. */
    lead_source?: string;
    /** List of Dev user IDs owning this Account. */
    owned_by: UserSummary[];
    primary_account_id?: AccountSummary;
    /**
     * Combination of stock and custom schema fragment IDs.
     * @deprecated
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    schema_fragment_ids?: string[];
    /** Describes the current stage of a object. */
    stage?: Stage;
    /**
     * Stock schema fragment.
     * @example "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"
     */
    stock_schema_fragment?: string;
    /** Subtype corresponding to the custom type fragment. */
    subtype?: string;
    /** Tags associated with an object. */
    tags?: TagWithValue[];
    /** The Tier of the corresponding Account. */
    tier?: string;
    /**
     * Total sales revenue brought in by the company.‚Äù.
     * @format int64
     */
    total_revenue?: number;
    /**
     * Company's website links. Filling in this property will also fill in
     * domain. Example - 'www.devrev.ai'.
     */
    websites?: string[];
};
/** account-commerce-details */
export type AccountCommerceDetails = AtomBase & {
    account?: AccountSummary;
    /** The stripe connect account id of this accounts dev org. */
    account_id?: string;
    billing_admin_group_id: GroupSummary;
    /**
     * The billing date for the customer.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    billing_date: string;
    /** Contact Details of the customer. */
    billing_details?: ContactDetails;
    /** The billing contact's email. */
    billing_email: string;
    /**
     * Billing Platform on which the usage meters for the customer will be
     * posted.
     */
    billing_platform?: string;
    /**
     * Settings related to payment, proration, etc. Configurations may or may
     * not be defined by a DevO. 1. If DevO defines configurations then same
     * configurations are copied to RevO also to sub pack (for now, later RevO
     * can also set) 2. If DevO doesn't set anything then these configurations
     * would be set to default by application for which they were being
     * defined (for eg. if DevO doesn't set payment method for it's RevOs then
     * stripe would set it to 'charge_automatically' by default).
     */
    configurations: Configuration;
    /** Contact Details of the customer. */
    shipping_details?: ContactDetails;
};
/** account-commerce-details-summary */
export type AccountCommerceDetailsSummary = AtomBaseSummary;
/** Channel from which the rev identity is ingested. */
export declare enum AccountIngestionChannel {
    Airdrop = "airdrop",
    Csv = "csv"
}
/**
 * account-rev-org-operation-event
 * Event for account RevOrg operation.
 */
export interface AccountRevOrgOperationEvent {
    account?: AccountSummary;
    /** Operation performed on the RevOrg with respect to account. */
    operation?: AccountRevOrgOperationEventOperation;
    rev_org?: OrgSummary;
    /** Display name of the RevOrg. */
    rev_org_display_name?: string;
}
/** Operation performed on the RevOrg with respect to account. */
export declare enum AccountRevOrgOperationEventOperation {
    Added = "added",
    Created = "created",
    Deleted = "deleted",
    Removed = "removed"
}
/** account-search-summary */
export type AccountSearchSummary = SearchSummaryBase & {
    account: AccountSummary;
};
/** account-summary */
export type AccountSummary = OrgBaseSummary;
/**
 * accounts-bulk-create-request
 * Request object to bulk create accounts.
 */
export interface AccountsBulkCreateRequest {
    bulk_import_request_type?: BulkImportRequestTypeEnum;
    /**
     * Input file bytes of uploaded CSV file.
     * @format binary
     */
    data: File;
    /** Tags to be associated with the imported accounts. */
    import_tags?: string[];
    /** Flag to update the first account for duplicates. */
    update_first_for_duplicates?: boolean;
    /** Flag to update the account if it already exists. */
    update_if_exists?: boolean;
}
/**
 * accounts-bulk-create-response
 * Response object to create accounts under the given Dev organization.
 */
export interface AccountsBulkCreateResponse {
    /** List of all the accounts details. */
    accounts: Account[];
    /** Error found in the file. */
    file_error?: string;
    /**
     * List of all CSV headers which were invalid with stock and custom
     * fields.
     */
    invalid_csv_headers?: string[];
    /** List of all the errors occurred in the rows. */
    row_errors?: RowError[];
}
/** accounts-commerce-details-get-request */
export interface AccountsCommerceDetailsGetRequest {
    /**
     * The account's DON.
     * @example "ACC-12345"
     */
    id?: string;
}
/** accounts-commerce-details-get-response */
export interface AccountsCommerceDetailsGetResponse {
    account_commerce_details: AccountCommerceDetails;
}
/** accounts-commerce-details-list-request */
export interface AccountsCommerceDetailsListRequest {
    /**
     * The list of account DONs which are to be aggregated.
     * @example ["ACC-12345"]
     */
    account_ids?: string[];
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * Filter accounts by created date after.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_date_after?: string;
    /**
     * Filter accounts by created date before.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_date_before?: string;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of accounts to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Filter accounts with pin code. */
    pin_code?: string;
    /**
     * List of fields to sort the accounts, by and how to sort them.
     * Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
}
/** accounts-commerce-details-list-response */
export interface AccountsCommerceDetailsListResponse {
    /** The list of account commerce details object. */
    account_commerce_details: AccountCommerceDetails[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/** accounts-commerce-details-update-request */
export interface AccountsCommerceDetailsUpdateRequest {
    /**
     * Timestamp to set the billing date.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    billing_date?: string;
    /** Contact Details of the customer. */
    billing_details?: ContactDetails;
    /** Billing email of the account. */
    billing_email?: string;
    /**
     * Settings related to payment, proration, etc. Configurations may or may
     * not be defined by a DevO. 1. If DevO defines configurations then same
     * configurations are copied to RevO also to sub pack (for now, later RevO
     * can also set) 2. If DevO doesn't set anything then these configurations
     * would be set to default by application for which they were being
     * defined (for eg. if DevO doesn't set payment method for it's RevOs then
     * stripe would set it to 'charge_automatically' by default).
     */
    configuration?: Configuration;
    /**
     * The account's DON.
     * @example "ACC-12345"
     */
    id?: string;
    /** Contact Details of the customer. */
    shipping_details?: ContactDetails;
}
/** accounts-commerce-details-update-response */
export interface AccountsCommerceDetailsUpdateResponse {
    account_commerce_details: AccountCommerceDetails;
}
/** accounts-count-request */
export interface AccountsCountRequest {
    /** Filters for accounts created by the specified user(s). */
    created_by?: string[];
    created_by_op?: RevObjectTagsOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** Array of display names of accounts to be filtered. */
    display_name?: string[];
    /** Domains for accounts to be filtered. */
    domains?: string[];
    domains_op?: RevObjectTagsOperatorType;
    /** Environment values to be filtered. */
    environment?: OrgEnvironment[];
    /** Array of references of accounts to be filtered. */
    external_refs?: string[];
    external_refs_op?: RevObjectTagsOperatorType;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** Filters for accounts owned by the specified user(s). */
    owned_by?: string[];
    owned_by_op?: RevObjectTagsOperatorType;
    /** Filters for accounts on specified stages. */
    stage?: string[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    subtype_op?: SubtypeOpOperatorType;
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    tags_op?: RevObjectTagsOperatorType;
    /** Array of tier for accounts to be filtered. */
    tier?: string[];
    tier_op?: RevObjectTagsOperatorType;
    /** Array of websites of accounts to be filtered. */
    websites?: string[];
    websites_op?: RevObjectTagsOperatorType;
}
/** accounts-count-response */
export interface AccountsCountResponse {
    /**
     * Count of accounts matching the filter.
     * @format int32
     */
    count: number;
    /** Whether there are more accounts than the count value. */
    has_more: boolean;
}
/**
 * accounts-create-request
 * Request object to create a new account in the Dev organization.
 */
export interface AccountsCreateRequest {
    /**
     * The IDs of the artifacts to associate with the account.
     * @example ["ARTIFACT-12345"]
     */
    artifacts?: string[];
    /** Application-defined custom fields. */
    custom_fields?: object;
    /**
     * Requested custom schemas described abstractly. Every provided schema's
     * custom field must be specified, otherwise a bad request error is
     * returned. If a new custom schema specifier is provided, then it will be
     * added to the work, otherwise if a custom schema is omitted from the
     * specifier, it remains unmodified.
     */
    custom_schema_spec?: CustomSchemaSpec;
    /** Description of the account. */
    description?: string;
    /** Name of the account. */
    display_name: string;
    /** List of company's domain names. Example - ['devrev.ai']. */
    domains?: string[];
    /** The environment of the Org. Defaults to 'production' if not specified. */
    environment?: OrgEnvironment;
    /**
     * External refs are unique identifiers from your customer system of
     * records, stored as a list.
     */
    external_refs?: string[];
    /** Industry of the company. */
    industry?: string;
    /** The source that connected/introduced/referred the company. */
    lead_source?: string;
    /**
     * Artifact ID of the account's logo.
     * @example "ARTIFACT-12345"
     */
    logo_id?: string;
    /** List of Dev users owning this account. */
    owned_by?: string[];
    /** Phone numbers of the Account. */
    phone_numbers?: string[];
    /**
     * Schema fragment IDs associated with this account SOR.
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    schema_fragment_ids?: string[];
    /** Sets an object's initial stage. */
    stage?: AccountsCreateRequestStage;
    /** Tags associated with the account. */
    tags?: SetTagWithValue[];
    /** The tier of the account. */
    tier?: string;
    /**
     * Total sales revenue brought in by the company.
     * @format int64
     */
    total_revenue?: number;
    /**
     * List of company websites. Example - ['www.devrev.ai',
     * 'www.marketplace.devrev.ai'].
     */
    websites?: string[];
}
/**
 * accounts-create-request-stage
 * Sets an object's initial stage.
 */
export interface AccountsCreateRequestStage {
    /** The ID of the custom stage. */
    id: string;
    /** Notes relevant to the stage. */
    notes?: string;
}
/**
 * accounts-create-response
 * The response to creating a new account.
 */
export interface AccountsCreateResponse {
    account: Account;
    default_rev_org: RevOrg;
}
/**
 * accounts-delete-request
 * Request object to delete an account.
 */
export interface AccountsDeleteRequest {
    /**
     * The ID of account to delete.
     * @example "ACC-12345"
     */
    id: string;
}
/**
 * accounts-delete-response
 * The response to deleting an account.
 */
export type AccountsDeleteResponse = object;
/**
 * accounts-delete-validate-request
 * Request object to check if an account can be deleted.
 */
export interface AccountsDeleteValidateRequest {
    /**
     * The ID of account to be checked for deletion.
     * @example "ACC-12345"
     */
    id: string;
}
/**
 * accounts-delete-validate-response
 * Response object containing infomation if an account can be deleted.
 */
export interface AccountsDeleteValidateResponse {
    /** Bool value denoting if deletion of an account is supported. */
    is_supported: boolean;
    /** Optional string to denote why an account cannot be deleted. */
    reason?: string;
}
/**
 * accounts-export-request
 * The request to export a collection of accounts.
 */
export interface AccountsExportRequest {
    /** Filters for accounts created by the specified user(s). */
    created_by?: string[];
    created_by_op?: RevObjectTagsOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** Array of display names of accounts to be filtered. */
    display_name?: string[];
    /** Domains for accounts to be filtered. */
    domains?: string[];
    domains_op?: RevObjectTagsOperatorType;
    /** Environment values to be filtered. */
    environment?: OrgEnvironment[];
    /** Array of references of accounts to be filtered. */
    external_refs?: string[];
    external_refs_op?: RevObjectTagsOperatorType;
    /**
     * The number of accounts to return. The default is '50'.
     * @format int32
     * @min 1
     * @max 500
     */
    first?: number;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** Filters for accounts owned by the specified user(s). */
    owned_by?: string[];
    owned_by_op?: RevObjectTagsOperatorType;
    /** Fields to sort the accounts by and the direction to sort them in. */
    sort_by?: string[];
    /** Filters for accounts on specified stages. */
    stage?: string[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    subtype_op?: SubtypeOpOperatorType;
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    tags_op?: RevObjectTagsOperatorType;
    /** Array of tier for accounts to be filtered. */
    tier?: string[];
    tier_op?: RevObjectTagsOperatorType;
    /** Array of websites of accounts to be filtered. */
    websites?: string[];
    websites_op?: RevObjectTagsOperatorType;
}
/**
 * accounts-export-response
 * The response to exporting a collection of accounts.
 */
export interface AccountsExportResponse {
    /** The exported accounts. */
    accounts: Account[];
}
/** accounts-filters */
export interface AccountsFilters {
    /** Filters for accounts created by the specified user(s). */
    created_by?: string[];
    created_by_op?: RevObjectTagsOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** Array of display names of accounts to be filtered. */
    display_name?: string[];
    /** Domains for accounts to be filtered. */
    domains?: string[];
    domains_op?: RevObjectTagsOperatorType;
    /** Environment values to be filtered. */
    environment?: OrgEnvironment[];
    /** Array of references of accounts to be filtered. */
    external_refs?: string[];
    external_refs_op?: RevObjectTagsOperatorType;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** Filters for accounts owned by the specified user(s). */
    owned_by?: string[];
    owned_by_op?: RevObjectTagsOperatorType;
    /** Filters for accounts on specified stages. */
    stage?: string[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    subtype_op?: SubtypeOpOperatorType;
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    tags_op?: RevObjectTagsOperatorType;
    /** Array of tier for accounts to be filtered. */
    tier?: string[];
    tier_op?: RevObjectTagsOperatorType;
    /** Array of websites of accounts to be filtered. */
    websites?: string[];
    websites_op?: RevObjectTagsOperatorType;
}
/**
 * accounts-get-request
 * Request object to get an account's information.
 */
export interface AccountsGetRequest {
    /**
     * The ID of the account to be retrieved.
     * @example "ACC-12345"
     */
    id: string;
}
/**
 * accounts-get-response
 * The returned account.
 */
export interface AccountsGetResponse {
    account: Account;
}
/** accounts-get-sla-request */
export interface AccountsGetSlaRequest {
    /**
     * The account's id for which the SLA applying to it is to be fetched.
     * @example "ACC-12345"
     */
    id: string;
}
/** accounts-get-sla-response */
export interface AccountsGetSlaResponse {
    sla: Sla;
}
/**
 * accounts-group
 * Group object for accounts group request.
 */
export interface AccountsGroup {
    /** The group of accounts. */
    accounts: Account[];
    /** Unique key according to which the items are grouped. */
    key: string;
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/**
 * accounts-group-request
 * A request to get group list of Groups.
 */
export interface AccountsGroupRequest {
    /** Filters for accounts created by the specified user(s). */
    created_by?: string[];
    created_by_op?: RevObjectTagsOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** Array of display names of accounts to be filtered. */
    display_name?: string[];
    /** Domains for accounts to be filtered. */
    domains?: string[];
    domains_op?: RevObjectTagsOperatorType;
    /** Environment values to be filtered. */
    environment?: OrgEnvironment[];
    /** Array of references of accounts to be filtered. */
    external_refs?: string[];
    external_refs_op?: RevObjectTagsOperatorType;
    /** The field to group the accounts by. */
    group_by: string;
    /**
     * The maximum number of groups to return. If not set, then the
     * default is '10'.
     * @format int32
     */
    limit?: number;
    /**
     * The maximum number of accounts to return for an individual group.
     * If not set, then the default is '50'.
     * @format int32
     */
    limit_per_group?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** Filters for accounts owned by the specified user(s). */
    owned_by?: string[];
    owned_by_op?: RevObjectTagsOperatorType;
    /** Fields to sort the accounts by and the direction to sort them in. */
    sort_by?: string[];
    /** Filters for accounts on specified stages. */
    stage?: string[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    subtype_op?: SubtypeOpOperatorType;
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    tags_op?: RevObjectTagsOperatorType;
    /** Array of tier for accounts to be filtered. */
    tier?: string[];
    tier_op?: RevObjectTagsOperatorType;
    /** Array of websites of accounts to be filtered. */
    websites?: string[];
    websites_op?: RevObjectTagsOperatorType;
}
/**
 * accounts-group-response
 * Response object for accounts group request.
 */
export interface AccountsGroupResponse {
    /** The list of groups. */
    groups: AccountsGroup[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/**
 * accounts-list-request
 * List the accounts.
 */
export interface AccountsListRequest {
    /** Filters for accounts created by the specified user(s). */
    created_by?: string[];
    created_by_op?: RevObjectTagsOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** Array of display names of accounts to be filtered. */
    display_name?: string[];
    /** Domains for accounts to be filtered. */
    domains?: string[];
    domains_op?: RevObjectTagsOperatorType;
    /** Environment values to be filtered. */
    environment?: OrgEnvironment[];
    /** Array of references of accounts to be filtered. */
    external_refs?: string[];
    external_refs_op?: RevObjectTagsOperatorType;
    /**
     * The maximum number of accounts to return per page. The default is
     * '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** Filters for accounts owned by the specified user(s). */
    owned_by?: string[];
    owned_by_op?: RevObjectTagsOperatorType;
    /** Fields to sort the accounts by and the direction to sort them in. */
    sort_by?: string[];
    /** Filters for accounts on specified stages. */
    stage?: string[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    subtype_op?: SubtypeOpOperatorType;
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    tags_op?: RevObjectTagsOperatorType;
    /** Array of tier for accounts to be filtered. */
    tier?: string[];
    tier_op?: RevObjectTagsOperatorType;
    /** Array of websites of accounts to be filtered. */
    websites?: string[];
    websites_op?: RevObjectTagsOperatorType;
}
/**
 * accounts-list-response
 * The response to listing all accounts matching the filter criteria.
 */
export interface AccountsListResponse {
    /** List containing all the accounts */
    accounts: Account[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/**
 * accounts-merge-request
 * Request object to merge an account.
 */
export interface AccountsMergeRequest {
    /**
     * The ID of account data is to be merged from.
     * @example "ACC-12345"
     */
    from: string;
    /**
     * Whether to merge the timeline of the secondary account into the
     * primary account.
     */
    merge_account_timeline?: boolean;
    /**
     * Whether to merge the timeline of the secondary default Rev
     * organization into the primary default Rev organization.
     */
    merge_default_rev_org_timeline?: boolean;
    /**
     * The ID of account data is to be merged to.
     * @example "ACC-12345"
     */
    to: string;
}
/**
 * accounts-merge-response
 * The response to merging an account.
 */
export type AccountsMergeResponse = object;
/**
 * accounts-update-request
 * Request to update details of the account.
 */
export interface AccountsUpdateRequest {
    artifacts?: AccountsUpdateRequestArtifacts;
    /** Application-defined custom fields. */
    custom_fields?: object;
    /**
     * Requested custom schemas described abstractly. Every provided schema's
     * custom field must be specified, otherwise a bad request error is
     * returned. If a new custom schema specifier is provided, then it will be
     * added to the work, otherwise if a custom schema is omitted from the
     * specifier, it remains unmodified.
     */
    custom_schema_spec?: CustomSchemaSpec;
    /** Updated description of the account. */
    description?: string;
    /** Updated display name for the account. */
    display_name?: string;
    /** Updated list of company's domain names. Example - ['devrev.ai']. */
    domains?: string[];
    /** The environment of the Org. Defaults to 'production' if not specified. */
    environment?: OrgEnvironment;
    /** Updated External Refs of account. */
    external_refs?: string[];
    /**
     * The ID of account to update.
     * @example "ACC-12345"
     */
    id: string;
    /** Updated industry of the company. */
    industry?: string | null;
    /** Updated the source that connected/introduced/referred the company. */
    lead_source?: string | null;
    /**
     * Artifact ID of the account's logo.
     * @example "ARTIFACT-12345"
     */
    logo_id?: string | null;
    /** Updated list of the users owning this account. */
    owned_by?: string[];
    /** Updated phone numbers of the Account. */
    phone_numbers?: string[];
    /**
     * Schema fragment IDs associated with this account SOR.
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    schema_fragment_ids?: string[];
    /** Updates an object's stage. */
    stage?: AccountsUpdateRequestStage;
    /** Updated tags list associated with the account. */
    tags?: SetTagWithValue[];
    /** Updated tier of the account. */
    tier?: string | null;
    /**
     * Updated total sales revenue brought in by the company.
     * @format int64
     */
    total_revenue?: number;
    websites?: AccountsUpdateRequestWebsites;
}
/** accounts-update-request-artifacts */
export interface AccountsUpdateRequestArtifacts {
    /**
     * Sets the IDs to the provided artifact IDs.
     * @example ["ARTIFACT-12345"]
     */
    set?: string[];
}
/**
 * accounts-update-request-stage
 * Updates an object's stage.
 */
export interface AccountsUpdateRequestStage {
    /** The ID of the updated custom stage, otherwise unchanged if not set. */
    id: string;
    /** The updated notes for the stage, otherwise unchanged if not set. */
    notes?: string;
}
/** accounts-update-request-websites */
export interface AccountsUpdateRequestWebsites {
    /** Sets the websites field of the account. */
    set?: string[];
}
/**
 * accounts-update-response
 * Updated account object.
 */
export interface AccountsUpdateResponse {
    account: Account;
}
/**
 * accounts-upgrade-request
 * Response object containing infomation of accounts to be upgraded.
 */
export interface AccountsUpgradeRequest {
    /** Dev Organization id of Devorg to be upgraded. */
    dev_oid: string;
}
/**
 * accounts-upgrade-response
 * Response object containing infomation around upgrade.
 */
export type AccountsUpgradeResponse = object;
/** Specifies how the action is defined. */
export declare enum ActionExecutorType {
    Rego = "rego"
}
/**
 * adaptable-request-config
 * AdaptableRequestConfig, versatile configuration for tailored API
 * interactions and authentication.
 */
export interface AdaptableRequestConfig {
    /**
     * Define the template for making HTTP requests, including URL, method,
     * headers, query parameters, body (if needed), and optional JQ filtering.
     */
    request_config?: HttpRequestTemplate;
    /**
     * Choose the authorization method, configuration (predefined settings) or
     * function (custom code).
     */
    type?: AdaptableRequestConfigType;
}
/**
 * Choose the authorization method, configuration (predefined settings) or
 * function (custom code).
 */
export declare enum AdaptableRequestConfigType {
    Config = "config",
    Function = "function"
}
/** addon-rule */
export type AddonRule = AtomBase & {
    addon_sku: SkuSummary;
    /** Type of association between SKU and addon, defaults to optional. */
    associativity?: AddonRuleAssociativity;
    /** Description of the SKU rules. */
    description?: string;
    product: PartSummary;
    subscription_sku: SkuSummary;
};
/** Type of association between SKU and addon, defaults to optional. */
export declare enum AddonRuleAssociativity {
    Mandatory = "mandatory",
    Optional = "optional"
}
/** addon-rule-summary */
export type AddonRuleSummary = AtomBaseSummary;
/** addon-rules-create-request */
export interface AddonRulesCreateRequest {
    /** Addon SKU for which the rule is defined. */
    addon_id: string;
    /** Type of association between SKU and addon, defaults to optional. */
    associativity?: AddonRuleAssociativity;
    /** Description of the addon rule. */
    description?: string;
    /** Human readable name of the addon rule. */
    name: string;
    /** Subscription SKU for which the rule is defined. */
    subscription_sku_id: string;
}
/** addon-rules-create-response */
export interface AddonRulesCreateResponse {
    addon_rule: AddonRule;
}
/** addon-rules-delete-request */
export interface AddonRulesDeleteRequest {
    /** The addon rule object's DON. */
    id: string;
}
/** addon-rules-get-request */
export interface AddonRulesGetRequest {
    /** The addon rule object's DON. */
    id: string;
}
/** addon-rules-get-response */
export interface AddonRulesGetResponse {
    addon_rule: AddonRule;
}
/** addon-rules-list-request */
export interface AddonRulesListRequest {
    /**
     * The list of addon SKU DONs for which addon rulesare to be
     * aggregated.
     */
    addon_ids?: string[];
    /** The associativity for which the addon rules need to be aggregated */
    associativity?: AddonRuleAssociativity[];
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** The list of addon rule DONs which are to be aggregated. */
    ids?: string[];
    /**
     * The maximum number of addon rules to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /**
     * The list of product DONs for which addon rulesare to be aggregated.
     * @example ["PROD-12345"]
     */
    product_ids?: string[];
    /**
     * List of fields to sort the addon rules, by and how to sort them.
     * Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
    /**
     * The list of subscription SKU DONs for which addon rulesare to be
     * aggregated.
     */
    subscription_sku_ids?: string[];
}
/** addon-rules-list-response */
export interface AddonRulesListResponse {
    /** The list of addon rules. */
    addon_rules: AddonRule[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/** addon-rules-update-request */
export interface AddonRulesUpdateRequest {
    /** Type of association between SKU and addon, defaults to optional. */
    associativity?: AddonRuleAssociativity;
    /** Description of the addon rule. */
    description?: string;
    /** The addon rule object's DON. */
    id: string;
    /** Human readable name of the addon rule. */
    name?: string;
}
/** addon-rules-update-response */
export interface AddonRulesUpdateResponse {
    addon_rule: AddonRule;
}
/**
 * address
 * Address details of the customer.
 */
export interface Address {
    /** Address line 1 (e.g., street, PO Box, or company name). */
    address_line1: string;
    /** Address line 2 (e.g., apartment, suite, unit, or building). */
    address_line2?: string;
    /** City, district, suburb, town, or village. */
    city: string;
    /** Country. */
    country: string;
    /** ZIP or postal code. */
    postal_code?: string;
    /** State, county, province, or region. */
    state?: string;
}
/**
 * aggregated-schema
 * List of custom fields from multiple source fragments.
 */
export interface AggregatedSchema {
    /** True if at least one custom schema fragment has a newer version. */
    can_upgrade?: boolean;
    /** The conditions associated with the fields. */
    conditions?: CustomSchemaFragmentCondition[];
    /** List of all custom fields in this schema. */
    custom_fields: SchemaFieldDescriptor[];
    /** Description of the schema. */
    description?: string;
    /** Leaf type of the fragments being aggregated. */
    leaf_type?: string;
    missing_tenant_fragment_id?: AtomSummary;
    stage_diagram_id?: StageDiagramSummary;
    /** List of all composite schemas used by stock fields. */
    stock_composite_schemas: CompositeSchema[];
    /** The stock field overrides. */
    stock_field_overrides?: StockFieldOverride[];
    /** List of all stock fields in this schema. */
    stock_fields: SchemaFieldDescriptor[];
    /**
     * Subtype of the custom type fragment used to populate the same in
     * the leaf type.
     */
    subtype?: string;
    /** Display name of the subtype. */
    subtype_display_name?: string;
    /** Name of the schema. */
    title?: string;
    /**
     * Qualified names of fields the caller did not select in a create or
     * update call.
     */
    unselected_fields?: string[];
}
/** aggregated-schema-get-request */
export interface AggregatedSchemaGetRequest {
    /** The list of custom schema fragment DONs which are to be aggregated. */
    custom_schema_fragment_ids: string[];
    /**
     * The leaf type. Used for inferring the default stage diagram and
     * tenant fragment ID.
     */
    leaf_type?: string;
    /** Per object schema, if associated with the leaf type. */
    per_object_schema?: FieldDescriptor[];
    /** The stock schema fragment which is to be aggregated. */
    stock_schema_fragment_id?: string;
}
/** aggregated-schema-get-request-private */
export interface AggregatedSchemaGetRequestPrivate {
    /** The list of custom schema fragment DONs which are to be aggregated. */
    custom_schema_fragment_ids: string[];
    /** Per object schema, if associated with the leaf type. */
    per_object_schema?: FieldDescriptor[];
    /** The stock schema fragment which is to be aggregated. */
    stock_schema_fragment_id?: string;
}
/** aggregated-schema-get-response */
export interface AggregatedSchemaGetResponse {
    /** List of custom fields from multiple source fragments. */
    schema: AggregatedSchema;
}
/** aggregated-schema-get-response-private */
export interface AggregatedSchemaGetResponsePrivate {
    /** List of custom fields from multiple source fragments. */
    schema: AggregatedSchemaPrivate;
}
/**
 * aggregated-schema-private
 * List of custom fields from multiple source fragments.
 */
export interface AggregatedSchemaPrivate {
    /** True if at least one custom schema fragment has a newer version. */
    can_upgrade?: boolean;
    /** The conditions associated with the fields. */
    conditions?: CustomSchemaFragmentCondition[];
    /** List of all custom fields in this schema. */
    custom_fields: FieldDescriptor[];
    /** Description of the schema. */
    description?: string;
    /** Leaf type of the fragments being aggregated. */
    leaf_type?: string;
    missing_tenant_fragment_id?: AtomSummary;
    stage_diagram_id?: StageDiagramSummary;
    /** List of all composite schemas used by stock fields. */
    stock_composite_schemas: CompositeSchema[];
    /** The stock field overrides. */
    stock_field_overrides?: StockFieldOverride[];
    /** List of all stock fields in this schema. */
    stock_fields: FieldDescriptor[];
    /**
     * Subtype of the custom type fragment used to populate the same in
     * the leaf type.
     */
    subtype?: string;
    /** Display name of the subtype. */
    subtype_display_name?: string;
    /** Name of the schema. */
    title?: string;
    /**
     * Qualified names of fields the caller did not select in a create or
     * update call.
     */
    unselected_fields?: string[];
}
/**
 * aggregation-detail
 * Stores aggregation type and dimension information.
 */
export interface AggregationDetail {
    /**
     * Aggregation type to be used while aggregating the metering data for the
     * UOM. 1] Sum - sum of all the values for the meter in a given period Ex.
     * { M1:2, M1:4 } => {M1:6} 2] Minimum - min of all the values for the
     * meter in a given period Ex. { M1:2, M1:4 } => {M1:2} 3] Maximum - max
     * of all the values for the meter in a given period Ex. { M1:2, M1:4 } =>
     * {M1:4} 4] Unique Count - Sum of distinct unique dimension observed for
     * the meter in the given period (not considering the data from the
     * previous billing period) Ex. January {M1:{VM:VM0}}, February
     * {M1:{VM:VM1}, M1:{VM:VM2}, M1:{VM:VM1}} => {M1:2} 5] Running Total -
     * Sum of distinct active unique dimension observed for a meter in the
     * given period, taking into consideration the active data from the
     * previous billing cycle Ex. January {M1:{VM:VM0,on}, {M1:{VM:VM1,off}
     * February {M1:{VM:VM2, on}, M1:{VM:VM2, off}, M1:{VM:VM3, on}} => {M1:3}
     * 6] Duration - Sum of distinct active unique dimension duration for a
     * meter in the given period, taking into consideration the active data
     * from the previous month Ex. January15 {M1:{VM:VM0,on, 4}} February15
     * {M1:{VM:VM0,off}, February18 {M1:{VM:VM1,on,5} => M1->
     * 30*4*charge_per_day + 10*5*charge_per_day 7] Latest - consider the
     * latest/last meter in the given period 8] Oldest - consider the
     * oldest/first record in the given period.
     */
    aggregation_type: AggregationDetailAggregationType;
    /**
     * Unique dimension if provided to be considered for grouping metering
     * data for the UOM.
     */
    unique_dimension?: string;
}
/**
 * Aggregation type to be used while aggregating the metering data for the
 * UOM. 1] Sum - sum of all the values for the meter in a given period Ex.
 * { M1:2, M1:4 } => {M1:6} 2] Minimum - min of all the values for the
 * meter in a given period Ex. { M1:2, M1:4 } => {M1:2} 3] Maximum - max
 * of all the values for the meter in a given period Ex. { M1:2, M1:4 } =>
 * {M1:4} 4] Unique Count - Sum of distinct unique dimension observed for
 * the meter in the given period (not considering the data from the
 * previous billing period) Ex. January {M1:{VM:VM0}}, February
 * {M1:{VM:VM1}, M1:{VM:VM2}, M1:{VM:VM1}} => {M1:2} 5] Running Total -
 * Sum of distinct active unique dimension observed for a meter in the
 * given period, taking into consideration the active data from the
 * previous billing cycle Ex. January {M1:{VM:VM0,on}, {M1:{VM:VM1,off}
 * February {M1:{VM:VM2, on}, M1:{VM:VM2, off}, M1:{VM:VM3, on}} => {M1:3}
 * 6] Duration - Sum of distinct active unique dimension duration for a
 * meter in the given period, taking into consideration the active data
 * from the previous month Ex. January15 {M1:{VM:VM0,on, 4}} February15
 * {M1:{VM:VM0,off}, February18 {M1:{VM:VM1,on,5} => M1->
 * 30*4*charge_per_day + 10*5*charge_per_day 7] Latest - consider the
 * latest/last meter in the given period 8] Oldest - consider the
 * oldest/first record in the given period.
 */
export declare enum AggregationDetailAggregationType {
    Duration = "duration",
    Latest = "latest",
    Maximum = "maximum",
    Minimum = "minimum",
    Oldest = "oldest",
    RunningTotal = "running_total",
    Sum = "sum",
    UniqueCount = "unique_count"
}
/**
 * aggregation-detail-summary
 * Stores aggregation type and dimension information.
 */
export type AggregationDetailSummary = object;
/** ai-agent */
export type AiAgent = AtomBase & {
    /** The goal the agent is trying to achieve. */
    goal: string;
    /** The guidance the agent is following to achieve the goal. */
    guidance?: string;
    /** The skills the agent is using to achieve the goal. */
    skills?: AiAgentSkill[];
};
/**
 * ai-agent-event
 * An event to be consumed by an AI agent.
 */
export interface AiAgentEvent {
    /**
     * Text input message for the AI agent event. Could be human or agent
     * message.
     */
    input_message?: AiAgentEventInputMessage;
    /** Previous skill call outputs to be used by the AI agent. */
    skill_call_outputs?: AiAgentEventSkillCallOutputs;
    type?: 'input_message' | 'skill_call_outputs';
}
/**
 * ai-agent-event-input-message
 * Text input message for the AI agent event. Could be human or agent
 * message.
 */
export interface AiAgentEventInputMessage {
    /**
     * The text message of the AI agent event.
     * @maxLength 8192
     */
    message: string;
}
/**
 * ai-agent-event-skill-call-outputs
 * Previous skill call outputs to be used by the AI agent.
 */
export interface AiAgentEventSkillCallOutputs {
    /** List of previous skill call outputs to be used by the AI agent. */
    skill_call_outputs: AiAgentEventSkillCallOutputsSkillCallOutput[];
}
/**
 * ai-agent-event-skill-call-outputs-skill-call-output
 * Output of a previous skill call to be used by the AI agent.
 */
export interface AiAgentEventSkillCallOutputsSkillCallOutput {
    /** The output of the skill call. */
    output: object;
    /**
     * The ID of the skill call execution instance
     * @maxLength 128
     */
    skill_call_id: string;
    /**
     * The name of the skill.
     * @maxLength 512
     */
    skill_name: string;
}
/** Status of the AI agent event when consumed synchronously. */
export declare enum AiAgentEventStatus {
    Failure = "failure",
    Success = "success",
    WaitingOnInput = "waiting_on_input"
}
/**
 * ai-agent-events-execute-async-response
 * Response object for consuming an event asynchronously.
 */
export type AiAgentEventsExecuteAsyncResponse = object;
/**
 * ai-agent-events-execute-request
 * Request object to consume an event for an AI agent.
 */
export interface AiAgentEventsExecuteRequest {
    /** The ID of the AI agent that will consume the event */
    agent: string;
    /** Context for the AI agent event. */
    context?: AiAgentEventsExecuteRequestContext;
    /** An event to be consumed by an AI agent. */
    event: AiAgentEvent;
    /**
     * Whether to execute the skill or not. If true, the AI agent will
     * execute the skill and return FinalResponse. If false, caller will
     * execute skill, the AI agent will return StepResponse.
     */
    execute_skill?: boolean;
    /** The ID of DevRev object where agent interactions are happening. */
    session_object: string;
}
/**
 * ai-agent-events-execute-request-context
 * Context for the AI agent event.
 */
export interface AiAgentEventsExecuteRequestContext {
    /**
     * The additional context for the AI agent event. This will be used on
     * per event basis.
     * @maxLength 1024
     */
    additional_context?: string;
    /**
     * The initial context for the AI agent event. This will be used at
     * the start of Agent Session
     * @maxLength 4096
     */
    initial_context?: string;
}
/**
 * ai-agent-events-execute-sync-response
 * Response object for consuming an event synchronously.
 */
export interface AiAgentEventsExecuteSyncResponse {
    /**
     * Final response object after skill execution for consuming an event
     * synchronously.
     */
    final?: AiAgentEventsExecuteSyncResponseFinalResponse;
    response?: 'final' | 'step';
    step?: AiAgentEventsExecuteSyncResponseStepResponse;
}
/**
 * ai-agent-events-execute-sync-response-final-response
 * Final response object after skill execution for consuming an event
 * synchronously.
 */
export interface AiAgentEventsExecuteSyncResponseFinalResponse {
    /** The final response of the AI agent event. */
    response: string;
    /** Status of the AI agent event when consumed synchronously. */
    status: AiAgentEventStatus;
}
/** ai-agent-events-execute-sync-response-step-response */
export interface AiAgentEventsExecuteSyncResponseStepResponse {
    /**
     * AI message step response for the AI agent event. Contains text response
     * generated by the AI agent. Caller should send the message directly to
     * the user.
     */
    ai_message?: AiAgentEventsExecuteSyncResponseStepResponseAiMessage;
    /**
     * Skill call messages step response for the AI agent event. Contains the
     * skills to be executed along with the corresponding arguments. Caller
     * should execute the skills with given schema.
     */
    skill_call_messages?: AiAgentEventsExecuteSyncResponseStepResponseSkillCallMessages;
    type?: 'ai_message' | 'skill_call_messages';
}
/**
 * ai-agent-events-execute-sync-response-step-response-ai-message
 * AI message step response for the AI agent event. Contains text response
 * generated by the AI agent. Caller should send the message directly to
 * the user.
 */
export interface AiAgentEventsExecuteSyncResponseStepResponseAiMessage {
    /** AI message response */
    message: string;
}
/**
 * ai-agent-events-execute-sync-response-step-response-skill-call-messages
 * Skill call messages step response for the AI agent event. Contains the
 * skills to be executed along with the corresponding arguments. Caller
 * should execute the skills with given schema.
 */
export interface AiAgentEventsExecuteSyncResponseStepResponseSkillCallMessages {
    /** List of skill call messages step response for the AI agent event. */
    skill_call_messages: AiAgentEventsExecuteSyncResponseStepResponseSkillCallMessagesSkillCallMessage[];
}
/**
 * ai-agent-events-execute-sync-response-step-response-skill-call-messages-skill-call-message
 * Skill call message step response for the AI agent event.
 */
export interface AiAgentEventsExecuteSyncResponseStepResponseSkillCallMessagesSkillCallMessage {
    /** The arguments for the skill call. */
    args: object;
    /**
     * The ID of the skill call execution instance
     * @maxLength 128
     */
    skill_call_id: string;
    /**
     * The name of the skill.
     * @maxLength 512
     */
    skill_name: string;
}
/** ai-agent-session */
export type AiAgentSession = AtomBase & {
    agent: AtomSummary;
    /**
     * The memory to store session information like message and skill
     * execution history.
     */
    memory?: AiAgentSessionMemory;
    /**
     * The ID of the surface associated with the session. This could be
     * related to any DevRev object with agent interactions happening on
     * the timeline or spacebar session.
     */
    session_object: string;
};
/**
 * ai-agent-session-memory
 * The memory to store session information like message and skill
 * execution history.
 */
export interface AiAgentSessionMemory {
    /** The actions performed by agent and user during the session. */
    memory?: object;
}
/** ai-agent-session-summary */
export type AiAgentSessionSummary = AtomBaseSummary;
/**
 * ai-agent-sessions-get-request
 * Request object to get an AI agent session.
 */
export interface AiAgentSessionsGetRequest {
    /** The ID of the AI agent session to get. */
    id: string;
}
/**
 * ai-agent-sessions-get-response
 * Response object for getting an AI agent session.
 */
export interface AiAgentSessionsGetResponse {
    session: AiAgentSession;
}
/**
 * ai-agent-sessions-list-request
 * Request object to list sessions.
 */
export interface AiAgentSessionsListRequest {
    /** The ID of the AI agent for which the sessions are filtered. */
    agent?: string;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of AI agent sessions to return per page. The
     * default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /**
     * The ID of DevRev object where agent interactions are happening.
     * @minLength 1
     * @maxLength 128
     */
    session_object?: string;
}
/**
 * ai-agent-sessions-list-response
 * Response object for listing sessions.
 */
export interface AiAgentSessionsListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The returned AI agent sessions. */
    sessions: AiAgentSession[];
}
/**
 * ai-agent-skill
 * A skill that the agent uses to achieve its goal.
 */
export interface AiAgentSkill {
    /** The callback URL for the asynchronous execution of the skill. */
    callback_url?: string;
    /** A description of the skill. */
    description: string;
    /** The schema for the input the skill expects. */
    input_schema: object;
    /** The name of the skill. */
    name: string;
    /** The schema for the output the skill produces. */
    output_schema?: object;
}
/** ai-agent-summary */
export type AiAgentSummary = AtomBaseSummary;
/**
 * ai-agents-create-request
 * Request object to create a new AI agent.
 */
export interface AiAgentsCreateRequest {
    /**
     * The goal the agent is trying to achieve.
     * @maxLength 512
     */
    goal: string;
    /**
     * The guidance the agent is following to achieve the goal.
     * @maxLength 65536
     */
    guidance?: string;
    skills?: AiAgentsCreateRequestSkills;
}
/** ai-agents-create-request-skills */
export interface AiAgentsCreateRequestSkills {
    /**
     * Sets AI agent skills to the provided skills.
     * @maxItems 16
     */
    set?: AiAgentSkill[];
}
/**
 * ai-agents-create-response
 * Response object for creating a new AI agent.
 */
export interface AiAgentsCreateResponse {
    agent: AiAgent;
}
/**
 * ai-agents-delete-request
 * Request object to delete an AI agent.
 */
export interface AiAgentsDeleteRequest {
    /** The ID of the AI agent to delete. */
    id: string;
}
/**
 * ai-agents-delete-response
 * Response object for deleting an AI agent.
 */
export type AiAgentsDeleteResponse = object;
/**
 * ai-agents-get-request
 * Request object to get an AI agent.
 */
export interface AiAgentsGetRequest {
    /** The ID of the AI agent to get. */
    id: string;
}
/**
 * ai-agents-get-response
 * Response object for getting an AI agent.
 */
export interface AiAgentsGetResponse {
    agent: AiAgent;
}
/**
 * ai-agents-list-request
 * Request object to list agents.
 */
export interface AiAgentsListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of AI agents to return per page. The default is
     * '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
}
/**
 * ai-agents-list-response
 * Response object for listing agents.
 */
export interface AiAgentsListResponse {
    /** The returned AI agents. */
    agents: AiAgent[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/**
 * ai-agents-update-request
 * Request object to update an AI agent.
 */
export interface AiAgentsUpdateRequest {
    /**
     * Sets AI agent goal to the provided goal.
     * @maxLength 512
     */
    goal?: string;
    /**
     * Sets guidance rules to the provided guidance rules.
     * @maxLength 65536
     */
    guidance?: string;
    /** The ID of the AI agent to update. */
    id: string;
    skills?: AiAgentsUpdateRequestSkills;
}
/** ai-agents-update-request-skills */
export interface AiAgentsUpdateRequestSkills {
    /**
     * Sets AI agent skills to the provided skills.
     * @maxItems 16
     */
    set?: AiAgentSkill[];
}
/**
 * ai-agents-update-response
 * Response object for updating an AI agent.
 */
export interface AiAgentsUpdateResponse {
    agent: AiAgent;
}
/** airdrop-capabilities-get-request */
export type AirdropCapabilitiesGetRequest = object;
/**
 * airdrop-capabilities-get-response
 * Response containing all import capabilities.
 */
export interface AirdropCapabilitiesGetResponse {
    /**
     * List of external system capabilities of possible imports and their
     * constraints.
     */
    external_system_capabilities: ExternalSystemCapabilities[];
}
/**
 * airdrop-external-extractor-message-request
 * External extractor response message.
 */
export interface AirdropExternalExtractorMessageRequest {
    /** Event validation data. */
    event_context: AirdropExternalExtractorMessageRequestEventContext;
    /** External extractor processing result. */
    event_data: AirdropExternalExtractorMessageRequestEventData;
    event_type: AirdropExternalExtractorMessageRequestEventType;
    /**
     * State that will be returned to the external extractor on the next
     * invocation.
     */
    extractor_state: string;
}
/**
 * airdrop-external-extractor-message-request-artifact
 * One unit of data to be ingested by ADaaS platform.
 */
export interface AirdropExternalExtractorMessageRequestArtifact {
    /** Artifact ID. */
    id: string;
    /**
     * Number of items inside the artifact.
     * @min 0
     * @max 18446744073709552000
     */
    item_count: number;
    /** Artifact type. */
    item_type: string;
}
/**
 * airdrop-external-extractor-message-request-error-record
 * External extractor processing error.
 */
export interface AirdropExternalExtractorMessageRequestErrorRecord {
    /** Error message. */
    message: string;
}
/**
 * airdrop-external-extractor-message-request-event-context
 * Event validation data.
 */
export interface AirdropExternalExtractorMessageRequestEventContext {
    /** Unique request-response identifier. */
    uuid: string;
}
/**
 * airdrop-external-extractor-message-request-event-data
 * External extractor processing result.
 */
export interface AirdropExternalExtractorMessageRequestEventData {
    /** Extracted artifacts that will be ingested by ADaaS. */
    artifacts?: AirdropExternalExtractorMessageRequestArtifact[];
    /**
     * Backoff delay in seconds.
     * @min 0
     * @max 18446744073709552000
     */
    delay?: number;
    /** External extractor processing error. */
    error?: AirdropExternalExtractorMessageRequestErrorRecord;
    /** Possible external source units. */
    external_sync_units?: AirdropExternalExtractorMessageRequestExternalSyncUnit[];
    /**
     * Progress of the current stage 0-100.
     * @min 0
     * @max 100
     */
    progress?: number;
}
export declare enum AirdropExternalExtractorMessageRequestEventType {
    ExtractionAttachmentsDelay = "extraction_attachments_delay",
    ExtractionAttachmentsDeleteDone = "extraction_attachments_delete_done",
    ExtractionAttachmentsDeleteError = "extraction_attachments_delete_error",
    ExtractionAttachmentsDone = "extraction_attachments_done",
    ExtractionAttachmentsError = "extraction_attachments_error",
    ExtractionAttachmentsProgress = "extraction_attachments_progress",
    ExtractionDataDelay = "extraction_data_delay",
    ExtractionDataDeleteDone = "extraction_data_delete_done",
    ExtractionDataDeleteError = "extraction_data_delete_error",
    ExtractionDataDone = "extraction_data_done",
    ExtractionDataError = "extraction_data_error",
    ExtractionDataProgress = "extraction_data_progress",
    ExtractionExternalSyncUnitsDone = "extraction_external_sync_units_done",
    ExtractionExternalSyncUnitsError = "extraction_external_sync_units_error",
    ExtractionMetadataDone = "extraction_metadata_done",
    ExtractionMetadataError = "extraction_metadata_error"
}
/**
 * airdrop-external-extractor-message-request-external-sync-unit
 * External extractor sync unit.
 */
export interface AirdropExternalExtractorMessageRequestExternalSyncUnit {
    /** External sync unit description. */
    description: string;
    /** External sync unit ID. */
    id: string;
    /**
     * External sync unit size.
     * @min 0
     * @max 18446744073709552000
     */
    item_count: number;
    /** External sync unit name. */
    name: string;
}
/** airdrop-external-extractor-message-response */
export type AirdropExternalExtractorMessageResponse = object;
/**
 * airdrop-external-sync-units-discover-request
 * Request for external sync unit discovery on a given external system of
 * records.
 */
export interface AirdropExternalSyncUnitsDiscoverRequest {
    /**
     * External import slug which will perform external sync unit
     * discovery, only populated for adaas external system type.
     */
    external_import_slug?: string;
    external_system_type: ExternalSystemType;
    /**
     * Import slug which will perform external sync unit discovery, only
     * populated for adaas external system type.
     */
    import_slug?: string;
    /** Keyring that will be used for external sync unit discovery. */
    keyring: string;
    /**
     * Snap in slug which will perform external sync unit discovery, only
     * populated for adaas external system type.
     */
    snap_in_slug?: string;
}
/** airdrop-external-sync-units-discover-response */
export type AirdropExternalSyncUnitsDiscoverResponse = object;
/** airdrop-external-sync-units-list-filter */
export interface AirdropExternalSyncUnitsListFilter {
    /** External sync unit name. */
    external_sync_unit_name?: string;
    external_system_type?: ExternalSystemType;
}
/**
 * airdrop-external-sync-units-list-request
 * Request to list external sync units.
 */
export interface AirdropExternalSyncUnitsListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    filter?: AirdropExternalSyncUnitsListFilter;
    /** Keyring that will be used for external sync unit listing. */
    keyring: string;
    /**
     * The maximum number of items to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
}
/**
 * airdrop-external-sync-units-list-response
 * List external sync units response.
 */
export interface AirdropExternalSyncUnitsListResponse {
    /** External sync units that were requested. */
    external_sync_units: ExternalSyncUnit[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/**
 * airdrop-periodic-sync-update
 * Periodic sync configuration update.
 */
export interface AirdropPeriodicSyncUpdate {
    /** Allowed sync directions for the periodic sync configuration. */
    periodic_sync_directions: SyncDirection[];
    /**
     * Periodic sync period in minutes.
     * @format int32
     */
    periodic_sync_period_minutes?: number;
    /** Type of sync preferences. */
    sync_type: SyncUnitSyncType;
}
/**
 * airdrop-recipe-associated-filter
 * A filter associated to a certain type, with metadata about when and by
 * whom it was associated.
 */
export interface AirdropRecipeAssociatedFilter {
    /** The user ID of the user who associated the filter. */
    associated_by: string;
    /**
     * The timestamp when the association happened.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    association_date: string;
    /** The external type that the filter is associated with. */
    external_type: string;
    /**
     * A filter for modifying the scope of an import/sync, that will accept
     * everything that matches all of the field conditions. Filters are
     * immutable, therefore a given ID always references the same logic.
     */
    filter?: AirdropRecipeFilter;
    /** The subtype of the external type, if it is a subtype. */
    subtype?: string;
}
/** airdrop-recipe-associated-filters-current-get-request */
export interface AirdropRecipeAssociatedFiltersCurrentGetRequest {
    /** The sync unit for which the current filters are retrieved. */
    sync_unit: string;
}
/** airdrop-recipe-associated-filters-current-get-response */
export interface AirdropRecipeAssociatedFiltersCurrentGetResponse {
    /** The filters in force at the varios subtypes. */
    filters: AirdropRecipeAssociatedFilter[];
}
/**
 * airdrop-recipe-associated-filters-get-request
 * Request to retrieve the associated filter of a certain target (sync
 * unit - external type combination). It can retrieve the currently
 * associated one, or one as of some history ID.
 */
export interface AirdropRecipeAssociatedFiltersGetRequest {
    /**
     * The run for which to find the filter. If omitted, the current
     * filter will be provided.
     */
    sync_history?: string;
    target: AirdropRecipeExternalTypeContext;
}
/** airdrop-recipe-associated-filters-get-response */
export interface AirdropRecipeAssociatedFiltersGetResponse {
    /**
     * A filter associated to a certain type, with metadata about when and by
     * whom it was associated.
     */
    filter?: AirdropRecipeAssociatedFilter;
}
/** airdrop-recipe-enum-condition */
export interface AirdropRecipeEnumCondition {
    operator: AirdropRecipeEnumConditionOperator;
    /**
     * The values selected, must match the 'value' field in the enum
     * values listed in airdrop.recipe.filter-options.get.
     */
    values: string[];
}
export declare enum AirdropRecipeEnumConditionOperator {
    AnyOf = "any_of",
    NoneOf = "none_of"
}
/** airdrop-recipe-enum-value */
export interface AirdropRecipeEnumValue {
    /** Additional explanantion on the meaning of the value. */
    description: string;
    /** The human-readable name of the enum value. */
    name: string;
    /** The underlying value. */
    value: string;
}
/** airdrop-recipe-external-type-context */
export interface AirdropRecipeExternalTypeContext {
    /** The external type name. */
    external_type: string;
    /** The subtype of the external type, if it is a subtype. */
    subtype?: string;
    /** The sync unit of which the external type is part of. */
    sync_unit: string;
}
/**
 * airdrop-recipe-field-filtering-condition
 * Filtering condition on a field.
 */
export type AirdropRecipeFieldFilteringCondition = (AirdropRecipeEnumCondition | AirdropRecipeListOfEnumCondition | AirdropRecipeTimestampCondition) & {
    /**
     * The human-readable name of the field. This is preserved so that a
     * filter can be presented independently from an underlying schema.
     */
    display_name: string;
    /** The name of a field by which it can be identified in the input. */
    field_name: string;
    /**
     * What to do if the field is null. If false, which is the default,
     * the condition will evaluate to false, even if the operator is
     * none_of.
     */
    if_null?: boolean;
    /** The type of the field. */
    type: AirdropRecipeFieldFilteringConditionType;
};
/** The type of the field. */
export declare enum AirdropRecipeFieldFilteringConditionType {
    Enum = "enum",
    ListOfEnum = "list_of_enum",
    Timestamp = "timestamp"
}
/**
 * airdrop-recipe-filter
 * A filter for modifying the scope of an import/sync, that will accept
 * everything that matches all of the field conditions. Filters are
 * immutable, therefore a given ID always references the same logic.
 */
export type AirdropRecipeFilter = AtomBase & {
    /** The conditions on the fields. */
    field_conditions: AirdropRecipeFieldFilteringCondition[];
};
/**
 * airdrop-recipe-filter-options-get-request
 * Retrieves the filtering options (which fields can be used to setup
 * filters), for the given sync unit and external item type.
 */
export interface AirdropRecipeFilterOptionsGetRequest {
    target: AirdropRecipeExternalTypeContext;
}
/** airdrop-recipe-filter-options-get-response */
export interface AirdropRecipeFilterOptionsGetResponse {
    /** The fields that may be used for filtering. */
    fields: AirdropRecipeFilterableFieldDescription[];
}
/** airdrop-recipe-filterable-enum-description */
export interface AirdropRecipeFilterableEnumDescription {
    /** If the type is []enum (that is a multiselect). */
    is_list: boolean;
    /** The possible enum values. */
    values: AirdropRecipeEnumValue[];
}
/**
 * airdrop-recipe-filterable-field-description
 * The description of a filterable field.
 */
export type AirdropRecipeFilterableFieldDescription = (AirdropRecipeFilterableEnumDescription | AirdropRecipeFilterableTimestampDescription) & {
    /** The display name of the field. */
    display_name: string;
    /** The name of a field by which it can be identified in the input. */
    field_name: string;
    /**
     * If the given field can be missing (for example not be present or be
     * null).
     */
    is_nullable: boolean;
    /** The type of the fields value. */
    value_type: AirdropRecipeFilterableFieldDescriptionValueType;
};
/** The type of the fields value. */
export declare enum AirdropRecipeFilterableFieldDescriptionValueType {
    Enum = "enum",
    Timestamp = "timestamp"
}
/** airdrop-recipe-filterable-timestamp-description */
export type AirdropRecipeFilterableTimestampDescription = object;
/** airdrop-recipe-filters-associate-request */
export interface AirdropRecipeFiltersAssociateRequest {
    /**
     * The filter to associate. If omitted, the associated filter will be
     * removed from the given external type.
     */
    filter?: string;
    target: AirdropRecipeExternalTypeContext;
}
/** airdrop-recipe-filters-associate-response */
export type AirdropRecipeFiltersAssociateResponse = object;
/**
 * airdrop-recipe-filters-create-request
 * The settable properties of the new-created filter.
 */
export interface AirdropRecipeFiltersCreateRequest {
    /** The conditions on the fields. */
    field_conditions: AirdropRecipeFieldFilteringCondition[];
}
/**
 * airdrop-recipe-filters-create-response
 * The filter that was created.
 */
export interface AirdropRecipeFiltersCreateResponse {
    /**
     * A filter for modifying the scope of an import/sync, that will accept
     * everything that matches all of the field conditions. Filters are
     * immutable, therefore a given ID always references the same logic.
     */
    filter: AirdropRecipeFilter;
}
/**
 * airdrop-recipe-filters-get-request
 * Retrieves a filter by ID, irrespective of whether it is in any current
 * import/snyc.
 */
export interface AirdropRecipeFiltersGetRequest {
    /** Requested sync recipe filter ID. */
    id: string;
}
/**
 * airdrop-recipe-filters-get-response
 * The filter with the requested ID.
 */
export interface AirdropRecipeFiltersGetResponse {
    /**
     * A filter for modifying the scope of an import/sync, that will accept
     * everything that matches all of the field conditions. Filters are
     * immutable, therefore a given ID always references the same logic.
     */
    filter: AirdropRecipeFilter;
}
/** airdrop-recipe-list-of-enum-condition */
export interface AirdropRecipeListOfEnumCondition {
    operator: AirdropRecipeListOfEnumConditionOperator;
    /**
     * The values selected, must match the 'value' field in the enum
     * values listed in airdrop.recipe.filter-options.get.
     */
    values: string[];
}
export declare enum AirdropRecipeListOfEnumConditionOperator {
    ContainsAllOf = "contains_all_of",
    ContainsAnyOf = "contains_any_of",
    ContainsNoneOf = "contains_none_of",
    SubsetOf = "subset_of"
}
/** airdrop-recipe-timestamp-condition */
export interface AirdropRecipeTimestampCondition {
    /**
     * Select items with value for a date attribute being >= value of
     * 'after' param.
     * @format date
     * @example "2023-01-01"
     */
    after?: string;
    /**
     * Select items with value for a date attribute being <= value of
     * 'before' param.
     * @format date
     * @example "2023-01-01"
     */
    before?: string;
}
/**
 * airdrop-sync-modification-record-get-by-target-request
 * Request to get a sync modification record.
 */
export interface AirdropSyncModificationRecordGetByTargetRequest {
    /** Requested sync modification record's target object ID. */
    target_object: string;
}
/**
 * airdrop-sync-modification-record-get-by-target-response
 * Response containing the modification record.
 */
export interface AirdropSyncModificationRecordGetByTargetResponse {
    sync_modification_record: SyncModificationRecord;
}
/**
 * airdrop-sync-modification-record-get-request
 * Request to get a sync modification record.
 */
export interface AirdropSyncModificationRecordGetRequest {
    /** Requested sync modification record ID. */
    id: string;
}
/**
 * airdrop-sync-modification-record-get-response
 * Response containing the modification record.
 */
export interface AirdropSyncModificationRecordGetResponse {
    sync_modification_record: SyncModificationRecord;
}
/** airdrop-sync-unit-subscriber-update-list */
export interface AirdropSyncUnitSubscriberUpdateList {
    /** List of subscribers to add to the sync unit. */
    add?: string[];
    /** List of subscribers to remove from the sync unit. */
    remove?: string[];
    /** List of subscribers to set in the sync unit. */
    set?: string[];
}
/**
 * airdrop-sync-units-create-bulk-request
 * Request to create sync units.
 */
export interface AirdropSyncUnitsCreateBulkRequest {
    /** Sync unit create candidates. */
    sync_units: CreateSyncUnit[];
}
/**
 * airdrop-sync-units-create-bulk-response
 * Response containing all created sync units.
 */
export interface AirdropSyncUnitsCreateBulkResponse {
    /** Sync units that were created. */
    sync_units: SyncUnit[];
}
/**
 * airdrop-sync-units-create-request
 * Request to create a sync unit.
 */
export interface AirdropSyncUnitsCreateRequest {
    sync_unit: CreateSyncUnit;
}
/**
 * airdrop-sync-units-create-response
 * Response containing a created sync unit.
 */
export interface AirdropSyncUnitsCreateResponse {
    sync_unit: SyncUnit;
}
/**
 * airdrop-sync-units-get-request
 * Request to get a sync unit.
 */
export interface AirdropSyncUnitsGetRequest {
    /** Requested sync unit ID. */
    id: string;
}
/**
 * airdrop-sync-units-get-response
 * Response containing the requested sync unit.
 */
export interface AirdropSyncUnitsGetResponse {
    sync_unit: SyncUnit;
}
/**
 * airdrop-sync-units-history-request
 * Request to list sync unit history.
 */
export interface AirdropSyncUnitsHistoryRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** Sync unit that will be used for sync history listing. */
    id: string;
    /**
     * The maximum number of items to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
}
/**
 * airdrop-sync-units-history-response
 * List sync history response.
 */
export interface AirdropSyncUnitsHistoryResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** Historical records of syncs. */
    sync_history: SyncHistory[];
}
/** airdrop-sync-units-list-filter */
export interface AirdropSyncUnitsListFilter {
    external_system_type?: ExternalSystemType;
    /** ID of the user who imported the sync unit. */
    imported_by_id?: string;
    /** Keyring ID associated with the import */
    keyring_id?: string;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** The state of a sync progress. */
    state?: SyncProgressState;
    /** Sync unit name. */
    sync_unit_name?: string;
}
/**
 * airdrop-sync-units-list-request
 * Request to list sync units.
 */
export interface AirdropSyncUnitsListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    filter?: AirdropSyncUnitsListFilter;
    /**
     * The maximum number of sync units to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
}
/**
 * airdrop-sync-units-list-response
 * List sync units response.
 */
export interface AirdropSyncUnitsListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** Sync units that were requested. */
    sync_units: SyncUnit[];
}
/**
 * airdrop-sync-units-update-request
 * Request to update a sync unit.
 */
export interface AirdropSyncUnitsUpdateRequest {
    /** Sync unit on which the update should be performed. */
    id: string;
    /** New keyring with which the sync unit will be updated. */
    keyring?: string;
    /** Periodic sync configuration update. */
    periodic_sync?: AirdropPeriodicSyncUpdate;
    subscriber_ids?: AirdropSyncUnitSubscriberUpdateList;
}
/**
 * airdrop-sync-units-update-response
 * Response containing an updated sync unit.
 */
export interface AirdropSyncUnitsUpdateResponse {
    sync_unit: SyncUnit;
}
/**
 * airdrop-trigger-sync-units-action-request
 * Request for triggering an action on a sync unit.
 */
export interface AirdropTriggerSyncUnitsActionRequest {
    /** Available actions for a given SyncUnit. */
    action: SyncUnitAvailableActions;
    /** Sync unit on which the action should be triggered. */
    id: string;
}
/**
 * airdrop-trigger-sync-units-action-response
 * Response containing the sync unit on which the action was triggered.
 */
export interface AirdropTriggerSyncUnitsActionResponse {
    sync_unit: SyncUnit;
}
/**
 * allowed-currency-item
 * Allowed currency item.
 */
export interface AllowedCurrencyItem {
    /** Currency code. */
    currency_code?: string;
    /** Exchange rate of this currency with respect to the base currency. */
    currency_exchange_rate?: string;
    /** Is this currency deprecated. */
    is_deprecated?: boolean;
}
/**
 * amount-detail
 * It represents a specific time period for an associated amount. It
 * encapsulates information about the start date, end date, and the
 * corresponding monetary value. It is designed to facilitate calculations
 * and operations involving time-based amounts.
 */
export interface AmountDetail {
    /**
     * The value of the amount that is associated.
     * @format double
     */
    amount?: number;
    /**
     * The end point of the time range, indicating the date and time at
     * which the object's validity or relevance concludes.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    end_date?: string;
    /**
     * The starting point of the time range, indicating the date and time
     * from which the object's validity or relevance begins.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    start_date?: string;
    /**
     * Information/Description to be shown when cursor is held over
     * text/icon.
     */
    tooltip?: string;
}
/**
 * analytics-group
 * Preferences group for Analytics.
 */
export interface AnalyticsGroup {
    /** Segment profile access token for the organization. */
    segment_profile_access_token?: string;
    /** Segment space id for the organization. */
    segment_space_id?: string;
}
/**
 * annotation
 * annotation (key/value pairs) for part object.
 */
export interface Annotation {
    /** annotation key. */
    name?: string;
    /** Value for the annotation name, localized to the object. */
    value?: string;
}
/**
 * api-endpoint
 * API endpoint information.
 */
export interface ApiEndpoint {
    /**
     * Operations associated with this API, such as the HTTP Verb,
     * parameters, etc.
     */
    api_operations?: ApiOperation[];
    /** The URL of the API. */
    api_path?: string;
    /** The Host of the API. */
    host?: string;
}
/** api-endpoint-identifier */
export interface ApiEndpointIdentifier {
    /** The host information of the API endpoint. */
    host: string;
    /** The path information of the API endpoint. */
    path: string;
}
/**
 * api-operation
 * API operation summary information.
 */
export interface ApiOperation {
    /** Parameters associated with the API operation. */
    api_parameters?: string[];
    /** The RestAPI path of the discovered API operation. */
    api_path?: string;
    /** Tags associated with the API operation, as defined in the api file. */
    api_tags?: string[];
    /** FulfilledBy IDs per API operation. */
    fulfilled_by?: PartSummary[];
    /** The Http verb of the discovered API operation. */
    http_operation?: ApiOperationHttpOperation;
    /** Repo + file locations where the operation was detected. */
    locations?: RevLocationSummary[];
    /** Name of the API operation. */
    name?: string;
}
/** The Http verb of the discovered API operation. */
export declare enum ApiOperationHttpOperation {
    Connect = "connect",
    Delete = "delete",
    Get = "get",
    Head = "head",
    Options = "options",
    Patch = "patch",
    Post = "post",
    Put = "put",
    Trace = "trace"
}
/** app-fragment */
export type AppFragment = CustomSchemaFragmentBase & {
    /** App this fragment applies to. */
    app?: string;
};
/** app-fragment-private */
export type AppFragmentPrivate = CustomSchemaFragmentPrivateBase & {
    /** App this fragment applies to. */
    app?: string;
};
/** app-fragment-private-summary */
export type AppFragmentPrivateSummary = CustomSchemaFragmentPrivateBaseSummary;
/** app-fragment-summary */
export type AppFragmentSummary = CustomSchemaFragmentBaseSummary;
/**
 * app-preferences-group
 * Preferences group for App.
 */
export interface AppPreferencesGroup {
    /** Default app to open on login. */
    default_app?: string;
}
export declare enum AppRouteValue {
    Accounts = "accounts",
    BuildInsights = "build_insights",
    Contacts = "contacts",
    Customers = "customers",
    Inbox = "inbox",
    Lobby = "lobby",
    Parts = "parts",
    RevInsights = "rev_insights",
    Settings = "settings",
    Sprints = "sprints",
    SupportInsights = "support_insights",
    Tasks = "tasks",
    Trails = "trails",
    Unknown = "unknown",
    Updates = "updates",
    Works = "works"
}
/**
 * applies-to-part-filter
 * The filter for applies to part.
 */
export interface AppliesToPartFilter {
    /**
     * Whether to include items belonging to children of any of the
     * provided parts.
     */
    include_child_parts?: boolean;
    /**
     * Part IDs to filter on.
     * @example ["PROD-12345"]
     */
    parts: string[];
    parts_op?: AppliesToPartFilterPartsOpOperatorType;
}
export declare enum AppliesToPartFilterPartsOpOperatorType {
    Any = "any",
    NotAny = "not_any"
}
/**
 * approver-detail
 * Stores approver details along with the ordering.
 */
export interface ApproverDetail {
    /** Approver List with approver details. */
    member_details: ApproverMemberDetail[];
    /**
     * The order of the approver.
     * @format int32
     */
    order: number;
}
/** approver-info */
export interface ApproverInfo {
    /** Member List of approvers for the specified order */
    member_details: ApproverInfoApproverMemberInfo[];
    /**
     * The order of the approver.
     * @format int64
     */
    order: number;
}
/** approver-info-approver-member-info */
export interface ApproverInfoApproverMemberInfo {
    /** Approver status. */
    status?: ApproverStatus;
    /** The dev user id. */
    user_id: string;
}
/**
 * approver-member-detail
 * Approver member details containing user details and approval status.
 */
export interface ApproverMemberDetail {
    dev_user: UserSummary;
    /** User's approval status. */
    status: ApproverMemberDetailStatus;
}
/** User's approval status. */
export declare enum ApproverMemberDetailStatus {
    Approved = "approved",
    Pending = "pending",
    Rejected = "rejected"
}
/** Approver status. */
export declare enum ApproverStatus {
    Approved = "approved",
    Pending = "pending",
    Rejected = "rejected"
}
/**
 * archetype-link-summary
 * Link summary.
 */
export interface ArchetypeLinkSummary {
    /** ID of the link. */
    link_id?: string;
    /** Type of link used to define the relationship. */
    link_type?: string;
    /** The target object. */
    target?: string;
    /** Target object display ID. */
    target_display_id?: string;
    /** Target object type. */
    target_object_type?: string;
}
/**
 * archetype-metric-target
 * Metric with corresponding target values.
 */
export interface ArchetypeMetricTarget {
    /**
     * For breached metrics the time they entered into breach. This is the
     * same as what the target date was, unless the breach happened due to
     * a different policy starting to apply.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    breached_at?: string;
    /**
     * For completed metrics the time (in minutes) it took to complete
     * them. (Taking into account the schedule if any).
     * @format int32
     */
    completed_in?: number;
    /**
     * If true, the schedule attached to this metric is out of schedule at
     * the time of the query.
     */
    is_out_of_schedule?: boolean;
    metric_definition: MetricDefinitionSummary;
    /**
     * The next time the schedule will change its state, if such is known.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    next_schedule_transition?: string;
    org_schedule?: OrgScheduleSummary;
    /**
     * Time in minutes that remains on a paused metric.
     * @format int32
     */
    remaining_time?: number;
    /** Metric stage corresponding to the applicable SLA. */
    stage: string;
    /**
     * It is an indicator of whether the metric has ever been breached
     * (missed). If not, it shows whether the metric is completed, in
     * progress, or not part of the applied policy.
     */
    status?: string;
    /**
     * Time at which the metric would breach SLA if no action taken.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    target_time?: string;
    /**
     * Time at which the metric would reach the SLA warning limit if no
     * action taken.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    warning_target_time?: string;
}
/**
 * archetype-sla-summary
 * SLA summary for the object.
 */
export interface ArchetypeSlaSummary {
    /** The name of the metric which is closest to breach. */
    closest_to_breach_metric?: string;
    org_schedule?: OrgScheduleSummary;
    /**
     * The remaining time (in minutes) for the closest_to_breach_metric if
     * it is paused. A paused metric will only be closest to breach if no
     * metrics are running (running, warning and breached stage).
     * @format int32
     */
    remaining_time?: number;
    sla_tracker?: SlaTrackerSummary;
    /**
     * The stage of the SLA. This is the metric stage which is closest to
     * breach.
     */
    stage?: SlaSummaryStage;
    /**
     * The target time to avoid SLA breach. This is the target time of the
     * metric which is closest to breach.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    target_time?: string;
}
/**
 * archetype-survey-aggregation
 * Aggregation of survey responses.
 */
export interface ArchetypeSurveyAggregation {
    /**
     * Average of all response scores for an object.
     * @format double
     */
    average?: number;
    /**
     * Count of all responses for an object.
     * @format int32
     */
    count?: number;
    /**
     * Maximum value of all response scores for an object.
     * @format double
     */
    maximum?: number;
    /**
     * Minimum value of all response scores for an object.
     * @format double
     */
    minimum?: number;
    /**
     * Sum of all response scores for an object.
     * @format double
     */
    sum?: number;
    /** Survey Id. */
    survey_id?: string;
}
/** article */
export type Article = AtomBase & {
    access_level?: AccessLevel;
    /** Details of the parts relevant to the article. */
    applies_to_parts: PartSummary[];
    /** Users that authored the article. */
    authored_by?: UserSummary[];
    /** Description of the article. */
    description?: string;
    /** Artifacts containing the extracted content. */
    extracted_content?: ArtifactSummary[];
    /** Language of the article for i18n support. */
    language?: string;
    /**
     * Number of downvotes on the article.
     * @format int32
     */
    num_downvotes?: number;
    /**
     * Number of upvotes on the article.
     * @format int32
     */
    num_upvotes?: number;
    /** The users that own the article. */
    owned_by: UserSummary[];
    parent?: DirectorySummary;
    /**
     * Timestamp when the article was published.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    published_date?: string;
    /** Rank of the article. */
    rank?: string;
    /** Resource details. */
    resource?: Resource;
    /**
     * The list of Rev user, groups and dynamic groups with whom the
     * article is shared and the corresponding roles.
     */
    shared_with?: SharedWithMembership[];
    /** Status of the article. */
    status?: ArticleStatus;
    /** Tags associated with the article. */
    tags?: TagWithValue[];
    /** Title of the article. */
    title?: string;
};
/**
 * article-ancestors-request
 * The request to get a artilce's ancestors.
 */
export interface ArticleAncestorsRequest {
    /**
     * The ID of the article to get ancestors.
     * @example "ARTICLE-12345"
     */
    id: string;
}
/**
 * article-ancestors-response
 * Get article ancerstors response.
 */
export interface ArticleAncestorsResponse {
    /**
     * The requested article's ancestors ordered from root to the current
     * directory.
     */
    ancestors: Directory[];
}
/** article-search-summary */
export type ArticleSearchSummary = SearchSummaryBase & {
    article: ArticleSummary;
};
/** Status of the article. */
export declare enum ArticleStatus {
    Archived = "archived",
    Draft = "draft",
    Published = "published",
    ReviewNeeded = "review_needed"
}
/** article-summary */
export type ArticleSummary = AtomBaseSummary & {
    /** Resource details. */
    resource?: ResourceSummary;
    /** Title of the article. */
    title?: string;
};
/**
 * articles-bulk-create-request
 * The request to create articles.
 */
export interface ArticlesBulkCreateRequest {
    /** Articles to be created. */
    articles: ArticlesCreateRequest[];
}
/**
 * articles-bulk-create-response
 * Create articles response.
 */
export interface ArticlesBulkCreateResponse {
    /** Returned articles. */
    articles: Article[];
}
/** articles-count-request */
export interface ArticlesCountRequest {
    /** Filters for access level of the articles. */
    access_level?: AccessLevel[];
    /** The ancestor directory of the articles. */
    ancestor?: string;
    /**
     * Filters for article which have one of the parts present as its
     * ancestor part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /**
     * Filters for articles belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_parts?: string[];
    /**
     * Filters for articles authored by any of the provided users.
     * @example ["DEVU-12345"]
     */
    authored_by?: string[];
    /**
     * Filters for articles created after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_after_date?: string;
    /**
     * Filters for articles created before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_before_date?: string;
    /**
     * Filters for articles created by any of the provided users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /**
     * Filters for articles modified by any of the provided users.
     * @example ["DEVU-12345"]
     */
    modified_by?: string[];
    modified_date?: DateTimeFilter;
    /**
     * Filters for articles owned by any of the provided users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for article which have one of the parent directories as its
     * parent.
     */
    parent?: string[];
    parent_op?: ArticlesFilterParentOpOperatorType;
    /**
     * Filters for articles published after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    published_after_date?: string;
    /**
     * Filters for articles published before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    published_before_date?: string;
    rank?: ArticlesFilterRankFilter;
    /** Filter for articles based on intended audience. */
    shared_with?: SharedWithMembershipFilter[];
    /** Filters for status of the articles. */
    status?: ArticleStatus[];
    /**
     * Filters for article with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
}
/** articles-count-response */
export interface ArticlesCountResponse {
    /**
     * The total number of articles matching the filter.
     * @format int32
     */
    count: number;
}
/**
 * articles-create-request
 * The request to create an article.
 */
export interface ArticlesCreateRequest {
    access_level?: AccessLevel;
    /**
     * The parts that the article applies to.
     * @minItems 1
     * @example ["PROD-12345"]
     */
    applies_to_parts: string[];
    /**
     * The authors of the article.
     * @example ["DEVU-12345"]
     */
    authored_by?: string[];
    /**
     * The authors of the article.
     * @deprecated
     * @example ["DEVU-12345"]
     */
    authored_by_ids?: string[];
    /** Description for the article. */
    description?: string;
    /**
     * ID of the extracted content artifact.
     * @example ["ARTIFACT-12345"]
     */
    extracted_content?: string[];
    /** Language of the article. */
    language?: string;
    /**
     * The users that own the article.
     * @example ["DEVU-12345"]
     */
    owned_by: string[];
    /**
     * The users that own the article.
     * @deprecated
     * @example ["DEVU-12345"]
     */
    owned_by_ids?: string[];
    /** The parent directory of the article. */
    parent?: string;
    /**
     * The published date of the article.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    published_at?: string;
    resource: ArticlesCreateRequestResource;
    /** Information about the role the member receives due to the share. */
    shared_with?: SetSharedWithMembership[];
    /** Status of the article. */
    status?: ArticleStatus;
    /** Tags associated with the article. */
    tags?: SetTagWithValue[];
    /** Name of the article. */
    title: string;
}
/** articles-create-request-resource */
export interface ArticlesCreateRequestResource {
    /**
     * IDs of the artifacts.
     * @deprecated
     * @example ["ARTIFACT-12345"]
     */
    artifact_ids?: string[];
    /**
     * IDs of the artifacts.
     * @example ["ARTIFACT-12345"]
     */
    artifacts?: string[];
    /** The latest published version. */
    published_version?: string;
    /** URL of the external article. */
    url?: string;
}
/**
 * articles-create-response
 * Create article response.
 */
export interface ArticlesCreateResponse {
    article: Article;
}
/**
 * articles-delete-request
 * The request to delete an article.
 */
export interface ArticlesDeleteRequest {
    /**
     * The ID of the article to delete.
     * @deprecated
     * @example "ARTICLE-12345"
     */
    article_id?: string;
    /**
     * The ID of the article to delete.
     * @example "ARTICLE-12345"
     */
    id?: string;
}
/** articles-delete-response */
export type ArticlesDeleteResponse = object;
export declare enum ArticlesFilterParentOpOperatorType {
    All = "all",
    Any = "any",
    Empty = "empty",
    NotAny = "not_any",
    NotEmpty = "not_empty"
}
/** articles-filter-rank-filter */
export interface ArticlesFilterRankFilter {
    /**
     * Filters for objects with a value lexicographically less than or
     * equal to the provided value.
     */
    max?: string;
    /**
     * Filters for objects with a value lexicographically greater than or
     * equal to the provided value.
     */
    min?: string;
}
/**
 * articles-get-request
 * The request to get an article.
 */
export interface ArticlesGetRequest {
    /**
     * The ID of the required article.
     * @deprecated
     * @example "ARTICLE-12345"
     */
    article_id?: string;
    /**
     * The ID of the required article.
     * @example "ARTICLE-12345"
     */
    id?: string;
}
/**
 * articles-get-response
 * Get article response.
 */
export interface ArticlesGetResponse {
    article: Article;
}
/** Describes the vote a Rev user can have on an article. */
export declare enum ArticlesGetVote {
    Downvote = "downvote",
    None = "none",
    Upvote = "upvote"
}
/** articles-group */
export interface ArticlesGroup {
    /** The group of articles. */
    articles: Article[];
    /** Unique key according to which the items are grouped. */
    key: string;
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/** articles-group-request */
export interface ArticlesGroupRequest {
    /** Filters for access level of the articles. */
    access_level?: AccessLevel[];
    /**
     * Filters for article which have one of the parts present as its
     * ancestor part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /**
     * Filters for articles belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_parts?: string[];
    /**
     * Filters for articles authored by any of the provided users.
     * @example ["DEVU-12345"]
     */
    authored_by?: string[];
    /**
     * Filters for articles created after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_after_date?: string;
    /**
     * Filters for articles created before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_before_date?: string;
    /**
     * Filters for articles created by any of the provided users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** The field to group the articles by. */
    group_by: string;
    /**
     * The maximum number of groups to return. If not set, then the
     * default is '10'.
     * @format int32
     */
    limit?: number;
    /**
     * The maximum number of articles to return for an individual group.
     * The default is '50'.
     * @format int32
     */
    limit_per_group?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /**
     * Filters for articles modified by any of the provided users.
     * @example ["DEVU-12345"]
     */
    modified_by?: string[];
    modified_date?: DateTimeFilter;
    /**
     * Filters for articles owned by any of the provided users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for article which have one of the parent directories as its
     * parent.
     */
    parent?: string[];
    parent_op?: ArticlesFilterParentOpOperatorType;
    /**
     * Filters for articles published after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    published_after_date?: string;
    /**
     * Filters for articles published before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    published_before_date?: string;
    rank?: ArticlesFilterRankFilter;
    /** Filter for articles based on intended audience. */
    shared_with?: SharedWithMembershipFilter[];
    /** Comma-separated fields to sort the articles by. */
    sort_by?: string[];
    /** Filters for status of the articles. */
    status?: ArticleStatus[];
    /**
     * Filters for article with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
}
/** articles-group-response */
export interface ArticlesGroupResponse {
    /** The list of groups. */
    groups: ArticlesGroup[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/**
 * articles-list-request
 * The request to list articles.
 */
export interface ArticlesListRequest {
    /** Filters for access level of the articles. */
    access_level?: AccessLevel[];
    /**
     * Filters for article which have one of the parts present as its
     * ancestor part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /**
     * Filters for articles belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_parts?: string[];
    /**
     * Filters for articles authored by any of the provided users.
     * @example ["DEVU-12345"]
     */
    authored_by?: string[];
    /**
     * Filters for articles created after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_after_date?: string;
    /**
     * Filters for articles created before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_before_date?: string;
    /**
     * Filters for articles created by any of the provided users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of articles to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /**
     * Filters for articles modified by any of the provided users.
     * @example ["DEVU-12345"]
     */
    modified_by?: string[];
    modified_date?: DateTimeFilter;
    /**
     * Filters for articles owned by any of the provided users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for article which have one of the parent directories as its
     * parent.
     */
    parent?: string[];
    parent_op?: ArticlesFilterParentOpOperatorType;
    /**
     * Filters for articles published after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    published_after_date?: string;
    /**
     * Filters for articles published before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    published_before_date?: string;
    rank?: ArticlesFilterRankFilter;
    /** Filter for articles based on intended audience. */
    shared_with?: SharedWithMembershipFilter[];
    /** Fields to sort the articles by and the direction to sort them. */
    sort_by?: string[];
    /** Filters for status of the articles. */
    status?: ArticleStatus[];
    /**
     * Filters for article with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
}
/**
 * articles-list-response
 * List articles response.
 */
export interface ArticlesListResponse {
    /** The article entries matching the request. */
    articles: Article[];
    /**
     * The cursor that should be used to resume iteration, otherwise if
     * not provided, then iteration has completed.
     * @deprecated
     */
    cursor?: string;
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /**
     * Total number of article items for the request.
     * @format int32
     */
    total: number;
}
/** Describes the kind of vote for which the voters are to be listed. */
export declare enum ArticlesListVote {
    Downvote = "downvote",
    Upvote = "upvote"
}
/**
 * articles-update-request
 * The request to update an article.
 */
export interface ArticlesUpdateRequest {
    access_level?: AccessLevel;
    applies_to_parts?: ArticlesUpdateRequestAppliesToParts;
    artifacts?: ArticlesUpdateRequestArtifacts;
    authored_by?: ArticlesUpdateRequestAuthoredBy;
    /**
     * Updated description of the article object, or unchanged if not
     * provided.
     */
    description?: string;
    extracted_content?: ArticlesUpdateRequestExtractedContent;
    /**
     * The article's ID.
     * @example "ARTICLE-12345"
     */
    id: string;
    /** Updates the language of the article. */
    language?: string;
    owned_by?: ArticlesUpdateRequestOwnedBy;
    /** The updated parent directory for the article. */
    parent?: string | null;
    /**
     * Updates the timestamp for when the article is published.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    published_date?: string;
    /** Updates the the latest published version. */
    published_version?: string;
    reorder?: ArticlesUpdateRequestReorder;
    shared_with?: ArticlesUpdateRequestSharedWith;
    /** Status of the article. */
    status?: ArticleStatus;
    tags?: ArticlesUpdateRequestTags;
    /** Updated title of the article object, or unchanged if not provided. */
    title?: string;
    /** Updates the URL of the external article. */
    url?: string;
}
/** articles-update-request-applies-to-parts */
export interface ArticlesUpdateRequestAppliesToParts {
    /**
     * Updates the parts that the article applies to.
     * @example ["PROD-12345"]
     */
    set?: string[];
}
/** articles-update-request-artifacts */
export interface ArticlesUpdateRequestArtifacts {
    /**
     * Updates IDs of the artifacts.
     * @example ["ARTIFACT-12345"]
     */
    set?: string[];
}
/** articles-update-request-authored-by */
export interface ArticlesUpdateRequestAuthoredBy {
    /**
     * Sets the users that authored the article.
     * @example ["DEVU-12345"]
     */
    set?: string[];
}
/** articles-update-request-extracted-content */
export interface ArticlesUpdateRequestExtractedContent {
    /**
     * Update the ID of the extracted content.
     * @example ["ARTIFACT-12345"]
     */
    set?: string[];
}
/** articles-update-request-owned-by */
export interface ArticlesUpdateRequestOwnedBy {
    /**
     * Sets the owner IDs to the provided user IDs. This must not be
     * empty.
     * @example ["DEVU-12345"]
     */
    set?: string[];
}
/** articles-update-request-reorder */
export interface ArticlesUpdateRequestReorder {
    /**
     * The article after which the reordered article is placed.
     * @example "ARTICLE-12345"
     */
    after?: string;
    /**
     * The article before which the reordered article is placed.
     * @example "ARTICLE-12345"
     */
    before?: string;
}
/** articles-update-request-shared-with */
export interface ArticlesUpdateRequestSharedWith {
    /** Sets the field to the provided membership list. */
    set?: SetSharedWithMembership[];
}
/** articles-update-request-tags */
export interface ArticlesUpdateRequestTags {
    /** Sets the provided tags on the article. */
    set?: SetTagWithValue[];
}
/** articles-update-response */
export interface ArticlesUpdateResponse {
    article: Article;
}
/** Describes the vote update action that can be performed on an article. */
export declare enum ArticlesUpdateVote {
    Downvote = "downvote",
    Unvote = "unvote",
    Upvote = "upvote"
}
/**
 * articles-voters-get-request
 * The request to get the vote of the Rev user on an article.
 */
export interface ArticlesVotersGetRequest {
    /**
     * The ID of the article.
     * @example "ARTICLE-12345"
     */
    id: string;
}
/**
 * articles-voters-get-response
 * Get article voters response.
 */
export interface ArticlesVotersGetResponse {
    /** Describes the vote a Rev user can have on an article. */
    vote: ArticlesGetVote;
}
/**
 * articles-voters-list-request
 * The request to list the voters of an article.
 */
export interface ArticlesVotersListRequest {
    /**
     * The cursor to resume iteration from, otherwise if not provided,
     * then iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The ID of the article.
     * @example "ARTICLE-12345"
     */
    id: string;
    /**
     * The maximum number of voters to return.
     * @format int32
     */
    limit?: number;
    /** Describes the kind of vote for which the voters are to be listed. */
    vote: ArticlesListVote;
}
/**
 * articles-voters-list-response
 * List article voters response.
 */
export interface ArticlesVotersListResponse {
    /**
     * The cursor that should be used to iterate the next sequence of
     * results, otherwise if not set, then no elements exist after.
     */
    next_cursor?: string;
    /** The Rev users that have voted. */
    voters: UserSummary[];
}
/**
 * articles-voters-update-request
 * The request to update the vote of the Rev user on an article.
 */
export interface ArticlesVotersUpdateRequest {
    /** Describes the vote update action that can be performed on an article. */
    action: ArticlesUpdateVote;
    /**
     * The ID of the article.
     * @example "ARTICLE-12345"
     */
    id: string;
}
/**
 * articles-voters-update-response
 * Update article voters response.
 */
export type ArticlesVotersUpdateResponse = object;
/** artifact */
export type Artifact = AtomBase & {
    /**
     * Timestamp when the artifact was archived.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    archived_date?: string;
    /** Defines a bucket object. */
    bucket?: Bucket;
    /** Represents a set of configuration to be used with the artifacts object. */
    configuration_set?: ArtifactConfigurationSet;
    /** Defines a file object. */
    file?: File;
    /**
     * Information of system generated files like preview, multiple
     * resolutions, etc.
     */
    generated_files?: File[];
    /** Defines a headers object. */
    headers?: Headers;
    /** Original URL of the artifact. */
    original_url?: string;
    parent_id?: AtomSummary;
    /** Preview URL of the artifact. */
    preview_url?: string;
    /**
     * Preview URL expiry date.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    preview_url_expiry?: string;
    /**
     * Timestamp when the artifact was published.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    published_date?: string;
};
/** Represents a set of configuration to be used with the artifacts object. */
export declare enum ArtifactConfigurationSet {
    ArticleMedia = "article_media",
    Default = "default",
    EmailMedia = "email_media",
    MarketplaceListingIcon = "marketplace_listing_icon",
    MarketplaceMedia = "marketplace_media",
    OrgLogo = "org_logo",
    PlugSetting = "plug_setting",
    PlugSettingBannerCard = "plug_setting_banner_card",
    SnapInFunctionsCode = "snap_in_functions_code",
    SnapWidget = "snap_widget",
    UserProfilePicture = "user_profile_picture",
    Work = "work"
}
/**
 * artifact-detail
 * It contains the details of the artifact which is associated with a
 * quote.
 */
export interface ArtifactDetail {
    artifact_id: ArtifactSummary;
    /** Whether the artifact is generated by the system or not. */
    system_generated: boolean;
    /** Type of the artifact. */
    type: ArtifactDetailType;
}
/** Type of the artifact. */
export declare enum ArtifactDetailType {
    GeneratedContract = "generated_contract",
    Others = "others",
    PurchaseOrder = "purchase_order",
    SignedContract = "signed_contract"
}
/** artifact-search-summary */
export type ArtifactSearchSummary = SearchSummaryBase & {
    artifact: ArtifactSummary;
};
/** artifact-summary */
export type ArtifactSummary = AtomBaseSummary & {
    /** Defines a file object. */
    file?: FileSummary;
    /** Defines a headers object. */
    headers?: HeadersSummary;
    /** Original URL of the artifact. */
    original_url?: string;
    /** Preview URL of the artifact. */
    preview_url?: string;
};
/**
 * artifact-version
 * The version of the artifact.
 */
export interface ArtifactVersion {
    modified_by?: UserSummary;
    /**
     * The timestamp at which the version was created.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    timestamp: string;
    /** The version of the artifact. */
    version: string;
}
/**
 * artifacts-copy-request
 * The request to copy an artifact.
 */
export interface ArtifactsCopyRequest {
    /**
     * The ID of the artifact to be copied.
     * @example "ARTIFACT-12345"
     */
    id: string;
}
/**
 * artifacts-copy-response
 * The response to copying an artifact.
 */
export interface ArtifactsCopyResponse {
    artifact: Artifact;
}
/**
 * artifacts-get-request
 * The request to get an artifact's information.
 */
export interface ArtifactsGetRequest {
    /**
     * The requested artifact's ID.
     * @example "ARTIFACT-12345"
     */
    id: string;
    /** The version of the artifact that needs to be fetched. */
    version?: string;
}
/**
 * artifacts-get-response
 * The response to getting an artifact's information.
 */
export interface ArtifactsGetResponse {
    artifact: Artifact;
    /** The version of the artifact. */
    version: ArtifactVersion;
}
/**
 * artifacts-hard-delete-version-request
 * The request to permnanently delete an artifact's version.
 */
export interface ArtifactsHardDeleteVersionRequest {
    /**
     * The ID of the artifact to delete the version for.
     * @example "ARTIFACT-12345"
     */
    id: string;
    /** The version of the artifact that needs to be deleted. */
    version?: string;
}
/** artifacts-hard-delete-version-response */
export type ArtifactsHardDeleteVersionResponse = object;
/**
 * artifacts-list-request
 * The request to list artifacts attached to an object.
 */
export interface ArtifactsListRequest {
    /**
     * The ID of the parent's parent object to filter artifacts in case of
     * superset match.
     * @example "ISS-12345"
     */
    ancestor?: string;
    /**
     * The object types to include in the search in case of superset
     * match.
     */
    include_child_object_types?: ObjectTypeProto[];
    /** The ID of the object to filter artifacts. */
    parent_id?: string;
}
/**
 * artifacts-list-response
 * The response to list artifacts attached to an object.
 */
export interface ArtifactsListResponse {
    /** The artifact's information. */
    artifacts: Artifact[];
}
/**
 * artifacts-locate-request
 * The request to get an artifact's download URL.
 */
export interface ArtifactsLocateRequest {
    /**
     * The ID of the artifact to get the URL for.
     * @example "ARTIFACT-12345"
     */
    id: string;
    /** The preference to have a downloadable url or to have an inline url. */
    prefer_download?: boolean;
    /**
     * The required variant of the file. By default, it returns the
     * original file.
     */
    variant?: string;
    /** The version of the artifact that needs to be fetched. */
    version?: string;
}
/**
 * artifacts-locate-response
 * The response to getting an artifact's download URL.
 */
export interface ArtifactsLocateResponse {
    /**
     * The expiration timestamp of the URL.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    expires_at?: string;
    /**
     * The expiration timestamp of the URL.
     * @deprecated
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    expiry_time: string;
    /** The artifact's download URL. */
    url: string;
}
/**
 * artifacts-prepare-request
 * The request to prepare a URL to upload a file.
 */
export interface ArtifactsPrepareRequest {
    /** Actor ID who is creating the artifact. */
    actor?: string;
    /** Represents a set of configuration to be used with the artifacts object. */
    configuration_set?: ArtifactConfigurationSet;
    /** The name of the file that's being uploaded. */
    file_name: string;
    /**
     * The size of file that's being uploaded.
     * @format int32
     */
    file_size?: number;
    /** The type of file that's being uploaded. */
    file_type?: string;
    /** Defines a headers object. */
    headers?: Headers;
}
/**
 * artifacts-prepare-response
 * The response to preparing a URL to upload a file.
 */
export interface ArtifactsPrepareResponse {
    /** The POST policy form data. */
    form_data: ArtifactsPrepareResponseFormData[];
    /**
     * The generated artifact's ID.
     * @example "ARTIFACT-12345"
     */
    id: string;
    /** The URL that the file's data should be uploaded to. */
    url: string;
}
/** artifacts-prepare-response-form-data */
export interface ArtifactsPrepareResponseFormData {
    /** Key of the form field. */
    key: string;
    /** Value corresponding to the key. */
    value: string;
}
/**
 * artifacts-versions-list-request
 * The request to list versions of an artifact.
 */
export interface ArtifactsVersionsListRequest {
    /**
     * The ID of the artifact to list versions for.
     * @example "ARTIFACT-12345"
     */
    id: string;
}
/**
 * artifacts-versions-list-response
 * The response to listing versions of an artifact.
 */
export interface ArtifactsVersionsListResponse {
    /** The artifact's versions information. */
    versions: ArtifactVersion[];
}
/**
 * artifacts-versions-prepare-request
 * The request to prepare a new version of an artifact.
 */
export interface ArtifactsVersionsPrepareRequest {
    /** Actor ID who is creating the new version of artifact. */
    actor?: string;
    /**
     * The ID of the artifact to prepare a new version for.
     * @example "ARTIFACT-12345"
     */
    id: string;
}
/**
 * artifacts-versions-prepare-response
 * The response to preparing a new artifact version.
 */
export interface ArtifactsVersionsPrepareResponse {
    /** The POST policy form data. */
    form_data: ArtifactsVersionsPrepareResponseFormData[];
    /** The URL that the file's data should be uploaded to. */
    url: string;
}
/** artifacts-versions-prepare-response-form-data */
export interface ArtifactsVersionsPrepareResponseFormData {
    /** Key of the form field. */
    key: string;
    /** Value corresponding to the key. */
    value: string;
}
/** atom */
export type Atom = (Account | AccountCommerceDetails | AddonRule | AiAgent | AiAgentSession | AppFragment | AppFragmentPrivate | Article | Artifact | AuthToken | Automation | Bot | BotSnapshot | Call | Capability | Channel | CodeChange | Command | Component | Connection | Conversation | ConversationCreatedNotification | ConversationInactivityReminder | Credit | CreditCoupon | CuratedVista | CustomEngagement | CustomObject | CustomPart | CustomStage | CustomState | CustomTypeFragment | CustomTypeFragmentPrivate | CustomWork | Dashboard | DataSource | Dataset | DevOrg | DevOrgCommerceDetails | DevOrgGlobal | DevUser | DevUserGlobal | DevrevProfile | DevrevReminder | DevuInvite | DevuInviteGlobal | Directory | DiscoveryGitCommit | DiscoveryGitEvent | DiscoveryProfile | DiscoveryRun | DiscoverySettings | DynamicVista | Emoji | Engagement | Enhancement | EventSource | ExternalSyncUnit | Feature | FeaturePin | Flow | GenericNotification | Group | GroupedVista | Incident | Interaction | Invoice | InvoiceLineItem | Issue | Job | Keyring | KeyringType | LicenseAssignment | Link | Linkable | LinkablePin | Marketplace | MarketplaceCategory | MarketplaceItem | MarketplaceSubmission | Meeting | MeetingNew | Menu | Metric | MetricDefinition | MetricSet | Microservice | News | NotificationContentTemplate | NotificationPreferences | OasisData | OasisJob | ObjectAssignmentNotification | ObjectMember | OneTimeLineItem | Operation | Opportunity | OrgPreferences | OrgSchedule | OrgScheduleFragment | PaymentMethodBankAccount | PaymentMethodCard | PlugSetting | PortalPreferences | PrReviewReminder | PriceBook | Pricing | Product | Project | PushDevice | QuestionAnswer | Quote | QuoteTermTemplate | RealTimeInsight | RealTimeInsightValue | RecordTemplate | RecurringLineItem | RevOrg | RevUser | Reward | RewardTransaction | Role | Room | Rule | Runnable | RunnablePin | Scenario | Score | ServiceAccount | ServicePlan | Settings | Sku | SkuRule | Sla | SlaTracker | SnapComponent | SnapIn | SnapInFunction | SnapInPackage | SnapInPreferences | SnapInVersion | SnapKitAction | SnapKitExecution | UtilRequiredKeys<SnapWidget, 'type'> | StageDiagram | StockSchemaFragment | StockSchemaFragmentPrivate | Survey | SurveyResponse | SyncHistory | SyncModificationRecord | SyncUnit | SysUser | Tag | Task | TenantFragment | TenantFragmentPrivate | Ticket | TimelineChangeEvent | TimelineComment | TimelineHuddle | Uom | UserMentionedNotification | UserParticipationNotification | UserPreferences | UserSession | VistaSharedNotification | WebCrawlerJob | Webhook | Widget | WindowBasedInsight | WindowBasedInsightValue | Workflow | WorkflowRun | WorkflowStep) & {
    type: AtomType;
};
/** atom-base */
export interface AtomBase {
    created_by?: UserSummary;
    /**
     * Timestamp when the object was created.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_date?: string;
    /** Human-readable object ID unique to the Dev organization. */
    display_id?: string;
    /** Globally unique object ID. */
    id: string;
    modified_by?: UserSummary;
    /**
     * Timestamp when the object was last modified.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    modified_date?: string;
}
/** atom-base-summary */
export interface AtomBaseSummary {
    /** Human-readable object ID unique to the Dev organization. */
    display_id?: string;
    /** Globally unique object ID. */
    id: string;
}
/** atom-summary */
export type AtomSummary = (AccountCommerceDetailsSummary | AccountSummary | AddonRuleSummary | AiAgentSessionSummary | AiAgentSummary | AppFragmentPrivateSummary | AppFragmentSummary | ArticleSummary | ArtifactSummary | AuthTokenSummary | AutomationSummary | BotSnapshotSummary | BotSummary | CallSummary | CapabilitySummary | ChannelSummary | CodeChangeSummary | CommandSummary | ComponentSummary | ConnectionSummary | ConversationCreatedNotificationSummary | ConversationInactivityReminderSummary | ConversationSummary | CreditCouponSummary | CreditSummary | CuratedVistaSummary | CustomEngagementSummary | CustomObjectSummary | CustomPartSummary | CustomStageSummary | CustomStateSummary | CustomTypeFragmentPrivateSummary | CustomTypeFragmentSummary | CustomWorkSummary | DashboardSummary | DataSourceSummary | DatasetSummary | DevOrgCommerceDetailsSummary | DevOrgGlobalSummary | DevOrgSummary | DevUserGlobalSummary | DevUserSummary | DevrevProfileSummary | DevrevReminderSummary | DevuInviteGlobalSummary | DevuInviteSummary | DirectorySummary | DiscoveryGitCommitSummary | DiscoveryGitEventSummary | DiscoveryProfileSummary | DiscoveryRunSummary | DiscoverySettingsSummary | DynamicVistaSummary | EmojiSummary | EngagementSummary | EnhancementSummary | EventSourceSummary | ExternalSyncUnitSummary | FeaturePinSummary | FeatureSummary | FlowSummary | GenericNotificationSummary | GroupSummary | GroupedVistaSummary | IncidentSummary | InteractionSummary | InvoiceLineItemSummary | InvoiceSummary | IssueSummary | JobSummary | KeyringSummary | KeyringTypeSummary | LicenseAssignmentSummary | LinkSummary | LinkablePinSummary | LinkableSummary | MarketplaceCategorySummary | MarketplaceItemSummary | MarketplaceSubmissionSummary | MarketplaceSummary | MeetingNewSummary | MeetingSummary | MenuSummary | MetricDefinitionSummary | MetricSetSummary | MetricSummary | MicroserviceSummary | NewsSummary | NotificationContentTemplateSummary | NotificationPreferencesSummary | OasisDataSummary | OasisJobSummary | ObjectAssignmentNotificationSummary | ObjectMemberSummary | OneTimeLineItemSummary | OperationSummary | OpportunitySummary | OrgPreferencesSummary | OrgScheduleFragmentSummary | OrgScheduleSummary | PaymentMethodBankAccountSummary | PaymentMethodCardSummary | PlugSettingSummary | PortalPreferencesSummary | PrReviewReminderSummary | PriceBookSummary | PricingSummary | ProductSummary | ProjectSummary | PushDeviceSummary | QuestionAnswerSummary | QuoteSummary | QuoteTermTemplateSummary | RealTimeInsightSummary | RealTimeInsightValueSummary | RecordTemplateSummary | RecurringLineItemSummary | RevOrgSummary | RevUserSummary | RewardSummary | RewardTransactionSummary | RoleSummary | RoomSummary | RuleSummary | RunnablePinSummary | RunnableSummary | ScenarioSummary | ScoreSummary | ServiceAccountSummary | ServicePlanSummary | SettingsSummary | SkuRuleSummary | SkuSummary | SlaSummary | SlaTrackerSummary | SnapComponentSummary | SnapInFunctionSummary | SnapInPackageSummary | SnapInPreferencesSummary | SnapInSummary | SnapInVersionSummary | SnapKitActionSummary | SnapKitExecutionSummary | UtilRequiredKeys<SnapWidgetSummary, 'type'> | StageDiagramSummary | StockSchemaFragmentPrivateSummary | StockSchemaFragmentSummary | SurveyResponseSummary | SurveySummary | SyncHistorySummary | SyncModificationRecordSummary | SyncUnitSummary | SysUserSummary | TagSummary | TaskSummary | TenantFragmentPrivateSummary | TenantFragmentSummary | TicketSummary | TimelineChangeEventSummary | TimelineCommentSummary | TimelineHuddleSummary | UomSummary | UserMentionedNotificationSummary | UserParticipationNotificationSummary | UserPreferencesSummary | UserSessionSummary | VistaSharedNotificationSummary | WebCrawlerJobSummary | WebhookSummary | WidgetSummary | WindowBasedInsightSummary | WindowBasedInsightValueSummary | WorkflowRunSummary | WorkflowStepSummary | WorkflowSummary) & {
    type: AtomType;
};
export declare enum AtomType {
    Account = "account",
    AccountCommerceDetails = "account_commerce_details",
    AddonRule = "addon_rule",
    AiAgent = "ai_agent",
    AiAgentSession = "ai_agent_session",
    AppFragment = "app_fragment",
    AppFragmentPrivate = "app_fragment_private",
    Article = "article",
    Artifact = "artifact",
    AuthToken = "auth_token",
    Automation = "automation",
    Bot = "bot",
    BotSnapshot = "bot_snapshot",
    Call = "call",
    Capability = "capability",
    Channel = "channel",
    CodeChange = "code_change",
    Command = "command",
    Component = "component",
    Connection = "connection",
    Conversation = "conversation",
    ConversationCreatedNotification = "conversation_created_notification",
    ConversationInactivityReminder = "conversation_inactivity_reminder",
    Credit = "credit",
    CreditCoupon = "credit_coupon",
    Curated = "curated",
    CustomEngagement = "custom_engagement",
    CustomObject = "custom_object",
    CustomPart = "custom_part",
    CustomStage = "custom_stage",
    CustomState = "custom_state",
    CustomTypeFragment = "custom_type_fragment",
    CustomTypeFragmentPrivate = "custom_type_fragment_private",
    CustomWork = "custom_work",
    Dashboard = "dashboard",
    DataSource = "data_source",
    Dataset = "dataset",
    DevOrg = "dev_org",
    DevOrgCommerceDetails = "dev_org_commerce_details",
    DevOrgGlobal = "dev_org_global",
    DevUser = "dev_user",
    DevUserGlobal = "dev_user_global",
    DevrevProfile = "devrev_profile",
    DevrevReminder = "devrev_reminder",
    DevuInvite = "devu_invite",
    DevuInviteGlobal = "devu_invite_global",
    Directory = "directory",
    DiscoveryGitCommit = "discovery_git_commit",
    DiscoveryGitEvent = "discovery_git_event",
    DiscoveryProfile = "discovery_profile",
    DiscoveryRun = "discovery_run",
    DiscoverySettings = "discovery_settings",
    Dynamic = "dynamic",
    Emoji = "emoji",
    Engagement = "engagement",
    Enhancement = "enhancement",
    EventSource = "event_source",
    ExternalSyncUnit = "external_sync_unit",
    Feature = "feature",
    FeaturePin = "feature_pin",
    Flow = "flow",
    GenericNotification = "generic_notification",
    Group = "group",
    Grouped = "grouped",
    Incident = "incident",
    Interaction = "interaction",
    Invoice = "invoice",
    InvoiceLineItem = "invoice_line_item",
    Issue = "issue",
    Job = "job",
    Keyring = "keyring",
    KeyringType = "keyring_type",
    LicenseAssignment = "license_assignment",
    Link = "link",
    Linkable = "linkable",
    LinkablePin = "linkable_pin",
    Marketplace = "marketplace",
    MarketplaceCategory = "marketplace_category",
    MarketplaceItem = "marketplace_item",
    MarketplaceSubmission = "marketplace_submission",
    Meeting = "meeting",
    MeetingNew = "meeting_new",
    Menu = "menu",
    Metric = "metric",
    MetricDefinition = "metric_definition",
    MetricSet = "metric_set",
    Microservice = "microservice",
    News = "news",
    NotificationContentTemplate = "notification_content_template",
    NotificationPreferences = "notification_preferences",
    OasisData = "oasis_data",
    OasisJob = "oasis_job",
    ObjectAssignmentNotification = "object_assignment_notification",
    ObjectMember = "object_member",
    OneTimeLineItem = "one_time_line_item",
    Operation = "operation",
    Opportunity = "opportunity",
    OrgPreferences = "org_preferences",
    OrgSchedule = "org_schedule",
    OrgScheduleFragment = "org_schedule_fragment",
    PaymentMethodBankAccount = "payment_method_bank_account",
    PaymentMethodCard = "payment_method_card",
    PlugSetting = "plug_setting",
    PortalPreferences = "portal_preferences",
    PrReviewReminder = "pr_review_reminder",
    PriceBook = "price_book",
    Pricing = "pricing",
    Product = "product",
    Project = "project",
    PushDevice = "push_device",
    QuestionAnswer = "question_answer",
    Quote = "quote",
    QuoteTermTemplate = "quote_term_template",
    RealTimeInsight = "real_time_insight",
    RealTimeInsightValue = "real_time_insight_value",
    RecordTemplate = "record_template",
    RecurringLineItem = "recurring_line_item",
    RevOrg = "rev_org",
    RevUser = "rev_user",
    Reward = "reward",
    RewardTransaction = "reward_transaction",
    Role = "role",
    Room = "room",
    Rule = "rule",
    Runnable = "runnable",
    RunnablePin = "runnable_pin",
    Scenario = "scenario",
    Score = "score",
    ServiceAccount = "service_account",
    ServicePlan = "service_plan",
    Settings = "settings",
    Sku = "sku",
    SkuRule = "sku_rule",
    Sla = "sla",
    SlaTracker = "sla_tracker",
    SnapComponent = "snap_component",
    SnapIn = "snap_in",
    SnapInFunction = "snap_in_function",
    SnapInPackage = "snap_in_package",
    SnapInPreferences = "snap_in_preferences",
    SnapInVersion = "snap_in_version",
    SnapKitAction = "snap_kit_action",
    SnapKitExecution = "snap_kit_execution",
    SnapWidget = "snap_widget",
    StageDiagram = "stage_diagram",
    StockSchemaFragment = "stock_schema_fragment",
    StockSchemaFragmentPrivate = "stock_schema_fragment_private",
    Survey = "survey",
    SurveyResponse = "survey_response",
    SyncHistory = "sync_history",
    SyncModificationRecord = "sync_modification_record",
    SyncUnit = "sync_unit",
    SysUser = "sys_user",
    Tag = "tag",
    Task = "task",
    TenantFragment = "tenant_fragment",
    TenantFragmentPrivate = "tenant_fragment_private",
    Ticket = "ticket",
    TimelineChangeEvent = "timeline_change_event",
    TimelineComment = "timeline_comment",
    TimelineHuddle = "timeline_huddle",
    Uom = "uom",
    UserMentionedNotification = "user_mentioned_notification",
    UserParticipationNotification = "user_participation_notification",
    UserPreferences = "user_preferences",
    UserSession = "user_session",
    VistaSharedNotification = "vista_shared_notification",
    WebCrawlerJob = "web_crawler_job",
    Webhook = "webhook",
    Widget = "widget",
    WindowBasedInsight = "window_based_insight",
    WindowBasedInsightValue = "window_based_insight_value",
    Workflow = "workflow",
    WorkflowRun = "workflow_run",
    WorkflowStep = "workflow_step"
}
/** atoms-get-request */
export interface AtomsGetRequest {
    /** The ID of the object to get. */
    id: string;
}
/** atoms-get-response */
export interface AtomsGetResponse {
    atom: Atom;
}
/** atoms-summary-request */
export interface AtomsSummaryRequest {
    /** The ID of the object to get the summary for. */
    id: string;
}
/** atoms-summary-response */
export interface AtomsSummaryResponse {
    summary: AtomSummary;
}
/**
 * auth-connection
 * Connection object that specifies the configuration for an
 * authentication connection that is set up for a Dev organization.
 */
export type AuthConnection = (AuthConnectionOptionsAzureAd | AuthConnectionOptionsGoogleApps | AuthConnectionOptionsOidc | AuthConnectionOptionsSaml | AuthConnectionOptionsSocial) & {
    /**
     * Display name of the authentication connection. This name will be
     * visible to all the users when they sign in to this Dev
     * organization. For example, if the display_name is 'abclogin', then
     * it would appear on the login button as 'Log in to abclogin'.
     */
    display_name?: string;
    /**
     * Whether the authentication connection is enabled or disabled. If
     * set to false, the authentication connection will not show up on the
     * login screen as a login option.
     */
    enabled?: boolean;
    /** ID of the authentication connection. */
    id: string;
    /**
     * Defines the type for the authentication connection. The configuration
     * for each authentication connection will depend on the type value.
     */
    type: AuthConnectionType;
};
/**
 * auth-connection-options-azure-ad
 * Object encapsulating the configuration parameters for an Azure AD
 * authentication connection.
 */
export interface AuthConnectionOptionsAzureAd {
    /** Client ID for the Azure authentication connection. */
    client_id?: string;
    /** Client secret for the Azure authentication connection. */
    client_secret?: string;
    /** Domain URL of the Azure authentication connection. */
    domain?: string;
}
/**
 * auth-connection-options-google-apps
 * Object encapsulating the configuration parameters for a Google Apps
 * authentication connection.
 */
export interface AuthConnectionOptionsGoogleApps {
    /** Client ID for the Google Apps authentication connection. */
    client_id?: string;
    /** Client secret for the Google Apps authentication connection. */
    client_secret?: string;
    /** Tenant domain URL of the Google Apps authentication connection. */
    tenant_domain?: string;
}
/**
 * auth-connection-options-oidc
 * Object encapsulating the configuration parameters for an OIDC
 * authentication connection.
 */
export interface AuthConnectionOptionsOidc {
    /** Client ID for the OIDC authentication connection. */
    client_id?: string;
    /** Client secret for the OIDC authentication connection. */
    client_secret?: string;
    /** Issuer URL of the OIDC authentication connection. */
    issuer?: string;
}
/**
 * auth-connection-options-saml
 * Object encapsulating the configuration parameters for a SAML
 * authentication connection.
 */
export interface AuthConnectionOptionsSaml {
    /** Sign In endpoint for the SAML authentication connection. */
    sign_in_endpoint?: string;
    /** Signing certificate for the SAML authentication connection. */
    signing_cert?: string;
}
/** auth-connection-options-social */
export type AuthConnectionOptionsSocial = object;
export declare enum AuthConnectionToggle {
    Disable = "disable",
    Enable = "enable"
}
/**
 * Defines the type for the authentication connection. The configuration
 * for each authentication connection will depend on the type value.
 */
export declare enum AuthConnectionType {
    GoogleApps = "google_apps",
    Oidc = "oidc",
    Samlp = "samlp",
    Social = "social",
    Waad = "waad"
}
/**
 * auth-preferences
 * Customer authentication and authorization preferences.
 */
export interface AuthPreferences {
    /** Just in Time (JIT) rev user provisioning type. */
    jit_rev_user_provisioning?: AuthPreferencesJitRevUserProvisioning;
    /** Login method for authenticating customers to the rev user portal. */
    login_method?: AuthPreferencesLoginMethod;
    /** Redirect URL to authenticate customers to the rev user portal. */
    login_url?: string;
}
/** Just in Time (JIT) rev user provisioning type. */
export declare enum AuthPreferencesJitRevUserProvisioning {
    All = "all",
    None = "none"
}
/** Login method for authenticating customers to the rev user portal. */
export declare enum AuthPreferencesLoginMethod {
    Default = "default",
    Sso = "sso"
}
/** auth-token */
export type AuthToken = AtomBase & {
    /**
     * An identifier that represents the application that requested the
     * token. Only applicable for application access tokens.
     */
    client_id?: string;
    /**
     * The time at which the token expires.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    expires_at?: string;
    /**
     * The time at which the token was issued.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    issued_at?: string;
    /** The type of the requested token. */
    requested_token_type?: AuthTokenRequestedTokenType;
    /** The scopes associated with the issued token. */
    scopes?: string[];
    /** The status of the token. */
    status?: AuthTokenStatus;
    /** The subject of the token. */
    subject?: string;
    /** A hint that identifies the token. */
    token_hint?: string;
};
/** Specifies the process of obtaining a token. */
export declare enum AuthTokenGrantType {
    UrnDevrevParamsOauthGrantTypeTokenIssue = "urn:devrev:params:oauth:grant-type:token-issue",
    UrnIetfParamsOauthGrantTypeTokenExchange = "urn:ietf:params:oauth:grant-type:token-exchange"
}
/** The type of the requested token. */
export declare enum AuthTokenRequestedTokenType {
    UrnDevrevParamsOauthTokenTypeAat = "urn:devrev:params:oauth:token-type:aat",
    UrnDevrevParamsOauthTokenTypeAatActAs = "urn:devrev:params:oauth:token-type:aat:act-as",
    UrnDevrevParamsOauthTokenTypeAatPublic = "urn:devrev:params:oauth:token-type:aat:public",
    UrnDevrevParamsOauthTokenTypeDev = "urn:devrev:params:oauth:token-type:dev",
    UrnDevrevParamsOauthTokenTypeDevConnect = "urn:devrev:params:oauth:token-type:dev:connect",
    UrnDevrevParamsOauthTokenTypeGat = "urn:devrev:params:oauth:token-type:gat",
    UrnDevrevParamsOauthTokenTypePat = "urn:devrev:params:oauth:token-type:pat",
    UrnDevrevParamsOauthTokenTypePatActAs = "urn:devrev:params:oauth:token-type:pat:act-as",
    UrnDevrevParamsOauthTokenTypeRat = "urn:devrev:params:oauth:token-type:rat",
    UrnDevrevParamsOauthTokenTypeRev = "urn:devrev:params:oauth:token-type:rev",
    UrnDevrevParamsOauthTokenTypeSession = "urn:devrev:params:oauth:token-type:session",
    UrnDevrevParamsOauthTokenTypeSessionDev0 = "urn:devrev:params:oauth:token-type:session:dev0",
    UrnDevrevParamsOauthTokenTypeSessionOnetime = "urn:devrev:params:oauth:token-type:session:onetime",
    UrnDevrevParamsOauthTokenTypeSessionRevActAs = "urn:devrev:params:oauth:token-type:session:rev:act-as",
    UrnDevrevParamsOauthTokenTypeSuper = "urn:devrev:params:oauth:token-type:super",
    UrnDevrevParamsOauthTokenTypeSys = "urn:devrev:params:oauth:token-type:sys",
    UrnIetfParamsOauthTokenTypeJwt = "urn:ietf:params:oauth:token-type:jwt"
}
/** The status of the token. */
export declare enum AuthTokenStatus {
    Active = "active",
    Expired = "expired",
    Revoked = "revoked"
}
/** The type of the subject token. */
export declare enum AuthTokenSubjectTokenType {
    UrnDevrevParamsOauthTokenTypeJwtAuth0 = "urn:devrev:params:oauth:token-type:jwt:auth0",
    UrnDevrevParamsOauthTokenTypeJwtDev = "urn:devrev:params:oauth:token-type:jwt:dev",
    UrnDevrevParamsOauthTokenTypeRat = "urn:devrev:params:oauth:token-type:rat",
    UrnDevrevParamsOauthTokenTypeRevinfo = "urn:devrev:params:oauth:token-type:revinfo",
    UrnDevrevParamsOauthTokenTypeSession = "urn:devrev:params:oauth:token-type:session",
    UrnDevrevParamsOauthTokenTypeSysu = "urn:devrev:params:oauth:token-type:sysu",
    UrnDevrevParamsOauthTokenTypeUserinfo = "urn:devrev:params:oauth:token-type:userinfo",
    UrnDevrevParamsOauthTokenTypeUserinfoProfile = "urn:devrev:params:oauth:token-type:userinfo:profile",
    UrnIetfParamsOauthTokenTypeJwt = "urn:ietf:params:oauth:token-type:jwt"
}
/** auth-token-summary */
export type AuthTokenSummary = AtomBaseSummary;
/** The type of the issued token. Bearer is the only supported token type. */
export declare enum AuthTokenTokenType {
    Bearer = "bearer"
}
/**
 * auth-tokens-account-traits
 * Carries account info.
 */
export interface AuthTokensAccountTraits {
    /** Application-defined custom fields of the account. */
    custom_fields?: object;
    /** The description of the account. */
    description?: string;
    /** The display name of the account. */
    display_name?: string;
    /** The domains of the account. */
    domains?: string[];
    /** The phone numbers of the account. */
    phone_numbers?: string[];
    /** The tier of the account. */
    tier?: string;
    /** The websites of the account. */
    websites?: string[];
}
/**
 * auth-tokens-create-request
 * A request to create a new token corresponding to the requested token
 * type.
 */
export interface AuthTokensCreateRequest {
    /**
     * The unique ID of the Dev user or the service account to
     * impersonate.
     */
    act_as?: string;
    /** The expected audience values with respect to the token. */
    aud?: string[];
    /**
     * An identifier that represents the application which is requesting
     * the token. If no client_id is present in the request to generate an
     * application access token (AAT), DevRev will generate a client_id.
     * This client_id is only associated with an AAT.
     */
    client_id?: string;
    /**
     * The expected validity lifetime of the token in number of days. In
     * practice, the value should be based on the usage of the token.
     * @min 0
     * @max 4294967295
     */
    expires_in?: number;
    /** Specifies the process of obtaining a token. */
    grant_type?: AuthTokenGrantType;
    /** The type of the requested token. */
    requested_token_type?: AuthTokenRequestedTokenType;
    /**
     * Carries info corresponding to the Rev user to be provisioned and/or
     * issue a Rev session token.
     */
    rev_info?: AuthTokensRevInfo;
    /**
     * The requested set of scopes associated with the issued token. A
     * space-delimited list of values in which the order of values does
     * not matter.
     */
    scope?: string;
    /**
     * Represents the entity that requests the token. Not required when
     * requesting an application access token (AAT).
     */
    subject_token?: string;
    /** The type of the subject token. */
    subject_token_type?: AuthTokenSubjectTokenType;
    /** A hint that identifies the token. */
    token_hint?: string;
}
/**
 * auth-tokens-create-response
 * Response for the request to create a new token corresponding to the
 * requested token type.
 */
export interface AuthTokensCreateResponse {
    /**
     * The issued JSON Web Token (JWT) corresponding to the requested
     * token type.
     */
    access_token: string;
    /**
     * An identifier that represents the application which is requesting
     * the token. Only present in a response corresponding to an
     * application access token (AAT).
     */
    client_id?: string;
    /**
     * The validity lifetime of the token specified in seconds since Unix
     * epoch.
     * @format int64
     */
    expires_in: number;
    /** A token to refresh the issued token. */
    refresh_token?: string;
    /**
     * The scopes associated with the issued token. A space-delimited list
     * of values in which the order of values does not matter.
     */
    scope?: string;
    /** The type of the issued token. Bearer is the only supported token type. */
    token_type: AuthTokenTokenType;
}
/**
 * auth-tokens-delete-request
 * The request to revoke the token.
 */
export interface AuthTokensDeleteRequest {
    /**
     * The unique identifier for the token under a given Dev organization.
     * If no token ID is provided, then the token ID will be set from the
     * JTI claim of the token in the authorization header.
     */
    token_id?: string;
}
/**
 * auth-tokens-get-request
 * The request to get the token metadata.
 */
export interface AuthTokensGetRequest {
    /** The unique identifier of the token under a given Dev organization. */
    token_id: string;
}
/**
 * auth-tokens-get-response
 * The response to get the token metadata.
 */
export interface AuthTokensGetResponse {
    token: AuthToken;
}
/**
 * auth-tokens-list-request
 * A request to list the token metadata.
 */
export interface AuthTokensListRequest {
    /**
     * An identifier that represents the application, which requested the
     * token. Only relevant for application access tokens.
     */
    client_id?: string;
    /** The type of the requested token. */
    requested_token_type?: AuthTokenRequestedTokenType;
    /**
     * The subject associated with the token. In the absence of this
     * parameter, the ID of the authenticated entity is treated as the
     * subject.
     */
    subject?: string;
}
/**
 * auth-tokens-list-response
 * The response to list the token metadata.
 */
export interface AuthTokensListResponse {
    /** The list of token metadata. */
    tokens: AuthToken[];
}
/**
 * auth-tokens-org-traits
 * Carries Rev org info.
 */
export interface AuthTokensOrgTraits {
    /** Application-defined custom fields of the Rev org. */
    custom_fields?: object;
    /** The description of the Rev org. */
    description?: string;
    /** The display name of the Rev org. */
    display_name?: string;
    /** The domain of the Rev org. */
    domain?: string;
    /** Phone numbers of the Rev org. */
    phone_numbers?: string[];
    /** The tier of the Rev org. */
    tier?: string;
}
/**
 * auth-tokens-rev-info
 * Carries info corresponding to the Rev user to be provisioned and/or
 * issue a Rev session token.
 */
export interface AuthTokensRevInfo {
    /** An identifier which uniquely identifies an Account. */
    account_ref?: string;
    /** Carries account info. */
    account_traits?: AuthTokensAccountTraits;
    /** An identifier which uniquely identifies a Rev org. */
    org_ref?: string;
    /** Carries Rev org info. */
    org_traits?: AuthTokensOrgTraits;
    /** The unique ID of the Rev user. */
    user_id?: string;
    /** An identifier which uniquely identifies a Rev user. */
    user_ref?: string;
    /** Carries Rev user info. */
    user_traits?: AuthTokensUserTraits;
    /** An identifier which uniquely identifies a Workspace. */
    workspace_ref?: string;
    /** Carries Rev org info. */
    workspace_traits?: AuthTokensOrgTraits;
}
/**
 * auth-tokens-self-delete-request
 * The request to delete all the tokens created by the authenticated user,
 * that match with the provided token type.
 */
export interface AuthTokensSelfDeleteRequest {
    /** The type of the requested token. */
    requested_token_type?: AuthTokenRequestedTokenType;
}
/**
 * auth-tokens-update-request
 * A request to update the token metadata.
 */
export interface AuthTokensUpdateRequest {
    /** A hint that identifies the token. */
    token_hint: string;
    /** The unique identifier of the token under a given Dev organization. */
    token_id: string;
}
/**
 * auth-tokens-update-response
 * Response for the request to update the token metadata.
 */
export interface AuthTokensUpdateResponse {
    token: AuthToken;
}
/**
 * auth-tokens-user-traits
 * Carries Rev user info.
 */
export interface AuthTokensUserTraits {
    /** Application-defined custom fields of the Rev user. */
    custom_fields?: object;
    /** The description of the Rev user. */
    description?: string;
    /** The display name of the Rev user. */
    display_name?: string;
    /** The email address of the Rev user. */
    email?: string;
    /**
     * The full name of the Rev user.
     * @deprecated
     */
    full_name?: string;
    /** Phone numbers of the Rev user. */
    phone_numbers?: string[];
}
/** Authorization type. */
export declare enum AuthorizationTypeEnum {
    Oauth = "oauth",
    Secret = "secret"
}
/**
 * authorize-request-config
 * Configure how users authorize your application to access their data by
 * setting the authentication method, URLs, parameters, and optional token
 * expiry check.
 */
export interface AuthorizeRequestConfig {
    /**
     * Add any additional parameters required for the authorization
     * request (optional).
     */
    auth_query_parameters?: KeyValue[];
    /** Specify the URL where users sign in or grant access to their data. */
    auth_url?: string;
    /**
     * Choose the OAuth2 authorization grant type. Currently, only the
     * authorization_code grant type is supported for OAuth2.
     */
    grant_type?: AuthorizeRequestConfigGrantType;
    /**
     * Define the template for making HTTP requests, including URL, method,
     * headers, query parameters, body (if needed), and optional JQ filtering.
     */
    token_expiry_request?: HttpRequestTemplate;
    /**
     * Add any additional parameters needed for the token request
     * (optional).
     */
    token_query_parameters?: KeyValue[];
    /**
     * Specify the URL to obtain an access token after successful
     * authorization.
     */
    token_url?: string;
    /**
     * Choose the authorization method, configuration (predefined settings) or
     * function (custom code).
     */
    type?: AuthorizeRequestConfigType;
}
/**
 * Choose the OAuth2 authorization grant type. Currently, only the
 * authorization_code grant type is supported for OAuth2.
 */
export declare enum AuthorizeRequestConfigGrantType {
    AuthorizationCode = "authorization_code"
}
/**
 * Choose the authorization method, configuration (predefined settings) or
 * function (custom code).
 */
export declare enum AuthorizeRequestConfigType {
    Config = "config",
    Function = "function"
}
/** authorized-field-metadata */
export interface AuthorizedFieldMetadata {
    /** The field's name */
    name: string;
    /** The privilege information for that field */
    privileges: FieldPrivilege[];
}
/**
 * auto-suggest-request
 * Autosuggest request.
 */
export interface AutoSuggestRequest {
    /** User action types. */
    action?: UserAction;
    /** Work fields required for recommendation. */
    context: WorkContext;
    /** The fields for which recommendation is required. */
    requested_fields?: AutoSuggestRequestedField[];
}
/** Field types for autosuggest recommendation. */
export declare enum AutoSuggestRequestedField {
    AppliesToPart = "applies_to_part",
    OwnedBy = "owned_by",
    Tag = "tag"
}
/**
 * auto-suggest-response
 * Autosuggest response.
 */
export interface AutoSuggestResponse {
    /** Autosuggest recommendation for given required fields. */
    recommendation: Recommendation;
    /** Version of the autosuggest model. */
    version?: string;
}
/** automation */
export type Automation = AtomBase & {
    /** List of actions to run in the automation. */
    actions?: AutomationAction[];
    /** Description of the automation. */
    description?: string;
    flow?: FlowSummary;
    /** Name of the automation. */
    name?: string;
    snap_in?: SnapInSummary;
    snap_in_function_id?: SnapInFunctionSummary;
    /** Status of the automation. */
    status?: AutomationStatus;
    /** List of triggers that could execute the automation. */
    triggers: AutomationTrigger[];
};
/**
 * automation-action
 * Action defines some logic to run.
 */
export interface AutomationAction {
    /**
     * The raw code to execute, defined in the language specified by
     * executor.
     */
    code?: string;
    /** Executor specific config. */
    executor_config?: object;
    /** Specifies how the action is defined. */
    executor_type?: ActionExecutorType;
    /** Name of the action. */
    name?: string;
    /** Parameters of the action. */
    parameters?: object;
    /**
     * Defines name of the variable to store output of the action in, and
     * is accessible globally throughout the automation. If multiple
     * actions, within an automation, define the same name of the
     * register, the value stored in register is output of the last action
     * run.
     */
    register?: string;
}
/**
 * automation-key-extractor
 * Key extractor defines logic for extracting a key from an event payload.
 */
export interface AutomationKeyExtractor {
    /** Type of the key extractor. */
    executor_type?: KeyExtractorExecutorType;
    /** Logic for key extraction. */
    extraction_logic?: string;
    /** Configuration of the extractor. */
    extractor_config?: object;
}
/** Status of the automation. */
export declare enum AutomationStatus {
    Active = "active",
    Blocked = "blocked",
    Deprecated = "deprecated",
    Draft = "draft",
    Inactive = "inactive"
}
/** automation-summary */
export type AutomationSummary = AtomBaseSummary & {
    /** Description of the automation. */
    description?: string;
    /** Name of the automation. */
    name?: string;
};
/**
 * automation-trigger
 * Defines a trigger for an automation.
 */
export interface AutomationTrigger {
    /** Name of the event source as referenced in the snap-in. */
    event_source?: string;
    /** List of events subscribed from the source. */
    event_types?: string[];
    source?: AtomSummary;
    /** Key extractor defines logic for extracting a key from an event payload. */
    synchronization_key?: AutomationKeyExtractor;
}
/**
 * availability-preferences-group
 * Preferences group for Availability.
 */
export interface AvailabilityPreferencesGroup {
    /** Manually set presence to away. */
    manual_away?: boolean;
}
/** banner-nudge-widget */
export type BannerNudgeWidget = (NativeBannerNudgeWidget | SnapKitBannerNudgeWidget) & {
    banner_nudge_type: BannerNudgeWidgetBannerNudgeType;
};
export declare enum BannerNudgeWidgetBannerNudgeType {
    Native = "native",
    SnapKit = "snap_kit"
}
/** banner-nudge-widget-base */
export type BannerNudgeWidgetBase = SnapWidgetBase & {
    /** The background color of the banner nudge widget. */
    background_color?: string;
    /** The position of the banner nudge widget. */
    position: BannerNudgeWidgetPosition;
    /** Whether to show the close button on the banner nudge widget. */
    show_close_button: boolean;
    /** The variant of the banner nudge widget. */
    variant: BannerNudgeWidgetVariant;
};
/** banner-nudge-widget-base-summary */
export type BannerNudgeWidgetBaseSummary = SnapWidgetBaseSummary;
/** The position of the banner nudge widget. */
export declare enum BannerNudgeWidgetPosition {
    Bottom = "bottom",
    Top = "top"
}
/** banner-nudge-widget-summary */
export type BannerNudgeWidgetSummary = (NativeBannerNudgeWidgetSummary | SnapKitBannerNudgeWidgetSummary) & {
    banner_nudge_type: BannerNudgeWidgetBannerNudgeType;
};
/** The variant of the banner nudge widget. */
export declare enum BannerNudgeWidgetVariant {
    Floating = "floating",
    Inline = "inline"
}
/**
 * bar-visualization-x-axis
 * The X-axis for a bar visualization.
 */
export interface BarVisualizationXAxis {
    /** The color for an axis. This can be a single color or a gradient. */
    color?: VisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: VisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name: string;
}
/**
 * bar-visualization-y-axis
 * The Y-axis for a bar visualization.
 */
export interface BarVisualizationYAxis {
    /** The color for an axis. This can be a single color or a gradient. */
    color?: VisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: VisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name: string;
}
/**
 * bar-widget-visualization
 * A bar chart visualization configuration. Includes metadata specific to
 * bar charts.
 */
export interface BarWidgetVisualization {
    /** Whether the bar should be stacked. */
    is_stacked?: boolean;
    /** The configuration for the X-axis. */
    x: BarVisualizationXAxis[];
    /** The configuration for the Y-axes. */
    y: BarVisualizationYAxis[];
}
/** batch-apply-request */
export interface BatchApplyRequest {
    /** An individual request item. */
    items: BatchApplyRequestItem[];
}
/** batch-apply-request-item */
export type BatchApplyRequestItem = (AccountsCountRequest | AccountsCreateRequest | AccountsDeleteRequest | AccountsDeleteValidateRequest | AccountsGetRequest | AccountsUpdateRequest | ArticlesCountRequest | ArticlesDeleteRequest | ArticlesGetRequest | ArticlesUpdateRequest | AtomsGetRequest | AtomsSummaryRequest | ConversationsCountRequest | ConversationsCreateRequest | ConversationsDeleteRequest | ConversationsGetRequest | ConversationsUpdateRequest | CustomSchemaFragmentsGetRequest | CustomStagesGetRequest | LinksCreateRequest | LinksDeleteRequest | LinksGetRequest | LinksReplaceRequest | ObjectMembersCountRequest | PartsCountRequest | PartsCreateRequest | PartsDeleteRequest | PartsGetRequest | PartsUpdateRequest | QuestionAnswersGetRequest | RevOrgsCountRequest | RevOrgsCreateRequest | RevOrgsDeleteRequest | RevOrgsDeleteValidateRequest | RevOrgsGetRequest | RevOrgsUpdateRequest | RevUsersCountRequest | RevUsersCreateRequest | RevUsersDeleteRequest | RevUsersGetRequest | RevUsersUpdateRequest | SearchCoreRequest | ServiceAccountsGetRequest | SubtypesListRequest | TagsCreateRequest | TagsDeleteRequest | TagsGetRequest | TagsUpdateRequest | TimelineEntriesCreateRequest | TimelineEntriesDeleteRequest | TimelineEntriesGetRequest | TimelineEntriesListRequest | TimelineEntriesUpdateRequest | UserPrivilegesRequest | VistasGetRequest | VistasGroupsGetRequest | WorksCountRequest | WorksCreateRequest | WorksDeleteRequest | WorksGetRequest | WorksUpdateRequest) & {
    batch_type: BatchApplyRequestItemBatchType;
};
export declare enum BatchApplyRequestItemBatchType {
    AccountsCount = "accounts_count",
    AccountsCreate = "accounts_create",
    AccountsDelete = "accounts_delete",
    AccountsDeleteValidate = "accounts_delete_validate",
    AccountsGet = "accounts_get",
    AccountsUpdate = "accounts_update",
    ArticlesCount = "articles_count",
    ArticlesDelete = "articles_delete",
    ArticlesGet = "articles_get",
    ArticlesUpdate = "articles_update",
    AtomsGet = "atoms_get",
    AtomsSummary = "atoms_summary",
    ConversationsCount = "conversations_count",
    ConversationsCreate = "conversations_create",
    ConversationsDelete = "conversations_delete",
    ConversationsGet = "conversations_get",
    ConversationsUpdate = "conversations_update",
    CustomSchemaFragmentsGet = "custom_schema_fragments_get",
    CustomStagesGet = "custom_stages_get",
    LinksCreate = "links_create",
    LinksDelete = "links_delete",
    LinksGet = "links_get",
    LinksReplace = "links_replace",
    ObjectMembersCount = "object_members_count",
    PartsCount = "parts_count",
    PartsCreate = "parts_create",
    PartsDelete = "parts_delete",
    PartsGet = "parts_get",
    PartsUpdate = "parts_update",
    QuestionAnswersGet = "question_answers_get",
    RevOrgsCount = "rev_orgs_count",
    RevOrgsCreate = "rev_orgs_create",
    RevOrgsDelete = "rev_orgs_delete",
    RevOrgsDeleteValidate = "rev_orgs_delete_validate",
    RevOrgsGet = "rev_orgs_get",
    RevOrgsUpdate = "rev_orgs_update",
    RevUsersCount = "rev_users_count",
    RevUsersCreate = "rev_users_create",
    RevUsersDelete = "rev_users_delete",
    RevUsersGet = "rev_users_get",
    RevUsersUpdate = "rev_users_update",
    SearchCore = "search_core",
    ServiceAccountsGet = "service_accounts_get",
    SubtypesList = "subtypes_list",
    TagsCreate = "tags_create",
    TagsDelete = "tags_delete",
    TagsGet = "tags_get",
    TagsUpdate = "tags_update",
    TimelineEntriesCreate = "timeline_entries_create",
    TimelineEntriesDelete = "timeline_entries_delete",
    TimelineEntriesGet = "timeline_entries_get",
    TimelineEntriesList = "timeline_entries_list",
    TimelineEntriesUpdate = "timeline_entries_update",
    UserPrivileges = "user_privileges",
    VistasGet = "vistas_get",
    VistasGroupsGet = "vistas_groups_get",
    WorksCount = "works_count",
    WorksCreate = "works_create",
    WorksDelete = "works_delete",
    WorksGet = "works_get",
    WorksUpdate = "works_update"
}
/** batch-apply-response */
export interface BatchApplyResponse {
    /**
     * An individual response item. The item will be the response for the
     * corresponding index in the request.
     */
    items: BatchApplyResponseItem[];
}
/** batch-apply-response-item */
export type BatchApplyResponseItem = (AccountsCountResponse | AccountsCreateResponse | AccountsDeleteResponse | AccountsDeleteValidateResponse | AccountsGetResponse | AccountsUpdateResponse | ArticlesCountResponse | ArticlesDeleteResponse | ArticlesGetResponse | ArticlesUpdateResponse | AtomsGetResponse | AtomsSummaryResponse | ConversationsCountResponse | ConversationsCreateResponse | ConversationsDeleteResponse | ConversationsGetResponse | ConversationsUpdateResponse | CustomSchemaFragmentsGetResponse | CustomStagesGetResponse | Error | LinksCreateResponse | LinksDeleteResponse | LinksGetResponse | LinksReplaceResponse | ObjectMembersCountResponse | PartsCountResponse | PartsCreateResponse | PartsDeleteResponse | PartsGetResponse | PartsUpdateResponse | QuestionAnswersGetResponse | RevOrgsCountResponse | RevOrgsCreateResponse | RevOrgsDeleteResponse | RevOrgsDeleteValidateResponse | RevOrgsGetResponse | RevOrgsUpdateResponse | RevUsersCountResponse | RevUsersCreateResponse | RevUsersDeleteResponse | RevUsersGetResponse | RevUsersUpdateResponse | SearchCoreResponse | ServiceAccountsGetResponse | SubtypesListResponse | TagsCreateResponse | TagsDeleteResponse | TagsGetResponse | TagsUpdateResponse | TimelineEntriesCreateResponse | TimelineEntriesDeleteResponse | TimelineEntriesGetResponse | TimelineEntriesListResponse | TimelineEntriesUpdateResponse | UserPrivilegesResponse | VistasGetResponse | VistasGroupsGetResponse | WorksCountResponse | WorksCreateResponse | WorksDeleteResponse | WorksGetResponse | WorksUpdateResponse) & {
    batch_type: BatchApplyResponseItemBatchType;
};
export declare enum BatchApplyResponseItemBatchType {
    AccountsCount = "accounts_count",
    AccountsCreate = "accounts_create",
    AccountsDelete = "accounts_delete",
    AccountsDeleteValidate = "accounts_delete_validate",
    AccountsGet = "accounts_get",
    AccountsUpdate = "accounts_update",
    ArticlesCount = "articles_count",
    ArticlesDelete = "articles_delete",
    ArticlesGet = "articles_get",
    ArticlesUpdate = "articles_update",
    AtomsGet = "atoms_get",
    AtomsSummary = "atoms_summary",
    ConversationsCount = "conversations_count",
    ConversationsCreate = "conversations_create",
    ConversationsDelete = "conversations_delete",
    ConversationsGet = "conversations_get",
    ConversationsUpdate = "conversations_update",
    CustomSchemaFragmentsGet = "custom_schema_fragments_get",
    CustomStagesGet = "custom_stages_get",
    Error = "error",
    LinksCreate = "links_create",
    LinksDelete = "links_delete",
    LinksGet = "links_get",
    LinksReplace = "links_replace",
    ObjectMembersCount = "object_members_count",
    PartsCount = "parts_count",
    PartsCreate = "parts_create",
    PartsDelete = "parts_delete",
    PartsGet = "parts_get",
    PartsUpdate = "parts_update",
    QuestionAnswersGet = "question_answers_get",
    RevOrgsCount = "rev_orgs_count",
    RevOrgsCreate = "rev_orgs_create",
    RevOrgsDelete = "rev_orgs_delete",
    RevOrgsDeleteValidate = "rev_orgs_delete_validate",
    RevOrgsGet = "rev_orgs_get",
    RevOrgsUpdate = "rev_orgs_update",
    RevUsersCount = "rev_users_count",
    RevUsersCreate = "rev_users_create",
    RevUsersDelete = "rev_users_delete",
    RevUsersGet = "rev_users_get",
    RevUsersUpdate = "rev_users_update",
    SearchCore = "search_core",
    ServiceAccountsGet = "service_accounts_get",
    SubtypesList = "subtypes_list",
    TagsCreate = "tags_create",
    TagsDelete = "tags_delete",
    TagsGet = "tags_get",
    TagsUpdate = "tags_update",
    TimelineEntriesCreate = "timeline_entries_create",
    TimelineEntriesDelete = "timeline_entries_delete",
    TimelineEntriesGet = "timeline_entries_get",
    TimelineEntriesList = "timeline_entries_list",
    TimelineEntriesUpdate = "timeline_entries_update",
    UserPrivileges = "user_privileges",
    VistasGet = "vistas_get",
    VistasGroupsGet = "vistas_groups_get",
    WorksCount = "works_count",
    WorksCreate = "works_create",
    WorksDelete = "works_delete",
    WorksGet = "works_get",
    WorksUpdate = "works_update"
}
/**
 * boolean-expression
 * Boolean expression.
 */
export type BooleanExpression = (BooleanExpressionAndExpression | BooleanExpressionNotExpression | BooleanExpressionOrExpression | BooleanExpressionPrimitiveExpression) & {
    type: BooleanExpressionType;
};
/**
 * boolean-expression-and-expression
 * All the expressions would be 'and'ed together.
 */
export interface BooleanExpressionAndExpression {
    expressions: BooleanExpression[];
}
/** boolean-expression-evaluate-request */
export interface BooleanExpressionEvaluateRequest {
    /** Boolean expression. */
    expression: BooleanExpression;
    /** ID of the target object. */
    target: string;
}
/** boolean-expression-evaluate-response */
export interface BooleanExpressionEvaluateResponse {
    /** Result of the evaluation. */
    result: boolean;
}
/**
 * boolean-expression-not-expression
 * The expression would be negated.
 */
export interface BooleanExpressionNotExpression {
    /** Boolean expression. */
    expression: BooleanExpression;
}
/**
 * boolean-expression-or-expression
 * All the expressions would be 'or'ed together.
 */
export interface BooleanExpressionOrExpression {
    expressions: BooleanExpression[];
}
/**
 * boolean-expression-primitive-expression
 * The primitive expression type.
 */
export interface BooleanExpressionPrimitiveExpression {
    /** Selector. */
    key: Selector;
    /** The operator used to compare the key and the value. */
    operator: BooleanExpressionPrimitiveExpressionOperatorValue;
    /** The possible value in the primitive expression. */
    value: BooleanExpressionPrimitiveExpressionValue;
}
/** The operator used to compare the key and the value. */
export declare enum BooleanExpressionPrimitiveExpressionOperatorValue {
    Eq = "eq",
    In = "in",
    Neq = "neq"
}
/**
 * boolean-expression-primitive-expression-value
 * The possible value in the primitive expression.
 */
export type BooleanExpressionPrimitiveExpressionValue = (BooleanExpressionPrimitiveExpressionValueArrayValue | BooleanExpressionPrimitiveExpressionValueBoolValue | BooleanExpressionPrimitiveExpressionValueIdValue | BooleanExpressionPrimitiveExpressionValueIntValue | BooleanExpressionPrimitiveExpressionValueSelectorValue | BooleanExpressionPrimitiveExpressionValueStringValue) & {
    value_type: BooleanExpressionPrimitiveExpressionValueValueType;
};
/**
 * boolean-expression-primitive-expression-value-array-value
 * Array value.
 */
export type BooleanExpressionPrimitiveExpressionValueArrayValue = (BooleanExpressionPrimitiveExpressionValueArrayValueIdList | BooleanExpressionPrimitiveExpressionValueArrayValueIntList | BooleanExpressionPrimitiveExpressionValueArrayValueStringList) & {
    base_type: BooleanExpressionPrimitiveExpressionValueArrayValueBaseType;
};
export declare enum BooleanExpressionPrimitiveExpressionValueArrayValueBaseType {
    Id = "id",
    Int = "int",
    String = "string"
}
/**
 * boolean-expression-primitive-expression-value-array-value-id-list
 * List of IDs.
 */
export interface BooleanExpressionPrimitiveExpressionValueArrayValueIdList {
    /** List of IDs. */
    id: string[];
}
/**
 * boolean-expression-primitive-expression-value-array-value-int-list
 * List of integers.
 */
export interface BooleanExpressionPrimitiveExpressionValueArrayValueIntList {
    /** List of integers. */
    int: BooleanExpressionPrimitiveExpressionValueIntValue[];
}
/**
 * boolean-expression-primitive-expression-value-array-value-string-list
 * List of strings.
 */
export interface BooleanExpressionPrimitiveExpressionValueArrayValueStringList {
    /** List of strings. */
    string: BooleanExpressionPrimitiveExpressionValueStringValue[];
}
/**
 * boolean-expression-primitive-expression-value-bool-value
 * Boolean value.
 */
export interface BooleanExpressionPrimitiveExpressionValueBoolValue {
    /** Boolean value. */
    bool: boolean;
}
/**
 * boolean-expression-primitive-expression-value-id-value
 * ID value.
 */
export interface BooleanExpressionPrimitiveExpressionValueIdValue {
    /** ID value. */
    id: string;
}
/**
 * boolean-expression-primitive-expression-value-int-value
 * Integer value.
 */
export interface BooleanExpressionPrimitiveExpressionValueIntValue {
    /**
     * Integer value.
     * @format int64
     */
    int: number;
}
/**
 * boolean-expression-primitive-expression-value-selector-value
 * Selector value.
 */
export interface BooleanExpressionPrimitiveExpressionValueSelectorValue {
    /** Selector. */
    attribute: Selector;
}
/**
 * boolean-expression-primitive-expression-value-string-value
 * String value.
 */
export interface BooleanExpressionPrimitiveExpressionValueStringValue {
    /** String value. */
    string: string;
}
export declare enum BooleanExpressionPrimitiveExpressionValueValueType {
    Array = "array",
    Attribute = "attribute",
    Bool = "bool",
    Id = "id",
    Int = "int",
    String = "string"
}
export declare enum BooleanExpressionType {
    And = "and",
    Not = "not",
    Or = "or",
    Primitive = "primitive"
}
/**
 * boolean-expression-validate-request
 * Request to validate an expression.
 */
export interface BooleanExpressionValidateRequest {
    /** Boolean expression. */
    expression: BooleanExpression;
    /**
     * Maximum depth of the expression tree.
     * @format int32
     */
    max_depth?: number;
    target_object_type: AtomType;
}
/**
 * boolean-expression-validate-response
 * Response that indicates successful validation.
 */
export type BooleanExpressionValidateResponse = object;
/** bot */
export type Bot = AtomBase & {
    /** Journeys associated with the bot. */
    associated_journeys: AtomSummary[];
    /** Name of the bot. */
    name?: string;
    /** Status of the bot. */
    status?: BotStatus;
};
/** bot-snapshot */
export type BotSnapshot = AtomBase & {
    /**
     * Index of the current action in the scenario.
     * @format int32
     */
    active_action?: number;
    active_scenario?: AtomSummary;
    bot_id?: AtomSummary;
    /**
     * Timestamp of the last comment processed.
     * @format int32
     */
    last_comment_timestamp?: number;
    parent_id?: AtomSummary;
    processed_comment?: TimelineCommentSummary;
    /** List of slot, value pairs. */
    slot_values?: SlotValue[];
};
/** bot-snapshot-summary */
export type BotSnapshotSummary = AtomBaseSummary;
/** Status of the bot. */
export declare enum BotStatus {
    Archived = "archived",
    Draft = "draft",
    InTesting = "in_testing",
    Published = "published"
}
/**
 * bot-status-get-request
 * The request to get bot status.
 */
export interface BotStatusGetRequest {
    /** The bot id. */
    id: string;
}
/**
 * bot-status-get-response
 * Get bot status response.
 */
export interface BotStatusGetResponse {
    /** Action that'll be executed by the bot. */
    action: SynapseAction;
    /** Last processed comment. */
    comment: string;
    scenario: Scenario;
    /** List of slot name and value pairs. */
    slot_map_list: SlotMapList;
}
/** bot-summary */
export type BotSummary = AtomBaseSummary & {
    /** Name of the bot. */
    name?: string;
};
/**
 * bucket
 * Defines a bucket object.
 */
export interface Bucket {
    /** Whether the bucket is public or not. */
    is_public?: boolean;
    /** Name of the bucket. */
    name?: string;
}
export declare enum BulkImportRequestTypeEnum {
    Create = "create",
    PreviewHeaders = "preview_headers",
    PreviewRecords = "preview_records",
    Unknown = "unknown"
}
/** call */
export type Call = EngagementNewBase & {
    /** Number from which the call was received. */
    call_from?: string;
    /** Number to which the call was made. */
    call_to?: string;
    /** Direction of the call. */
    direction?: string;
    /** Members in the call. */
    members?: CallMembers[];
};
/**
 * call-members
 * Members in a call.
 */
export interface CallMembers {
    member_id?: UserSummary;
    /** State of the member. */
    member_state?: string;
}
/** call-summary */
export type CallSummary = EngagementNewBaseSummary;
/** capabilities-list-request */
export type CapabilitiesListRequest = object;
/** capabilities-list-response */
export interface CapabilitiesListResponse {
    /** List of supported categories. */
    categories: string[];
    /** List of supported external services. */
    external_services: CapabilitiesListResponseExternalService[];
}
/** capabilities-list-response-external-service */
export interface CapabilitiesListResponseExternalService {
    /** Supported keyring categories. */
    categories: string[];
    /** Supported keyring types (connections) to the external service. */
    connections: CapabilitiesListResponseExternalServiceConnection[];
    /** Unique id of the external service. */
    id: string;
    /** User friendly name of the external service. */
    name: string;
}
/** capabilities-list-response-external-service-connection */
export interface CapabilitiesListResponseExternalServiceConnection {
    /** Obsolete. Use type_id instead. */
    add_new_org_keyring_type?: KeyringTypeEnum;
    /** Authorization type. */
    authorization_type: AuthorizationTypeEnum;
    /** Can user create a new keyring of this type. */
    can_create: boolean;
    /** Can user trigger a reauthorization. */
    can_reauthorize: boolean;
    /** Connection description */
    description?: string;
    /** An array of fields to render to the user. */
    fields?: CapabilitiesListResponseExternalServiceConnectionField[];
    /** If true, the connection is a subdomain. */
    is_subdomain: boolean;
    /** Obsolete. Use type_id instead. */
    keyring_type: KeyringTypeEnum;
    /** Keyring type ID used to connect to the external system. */
    keyring_type_id: string;
    /** Name of the connection. */
    name?: string;
    /** Scopes required to create a connection. */
    scopes?: ScopeDefinition[];
}
/** capabilities-list-response-external-service-connection-field */
export interface CapabilitiesListResponseExternalServiceConnectionField {
    /** String to show in the UI. */
    label: string;
    /** Is a property name that will be used to store the data in JSON */
    name: string;
    /**
     * If true, the user will not be able to create a connection until the
     * user has provided data inside this input.
     */
    required: boolean;
}
/** capability */
export type Capability = PartBase & {
    /** IDs of the runnables that fulfill this capability. */
    fulfilled_by?: PartSummary[];
    part_of_part?: PartSummary;
    pm_owner?: UserSummary;
};
/** capability-summary */
export type CapabilitySummary = PartBaseSummary;
/**
 * caveat
 * Caveats for the role.
 */
export interface Caveat {
    /** Selector. */
    key: Selector;
    /** The operator used to compare the key and the value. */
    operator: CaveatOperator;
    /** Primitive Value. */
    value: PrimitiveValue;
}
/** The operator used to compare the key and the value. */
export declare enum CaveatOperator {
    Eq = "eq",
    In = "in",
    NotEq = "not_eq"
}
/** channel */
export type Channel = ChatBase & {
    access_level?: AccessLevel;
    /**
     * The name of the channel. If provided, this will be unique across
     * all channels in the Dev org. It's case insensitive and must contain
     * the characters [A-Za-z0-9_-].
     */
    name?: string;
};
/** channel-summary */
export type ChannelSummary = ChatBaseSummary;
/**
 * charge-detail
 * It contains the pricing, quantity and amount related information that
 * constitute a charge in a invoice line item.
 */
export interface ChargeDetail {
    /**
     * Total amount for the line item (quantity * unit_price).
     * @format double
     */
    amount: number;
    /** Description of the invoice line item. */
    description?: string;
    /**
     * Quantity of the line item.
     * @format int32
     */
    quantity: number;
    /**
     * Tax on the charge detail amount.
     * @format double
     */
    tax_amount?: number;
    /**
     * Per unit price of the subscription item.
     * @format double
     */
    unit_price: number;
}
/**
 * charge-detail-summary
 * It contains the pricing, quantity and amount related information that
 * constitute a charge in a invoice line item.
 */
export interface ChargeDetailSummary {
    /**
     * Total amount for the line item (quantity * unit_price).
     * @format double
     */
    amount: number;
    /** Description of the invoice line item. */
    description?: string;
    /**
     * Quantity of the line item.
     * @format int32
     */
    quantity: number;
    /**
     * Tax on the charge detail amount.
     * @format double
     */
    tax_amount?: number;
    /**
     * Per unit price of the subscription item.
     * @format double
     */
    unit_price: number;
}
/** chat */
export type Chat = Channel & {
    type: ChatType;
};
/** chat-base */
export type ChatBase = AtomBase & {
    /** The title given to the chat. */
    title?: string;
};
/** chat-base-summary */
export type ChatBaseSummary = AtomBaseSummary;
/**
 * chat-complete-request
 * The request to complete a chat.
 */
export interface ChatCompleteRequest {
    /**
     * The maximum number of tokens to be returned in response.
     * @format int32
     */
    max_tokens?: number;
    /**
     * List of chat messages.
     * @minItems 1
     */
    messages: ChatCompleteRequestMessage[];
    /**
     * sampling temperature to use, should between 0 and 2. Higher values
     * make the output more random, while lower values make it more
     * deterministic.
     * @format float
     */
    temperature?: number;
}
/** chat-complete-request-message */
export interface ChatCompleteRequestMessage {
    /** Text content of the message. */
    content: string;
    /** Role of the author. */
    role: string;
}
/**
 * chat-complete-response
 * The response for the generated completion.
 */
export interface ChatCompleteResponse {
    /** The completion generated for the chat. */
    completion?: string;
}
/**
 * chat-completions-request
 * The request to complete a chat conversation.
 */
export interface ChatCompletionsRequest {
    /**
     * The maximum number of tokens that can be generated in the chat
     * completion. Defaults to null.
     * @format int32
     */
    max_tokens?: number;
    /**
     * A list of messages comprising the conversation so far.
     * @minItems 1
     */
    messages: ChatCompletionsRequestMessage[];
    /** ID of the model to use. Defaults to gpt-3.5-turbo. */
    model?: string;
    /** Model Provider */
    model_provider?: ChatCompletionsRequestProvider;
    /**
     * Sequences where the API will stop generating further tokens. For
     * openai: Max 4 Sequences. Defaults to null (empty list).
     */
    stop_sequences?: string[];
    /**
     * If set, partial message deltas will be sent. For openai: Defaults
     * to false.
     */
    stream?: boolean;
    /**
     * What sampling temperature to use. For openai: Between 0 and 2.
     * Defaults to 1.0. Higher values like 0.8 will make the output more
     * random, while lower values like 0.2 will make it more focused and
     * deterministic.
     * @format float
     */
    temperature?: number;
    /**
     * An alternative to sampling with temperature, called nucleus
     * sampling, where the model considers the results of the tokens with
     * top_p probability mass. So 0.1 means only the tokens comprising the
     * top 10% probability mass are considered. For openai: Between 0 and
     * 1. Defaults to 1.0.
     * @format float
     */
    top_p?: number;
}
/** chat-completions-request-message */
export interface ChatCompletionsRequestMessage {
    /** Text content of the message. */
    content: string;
    /** The role of the entity that is creating the message. */
    role: ChatCompletionsRequestMessageRole;
}
/** The role of the entity that is creating the message. */
export declare enum ChatCompletionsRequestMessageRole {
    Assistant = "assistant",
    System = "system",
    User = "user"
}
/** Model Provider */
export declare enum ChatCompletionsRequestProvider {
    Openai = "openai"
}
/**
 * chat-completions-response
 * The response for the generated chat completion.
 */
export interface ChatCompletionsResponse {
    /** Text response generated for the chat. */
    text_response: string;
}
export declare enum ChatType {
    Channel = "channel"
}
/** chats-create-request */
export type ChatsCreateRequest = ChatsCreateRequestChannel & {
    /**
     * If true and a chat already exists with unique properties that
     * conflict with the chat creation, then the existing chat is returned
     * without error, otherwise if false, a conflict error is returned.
     */
    get_if_conflict?: boolean;
    /** The title for the chat. */
    title?: string;
    type: ChatType;
};
/** chats-create-request-channel */
export interface ChatsCreateRequestChannel {
    access_level?: AccessLevel;
    /**
     * The name of the channel. If provided, this must be unique across
     * all channels in the Dev org. The name is case insensitive and
     * restricted to the character set [A-Za-z0-9_-]. If omitted, then an
     * anonymous channel is created that must be referenced by its ID.
     * @minLength 1
     * @maxLength 64
     */
    name?: string;
}
/** chats-create-response */
export interface ChatsCreateResponse {
    chat: Chat;
}
/** chats-delete-request */
export interface ChatsDeleteRequest {
    /** The chat's ID. */
    id: string;
}
/** chats-delete-response */
export type ChatsDeleteResponse = object;
/** chats-get-request */
export type ChatsGetRequest = (ChatsGetRequestChannel | Empty) & {
    /** The chat's ID. */
    id?: string;
    type?: ChatType;
};
/** chats-get-request-channel */
export interface ChatsGetRequestChannel {
    /**
     * The name of the channel.
     * @minLength 1
     * @maxLength 64
     */
    name?: string;
}
/** chats-get-response */
export interface ChatsGetResponse {
    chat: Chat;
}
/** chats-list-request */
export interface ChatsListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of chats to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Fields to sort the chats by and the direction to sort them. */
    sort_by?: string[];
    /** Filters for chats with the provided type(s). */
    type?: ChatType[];
}
/** chats-list-response */
export interface ChatsListResponse {
    /** The list of chats. */
    chats: Chat[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/** chats-update-request */
export interface ChatsUpdateRequest {
    /** The chat's ID. */
    id: string;
    /** The updated title for the chat, or unchanged if not provided. */
    title?: string;
}
/** chats-update-response */
export interface ChatsUpdateResponse {
    chat: Chat;
}
/**
 * classify-inquiry-request
 * Classify inquiry request.
 */
export interface ClassifyInquiryRequest {
    /**
     * The inquiry to be classified.
     * @minLength 1
     * @maxLength 2048
     */
    inquiry: string;
    /** Type of the classification. */
    type: ClassifyInquiryType;
}
/**
 * classify-inquiry-response
 * Classify inquiry response.
 */
export type ClassifyInquiryResponse = ClassifyInquiryResponseSpam & {
    /** Type of the classification. */
    type: ClassifyInquiryType;
};
/** classify-inquiry-response-spam */
export interface ClassifyInquiryResponseSpam {
    /**
     * Score indicating how likely the given query is spam. A value of 1.0
     * indicates a high likelihood of spam, while 0.0 indicates low
     * likelihood.
     * @format float
     * @min 0
     * @max 1
     */
    confidence: number;
    /** Reason for the classification. */
    justification?: string;
}
/** Type of the classification. */
export declare enum ClassifyInquiryType {
    Spam = "spam"
}
/**
 * clickable-notification-action
 * Clickable action to redirect notification to specific target.
 */
export interface ClickableNotificationAction {
    object?: AtomSummary;
    /** Internal/External URL for redirection. */
    url?: string;
}
/**
 * client-context
 * Properties of client to be used in track API.
 */
export interface ClientContext {
    /** Properties of client's browser to be used in track API. */
    browser?: ClientContextBrowser;
    /** Properties of client's CPU to be used in track API. */
    cpu?: ClientContextCpu;
    /** Properties of client's device to be used in track API. */
    device?: ClientContextDevice;
    /** Properties of client's engine to be used in track API. */
    engine?: ClientContextEngine;
    /** IP address of the client. */
    ip?: string;
    /** The client's locale, example: en-US. */
    locale?: string;
    /** Properties of client's OS to be used in track API. */
    os?: ClientContextOs;
    /** Properties of client's page to be used in track API. */
    page?: ClientContextPage;
    /** The client's timezone, example: Asia/Kolkata. */
    timezone?: string;
    /**
     * User agent of the client, example: Mozilla/5.0 (Macintosh; Intel
     * Mac OS X.
     */
    user_agent?: string;
}
/**
 * client-context-browser
 * Properties of client's browser to be used in track API.
 */
export interface ClientContextBrowser {
    /** The browser's name, example: Chrome, Safari. */
    name?: string;
    /** The browser's version, example: 53.0.2785.143. */
    version?: string;
}
/**
 * client-context-cpu
 * Properties of client's CPU to be used in track API.
 */
export interface ClientContextCpu {
    /** CPU architecture, example: amd64. */
    architecture?: string;
}
/**
 * client-context-device
 * Properties of client's device to be used in track API.
 */
export interface ClientContextDevice {
    /** Device manufacturer, example: Apple. */
    manufacturer?: string;
    /** Device model, example: iphone 6s. */
    model?: string;
    /** Device type, example: mobile, tablet, desktop. */
    type?: string;
}
/**
 * client-context-engine
 * Properties of client's engine to be used in track API.
 */
export interface ClientContextEngine {
    /** The engine's name, example: Blink, WebKit. */
    name?: string;
    /** The engine's version, example: 537.36. */
    version?: string;
}
/**
 * client-context-os
 * Properties of client's OS to be used in track API.
 */
export interface ClientContextOs {
    /** The OS's name, example : Windows, Mac OS X. */
    name?: string;
    /** The OS's version, example : 10.11.1. */
    version?: string;
}
/**
 * client-context-page
 * Properties of client's page to be used in track API.
 */
export interface ClientContextPage {
    /** Page domain, example: devrev.ai */
    domain?: string;
    /** Page path, example: /pricing */
    path?: string;
    /** Page referrer, example: https://devrev.ai */
    referrer?: string;
    /** Page title, example: Pricing */
    title?: string;
    /** Page URL, example: https://devrev.ai/pricing */
    url?: string;
}
/** client-frame */
export interface ClientFrame {
    focus?: Focus;
    view_frame: ViewFrame;
}
/** code-change */
export type CodeChange = AtomBase & {
    /** Name of the code branch in the repo. */
    branch?: string;
    /** Detailed description of the contents of this change. */
    description?: string;
    /** Unique external identifier for this change.e.g Pull Request URL. */
    external_identifier?: string;
    /** Details of lines of code in this code change. */
    filtered_loc?: LinesOfCode;
    /** Links associated with the object. */
    links?: ArchetypeLinkSummary[];
    /** URL pointing to the repo this change was on. */
    repo_url?: string;
    /** Source of the code change object. */
    source?: CodeChangeSource;
    /** Title describing in brief the contents of this change. */
    title?: string;
    /** Details of lines of code in this code change. */
    total_loc?: LinesOfCode;
};
/** code-change-loc */
export interface CodeChangeLoc {
    /**
     * Count of files involved in this code change.
     * @format int64
     */
    file_count?: number;
    /**
     * Number of new lines added in this code change.
     * @format int64
     */
    lines_added?: number;
    /**
     * Number of lines deleted in this code change.
     * @format int64
     */
    lines_deleted?: number;
    /**
     * Number of lines modified in this code change.
     * @format int64
     */
    lines_modified?: number;
}
/** Source of the code change object. */
export declare enum CodeChangeSource {
    Github = "github"
}
export declare enum CodeChangeSourceValue {
    Github = "github"
}
/** code-change-summary */
export type CodeChangeSummary = AtomBaseSummary;
/** code-changes-create-request */
export interface CodeChangesCreateRequest {
    /** Code branch in the source code management system like github */
    branch?: string;
    /** Description of the code change. */
    description?: string;
    /**
     * External identifier that uniquely identifies the code change. e.g
     * github PR URL
     */
    external_identifier?: string;
    filtered_loc?: CodeChangeLoc;
    /** Code Repo Url */
    repo_url?: string;
    source: CodeChangeSourceValue;
    /** Title for the code change. */
    title: string;
    total_loc?: CodeChangeLoc;
}
/** code-changes-create-response */
export interface CodeChangesCreateResponse {
    code_change: CodeChange;
}
/** code-changes-delete-request */
export interface CodeChangesDeleteRequest {
    /** ID of the code change object which is to be deleted. */
    id: string;
}
/** code-changes-delete-response */
export type CodeChangesDeleteResponse = object;
/** code-changes-get-request */
export interface CodeChangesGetRequest {
    /** The code change object ID. */
    id: string;
}
/** code-changes-get-response */
export interface CodeChangesGetResponse {
    code_change: CodeChange;
}
/** code-changes-list-request */
export interface CodeChangesListRequest {
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * Filters for code change objects with the provided external
     * identifier.
     */
    external_identifier?: string[];
    /**
     * The maximum number of code change objects to return. The default is
     * '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** Filters for code change objects with the provided repo URL. */
    repo_url?: string[];
    /**
     * Fields to sort the code change objects by and the direction to sort
     * them.
     */
    sort_by?: string[];
    /** Filters for code change objects by its source */
    source?: CodeChangeSourceValue[];
}
/** code-changes-list-response */
export interface CodeChangesListResponse {
    /** The list of requested code change objects. */
    code_changes: CodeChange[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/** code-changes-update-request */
export interface CodeChangesUpdateRequest {
    /** Description of the code change. */
    description?: string;
    filtered_loc?: CodeChangeLoc;
    /** The ID of the code change object to be updated. */
    id: string;
    /** Title for the code change. */
    title?: string;
    total_loc?: CodeChangeLoc;
}
/** code-changes-update-response */
export interface CodeChangesUpdateResponse {
    code_change: CodeChange;
}
/**
 * code-version-summary
 * Code version details.
 */
export interface CodeVersionSummary {
    /** Branch name or URL to the branch the version is cut from. */
    branch?: string;
    code_version?: AtomSummary;
    /** ID of the author of the commit. */
    commit_author?: string;
    /**
     * Timestamp when the commit was committed.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    commit_date?: string;
    /** Commit the version is cut from. */
    commit_sha?: string;
}
/**
 * column-spec-item
 * Column Specifications.
 */
export interface ColumnSpecItem {
    /** Name of the column. */
    name?: string;
}
/**
 * column-visualization-x-axis
 * The X-axis for a column visualization.
 */
export interface ColumnVisualizationXAxis {
    /** The color for an axis. This can be a single color or a gradient. */
    color?: VisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: VisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name: string;
}
/**
 * column-visualization-y-axis
 * The Y-axis for a column visualization.
 */
export interface ColumnVisualizationYAxis {
    /** The color for an axis. This can be a single color or a gradient. */
    color?: VisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: VisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name: string;
}
/**
 * column-widget-visualization
 * A column chart visualization configuration. Includes metadata specific
 * to column charts.
 */
export interface ColumnWidgetVisualization {
    /** Whether the columns should be stacked. */
    is_stacked?: boolean;
    /** The configuration for the X-axis. */
    x: ColumnVisualizationXAxis[];
    /** The configuration for the Y-axes. */
    y: ColumnVisualizationYAxis[];
}
/** command */
export type Command = AtomBase & {
    /** Action defines some logic to run. */
    action?: CommandAction;
    /** Description of the command. */
    description?: string;
    /** Display name of the command. */
    display_name?: string;
    /** Name of the command. */
    name?: string;
    /** Namespace of the command. */
    namespace?: string;
    /**
     * The list of users, groups and audiences with whom the command is
     * shared and the corresponding roles.
     */
    shared_with?: SharedWithMembership[];
    source?: SnapInSummary;
    /** Status of the command. */
    status?: CommandStatus;
    /** Surfaces where this command can be invoked. */
    surfaces?: CommandSurface[];
    /**
     * A user friendly description of the parameters which can be passed
     * to the command.
     */
    usage_hint?: string;
};
/**
 * command-action
 * Action defines some logic to run.
 */
export interface CommandAction {
    /** Action details to be used in the command execution. */
    action_details?: CommandActionDetails;
    /**
     * The raw code to execute, defined in the language specified by
     * executor.
     */
    code?: string;
    /** Executor specific config. */
    executor_config?: object;
    /** Specifies how the action is defined. */
    executor_type?: CommandActionExecutorType;
    /**
     * The message to populate in discussion box, when the command is
     * selected to execute.
     */
    message?: string;
    snap_in_function_id?: AtomSummary;
    /** The template engine for resolving message. */
    template_type?: CommandActionTemplateType;
}
/**
 * command-action-details
 * Action details to be used in the command execution.
 */
export interface CommandActionDetails {
    /** The payload to update the object in context upon command execution. */
    object_update_payload?: object;
}
/** Specifies how the action is defined. */
export declare enum CommandActionExecutorType {
    Rego = "rego",
    Workflow = "workflow"
}
/** The template engine for resolving message. */
export declare enum CommandActionTemplateType {
    DevrevV1 = "devrev_v1"
}
/**
 * command-create-request
 * The request to create a command.
 */
export interface CommandCreateRequest {
    action?: CreateCommandAction;
    /** Description of the command */
    description?: string;
    /** Display name of the command */
    display_name: string;
    /** Name of the command */
    name: string;
    /** Namespace of the command */
    namespace: string;
    /**
     * The list of users, groups and audiences with whom the command is
     * shared and the corresponding roles.
     */
    shared_with?: SetSharedWithMembership[];
    /** ID of the source which created this command. */
    source?: string;
    /** Status of the command. */
    status?: CommandStatus;
    /** Surfaces where this command can be invoked */
    surfaces?: CreateCommandSurface[];
    /**
     * A user friendly description of the parameters which can be passed
     * to the command
     */
    usage_hint?: string;
}
/** command-create-response */
export interface CommandCreateResponse {
    command: Command;
}
/** command-delete-request */
export interface CommandDeleteRequest {
    /** The command's ID. */
    id: string;
}
/** command-execute-request */
export interface CommandExecuteRequest {
    /**
     * Dry run the command actions. If true, the actions of the command
     * are not run. Only the command's message is returned. Defaults to
     * false.
     */
    dry_run?: boolean;
    /** The command's ID. */
    id: string;
    /** Command invocation source like work, part, search, etc. */
    invocation_source: string;
    /**
     * Surfaces from where this command can be invoked. In future this will be
     * extended to add more places like list views and events from where a
     * command can be invoked.
     */
    invocation_surface?: CommandSurfaceSurface;
    /** Input parameters of the command. */
    parameters?: string;
    /** ID of the object where command is invoked (work/part/conversation). */
    source_object_id?: string;
}
/** command-execute-response */
export interface CommandExecuteResponse {
    /** The message to be populated in the timeline RTE. */
    message?: string;
    /** The unique id corresponding to command execution. */
    request_id: string;
}
/**
 * command-get-request
 * The request to get a command.
 */
export interface CommandGetRequest {
    /** The command's ID. */
    id: string;
}
/** command-get-response */
export interface CommandGetResponse {
    command: Command;
}
/** Status of the command. */
export declare enum CommandStatus {
    Disabled = "disabled",
    Draft = "draft",
    Enabled = "enabled"
}
/** command-summary */
export type CommandSummary = AtomBaseSummary & {
    /** Name of the command. */
    name?: string;
};
/**
 * command-surface
 * Metadata defining which surfaces can this command be executed on.
 */
export interface CommandSurface {
    /** Objects types on which a command can be invoked. */
    object_types?: CommandSurfaceObjectTypes[];
    /**
     * Surfaces from where this command can be invoked. In future this will be
     * extended to add more places like list views and events from where a
     * command can be invoked.
     */
    surface?: CommandSurfaceSurface;
}
/** Objects types on which a command can be invoked. */
export declare enum CommandSurfaceObjectTypes {
    Account = "account",
    Conversation = "conversation",
    Engagement = "engagement",
    Flow = "flow",
    Issue = "issue",
    Opportunity = "opportunity",
    Part = "part",
    RevOrg = "rev_org",
    RevUser = "rev_user",
    SnapIn = "snap_in",
    Ticket = "ticket"
}
/**
 * Surfaces from where this command can be invoked. In future this will be
 * extended to add more places like list views and events from where a
 * command can be invoked.
 */
export declare enum CommandSurfaceSurface {
    CustomerChat = "customer_chat",
    Discussions = "discussions"
}
/**
 * command-update-request
 * The request to update a command.
 */
export interface CommandUpdateRequest {
    action?: UpdateCommandAction;
    /** Description of the command */
    description?: string;
    /** Display name of the command */
    display_name?: string;
    /** The ID of the command to update. */
    id: string;
    /** Name of the command */
    name?: string;
    /** Namespace of the command */
    namespace?: string;
    /**
     * The list of users, groups and audiences with whom the command is
     * shared and the corresponding roles.
     */
    shared_with?: SetSharedWithMembership[];
    /** ID of the source which created this command. */
    source?: string;
    /** Status of the command. */
    status?: CommandStatus;
    /** Surfaces where this command can be invoked */
    surfaces?: UpdateCommandSurface[];
    /**
     * A user friendly description of the parameters which can be passed
     * to the command
     */
    usage_hint?: string;
}
/** command-update-response */
export interface CommandUpdateResponse {
    command: Command;
}
/** commands-list-request */
export interface CommandsListRequest {
    /**
     * ID of the user who created the command.
     * @example ["DEVU-12345"]
     */
    created_by_id?: string[];
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** Filtering based on executor_type */
    executor_type?: CommandActionExecutorType[];
    /**
     * The maximum number of commands to return per page. The default is
     * '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /**
     * ID of the user who modified the command.
     * @example ["DEVU-12345"]
     */
    modified_by_id?: string[];
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** Filter commands based on namespace. */
    namespace?: string[];
    /** List of fields to sort the commands items by and how to sort them. */
    sort_by?: string[];
    /** ID of the object where command is invoked (work/part/conversation). */
    source_object_id?: string;
    /** Filter commands based on status. */
    status?: CommandStatus[];
}
/** commands-list-response */
export interface CommandsListResponse {
    /** List of commands. */
    commands: Command[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/**
 * comment-activity
 * A comment activity.
 */
export interface CommentActivity {
    comment?: TimelineComment;
}
/** comment-suggested-replies-widget */
export type CommentSuggestedRepliesWidget = SnapWidgetBase & {
    /** The list of suggestions. */
    suggestions: CommentSuggestedRepliesWidgetSuggestion[];
    /** The visibility of the comment suggested replies. */
    visibility: CommentSuggestedRepliesWidgetVisibility[];
};
/** comment-suggested-replies-widget-suggestion */
export interface CommentSuggestedRepliesWidgetSuggestion {
    /** The label of the suggestion. */
    label: string;
    /** The message of the suggestion. */
    message: string;
}
/** comment-suggested-replies-widget-summary */
export type CommentSuggestedRepliesWidgetSummary = SnapWidgetBaseSummary;
/** The visibility of the comment suggested replies widget. */
export declare enum CommentSuggestedRepliesWidgetVisibility {
    DevUser = "dev_user",
    RevUser = "rev_user"
}
/**
 * commentable-notification-action
 * Commentable action to reply directly on notification with comments.
 */
export interface CommentableNotificationAction {
    timeline_entry?: AtomSummary;
}
/**
 * commerce-detail
 * Commerce license assignment details.
 */
export interface CommerceDetail {
    /** Licenses assigned to the user. */
    licenses?: string[];
}
/** component */
export type Component = PartBase & {
    development_owner?: UserSummary;
    pm_owner?: UserSummary;
    qa_owner?: UserSummary;
};
/** component-summary */
export type ComponentSummary = PartBaseSummary;
/**
 * composite-schema
 * The schema of a composite type.
 */
export interface CompositeSchema {
    /** Description of this composite type. */
    description?: string;
    /** List of all fields in this schema. */
    fields: SchemaFieldDescriptor[];
    /** Name of this composite type. */
    name?: string;
}
/**
 * composite-schema-private
 * The schema of a composite type.
 */
export interface CompositeSchemaPrivate {
    /** Description of this composite type. */
    description?: string;
    /** List of all fields in this schema. */
    fields: FieldDescriptor[];
    /** Name of this composite type. */
    name?: string;
}
/**
 * condition-v1
 * Condition.
 */
export interface ConditionV1 {
    /** Key used to fetch the object value. */
    key?: string;
    /** The operator used to compare the object vals. */
    operator?: ConditionV1Operator;
    /** Values valid for the key. */
    vals: string[];
}
/** The operator used to compare the object vals. */
export declare enum ConditionV1Operator {
    Eq = "eq",
    In = "in",
    NotEq = "not_eq",
    NotIn = "not_in"
}
/**
 * conditional-role-v1
 * Conditional role.
 */
export interface ConditionalRoleV1 {
    access_level?: AccessLevel;
    /** Conditions definition which must be met for role. */
    conditions: ConditionV1[];
    role_id?: RoleV1Don;
}
/**
 * configuration
 * Settings related to payment, proration, etc. Configurations may or may
 * not be defined by a DevO. 1. If DevO defines configurations then same
 * configurations are copied to RevO also to sub pack (for now, later RevO
 * can also set) 2. If DevO doesn't set anything then these configurations
 * would be set to default by application for which they were being
 * defined (for eg. if DevO doesn't set payment method for it's RevOs then
 * stripe would set it to 'charge_automatically' by default).
 */
export interface Configuration {
    /**
     * Charge collection strategy for the service plan. Defaults to
     * charge_automatically.
     */
    collection_method?: ConfigurationCollectionMethod;
    /**
     * Number of days a customer has to pay invoices generated by this
     * subscription. If collection method is set to send_invoice then this
     * field is mandatory.
     * @format int32
     */
    days_until_due?: number;
    /**
     * Whether to generate invoice immediately if the service plan is
     * cancelled. Defaults to false.
     */
    invoice_now_on_cancel_service_plan?: boolean;
    /**
     * If pending update is allowed or not, this is for those cases where
     * an additional step of authentication or manual approval is required
     * for the payment. Defaults to false. If this is true, then Proration
     * behavior should be always_invoice, and collection method should be
     * charge_automatically.
     */
    pending_update?: boolean;
    /**
     * Whether to prorate if the service plan is cancelled. Defaults to
     * false.
     */
    prorate_on_cancel_service_plan?: boolean;
    /**
     * Determines how to handle prorations resulting from the billing_date. If
     * no value is passed, the default is create_prorations.
     */
    proration_behavior?: ConfigurationProrationBehavior;
}
/**
 * Charge collection strategy for the service plan. Defaults to
 * charge_automatically.
 */
export declare enum ConfigurationCollectionMethod {
    ChargeAutomatically = "charge_automatically",
    SendInvoice = "send_invoice"
}
/**
 * configuration-handler-reference
 * Reference to the snap-in configuration handler.
 */
export interface ConfigurationHandlerReference {
    organization?: SnapComponentSummary;
    user?: SnapComponentSummary;
}
/**
 * Determines how to handle prorations resulting from the billing_date. If
 * no value is passed, the default is create_prorations.
 */
export declare enum ConfigurationProrationBehavior {
    AlwaysInvoice = "always_invoice",
    CreateProrations = "create_prorations",
    None = "none"
}
/** connection */
export type Connection = AtomBase & {
    /** The connection's display name. */
    display_name?: string;
    /** The Dev organization on the other side of the connection. */
    remote_dev_org: string;
    /** Describes a connection source. */
    source?: ConnectionSource;
    /** Describes a connection target. */
    target?: ConnectionTarget;
};
/**
 * connection-source
 * Describes a connection source.
 */
export interface ConnectionSource {
    /** The status of the source connection. */
    status: ConnectionSourceStatus;
}
/** The status of the source connection. */
export declare enum ConnectionSourceStatus {
    Closed = "closed",
    Connected = "connected",
    PendingApproval = "pending_approval"
}
/** connection-summary */
export type ConnectionSummary = AtomBaseSummary;
/**
 * connection-target
 * Describes a connection target.
 */
export interface ConnectionTarget {
    /** The group(s) that newly connected users are added to. */
    groups?: GroupSummary[];
    /** The status of the target connection. */
    status: ConnectionTargetStatus;
}
/** The status of the target connection. */
export declare enum ConnectionTargetStatus {
    Closed = "closed",
    Connected = "connected",
    PendingApproval = "pending_approval"
}
/** connections-create-request */
export interface ConnectionsCreateRequest {
    /**
     * The display name for the connection.
     * @minLength 1
     * @maxLength 64
     */
    display_name?: string;
    /**
     * The ID of the target Dev organization to connect to.
     * @example "DEV-AbCdEfGh"
     */
    remote_dev_org: string;
}
/** connections-create-response */
export interface ConnectionsCreateResponse {
    connection: Connection;
}
/** connections-delete-request */
export interface ConnectionsDeleteRequest {
    /** The ID of the connection to delete. */
    id: string;
}
/** connections-delete-response */
export type ConnectionsDeleteResponse = object;
/** connections-filter-source */
export interface ConnectionsFilterSource {
    /** Filters for source connections with the provided statuses. */
    status?: ConnectionSourceStatus[];
}
/** connections-filter-target */
export interface ConnectionsFilterTarget {
    /** Filters for target connections with the provided statuses. */
    status?: ConnectionTargetStatus[];
}
/** connections-get-request */
export interface ConnectionsGetRequest {
    /** The connection's ID. */
    id: string;
}
/** connections-get-response */
export interface ConnectionsGetResponse {
    connection: Connection;
}
/** connections-list-request */
export interface ConnectionsListRequest {
    /**
     * Filters for connections created by any of the provided users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of connections to return.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /**
     * Filters for the Dev organizations on the other side of the
     * connection.
     */
    remote_dev_org?: string[];
    /** Fields to sort the connections by and the direction to sort them. */
    sort_by?: string[];
    source?: ConnectionsFilterSource;
    target?: ConnectionsFilterTarget;
}
/** connections-list-response */
export interface ConnectionsListResponse {
    /** The list of connections. */
    connections: Connection[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/** connections-open-request */
export interface ConnectionsOpenRequest {
    /** The ID of the connection to open. */
    id: string;
}
/** connections-open-response */
export interface ConnectionsOpenResponse {
    /** The token for the user to access the connected Dev organization. */
    access_token: string;
}
/** connections-update-request */
export interface ConnectionsUpdateRequest {
    action?: ConnectionsUpdateRequestActionValue;
    /**
     * The updated display name for the connection.
     * @minLength 1
     * @maxLength 64
     */
    display_name?: string | null;
    /** The ID of the connection to update. */
    id: string;
}
export declare enum ConnectionsUpdateRequestActionValue {
    Approve = "approve",
    Close = "close"
}
/** connections-update-response */
export interface ConnectionsUpdateResponse {
    connection: Connection;
}
/**
 * contact-detail-with-email
 * Details of a contact including email.
 */
export interface ContactDetailWithEmail {
    /** Address details of the customer. */
    address?: Address;
    /** The contact's phone. */
    email?: string;
    /** The contact's name. */
    name?: string;
    /** The contact's phone. */
    phone?: string;
}
/**
 * contact-details
 * Contact Details of the customer.
 */
export interface ContactDetails {
    /** Address details of the customer. */
    address?: Address;
    /** The contact's name. */
    name?: string;
    /** The contact's phone. */
    phone?: string;
}
/**
 * contacts-preferences-group
 * Preferences group for Contacts.
 */
export interface ContactsPreferencesGroup {
    /** Assign each new user an individual account. */
    account_provision_for_contacts_via_public_aat?: ContactsPreferencesGroupAccountProvisionForContactsViaPublicAat;
    /** Enable account creation for contacts. */
    enable_auto_create_account_for_new_contacts?: boolean;
}
/** Assign each new user an individual account. */
export declare enum ContactsPreferencesGroupAccountProvisionForContactsViaPublicAat {
    NewAccount = "new_account",
    NoAccount = "no_account"
}
/**
 * content
 * Content format and text for the news.
 */
export interface Content {
    /** Format of the content. */
    format: string;
    /** The content of the news. */
    text: string;
}
/** content-template */
export type ContentTemplate = NotificationContentTemplate & {
    type: ContentTemplateType;
};
/** content-template-base */
export type ContentTemplateBase = AtomBase & {
    /** Schema of the input fields required for this content template. */
    input_fields_schema?: SchemaFieldDescriptor[];
    /** Name of the content template. */
    name?: string;
};
/** content-template-base-summary */
export type ContentTemplateBaseSummary = AtomBaseSummary;
/**
 * content-template-create-request
 * The request to create a new content template.
 */
export type ContentTemplateCreateRequest = ContentTemplateCreateRequestNotificationContentTemplate & {
    /** Input fields schema. */
    input_fields_schema?: SchemaFieldDescriptor[];
    /** The name of the content template. */
    name: string;
    type: ContentTemplateType;
};
/** content-template-create-request-notification-content-template */
export interface ContentTemplateCreateRequestNotificationContentTemplate {
    defaults: ContentTemplateCreateRequestNotificationContentTemplateDefaultNotificationContentTemplate[];
}
/** content-template-create-request-notification-content-template-default-notification-content-template */
export interface ContentTemplateCreateRequestNotificationContentTemplateDefaultNotificationContentTemplate {
    /** Body for the notification. */
    body: string;
    /**
     * Language code conforming to ISO 639-1 and country.
     * @format int64
     */
    language_code: number;
    /** Title for the notification. */
    title: string;
}
/** content-template-create-response */
export interface ContentTemplateCreateResponse {
    content_template: ContentTemplate;
}
/** content-template-get-request */
export interface ContentTemplateGetRequest {
    /** The content template's ID. */
    id: string;
}
/** content-template-get-response */
export interface ContentTemplateGetResponse {
    content_template: ContentTemplate;
}
/** content-template-list-request */
export interface ContentTemplateListRequest {
    /**
     * Filters for content template created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of works to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Filters for content template based on name. */
    name?: string[];
    /** Fields to sort the works by and the direction to sort them. */
    sort_by?: string[];
    /** Filters for content template of the provided types. */
    type?: ContentTemplateType[];
}
/** content-template-list-response */
export interface ContentTemplateListResponse {
    /** The list of content templates. */
    content_template: ContentTemplate[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
export declare enum ContentTemplateType {
    NotificationContentTemplate = "notification_content_template"
}
/** content-template-update-request */
export type ContentTemplateUpdateRequest = ContentTemplateUpdateRequestNotificationContentTemplate & {
    /** The content template's ID. */
    id: string;
    type: ContentTemplateType;
};
/** content-template-update-request-notification-content-template */
export interface ContentTemplateUpdateRequestNotificationContentTemplate {
    defaults: ContentTemplateUpdateRequestNotificationContentTemplateDefaultNotificationContentTemplate[];
}
/** content-template-update-request-notification-content-template-default-notification-content-template */
export interface ContentTemplateUpdateRequestNotificationContentTemplateDefaultNotificationContentTemplate {
    /** Body for the notification. */
    body: string;
    /**
     * Language code conforming to ISO 639-1 and country.
     * @format int64
     */
    language_code: number;
    /** Title for the notification. */
    title: string;
}
/** content-template-update-response */
export interface ContentTemplateUpdateResponse {
    content_template: ContentTemplate;
}
/** conversation */
export type Conversation = AtomBase & {
    /** Details of the parts relevant to the conversation. */
    applies_to_parts?: PartSummary[];
    /** Active channels for the conversation. */
    broadcast_channels?: string[];
    /** A type of object used to track conversations. */
    conversation_type?: string;
    /** Description of the conversation object. */
    description?: string;
    /**
     * Timestamp to track the first response from Dev.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    first_response_time?: string;
    group?: GroupSummary;
    /** Whether the conversation is created by verified user. */
    is_creator_verified?: boolean;
    /** Whether the conversation is spam. */
    is_spam?: boolean;
    /**
     * Timestamp of the last message in the conversation.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    last_message_timestamp?: string;
    /** Links associated with the object. */
    links?: ArchetypeLinkSummary[];
    /** The users in the conversation. */
    members: UserSummary[];
    /** The latest messages on the conversation. */
    messages?: TimelineEntry[];
    /** Metadata on conversation. */
    metadata?: ConversationMetadata;
    /** Owner IDs for the conversation. */
    owned_by?: UserSummary[];
    /** Priority of the conversation. */
    priority?: ConversationPriority;
    /** Globally unique IDs of participating orgs. */
    rev_orgs?: OrgSummary[];
    sla?: SlaSummary;
    /** SLA summary for the object. */
    sla_summary?: ArchetypeSlaSummary;
    sla_tracker?: SlaTrackerSummary;
    /** Source channel for the conversation. */
    source_channel?: string;
    /** Describes the current stage of a work item. */
    stage?: LegacyStage;
    started_by?: UserSummary;
    /** State of the conversation based upon the conversation stage. */
    state?: string;
    /** Status of the conversation. */
    status?: string;
    /** Aggregate of surveys responses. */
    surveys_aggregation?: ArchetypeSurveyAggregation[];
    /** Tags associated with the object. */
    tags?: TagWithValue[];
    /** Title of the conversation object. */
    title?: string;
    /**
     * Whether Turing is active on the conversation. Will be true when
     * Turing is active and false when it stops responding or when a dev
     * user responds to the conversation.
     */
    turing_active?: boolean;
    /** User sessions associated with the conversation. */
    user_sessions?: UserSessionSummary[];
};
/**
 * conversation-assist-recommendation-article
 * An article recommendation item.
 */
export type ConversationAssistRecommendationArticle = ConversationAssistRecommendationBase & {
    article: ArticleSummary;
    artifact: ArtifactSummary;
    /** Suggested text from the article. */
    text?: string;
};
/**
 * conversation-assist-recommendation-base
 * Base for conversation assist recommendation item.
 */
export interface ConversationAssistRecommendationBase {
    /**
     * Confidence score of the recommendation.
     * @format float
     */
    confidence: number;
}
/**
 * conversation-assist-recommendation-conversation
 * A conversation recommendation item.
 */
export type ConversationAssistRecommendationConversation = ConversationAssistRecommendationBase & {
    conversation: ConversationSummary;
};
/**
 * conversation-assist-recommendation-ticket
 * A ticket recommendation item.
 */
export type ConversationAssistRecommendationTicket = ConversationAssistRecommendationBase & {
    ticket: WorkSummary;
};
/**
 * conversation-assist-request
 * Conversations Assist request.
 */
export interface ConversationAssistRequest {
    /** ID of the conversation for which assistance is requested. */
    id: string;
    /** List of requested objects. */
    requested_objects: ConversationAssistRequestedObject[];
}
/** Object for which suggestions are requested. */
export declare enum ConversationAssistRequestedObject {
    Article = "article",
    Conversation = "conversation",
    Ticket = "ticket"
}
/**
 * conversation-assist-response
 * Conversations Assist response.
 */
export interface ConversationAssistResponse {
    /** List of recommended articles. */
    articles?: ConversationAssistRecommendationArticle[];
    /** List of recommended conversations. */
    conversations?: ConversationAssistRecommendationConversation[];
    /** List of recommended tickets. */
    tickets?: ConversationAssistRecommendationTicket[];
}
/** conversation-context */
export interface ConversationContext {
    /** The context ID of the chat. */
    context_id: string;
    /**
     * The expiry time of the context.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    expires_at: string;
}
/** conversation-created-notification */
export type ConversationCreatedNotification = NotificationBase & {
    conversation_id?: ConversationSummary;
};
/** conversation-created-notification-summary */
export type ConversationCreatedNotificationSummary = NotificationBaseSummary;
/** conversation-inactivity-reminder */
export type ConversationInactivityReminder = NotificationBase & {
    /**
     * Time of creation of the last message in conversation.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_at?: string;
};
/** conversation-inactivity-reminder-summary */
export type ConversationInactivityReminderSummary = NotificationBaseSummary;
/**
 * conversation-metadata
 * Metadata on conversation.
 */
export interface ConversationMetadata {
    /**
     * URL from which the conversation was created if the conversation was
     * created via PLuG.
     */
    url_context?: string;
}
/** Priority of the conversation. */
export declare enum ConversationPriority {
    P0 = "p0",
    P1 = "p1",
    P2 = "p2"
}
/** conversation-search-summary */
export type ConversationSearchSummary = SearchSummaryBase & {
    conversation: ConversationSummary;
};
/** conversation-summary */
export type ConversationSummary = AtomBaseSummary & {
    /** A type of object used to track conversations. */
    conversation_type?: string;
    /** Title of the conversation object. */
    title?: string;
};
/** conversations-count-request */
export interface ConversationsCountRequest {
    /**
     * Filters for conversations belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_parts?: string[];
    created_date?: DateTimeFilter;
    /** Filters for conversation that belong to the given groups. */
    group?: string[];
    /** Filters for conversations that are created by verified users. */
    is_creator_verified?: boolean;
    /** Filters for conversations that are spam. */
    is_spam?: boolean;
    /**
     * Filters for conversations where these users are participants.
     * @example ["DEVU-12345"]
     */
    members?: string[];
    modified_date?: DateTimeFilter;
    /**
     * Filters for conversations owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for conversations that are associated with any of the
     * provided Rev organizations.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org?: string[];
    /**
     * Filters for conversations with any of the provided SLAs applying to
     * it.
     */
    sla?: string[];
    /**
     * Filters for conversations with any of the provided SLA stages.
     * @deprecated
     */
    sla_stage?: SlaSummaryStage[];
    /** The filter for SLA summary. */
    sla_summary?: SlaSummaryFilter;
    /** Filters for conversations with any of the provided source channels. */
    source_channels?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for conversations with any of the provided states. */
    state?: string[];
    /** The filter for survey aggregation. */
    surveys?: SurveyAggregationFilter;
    /**
     * Filters for conversations with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for conversations with any of the provided tags with value. */
    tags_v2?: TagWithValueFilter[];
    /** Filters for conversations with any of the provided ticket IDs. */
    tickets?: string[];
    /** Filters for conversations in which turing is active. */
    turing_active?: boolean;
}
/** conversations-count-response */
export interface ConversationsCountResponse {
    /**
     * Count of conversations matching the filter.
     * @format int32
     */
    count: number;
}
/**
 * conversations-create-request
 * The request to create a new conversation.
 */
export interface ConversationsCreateRequest {
    /**
     * The parts that the conversation applies to.
     * @example ["PROD-12345"]
     */
    applies_to_parts?: string[];
    /** Description for the conversation. */
    description?: string;
    /** The group that the conversation is associated with. */
    group?: string;
    /** Whether the conversation is spam. */
    is_spam?: boolean;
    /**
     * The users in the conversation.
     * @example ["DEVU-12345"]
     */
    members?: string[];
    /** Initial messages on the conversation. */
    messages?: ConversationsCreateRequestMessage[];
    metadata?: ConversationsCreateRequestMetadata;
    /** The users that own the conversation. */
    owned_by?: string[];
    /** Whether the conversation is from a source channel. */
    source_channel?: string;
    /** Sets an object's initial stage. */
    stage?: StageInit;
    /** The names of the tags associated with the conversation. */
    tag_names?: string[];
    /** Tags associated with the conversation. */
    tags?: SetTagWithValue[];
    /** The title for the conversation. */
    title?: string;
    type: ConversationsCreateRequestTypeValue;
    /** The IDs of user sessions associated with the conversation. */
    user_sessions?: string[];
}
/** conversations-create-request-message */
export interface ConversationsCreateRequestMessage {
    /**
     * The IDs of the artifacts to the message.
     * @deprecated
     * @example ["ARTIFACT-12345"]
     */
    artifact_ids?: string[];
    /**
     * The IDs of the artifacts to the message.
     * @example ["ARTIFACT-12345"]
     */
    artifacts?: string[];
    /** The message's body. */
    body?: string;
}
/** conversations-create-request-metadata */
export interface ConversationsCreateRequestMetadata {
    url_context?: string;
}
export declare enum ConversationsCreateRequestTypeValue {
    Support = "support"
}
/**
 * conversations-create-response
 * The response to creating a new conversation.
 */
export interface ConversationsCreateResponse {
    conversation: Conversation;
}
/**
 * conversations-delete-request
 * The request to delete a conversation.
 */
export interface ConversationsDeleteRequest {
    /** The ID of the conversation to delete. */
    id: string;
}
/**
 * conversations-delete-response
 * The response for deleting a conversation.
 */
export type ConversationsDeleteResponse = object;
/** conversations-export-request */
export interface ConversationsExportRequest {
    /**
     * Filters for conversations belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_parts?: string[];
    created_date?: DateTimeFilter;
    /**
     * The number of conversation items to return. The default is '50',
     * the maximum is '5000'.
     * @format int32
     */
    first?: number;
    /** Filters for conversation that belong to the given groups. */
    group?: string[];
    /** Filters for conversations that are created by verified users. */
    is_creator_verified?: boolean;
    /** Filters for conversations that are spam. */
    is_spam?: boolean;
    /**
     * Filters for conversations where these users are participants.
     * @example ["DEVU-12345"]
     */
    members?: string[];
    modified_date?: DateTimeFilter;
    /**
     * Filters for conversations owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for conversations that are associated with any of the
     * provided Rev organizations.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org?: string[];
    /**
     * Filters for conversations with any of the provided SLAs applying to
     * it.
     */
    sla?: string[];
    /**
     * Filters for conversations with any of the provided SLA stages.
     * @deprecated
     */
    sla_stage?: SlaSummaryStage[];
    /** The filter for SLA summary. */
    sla_summary?: SlaSummaryFilter;
    /**
     * Fields to sort the conversation items by and the direction to sort
     * them.
     */
    sort_by?: string[];
    /** Filters for conversations with any of the provided source channels. */
    source_channels?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for conversations with any of the provided states. */
    state?: string[];
    /** The filter for survey aggregation. */
    surveys?: SurveyAggregationFilter;
    /**
     * Filters for conversations with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for conversations with any of the provided tags with value. */
    tags_v2?: TagWithValueFilter[];
    /** Filters for conversations with any of the provided ticket IDs. */
    tickets?: string[];
    /** Filters for conversations in which turing is active. */
    turing_active?: boolean;
}
/** conversations-export-response */
export interface ConversationsExportResponse {
    /** The resulting collection of conversation items. */
    conversations: Conversation[];
}
/**
 * conversations-get-request
 * The request to get a conversation's information.
 */
export interface ConversationsGetRequest {
    /** The requested conversation's ID. */
    id: string;
}
/**
 * conversations-get-response
 * The response to getting a conversation's information.
 */
export interface ConversationsGetResponse {
    conversation: Conversation;
    timeline_info?: TimelineInfo;
}
/** conversations-group */
export interface ConversationsGroup {
    /** The group of conversations. */
    conversations: Conversation[];
    /** Unique key according to which the items are grouped. */
    key: string;
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/** conversations-group-request */
export interface ConversationsGroupRequest {
    /**
     * Filters for conversations belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_parts?: string[];
    created_date?: DateTimeFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** Filters for conversation that belong to the given groups. */
    group?: string[];
    /** The field to group the conversations by. */
    group_by: string;
    /** Filters for conversations that are created by verified users. */
    is_creator_verified?: boolean;
    /** Filters for conversations that are spam. */
    is_spam?: boolean;
    /**
     * The maximum number of groups to return. If not set, then the
     * default is '10'.
     * @format int32
     */
    limit?: number;
    /**
     * The maximum number of conversations to return for an individual
     * group. The default is '50'.
     * @format int32
     */
    limit_per_group?: number;
    /**
     * Filters for conversations where these users are participants.
     * @example ["DEVU-12345"]
     */
    members?: string[];
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    modified_date?: DateTimeFilter;
    /**
     * Filters for conversations owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for conversations that are associated with any of the
     * provided Rev organizations.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org?: string[];
    /**
     * Filters for conversations with any of the provided SLAs applying to
     * it.
     */
    sla?: string[];
    /**
     * Filters for conversations with any of the provided SLA stages.
     * @deprecated
     */
    sla_stage?: SlaSummaryStage[];
    /** The filter for SLA summary. */
    sla_summary?: SlaSummaryFilter;
    /** Comma-separated fields to sort the conversations by. */
    sort_by?: string[];
    /** Filters for conversations with any of the provided source channels. */
    source_channels?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for conversations with any of the provided states. */
    state?: string[];
    /** The filter for survey aggregation. */
    surveys?: SurveyAggregationFilter;
    /**
     * Filters for conversations with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for conversations with any of the provided tags with value. */
    tags_v2?: TagWithValueFilter[];
    /** Filters for conversations with any of the provided ticket IDs. */
    tickets?: string[];
    /** Filters for conversations in which turing is active. */
    turing_active?: boolean;
}
/** conversations-group-response */
export interface ConversationsGroupResponse {
    /** The list of groups. */
    groups: ConversationsGroup[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/**
 * conversations-list-request
 * The request to get information about a list of conversations.
 */
export interface ConversationsListRequest {
    /**
     * Filters for conversations belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_parts?: string[];
    created_date?: DateTimeFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** Filters for conversation that belong to the given groups. */
    group?: string[];
    /** Filters for conversations that are created by verified users. */
    is_creator_verified?: boolean;
    /** Filters for conversations that are spam. */
    is_spam?: boolean;
    /**
     * The maximum number of conversations to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * Filters for conversations where these users are participants.
     * @example ["DEVU-12345"]
     */
    members?: string[];
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    modified_date?: DateTimeFilter;
    /**
     * Filters for conversations owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for conversations that are associated with any of the
     * provided Rev organizations.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org?: string[];
    /**
     * Filters for conversations with any of the provided SLAs applying to
     * it.
     */
    sla?: string[];
    /**
     * Filters for conversations with any of the provided SLA stages.
     * @deprecated
     */
    sla_stage?: SlaSummaryStage[];
    /** The filter for SLA summary. */
    sla_summary?: SlaSummaryFilter;
    /** Fields to sort the conversations by and the direction to sort them. */
    sort_by?: string[];
    /** Filters for conversations with any of the provided source channels. */
    source_channels?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for conversations with any of the provided states. */
    state?: string[];
    /** The filter for survey aggregation. */
    surveys?: SurveyAggregationFilter;
    /**
     * Filters for conversations with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for conversations with any of the provided tags with value. */
    tags_v2?: TagWithValueFilter[];
    /** Filters for conversations with any of the provided ticket IDs. */
    tickets?: string[];
    /** Filters for conversations in which turing is active. */
    turing_active?: boolean;
}
/**
 * conversations-list-response
 * The response to listing the conversations.
 */
export interface ConversationsListResponse {
    /** The list of conversations. */
    conversations: Conversation[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /**
     * Maps conversation ID to its Timeline information, or omitted if not
     * available.
     */
    timeline_info?: Record<string, TimelineInfo>;
}
/**
 * conversations-update-request
 * The request to update a conversation.
 */
export interface ConversationsUpdateRequest {
    applies_to_parts?: ConversationsUpdateRequestAppliesToParts;
    /** The updated description for the conversation. */
    description?: string;
    /** The group that the conversation is associated with. */
    group?: string;
    /** The ID of the conversation to update. */
    id: string;
    /** Whether the conversation is spam. */
    is_spam?: boolean;
    member_ids?: ConversationsUpdateRequestMemberIds;
    metadata?: ConversationsUpdateRequestMetadata;
    owned_by_ids?: ConversationsUpdateRequestOwnedByIds;
    /** Updates an object's stage. */
    stage?: StageUpdate;
    /** The updated status of the conversation. */
    status?: string;
    tags?: ConversationsUpdateRequestTags;
    /** The updated title of the conversation. */
    title?: string;
    user_sessions?: ConversationsUpdateRequestUserSessions;
}
/** conversations-update-request-applies-to-parts */
export interface ConversationsUpdateRequestAppliesToParts {
    /**
     * Updates the parts that the conversation applies to.
     * @example ["PROD-12345"]
     */
    set?: string[];
}
/** conversations-update-request-member-ids */
export interface ConversationsUpdateRequestMemberIds {
    /**
     * Sets the member IDs to the provided user IDs.
     * @example ["DEVU-12345"]
     */
    set?: string[];
}
/** conversations-update-request-metadata */
export interface ConversationsUpdateRequestMetadata {
    url_context?: string;
}
/** conversations-update-request-owned-by-ids */
export interface ConversationsUpdateRequestOwnedByIds {
    /**
     * Sets the owner IDs to the provided user IDs. This must not be
     * empty.
     * @example ["DEVU-12345"]
     */
    set?: string[];
}
/** conversations-update-request-tags */
export interface ConversationsUpdateRequestTags {
    /** Sets the tag IDs to the provided tags. */
    set?: SetTagWithValue[];
}
/** conversations-update-request-user-sessions */
export interface ConversationsUpdateRequestUserSessions {
    /** The updated user sessions that the conversation is associated with. */
    set?: string[];
}
/**
 * conversations-update-response
 * The response for updating a conversation.
 */
export interface ConversationsUpdateResponse {
    conversation: Conversation;
}
/**
 * conversations-vista-group-item
 * Represents a nested conversations vista group object.
 */
export type ConversationsVistaGroupItem = VistaGroupBase & (ConversationsVistaGroupItemCuratedGroup | ConversationsVistaGroupItemDynamicGroup) & {
    /** Type of conversations vista group item. */
    type: ConversationsVistaGroupItemType;
};
/** conversations-vista-group-item-curated-group */
export interface ConversationsVistaGroupItemCuratedGroup {
    /** Static list of conversation items. */
    items?: ConversationSummary[];
}
/** conversations-vista-group-item-dynamic-group */
export interface ConversationsVistaGroupItemDynamicGroup {
    filter: ConversationsVistaGroupItemDynamicGroupFilter;
    /** Static list of conversation items. */
    items?: ConversationSummary[];
}
/** conversations-vista-group-item-dynamic-group-filter */
export interface ConversationsVistaGroupItemDynamicGroupFilter {
    /**
     * Filters for conversations belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_parts?: string[];
    created_date?: DateTimeFilter;
    /** Filters for conversation that belong to the given groups. */
    group?: string[];
    /** The field to group the collection by. */
    group_by?: string;
    /** Filters for conversations that are created by verified users. */
    is_creator_verified?: boolean;
    /** Filters for conversations that are spam. */
    is_spam?: boolean;
    /**
     * Filters for conversations where these users are participants.
     * @example ["DEVU-12345"]
     */
    members?: string[];
    modified_date?: DateTimeFilter;
    /**
     * Filters for conversations owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for conversations that are associated with any of the
     * provided Rev organizations.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org?: string[];
    /**
     * Filters for conversations with any of the provided SLAs applying to
     * it.
     */
    sla?: string[];
    /**
     * Filters for conversations with any of the provided SLA stages.
     * @deprecated
     */
    sla_stage?: SlaSummaryStage[];
    /** The filter for SLA summary. */
    sla_summary?: SlaSummaryFilter;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** Filters for conversations with any of the provided source channels. */
    source_channels?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for conversations with any of the provided states. */
    state?: string[];
    /** The filter for survey aggregation. */
    surveys?: SurveyAggregationFilter;
    /**
     * Filters for conversations with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for conversations with any of the provided tags with value. */
    tags_v2?: TagWithValueFilter[];
    /** Filters for conversations with any of the provided ticket IDs. */
    tickets?: string[];
    /** Filters for conversations in which turing is active. */
    turing_active?: boolean;
}
/** Type of conversations vista group item. */
export declare enum ConversationsVistaGroupItemType {
    Curated = "curated",
    Dynamic = "dynamic"
}
/** create-banner-nudge-widget */
export type CreateBannerNudgeWidget = (CreateNativeBannerNudgeWidget | SnapKitBaseWidget) & {
    /** The background color of the banner nudge widget. */
    background_color?: string;
    banner_nudge_type: CreateBannerNudgeWidgetBannerNudgeType;
    /** The position of the banner nudge widget. */
    position: BannerNudgeWidgetPosition;
    /** Whether to show the close button on the banner nudge widget. */
    show_close_button: boolean;
    /** The variant of the banner nudge widget. */
    variant: BannerNudgeWidgetVariant;
};
export declare enum CreateBannerNudgeWidgetBannerNudgeType {
    Native = "native",
    SnapKit = "snap_kit"
}
/** create-bar-visualization-x-axis */
export interface CreateBarVisualizationXAxis {
    color?: CreateVisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: CreateVisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name: string;
}
/** create-bar-visualization-y-axis */
export interface CreateBarVisualizationYAxis {
    color?: CreateVisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: CreateVisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name: string;
}
/** create-bar-widget-visualization */
export interface CreateBarWidgetVisualization {
    /** Whether the bar should be stacked. */
    is_stacked?: boolean;
    /** The configuration for the X-axis. */
    x: CreateBarVisualizationXAxis[];
    /** The configuration for the Y-axes. */
    y: CreateBarVisualizationYAxis[];
}
/** create-column-visualization-x-axis */
export interface CreateColumnVisualizationXAxis {
    color?: CreateVisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: CreateVisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name: string;
}
/** create-column-visualization-y-axis */
export interface CreateColumnVisualizationYAxis {
    color?: CreateVisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: CreateVisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name: string;
}
/** create-column-widget-visualization */
export interface CreateColumnWidgetVisualization {
    /** Whether the columns should be stacked. */
    is_stacked?: boolean;
    /** The configuration for the X-axis. */
    x: CreateColumnVisualizationXAxis[];
    /** The configuration for the Y-axes. */
    y: CreateColumnVisualizationYAxis[];
}
/** create-command-action */
export interface CreateCommandAction {
    action_details?: CreateCommandActionDetails;
    /**
     * The raw code to execute, defined in the language specified by
     * executor
     */
    code?: string;
    /** Executor specific config */
    executor_config?: object;
    /** Specifies how the action is defined. */
    executor_type: CommandActionExecutorType;
    /**
     * The message to populate in discussion box, when the command is
     * selected to execute.
     */
    message?: string;
    /**
     * Function containing logic for the command. If function ID is
     * specified the executor config is ignored and command is executed by
     * functions.
     */
    snap_in_function_id?: string;
    /** The template engine for resolving message. */
    template_type?: CommandActionTemplateType;
}
/** create-command-action-details */
export interface CreateCommandActionDetails {
    /** The payload to update the object in context upon command execution. */
    object_update_payload?: object;
}
/** create-command-surface */
export interface CreateCommandSurface {
    /** Objects types on which a command can be invoked */
    object_types?: CommandSurfaceObjectTypes[];
    /**
     * Surfaces from where this command can be invoked. In future this will be
     * extended to add more places like list views and events from where a
     * command can be invoked.
     */
    surface: CommandSurfaceSurface;
}
/**
 * create-comment-suggested-replies-widget
 * A comment suggested replies widget.
 */
export interface CreateCommentSuggestedRepliesWidget {
    /** The list of suggestions. */
    suggestions: CreateCommentSuggestedRepliesWidgetSuggestion[];
    /** The visibility of the comment suggested replies. */
    visibility: CommentSuggestedRepliesWidgetVisibility[];
}
/**
 * create-comment-suggested-replies-widget-suggestion
 * A suggestion.
 */
export interface CreateCommentSuggestedRepliesWidgetSuggestion {
    /** The label of the suggestion. */
    label: string;
    /** The message of the suggestion. */
    message: string;
}
/** create-custom-field-widget-column-projection */
export interface CreateCustomFieldWidgetColumnProjection {
    /** The leaf type of the custom field. */
    leaf_type: string;
    /** The name of the custom field. */
    name: string;
    /** The subtype of the custom field. */
    subtype?: string;
}
/** create-dashboard-filter */
export interface CreateDashboardFilter {
    expression: CreateDashboardFilterExpression;
    /**
     * The reference id of the tab, section, or widget to which this
     * filter applies to.
     */
    reference_id: string;
}
/** create-dashboard-filter-condition */
export interface CreateDashboardFilterCondition {
    /** The value to be compared. */
    json_value?: object;
    /** The key to be compared. */
    key: string;
    /** The operator used to compare the key and value. */
    operator: DashboardFilterConditionOperator;
    part_value?: CreateDashboardFilterPartCondition;
    relative_date_value?: CreateDashboardFilterRelativeDateCondition;
    /** The operator used to compare the key and value. */
    value_type: DashboardFilterConditionValueType;
}
/** create-dashboard-filter-expression */
export interface CreateDashboardFilterExpression {
    /**
     * The operands used for the logical operation. Each operand can be
     * either a filter  expression or a filter condition.
     */
    operands: CreateDashboardFilterOperand[];
    /** The logical operator that binds the filter conditions or expressions. */
    operator: DashboardFilterExpressionOperator;
}
/** create-dashboard-filter-operand */
export interface CreateDashboardFilterOperand {
    condition?: CreateDashboardFilterCondition;
    expression?: CreateDashboardFilterExpression;
    /**
     * The type of the operand. It can be either a filter expression or a
     * filter condition.
     */
    type: DashboardFilterOperandType;
}
/** create-dashboard-filter-part-condition */
export interface CreateDashboardFilterPartCondition {
    /** Whether to include child parts. */
    include_child_parts?: boolean;
    /** The part ids to be compared. */
    part?: string[];
}
/** create-dashboard-filter-relative-date-condition */
export interface CreateDashboardFilterRelativeDateCondition {
    /** The type of the relative date condition. */
    type: DashboardFilterRelativeDateConditionType;
    /**
     * The relative time value to be compared.
     * @format int64
     */
    value: number;
}
/** create-dashboard-section */
export interface CreateDashboardSection {
    /**
     * A reference ID for the section. It should be unique within the
     * dashboard.
     */
    reference_id: string;
    /** The title of the section. */
    title: string;
}
/** create-dashboard-tab */
export interface CreateDashboardTab {
    /**
     * A reference ID for the tab. It should be unique within the
     * dashboard.
     */
    reference_id: string;
    /** The title of the tab. */
    title: string;
}
/** create-dashboard-widget */
export interface CreateDashboardWidget {
    /**
     * A reference ID for the widget. It should be unique within the
     * dashboard.
     */
    reference_id: string;
    /**
     * The DON of the widget.
     * @example "VISTA-12345"
     */
    widget: string;
}
/** create-data-source-join */
export interface CreateDataSourceJoin {
    /** A reference name for the join. */
    reference_name: string;
    /** The name of the column in the source data source. */
    source_reference_name: string;
    /** The name of the column in the target data source. */
    target_reference_name: string;
}
/** create-discount-detail */
export interface CreateDiscountDetail {
    /**
     * The end point of the time range, indicating the date and time at
     * which the object's validity or relevance concludes.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    end_date?: string;
    /**
     * The starting point of the time range, indicating the date and time
     * from which the object's validity or relevance begins.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    start_date?: string;
    /**
     * Information/Description to be shown when cursor is held over
     * text/icon.
     */
    tooltip?: string;
    /** The type of the discount that is associated. */
    type: DiscountDetailType;
    /**
     * The value of the discount that is associated.
     * @format double
     */
    value: number;
}
/** create-discovery-profile-request */
export interface CreateDiscoveryProfileRequest {
    /** Configuration knobs for extractors. */
    extractors?: Extractors;
    /** Configuration knobs for partitioners and partition mergers. */
    mergers: DevRevPartitionerMerger;
    /**
     * Discovery other data source Dev org id.
     * @example "DEV-AbCdEfGh"
     */
    other_data_source_dev_org?: string;
    /**
     * Optional Dev organization ID. This allows running on another Dev
     * organization, as long as the logged in user has access to it.
     * @example "DEV-AbCdEfGh"
     */
    other_dev_org?: string;
    /** Configuration knobs for partitioners and partition mergers. */
    partitioners: DevRevPartitionerMerger;
    /** Discovery Profile name. */
    profile_name: string;
}
/** create-discovery-profile-response */
export interface CreateDiscoveryProfileResponse {
    discovery_profile: DiscoveryProfile;
}
/** create-discovery-settings-request */
export interface CreateDiscoverySettingsRequest {
    /** Configuration knobs for discovery application per devorg. */
    data_collection_app_settings?: DataCollectionAppSettings;
    /** Configuration knobs for discovery application per devorg. */
    discovery_app_settings?: DiscoveryAppSettings;
    /** Discovery profile id associated with devorg. */
    discovery_profile_id?: string;
    /** Discovery GitHub repositories settings for devorg. */
    github_repos?: DiscoveryGithubReposSettings[];
    /**
     * Optional Dev organization ID. This allows running on another Dev
     * organization, as long as the logged in user has access to it.
     * @example "DEV-AbCdEfGh"
     */
    other_dev_org?: string;
}
/** create-discovery-settings-response */
export interface CreateDiscoverySettingsResponse {
    discovery_settings: DiscoverySettings;
}
/** create-document */
export interface CreateDocument {
    /**
     * Artifact to be added to the documents list.
     * @example "ARTIFACT-12345"
     */
    artifact_id: string;
    /** Type of the artifact. */
    type: ArtifactDetailType;
}
/** create-donut-visualization-x-axis */
export interface CreateDonutVisualizationXAxis {
    color?: CreateVisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: CreateVisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name: string;
}
/** create-donut-visualization-y-axis */
export interface CreateDonutVisualizationYAxis {
    color?: CreateVisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: CreateVisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name: string;
}
/** create-donut-widget-visualization */
export interface CreateDonutWidgetVisualization {
    /** The configuration for the X-axis. */
    x: CreateDonutVisualizationXAxis[];
    y: CreateDonutVisualizationYAxis;
}
/**
 * create-email-info
 * Information related to an email.
 */
export interface CreateEmailInfo {
    /** The address of the email address. */
    address: string;
    /** The name of the email address. */
    name?: string;
    /** The ID of the user associated with the email address. */
    user?: string;
}
/**
 * create-email-inline-attachment
 * An inline attachment.
 */
export interface CreateEmailInlineAttachment {
    /**
     * The artifact of the attachment.
     * @example "ARTIFACT-12345"
     */
    artifact?: string;
    /** The content id of the attachment. */
    content_id?: string;
}
/**
 * create-email-preview-widget
 * An email preview widget.
 */
export interface CreateEmailPreviewWidget {
    /** The list of bcc addresses. */
    bcc?: CreateEmailInfo[];
    /** The list of cc addresses. */
    cc?: CreateEmailInfo[];
    /** The list of from addresses. */
    from?: CreateEmailInfo[];
    /** The html body of the email. */
    html_body?: string;
    /** The in reply to of the email. */
    in_reply_to?: string;
    /** The list of inline attachments. */
    inlines?: CreateEmailInlineAttachment[];
    /** The message id of the email. */
    message_id?: string;
    /**
     * The raw email artifact.
     * @example "ARTIFACT-12345"
     */
    raw_email_artifact?: string;
    /** The list of references in the email. */
    references?: string[];
    /** The list of reply to addresses. */
    reply_to?: CreateEmailInfo[];
    /**
     * The time the email was sent.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    sent_timestamp?: string;
    /** The subject of the email. */
    subject?: string;
    /** The text body of the email. */
    text_body?: string;
    /** The list of to addresses. */
    to?: CreateEmailInfo[];
}
/**
 * create-embeddable-widget
 * An embeddable widget.
 */
export type CreateEmbeddableWidget = SnapKitBaseWidget & {
    embeddable_type: CreateEmbeddableWidgetEmbeddableType;
};
export declare enum CreateEmbeddableWidgetEmbeddableType {
    SnapKit = "snap_kit"
}
/** create-event-source-setup-instructions */
export interface CreateEventSourceSetupInstructions {
    /** Content of the instructions */
    content?: string;
    /** Format in which content is defined. */
    format: InstructionsFormat;
}
/** create-field-values */
export interface CreateFieldValues {
    /** Specify the field name. */
    field_name: string;
    /** Values of the given field. */
    field_value: object;
}
/** create-function-build-config */
export type CreateFunctionBuildConfig = object;
/** create-grid-layout */
export interface CreateGridLayout {
    /** Layout of the elements within the current element. */
    layout?: CreateGridLayout[];
    position?: CreateGridPosition;
    /**
     * The reference ID for the element to be laid out. It should be an ID
     * of a tab, section, or widget.
     */
    reference_id: string;
}
/** create-grid-position */
export interface CreateGridPosition {
    /**
     * The height of the widget or section, in grid units.
     * @format int64
     */
    height: number;
    /**
     * The width of the widget or section, in grid units.
     * @format int64
     */
    width: number;
    /**
     * The x-coordinate of the top-left corner of the widget or section,
     * based on  a grid system.
     * @format int64
     */
    x: number;
    /**
     * The y-coordinate of the top-left corner of the widget or section,
     * based on  a grid system.
     * @format int64
     */
    y: number;
}
/** create-keyring */
export interface CreateKeyring {
    /** Categories associated with the keyring */
    categories?: string[];
    /** Description of the keyring. */
    description?: string;
    /** External organization ID of the keyring. */
    external_org_id?: string;
    /** Secret key. */
    key?: string;
    /** Name of the keyring. */
    name: string;
    /** Scope of keyring. */
    scope?: KeyringScope;
    /** Obsolete. Use type_id instead. */
    type?: KeyringTypeEnum;
    /** A unique name for a specific type of keyring. */
    type_id?: string;
}
/** create-line-visualization-x-axis */
export interface CreateLineVisualizationXAxis {
    color?: CreateVisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: CreateVisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name: string;
}
/** create-line-visualization-y-axis */
export interface CreateLineVisualizationYAxis {
    color?: CreateVisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: CreateVisualizationAxisDrillThrough[];
    /** Whether the area under the line should be filled. */
    is_area_filled?: boolean;
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name: string;
    /** The stroke style for the line. */
    stroke_style?: LineVisualizationYAxisStrokeStyle;
}
/** create-line-widget-visualization */
export interface CreateLineWidgetVisualization {
    /** The configuration for the X-axis. */
    x: CreateLineVisualizationXAxis[];
    /** The configuration for the Y-axes. */
    y: CreateLineVisualizationYAxis[];
}
/**
 * create-link-preview-widget
 * A link preview widget.
 */
export type CreateLinkPreviewWidget = (CreateNativeLinkPreviewWidget | SnapKitBaseWidget) & {
    link_preview_type: CreateLinkPreviewWidgetLinkPreviewType;
};
export declare enum CreateLinkPreviewWidgetLinkPreviewType {
    Native = "native",
    SnapKit = "snap_kit"
}
/** create-meerkat-widget-column-function */
export interface CreateMeerkatWidgetColumnFunction {
    /** The type of the function. */
    type: MeerkatWidgetColumnFunctionType;
}
/** create-meerkat-widget-column-projection */
export interface CreateMeerkatWidgetColumnProjection {
    function?: CreateMeerkatWidgetColumnFunction;
    /**
     * The SQL expression used to extract or transform the column from the
     * data source.
     */
    sql_expression: string;
    /** The data type of the column generated by the SQL expression. */
    type: MeerkatWidgetColumnProjectionType;
}
/** create-metric-visualization-y-axis */
export interface CreateMetricVisualizationYAxis {
    color?: CreateVisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: CreateVisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name: string;
}
/** create-metric-widget-visualization */
export interface CreateMetricWidgetVisualization {
    /** The configuration for the Y-axis. */
    y: CreateMetricVisualizationYAxis[];
}
/** create-native-banner-nudge-widget */
export interface CreateNativeBannerNudgeWidget {
    /** The title of the banner nudge widget. */
    title: string;
}
/**
 * create-native-link-preview-widget
 * A native link preview widget.
 */
export interface CreateNativeLinkPreviewWidget {
    /** The id of the targeted reference. */
    target: string;
}
/**
 * create-native-post-nudge-widget
 * A native post nudge widget.
 */
export interface CreateNativePostNudgeWidget {
    /** The body of the post nudge widget. */
    body?: string;
    /** The cover image of the post nudge widget. */
    cover_image?: string;
    /** The title of the post nudge widget. */
    title: string;
}
/**
 * create-native-spotlight-nudge-widget
 * A native spotlight nudge widget.
 */
export interface CreateNativeSpotlightNudgeWidget {
    /** The cover image of the spotlight nudge widget. */
    cover_image?: string;
    /** The description of the spotlight nudge widget. */
    description?: string;
    /** The title of the spotlight nudge widget. */
    title: string;
}
/** create-one-time-line-items */
export interface CreateOneTimeLineItems {
    /** Pricing at which SKU is to be added in the service plan. */
    pricing_id: string;
    /**
     * Quantity of SKU to be added in the service plan.
     * @format int32
     */
    quantity?: number;
    /** SKU to be added in the service plan. */
    sku_id: string;
}
/** create-operation-input-port */
export interface CreateOperationInputPort {
    /** Whether schema for this input port is defined during runtime. */
    has_dynamic_schema?: boolean;
    /** Input port name. */
    name: string;
    schema?: CreateOperationIoPortFieldsSchema;
    /** Port type. */
    type: OperationInputPortType;
}
/** create-operation-io-port-fields-schema */
export interface CreateOperationIoPortFieldsSchema {
    /** List of composite schemas */
    composite_schemas?: CompositeSchema[];
    /** The conditions associated with the fields. */
    conditions?: CustomSchemaFragmentCondition[];
    /** Schema used to describe fields using field descriptors */
    field_descriptors?: SchemaFieldDescriptor[];
    /** Schema type used to describe fields. */
    type?: IoPortFieldsSchemaType;
}
/** create-operation-output-port */
export interface CreateOperationOutputPort {
    /**
     * Whether this output port can emit a stream of values rather than
     * one time single value.
     */
    emits_multiple?: boolean;
    /** Whether schema for this output port is defined during runtime. */
    has_dynamic_schema?: boolean;
    /** Output port name. */
    name: string;
    schema?: CreateOperationIoPortFieldsSchema;
    /** Port type. */
    type: OperationOutputPortType;
}
/** create-operation-port-io-schema */
export interface CreateOperationPortIoSchema {
    /**
     * The name of the port, serving as an identifier for the data entry
     * or exit point within the step.
     */
    name: string;
    schema?: CreateOperationIoPortFieldsSchema;
}
/** create-org-schedule-interval */
export interface CreateOrgScheduleInterval {
    /**
     * Date (inclusive) on which the interval begins.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    from: string;
    /**
     * If true, no organization schedule is looked up for these days and
     * they are marked as holidays.
     */
    is_excluded?: boolean;
    /**
     * The name of the period, for example the event or holiday it
     * represents.
     */
    name: string;
    /**
     * Date (exclusive) on which the interval ends. If omitted, it is a
     * single day interval.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    to?: string;
}
/**
 * create-phone-number
 * Create object for phone_number.
 */
export interface CreatePhoneNumber {
    /** The phone number in e164 format. */
    e164_number: string;
    /** An optional extension. */
    extension?: string;
}
/** create-pie-visualization-x-axis */
export interface CreatePieVisualizationXAxis {
    color?: CreateVisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: CreateVisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name: string;
}
/** create-pie-visualization-y-axis */
export interface CreatePieVisualizationYAxis {
    color?: CreateVisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: CreateVisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name: string;
}
/** create-pie-widget-visualization */
export interface CreatePieWidgetVisualization {
    /** The configuration for the X-axis. */
    x: CreatePieVisualizationXAxis[];
    y: CreatePieVisualizationYAxis;
}
/** create-policy-instance */
export interface CreatePolicyInstance {
    /** Name assigned to this policy instance by user */
    name?: string;
    /**
     * Json string storing values for each templated variable, go as
     * `input.parameters` when evaluating policies
     */
    parameters?: string;
    /**
     * Holds the contents of the policy. Each policy would consist a rule
     * named main/allow which would be the entry point for the policy. The
     * policy would be templated, i.e. there would be some variables which
     * would be filled during creating a policy instance, those would be
     * referenced under `input.parameters` and stored in parameters
     * variable below
     */
    policy?: string;
    /**
     * Indicates if the policy could be parsed into constituent pieces
     * that can be displayed on UI as individual drop boxes
     */
    system_parseable?: boolean;
}
/**
 * create-post-nudge-widget
 * A post nudge widget.
 */
export type CreatePostNudgeWidget = (CreateNativePostNudgeWidget | SnapKitBaseWidget) & {
    post_nudge_type: CreatePostNudgeWidgetPostNudgeType;
};
export declare enum CreatePostNudgeWidgetPostNudgeType {
    Native = "native",
    SnapKit = "snap_kit"
}
/**
 * create-postal-address
 * Create object for postal_address.
 */
export interface CreatePostalAddress {
    /** Country name component. */
    country?: string;
    /**
     * Full mailing address, formatted for display or use on a mailing
     * label.
     */
    formatted?: string;
    /** Town, city. */
    locality?: string;
    /** Zip code of the address. */
    postal_code?: string;
    /** State, province, prefecture, or region component. */
    region?: string;
    /** Full street address component. */
    street_address?: string;
}
/** create-quote-line-item */
export interface CreateQuoteLineItem {
    /**
     * Adjusted unit price overrides unit price for SKU in line item.
     * @format double
     */
    adjusted_unit_price?: number;
    /** Description of the line item. */
    description?: string;
    discount?: 'discount_amount' | 'discount_percentage';
    discount_amount?: DiscountAmount;
    discount_percentage?: DiscountPercentage;
    /**
     * It represents the time when a specific line item's effectiveness or
     * applicability within the quote comes to an end.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    end_date?: string;
    /**
     * It indicates the active status of a line item within a quote. When
     * set to true, it signifies that the line item is active and included
     * in the quote's calculations and pricing.
     */
    is_active?: boolean;
    /** Name of the line item. */
    name: string;
    overage_discount?: 'overage_discount_amount' | 'overage_discount_percentage';
    overage_discount_amount?: DiscountAmount;
    overage_discount_percentage?: DiscountPercentage;
    /**
     * Pricing to be used for this line item. Helps in deducing currency
     * and billing frequency at which the SKU's usage is billed.
     */
    pricing: string;
    /**
     * Quantity of the SKU.
     * @format int32
     */
    quantity: number;
    /**
     * It represents the time when a specific line item becomes effective
     * or applicable within the quote.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    start_date?: string;
}
/** create-recurring-line-items */
export interface CreateRecurringLineItems {
    /** Pricing at which SKU is to be added in the service plan. */
    pricing_id: string;
    /**
     * Quantity of SKU to be added in the service plan.
     * @format int32
     */
    quantity?: number;
    /** SKU to be added in the service plan. */
    sku_id: string;
}
/**
 * create-rule-node-instance
 * RuleNode instance containg relevant rule node information.
 */
export interface CreateRuleNodeInstance {
    /** Description of the rule node. */
    description?: string;
    /** Display Name of the rule node. */
    display_id: string;
    /** input of the rule node. */
    input: object;
    /** Name of the rule node. */
    name: string;
    /** Id of the rule node. */
    rule_node_id?: string;
    /** List of transitions of the rule node based on the output state. */
    transitions: RuleNodeTransition[];
    /** Type of the rule node. */
    type?: string;
    /** UI hints for the rule node instance. */
    ui?: RuleNodeInstanceUiHints;
}
/** create-sign-config */
export interface CreateSignConfig {
    /** Members list to be cced in the email of the signing document. */
    cc_members?: MemberInfo[];
    /** Email message of the signing document. */
    message?: string;
    /** Recipient details list of the signing document. */
    recipients?: RecipientInfo[];
    /** Email title of the signing document. */
    title?: string;
    /** Type of the sign needed for the quote. */
    type: SignConfigType;
}
/** create-snap-in-developer-connection */
export interface CreateSnapInDeveloperConnection {
    /** Keyring ID. */
    keyring_id: string;
    /** Name of connection */
    name: string;
}
/** create-snap-in-name-reference-mapping */
export interface CreateSnapInNameReferenceMapping {
    /** Name by which the object is being referred in the snap-in version. */
    name: string;
    /**
     * Reference to the actual object.
     * @example "TAG-12345"
     */
    reference: string;
}
/** create-snap-in-operation-definition */
export interface CreateSnapInOperationDefinition {
    /** Description of the operation */
    description?: string;
    /** Name of the function. */
    function?: string;
    /** Schema of the inputs port of this operation. */
    input_ports?: CreateOperationInputPort[];
    /** Name of the operation */
    name: string;
    /** Namespace of the operation. */
    namespace?: string;
    /** Schema of the outputs port of this operation. */
    output_ports?: CreateOperationOutputPort[];
    /** Unique slug of operation (within namespace). */
    slug: string;
    /** Operation type. */
    type: SnapInOperationDefinitionType;
}
/** create-snap-in-preferences */
export interface CreateSnapInPreferences {
    /** Values for the inputs to the snap-in. */
    inputs_values?: object;
    /** List of user-scoped keyrings to be used by the snap-in. */
    keyrings?: CreateSnapInNameReferenceMapping[];
}
/**
 * create-spotlight-nudge-widget
 * A spotlight nudge widget.
 */
export type CreateSpotlightNudgeWidget = (CreateNativeSpotlightNudgeWidget | SnapKitBaseWidget) & {
    /** The background color of the spotlight nudge widget. */
    background_color?: string;
    /** Whether to show the close button on the spotlight nudge widget. */
    show_close_button: boolean;
    spotlight_nudge_type: CreateSpotlightNudgeWidgetSpotlightNudgeType;
};
export declare enum CreateSpotlightNudgeWidgetSpotlightNudgeType {
    Native = "native",
    SnapKit = "snap_kit"
}
/**
 * create-stage
 * Create object for stage.
 */
export interface CreateStage {
    /** Notes relevant to the stage */
    notes?: string;
    /** DON of the stage. */
    stage: string;
}
/** create-stage-node */
export interface CreateStageNode {
    /** Whether this stage is deprecated. */
    is_deprecated?: boolean;
    /** Whether this is the start stage. */
    is_start?: boolean;
    /** The ID of the stage. */
    stage_id: string;
    /** List of transitions from this stage. */
    transitions?: CreateStageTransition[];
}
/** create-stage-transition */
export interface CreateStageTransition {
    /** The ID of the target stage. */
    target_stage_id: string;
}
/** create-sub-widget */
export interface CreateSubWidget {
    query: CreateWidgetQuery;
    /**
     * A reference ID for the sub-widget. It should be unique within the
     * widget.
     */
    reference_id: string;
    visualization: CreateWidgetVisualization;
}
/** create-sync-unit */
export interface CreateSyncUnit {
    /**
     * External import slug which will perform syncs, only populated for
     * adaas external system type.
     */
    external_import_slug?: string;
    /** External sync unit that we will sync from. */
    external_sync_unit: string;
    /**
     * Import slug which will perform syncs, only populated for adaas
     * external system type.
     */
    import_slug?: string;
    /** Keyring that will be used for syncs. */
    keyring: string;
    /**
     * Snap in slug which will perform syncs, only populated for adaas
     * external system type.
     */
    snap_in_slug?: string;
}
/** create-table-visualization-column */
export interface CreateTableVisualizationColumn {
    color?: CreateVisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: CreateVisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** Whether the column should be movable. */
    is_movable?: boolean;
    /** Whether the column should be resizable. */
    is_resizable?: boolean;
    /** Whether the column should be sortable. */
    is_sortable?: boolean;
    /** Whether the column visibility can be toggled. */
    is_visibility_togglable?: boolean;
    /** The label for the axis. */
    label?: string;
    /**
     * Whether the column should be locked to the left or right side of the
     * table.
     */
    lock_position?: TableVisualizationColumnLockPosition;
    /**
     * The maximum width of the column.
     * @format int64
     */
    max_width?: number;
    /**
     * The minimum width of the column.
     * @format int64
     */
    min_width?: number;
    /**
     * The order in which the column should be displayed.
     * @format int64
     */
    order?: number;
    /**
     * Whether the column should be pinned to the left or right side of the
     * table.
     */
    pin_position?: TableVisualizationColumnPinPosition;
    /** The reference name of the axis. */
    reference_name: string;
}
/** create-table-widget-visualization */
export interface CreateTableWidgetVisualization {
    /** The configuration for the columns in the table. */
    columns: CreateTableVisualizationColumn[];
}
/**
 * create-tag-with-value
 * Create object for tag_summary.
 */
export interface CreateTagWithValue {
    /**
     * ID of the referenced tag
     * @example "TAG-12345"
     */
    tag_id: string;
    /** Value associated with the tag for the object. */
    value?: string;
}
/** create-visualization-axis-color */
export interface CreateVisualizationAxisColor {
    /** The key lookup color. */
    key_lookup?: CreateVisualizationAxisColorKeyLookup[];
    /** The static color. */
    static?: string;
    /** The type of the color. */
    type: VisualizationAxisColorType;
}
/** create-visualization-axis-color-key-lookup */
export interface CreateVisualizationAxisColorKeyLookup {
    /** The key to map to a color. */
    key: string;
    /** The color value. */
    value: string;
}
/** create-visualization-axis-drill-through */
export interface CreateVisualizationAxisDrillThrough {
    /** The ID of the dashboard to navigate to when the axis is clicked. */
    dashboard: string;
    /** The label for the drill through. */
    label: string;
}
/** create-weekly-org-schedule-interval */
export interface CreateWeeklyOrgScheduleInterval {
    /**
     * Duration in minutes of the week when the interval starts. 0 is
     * Sunday midnight, when Sunday ends and Monday begins.
     * @format int64
     */
    from: number;
    /**
     * Duration in minutes of the week when the interval ends (must be
     * larger than 'from'). 0 is Sunday midnight, when Sunday ends and
     * Monday begins.
     * @format int64
     */
    to: number;
}
/** create-widget-column-projection */
export interface CreateWidgetColumnProjection {
    custom_field?: CreateCustomFieldWidgetColumnProjection;
    /** Set of field attributes. */
    devrev_schema?: SchemaFieldDescriptor;
    meerkat_schema: CreateMeerkatWidgetColumnProjection;
    /** The reference name of the column. */
    reference_name: string;
    /** The type of the column. */
    type?: WidgetColumnProjectionType;
}
/** create-widget-data-source */
export interface CreateWidgetDataSource {
    /**
     * The ID of the data source. Meant to be set when the type is
     * data_source.
     */
    data_source?: string;
    /**
     * The dimensions (or the extended dimensions) provided by the data
     * source.  These are the categories that can be used to group or
     * segment the measures.
     */
    dimensions?: CreateWidgetColumnProjection[];
    external_data_source?: CreateWidgetDataSourceReference;
    /**
     * A list of possible joins for the data source. Follows foreign key
     * semantics.
     */
    joins?: CreateDataSourceJoin[];
    /**
     * The measures (or the extended measures) provided by the data
     * source.  These are the numerical values that can be analyzed.
     */
    measures?: CreateWidgetColumnProjection[];
    oasis?: CreateWidgetOasisDataSource;
    /** The reference name of the data source. */
    reference_name: string;
    /** The type of the data source. */
    type: WidgetDataSourceType;
}
/** create-widget-data-source-reference */
export interface CreateWidgetDataSourceReference {
    /**
     * The column projections for the data source. These are the columns
     * that are  projected from the datasets.
     */
    dataset_projections?: CreateWidgetOasisDatasetColumnProjection[];
    /** The id of the data source. */
    id: string;
}
/** create-widget-oasis-data-source */
export interface CreateWidgetOasisDataSource {
    /** List of datasets used by the data source. */
    datasets: string[];
    /**
     * The column projections for the data source. These are the columns
     * that are  projected from the datasets.
     */
    projections?: CreateWidgetOasisDatasetColumnProjection[];
    /**
     * The base SQL query that constructs the view for the data source.
     * The SQL can reference the datasets using their aliases.
     */
    sql_query: string;
}
/** create-widget-oasis-dataset-column */
export interface CreateWidgetOasisDatasetColumn {
    custom_field?: CreateCustomFieldWidgetColumnProjection;
    /** The name of the column. */
    name: string;
}
/** create-widget-oasis-dataset-column-projection */
export interface CreateWidgetOasisDatasetColumnProjection {
    /** The column name. */
    columns: CreateWidgetOasisDatasetColumn[];
    /** The dataset id. */
    dataset: string;
}
/** create-widget-query */
export interface CreateWidgetQuery {
    /**
     * The dimensions for the query, which are the categories to group or
     * segment the measures. Usually these are the X-axis values in a
     * visualization.
     */
    dimensions?: string[];
    /**
     * Set of filters to apply on the widgets. These filters are applied
     * on top of the dashboard level filters.
     */
    filters?: CreateDashboardFilter[];
    /** Join paths to use for the query. */
    joins?: CreateWidgetQueryJoins[];
    /**
     * The maximum number of records to return. This is used to limit the
     * amount of data  returned by the query.
     * @format int64
     */
    limit?: number;
    /**
     * The measures for the query, which are the numerical values to be
     * analyzed. Usually these are the Y-axis values in a visualization.
     */
    measures?: string[];
    /**
     * The order in which the data should be returned. This is used to
     * sort the data  returned by the query.
     */
    order_by?: CreateWidgetQueryOrderBy[];
}
/** create-widget-query-joins */
export interface CreateWidgetQueryJoins {
    /** A list of joins. */
    path: string[];
}
/** create-widget-query-order-by */
export interface CreateWidgetQueryOrderBy {
    /** The direction of the sort. */
    direction: WidgetQueryOrderByDirection;
    /** The column to sort by. */
    reference_name: string;
}
/** create-widget-visualization */
export interface CreateWidgetVisualization {
    bar?: CreateBarWidgetVisualization;
    column?: CreateColumnWidgetVisualization;
    donut?: CreateDonutWidgetVisualization;
    line?: CreateLineWidgetVisualization;
    metric?: CreateMetricWidgetVisualization;
    pie?: CreatePieWidgetVisualization;
    table?: CreateTableWidgetVisualization;
    /** The type of the visualization, such as line, bar, pie, etc. */
    type: WidgetVisualizationType;
}
/**
 * create-workflow-request
 * The request to create a workflow.
 */
export interface CreateWorkflowRequest {
    /** Description of the workflow. */
    description?: string;
    /** Title of the workflow. */
    title: string;
}
/**
 * create-workflow-response
 * The response to a workflow create request.
 */
export interface CreateWorkflowResponse {
    workflow: Workflow;
}
/** create-workflow-step-input-value */
export interface CreateWorkflowStepInputValue {
    /**
     * A list of specifications for the input values, detailing how each
     * value is provided or computed for the port.
     */
    fields?: CreateWorkflowStepInputValueSpec[];
    /**
     * The name of the input port to which this value corresponds, used
     * for mapping the input to the correct port.
     */
    port_name: string;
}
/** create-workflow-step-input-value-definition */
export interface CreateWorkflowStepInputValueDefinition {
    /**
     * Identifies the nature of the input value, distinguishing between a
     * literal constant and a dynamic expression.
     */
    type: InputValueDefinitionType;
    /**
     * The actual fixed value or expression that defines the input, which
     * is used during the step's execution.
     */
    value?: object;
}
/** create-workflow-step-input-value-spec */
export interface CreateWorkflowStepInputValueSpec {
    /**
     * An identifier for the input value, used to reference the value
     * within the step's configuration.
     */
    name: string;
    value?: CreateWorkflowStepInputValueDefinition;
}
/** create-workflow-step-next-step-spec */
export interface CreateWorkflowStepNextStepSpec {
    /**
     * The name of the port on the next step that will establish the
     * relationship with the current step.
     */
    next_port_name: string;
    /** The unique identifier of the next step to define the relationship. */
    next_step: string;
    /**
     * The name of the port through which the relationship is established
     * with the next step.
     */
    port_name: string;
}
/**
 * create-workflow-step-request
 * The request to create a workflow step.
 */
export interface CreateWorkflowStepRequest {
    /**
     * A detailed explanation of the step's purpose and functionality
     * within the workflow.
     */
    description?: string;
    /**
     * The input ports and relevant schema(s) for this step. Only relevant
     * for operations which support dynamic ports/schemas like OneOf, HTTP
     * etc.
     */
    input_ports?: CreateOperationPortIoSchema[];
    /**
     * A set of input values for the step, which may include fixed values
     * or dynamic expressions that reference outputs from previous steps.
     * These expressions are evaluated at runtime to provide the inputs
     * for the step's execution.
     */
    input_values?: CreateWorkflowStepInputValue[];
    /**
     * The human-readable identifier for the step, used for display
     * purposes.
     */
    name: string;
    /** List of steps which directly depend on the current step. */
    next_steps?: CreateWorkflowStepNextStepSpec[];
    /**
     * The unique identifier that links to the operation's definition,
     * which outlines the specific actions and logic that the step will
     * execute.
     */
    operation: string;
    /**
     * The output ports and relevant schema(s) for this step. Only
     * relevant for operations which support dynamic ports/schemas like
     * Condition, HTTP etc.
     */
    output_ports?: CreateOperationPortIoSchema[];
    /**
     * The previous steps' details. If passed, the previous steps will be
     * updated and connected to the new step.
     */
    previous_steps?: CreateWorkflowStepRequestPreviousStep[];
    /**
     * A unique identifier for the step within a workflow, ensuring
     * distinct identification across multiple steps.
     */
    reference_key: string;
    /** The unique identifier of the workflow to which this step belongs. */
    workflow: string;
}
/**
 * create-workflow-step-request-previous-step
 * The previous step in the workflow.
 */
export interface CreateWorkflowStepRequestPreviousStep {
    /** The ID of the previous step. */
    id: string;
    /** The name of the input port of the current step. */
    port_name?: string;
    /** The name of the output port of the previous step. */
    previous_port_name?: string;
}
/**
 * create-workflow-step-response
 * The response to a workflow step create request.
 */
export interface CreateWorkflowStepResponse {
    workflow_step: WorkflowStep;
}
/** credit */
export type Credit = AtomBase & {
    account?: AccountSummary;
    /**
     * Amount that was approved for the credit request. Amount approved is
     * a Dev org construct, only Dev org can decide how much credit amount
     * needs to be approved when a Rev Org has made a credit request. Or
     * how much amount they want to disburse when they are offering
     * credits to their Rev Org (customer).
     * @format double
     */
    amount_approved: number;
    /**
     * Amount expired out of the credits offered. Each Credit
     * offered/requested has a expiry date associated with it. If the
     * credits are unused until the expiry hits, then the amount unused
     * (amount_remaining), gets expired and is not usable after the expiry
     * date. For instance, if 200 credits were requested by Rev from their
     * Dev Org. And their Dev decided to approve half (100 credits) of the
     * amount requested by the Rev with a expiry of one month. And during
     * this one month period Rev was able to use 70 credits only. Then
     * their amount remaining (left credits) would change to 0 and the
     * amount expired would be 30 (as 30 credits were un used when the
     * expiry hit). The amount related fields have following values when
     * expiry time hits amount_requested:200, amount_approved:100,
     * amount_used:70, amount_remaining:0, amount=expired:30.
     * @format double
     */
    amount_expired: number;
    /**
     * Amount remaining out of the credits offered.
     * @format double
     */
    amount_remaining?: number;
    /**
     * Amount requested/disbursed in the credit request.
     * @format double
     */
    amount_requested: number;
    /**
     * Amount that is/was used by the Rev Org (customer) out of the
     * credits offered.
     * @format double
     */
    amount_used?: number;
    /** Reason for requesting/disbursing the Credit. */
    description?: string;
    /**
     * Provides date on which the offered credit amount expires. When the
     * expiry time is hit, then the amount unused (amount_remaining)
     * becomes zero and is considered as amount_expired. Expired credit
     * amount cannot be used.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    expiry_time: string;
    /** Indicates whether the credit is expired. */
    is_expired?: boolean;
    /**
     * Name of the credit. (For credits being offered via coupons, credit
     * name would be set depending on coupons name/description to help
     * user in source tracking.).
     */
    name: string;
    /**
     * Captures the remark given by dev admin for a rev requested credit,
     * while approving, partially approving or rejecting the credit
     * request.
     */
    remark?: string;
    rev_org?: OrgSummary;
    /**
     * Status of the credit request. A Dev is allowed to update status for the
     * credit request made by their Rev. Once a credit request status is made
     * as 'approved', no updates are allowed to the credit object after that.
     * When a Dev disburses credits to any of it's Revs, then by default the
     * credit object's status is 'approved', hence no updates are allowed.
     * When a Rev requests credits from their Dev Org, the status of requested
     * credit object is 'awaiting approval' (revs cannot modify the status
     * field, it's a Dev's construct). A Dev can update the status of credit
     * request to approved or rejected.
     */
    status: CreditStatus;
    /**
     * Stripe customer balance transaction id corresponding to the credit
     * request.
     */
    stripe_customer_balance_transaction_id?: string;
    /**
     * Indicates the source of the credit object, if it was requested by rev,
     * purchased by rev, issued by the dev or redeemed via a coupon.
     */
    type: CreditType;
    /**
     * Detailed information on the credit utilization. It's a kind of
     * statement, corresponding to a credit object. It contains an array
     * of following [reason_for_usage, used_amount, time_of_usage]
     * regarding credit usage for a given credit object.
     */
    usage_details?: CreditUsageDetails[];
};
/**
 * credit-consumed
 * The details related to consumption of credits to be shown as credit
 * invoice line item.
 */
export interface CreditConsumed {
    /**
     * Credit amount that was consumed.
     * @format double
     */
    amount_applied: number;
    credit_id: CreditSummary;
}
/** credit-coupon */
export type CreditCoupon = AtomBase & {
    /**
     * User shareable code of the coupon. To apply coupon this code needs
     * to be entered.
     */
    coupon_code: string;
    /**
     * Total credits to be awarded on redemption of the coupon.
     * @format int32
     */
    credit_amount: number;
    /**
     * Number of days after which credits awarded using this coupon would
     * expire.
     * @format int32
     */
    credit_expiry_duration?: number;
    /**
     * If both credit expiry time and credit expiry duration are set, then the
     * max of both will be taken at the time of applying this coupon, if
     * credit expiry method is set to 'latest'. While min of both would be
     * taken in case of 'earliest' credit expiry method.
     */
    credit_expiry_method?: CreditCouponCreditExpiryMethod;
    /**
     * Timestamp when credits awarded using this coupon would expire.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    credit_expiry_time?: string;
    /**
     * The timestamp until when the current coupon is valid.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    expiry_time: string;
    /**
     * Rules to be applied for validating the coupon. If no rules are set then
     * coupon can be redeemed by anyone on any sku (Default is yes).
     */
    rules?: CreditCouponRules;
};
/**
 * If both credit expiry time and credit expiry duration are set, then the
 * max of both will be taken at the time of applying this coupon, if
 * credit expiry method is set to 'latest'. While min of both would be
 * taken in case of 'earliest' credit expiry method.
 */
export declare enum CreditCouponCreditExpiryMethod {
    Earliest = "earliest",
    Latest = "latest"
}
/**
 * credit-coupon-rules
 * Rules to be applied for validating the coupon. If no rules are set then
 * coupon can be redeemed by anyone on any sku (Default is yes).
 */
export interface CreditCouponRules {
    /** Email of RevUs which can redeem this coupon. */
    emails?: string[];
    /** RevOs which can redeem this coupon. */
    revs?: OrgSummary[];
    /** SKUs for which this coupon can be redeemed. */
    skus?: SkuSummary[];
}
/** credit-coupon-summary */
export type CreditCouponSummary = AtomBaseSummary;
/** credit-coupons-apply-request */
export interface CreditCouponsApplyRequest {
    /** The coupon's code. */
    coupon_code: string;
    /** Email of Rev User which is trying redeem coupon. */
    email?: string;
    /**
     * Rev Org which is trying to redeem coupon.
     * @example "REV-AbCdEfGh"
     */
    rev_org?: string;
    /** Sku for which the coupon is being tried to be redeemed. */
    sku?: string;
}
/** credit-coupons-apply-response */
export interface CreditCouponsApplyResponse {
    credit?: Credit;
}
/** credit-coupons-create-request */
export interface CreditCouponsCreateRequest {
    /**
     * User-shareable code of the coupon. To apply coupon this code needs
     * to be entered.
     */
    coupon_code: string;
    /**
     * Total credits to be awarded on redemption of the coupon.
     * @format int64
     */
    credit_amount: number;
    /**
     * Number of days after which credits awarded using this coupon would
     * expire.
     * @format int64
     */
    credit_expiry_duration?: number;
    /**
     * If both credit expiry time and credit expiry duration are set, then the
     * max of both will be taken at the time of applying this coupon, if
     * credit expiry method is set to 'latest'. While min of both would be
     * taken in case of 'earliest' credit expiry method.
     */
    credit_expiry_method?: CreditCouponCreditExpiryMethod;
    /**
     * Timestamp when credits awarded using this coupon would expire.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    credit_expiry_time?: string;
    /**
     * The timestamp till when the current coupon is valid.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    expiry_time?: string;
    rules?: CreditCouponsCreateRequestRules;
}
/** credit-coupons-create-request-rules */
export interface CreditCouponsCreateRequestRules {
    /** Emails of Rev users which can redeem this coupon. */
    emails?: string[];
    /**
     * Rev orgs which can redeem this coupon.
     * @example ["REV-AbCdEfGh"]
     */
    rev_orgs?: string[];
    /** SKUs for which this coupon can be redeemed. */
    skus?: string[];
}
/** credit-coupons-create-response */
export interface CreditCouponsCreateResponse {
    credit_coupon: CreditCoupon;
}
/** credit-coupons-delete-request */
export interface CreditCouponsDeleteRequest {
    /** The coupon's code. */
    coupon_code: string;
}
/** credit-coupons-get-request */
export interface CreditCouponsGetRequest {
    /** The coupon's code. */
    coupon_code: string;
}
/** credit-coupons-get-response */
export interface CreditCouponsGetResponse {
    credit_coupon: CreditCoupon;
}
/** credit-coupons-update-request */
export interface CreditCouponsUpdateRequest {
    /** The coupon's code. */
    coupon_code: string;
    /**
     * Total credits to be awarded on redemption of the coupon.
     * @format int64
     */
    credit_amount?: number;
    /**
     * Number of days after which credits awarded using this coupon would
     * expire.
     * @format int64
     */
    credit_expiry_duration?: number;
    /**
     * If both credit expiry time and credit expiry duration are set, then the
     * max of both will be taken at the time of applying this coupon, if
     * credit expiry method is set to 'latest'. While min of both would be
     * taken in case of 'earliest' credit expiry method.
     */
    credit_expiry_method?: CreditCouponCreditExpiryMethod;
    /**
     * Timestamp when credits awarded using this coupon would expire.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    credit_expiry_time?: string;
    /**
     * The timestamp until when the current coupon is valid.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    expiry_time?: string;
    rules?: CreditCouponsUpdateRequestRules;
}
/** credit-coupons-update-request-rules */
export interface CreditCouponsUpdateRequestRules {
    emails?: CreditCouponsUpdateRequestRulesEmails;
    rev_orgs?: CreditCouponsUpdateRequestRulesRevOrgs;
    skus?: CreditCouponsUpdateRequestRulesSkus;
}
/** credit-coupons-update-request-rules-emails */
export interface CreditCouponsUpdateRequestRulesEmails {
    /**
     * Rev User's emails to be added to the rules, these will be able to
     * redeem the coupon code once the update succeeds.
     */
    add?: string[];
    /**
     * Rev User's emails to be removed from the rules, these will not be
     * able to redeem the coupon code once the update succeeds.
     */
    remove?: string[];
}
/** credit-coupons-update-request-rules-rev-orgs */
export interface CreditCouponsUpdateRequestRulesRevOrgs {
    /**
     * Rev Orgs to be added to the rules, these will be able to redeem the
     * coupon code once the update succeeds.
     * @example ["REV-AbCdEfGh"]
     */
    add?: string[];
    /**
     * Rev Orgs to be removed from the rules, these will not be able to
     * redeem the coupon code once the update succeeds.
     * @example ["REV-AbCdEfGh"]
     */
    remove?: string[];
}
/** credit-coupons-update-request-rules-skus */
export interface CreditCouponsUpdateRequestRulesSkus {
    /**
     * Skus to be added to the rules, coupon code can be applied for these
     * skus once the update succeeds.
     */
    add?: string[];
    /**
     * Skus to be removed from the rules, coupon code will not be
     * applicableon these skus once the update succeeds.
     */
    remove?: string[];
}
/** credit-coupons-update-response */
export interface CreditCouponsUpdateResponse {
    credit_coupon: CreditCoupon;
}
/** credit-coupons-validate-request */
export interface CreditCouponsValidateRequest {
    /** The coupon's code. */
    coupon_code: string;
    /** Email of Rev User which is trying redeem coupon. */
    email?: string;
    /**
     * Rev Org which is trying to redeem coupon.
     * @example "REV-AbCdEfGh"
     */
    rev_org?: string;
    /** Sku for which the coupon is being tried to be redeemed. */
    sku?: string;
}
/** credit-coupons-validate-response */
export interface CreditCouponsValidateResponse {
    /**
     * If coupon is valid, number of credits points to be awarded.
     * @format int64
     */
    credit_amount?: number;
}
/**
 * credit-line-item
 * The devrev credits applied on top of the invoice, represented in the
 * form of a line item.
 */
export interface CreditLineItem {
    /** The list of credits details that are consumed in the invoice. */
    credits_consumed?: CreditConsumed[];
}
/**
 * Status of the credit request. A Dev is allowed to update status for the
 * credit request made by their Rev. Once a credit request status is made
 * as 'approved', no updates are allowed to the credit object after that.
 * When a Dev disburses credits to any of it's Revs, then by default the
 * credit object's status is 'approved', hence no updates are allowed.
 * When a Rev requests credits from their Dev Org, the status of requested
 * credit object is 'awaiting approval' (revs cannot modify the status
 * field, it's a Dev's construct). A Dev can update the status of credit
 * request to approved or rejected.
 */
export declare enum CreditStatus {
    Approved = "approved",
    AwaitingApproval = "awaiting_approval",
    Rejected = "rejected"
}
/** credit-summary */
export type CreditSummary = AtomBaseSummary;
/**
 * Indicates the source of the credit object, if it was requested by rev,
 * purchased by rev, issued by the dev or redeemed via a coupon.
 */
export declare enum CreditType {
    Issued = "issued",
    Purchased = "purchased",
    Redeemed = "redeemed",
    Requested = "requested"
}
/**
 * credit-usage-details
 * Usage detail defines the detailed information on how the credit amount
 * is used. For Example, credit amount $X is used on a invoice.
 */
export interface CreditUsageDetails {
    /**
     * Amount applied for this particular usage.
     * @format double
     */
    amount: number;
    /**
     * The time when credits were used.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    transaction_time: string;
    /**
     * Credits are consumed by following - 1. Invoice finalized (applied to
     * invoice) 2. other reasons like offset previous balance, credit note
     * created, etc.
     */
    usage_reason: CreditUsageReason;
}
/**
 * credit-usage-reason
 * Credits are consumed by following - 1. Invoice finalized (applied to
 * invoice) 2. other reasons like offset previous balance, credit note
 * created, etc.
 */
export interface CreditUsageReason {
    invoice_id?: InvoiceSummary;
    /**
     * The consumption reason, it can include invoice_number (if credits
     * were used in invoice), or other reasons such as previous balance
     * offset, etc.
     */
    reason: string;
}
/** credits-create-request */
export interface CreditsCreateRequest {
    /**
     * The account for which credits are being created (when dev org is
     * initiating the request, this is mandatory).
     * @example "ACC-12345"
     */
    account_id?: string;
    /**
     * Requested amount for credit.
     * @format double
     */
    amount_requested: number;
    /** Description of the credit. */
    description?: string;
    /**
     * Timestamp when the credits will expire.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    expiry_time?: string;
    /**
     * Name of the credit. (For credits being offered via coupons, credit
     * name would be set depending on coupons name/description to help
     * user in source tracking.)
     */
    name: string;
    /**
     * Comment given by dev admin for a rev requested credit, while
     * approving, partially approving or rejecting the credit request.
     */
    remark?: string;
    /**
     * The rev org for which credits are being created (when dev org is
     * initiating the request, this is mandatory). For rev orgs, raising
     * credit request themselves, this is optional.
     * @example "REV-AbCdEfGh"
     */
    rev_org_id?: string;
}
/** credits-create-response */
export interface CreditsCreateResponse {
    credit: Credit;
}
/** credits-delete-request */
export interface CreditsDeleteRequest {
    /** The credit object's DON. */
    id: string;
}
/** credits-get-request */
export interface CreditsGetRequest {
    /** The credit object's DON */
    id: string;
}
/** credits-get-response */
export interface CreditsGetResponse {
    credit: Credit;
}
/** credits-list-request */
export interface CreditsListRequest {
    /**
     * Filter credits by account.
     * @example ["ACC-12345"]
     */
    account_ids?: string[];
    /**
     * Filter items which have expiry date after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    after_expiry_date?: string;
    /**
     * Filter items which have expiry date before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    before_expiry_date?: string;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** Provides ways to specify date ranges on objects. */
    expiry_date?: DateFilter;
    /** The list of credit object DONs which are to be aggregated. */
    ids?: string[];
    /**
     * The maximum number of credit items to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /**
     * The list of rev org DONs which are to be aggregated.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org_ids?: string[];
    /**
     * List of fields to sort the credit objects, by and how to sort them.
     * Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
    /** The list of status values which are to be aggregated. */
    statuses?: CreditStatus[];
    /** The list of type values which are to be aggregated. */
    types?: CreditType[];
}
/** credits-list-response */
export interface CreditsListResponse {
    /** The list of credit objects. */
    credits: Credit[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/** credits-update-request */
export interface CreditsUpdateRequest {
    /**
     * Approved amount for credit.
     * @format double
     */
    amount_approved?: number;
    /**
     * Requested amount for credit.
     * @format double
     */
    amount_requested?: number;
    /** Description of the credit. */
    description?: string;
    /**
     * Timestamp when the credits will expire.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    expiry_time?: string;
    /** The credit object's DON. */
    id: string;
    /**
     * Name of the credit. (For credits being offered via coupons, credit
     * name would be set depending on coupons name/description to help
     * user in source tracking.)
     */
    name?: string;
    /**
     * Comment given by dev admin for a rev requested credit, while
     * approving, partially approving or rejecting the credit request.
     */
    remark?: string;
    /**
     * Status of the credit request. A Dev is allowed to update status for the
     * credit request made by their Rev. Once a credit request status is made
     * as 'approved', no updates are allowed to the credit object after that.
     * When a Dev disburses credits to any of it's Revs, then by default the
     * credit object's status is 'approved', hence no updates are allowed.
     * When a Rev requests credits from their Dev Org, the status of requested
     * credit object is 'awaiting approval' (revs cannot modify the status
     * field, it's a Dev's construct). A Dev can update the status of credit
     * request to approved or rejected.
     */
    status?: CreditStatus;
}
/** credits-update-response */
export interface CreditsUpdateResponse {
    credit: Credit;
}
/**
 * curated-vista
 * Static collection of Devrev objects.
 */
export type CuratedVista = VistaBase & {
    /** Item list to store a curated list of DevRev objects. */
    items?: AtomSummary[];
};
/**
 * curated-vista-summary
 * Static collection of Devrev objects.
 */
export type CuratedVistaSummary = VistaBaseSummary;
/**
 * currency-group
 * Preferences for setting currency.
 */
export interface CurrencyGroup {
    /** Allowed currencies for the organization. */
    allowed_currencies?: AllowedCurrencyItem[];
    /** Base currency for the organization. Default is USD. */
    base_currency?: string;
}
/** custom-engagement */
export type CustomEngagement = EngagementNewBase;
/** custom-engagement-summary */
export type CustomEngagementSummary = EngagementNewBaseSummary;
/**
 * custom-field-widget-column-projection
 * A custom field widget column projection.
 */
export interface CustomFieldWidgetColumnProjection {
    /** The leaf type of the custom field. */
    leaf_type: string;
    /** The name of the custom field. */
    name: string;
    /** The subtype of the custom field. */
    subtype?: string;
}
/** custom-object */
export type CustomObject = AtomBase & {
    /** Custom fields. */
    custom_fields?: object;
    /**
     * Custom schema fragments.
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    custom_schema_fragments?: string[];
    /** Leaf type this custom object applies to. */
    leaf_type?: string;
    /**
     * Combination of stock and custom schema fragment IDs.
     * @deprecated
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    schema_fragment_ids?: string[];
    /** Describes the current stage of a object. */
    stage?: Stage;
    /**
     * Stock schema fragment.
     * @example "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"
     */
    stock_schema_fragment?: string;
    /** Subtype corresponding to the custom type fragment. */
    subtype?: string;
    /** Title of the custom object. */
    title?: string;
    /**
     * Unique key for the object. This is mainly used for idempotency, but
     * can also be used to hold an external reference.
     */
    unique_key?: string;
};
/** custom-object-summary */
export type CustomObjectSummary = AtomBaseSummary;
/** custom-objects-create-request */
export interface CustomObjectsCreateRequest {
    /** Custom fields of the custom object. */
    custom_fields?: object;
    /**
     * Requested custom schemas described abstractly. Every provided schema's
     * custom field must be specified, otherwise a bad request error is
     * returned. If a new custom schema specifier is provided, then it will be
     * added to the work, otherwise if a custom schema is omitted from the
     * specifier, it remains unmodified.
     */
    custom_schema_spec?: CustomSchemaSpec;
    /** Leaf type of the custom object. */
    leaf_type: string;
    /** The stage of the custom object. */
    stage?: string;
    /** Title of the custom object. */
    title?: string;
    /**
     * The unique key of the custom object.This can be used to hold an
     * external reference to another object.
     */
    unique_key: string;
}
/** custom-objects-create-response */
export interface CustomObjectsCreateResponse {
    custom_object: CustomObject;
}
/** custom-objects-delete-request */
export interface CustomObjectsDeleteRequest {
    /** The ID of the custom object to get. */
    id: string;
}
/** custom-objects-delete-response */
export type CustomObjectsDeleteResponse = object;
/** custom-objects-get-request */
export interface CustomObjectsGetRequest {
    /** The ID of the custom object to get. */
    id?: string;
    /** The unique key of the custom object to get. */
    unique_key?: string;
}
/** custom-objects-get-response */
export interface CustomObjectsGetResponse {
    custom_object: CustomObject;
}
/** custom-objects-list-request */
export interface CustomObjectsListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    filter?: ListValue;
    /** Leaf type to filter. */
    leaf_type: string;
    /**
     * The maximum number of items.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** The list of fields to sort the items by and how to sort them. */
    sort_by?: string[];
}
/** custom-objects-list-response */
export interface CustomObjectsListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The custom objects. */
    result: CustomObject[];
}
/** custom-objects-update-request */
export interface CustomObjectsUpdateRequest {
    /** Custom fields of the custom object. */
    custom_fields?: object;
    /**
     * Requested custom schemas described abstractly. Every provided schema's
     * custom field must be specified, otherwise a bad request error is
     * returned. If a new custom schema specifier is provided, then it will be
     * added to the work, otherwise if a custom schema is omitted from the
     * specifier, it remains unmodified.
     */
    custom_schema_spec?: CustomSchemaSpec;
    field_mask?: FieldMask;
    /** The ID of the custom object to update. */
    id: string;
    /** The stage of the custom object. */
    stage?: string;
    /** Title of the custom object. */
    title?: string;
    /**
     * The unique key of the custom object.This can be used to hold an
     * external reference to another object.
     */
    unique_key?: string;
}
/** custom-objects-update-response */
export interface CustomObjectsUpdateResponse {
    custom_object: CustomObject;
}
/** custom-part */
export type CustomPart = PartBase;
/** custom-part-summary */
export type CustomPartSummary = PartBaseSummary;
/** custom-schema-fragment */
export type CustomSchemaFragment = (AppFragment | CustomTypeFragment | TenantFragment) & {
    type: CustomSchemaFragmentType;
};
/** custom-schema-fragment-base */
export type CustomSchemaFragmentBase = AtomBase & {
    /** The conditions associated with the fields. */
    conditions?: CustomSchemaFragmentCondition[];
    /**
     * Indicates if the fragment has been deprecated. Modifications to
     * this field are done in-place and don't result in creation of a new
     * fragment in chain.
     */
    deprecated?: boolean;
    /** Description of the custom schema fragment. */
    description?: string;
    /** List of all fields in this custom schema fragment. */
    fields?: SchemaFieldDescriptor[];
    /** Type of the custom schema fragment. */
    fragment_type?: CustomSchemaFragmentFragmentType;
    /**
     * Indicates if the leaf type corresponds to a custom object. Used
     * only in custom object RPCs.
     */
    is_custom_leaf_type?: boolean;
    /** Leaf type this fragment applies to. */
    leaf_type?: string;
    new_fragment_ref?: CustomSchemaFragmentSummary;
    old_fragment_ref?: CustomSchemaFragmentSummary;
};
/** custom-schema-fragment-base-summary */
export type CustomSchemaFragmentBaseSummary = AtomBaseSummary;
/**
 * custom-schema-fragment-condition
 * The condition associated with a field.
 */
export interface CustomSchemaFragmentCondition {
    /** The linked effects when the expression evaluates to true. */
    effects?: Effect[];
    /** The expression to evaluate. */
    expression?: string;
}
/** Type of the custom schema fragment. */
export declare enum CustomSchemaFragmentFragmentType {
    App = "app",
    CustomType = "custom_type",
    Tenant = "tenant"
}
/** custom-schema-fragment-private */
export type CustomSchemaFragmentPrivate = (AppFragmentPrivate | CustomTypeFragmentPrivate | TenantFragmentPrivate) & {
    type: CustomSchemaFragmentPrivateType;
};
/** custom-schema-fragment-private-base */
export type CustomSchemaFragmentPrivateBase = AtomBase & {
    /** The conditions associated with the fields. */
    conditions?: CustomSchemaFragmentCondition[];
    /**
     * Indicates if the fragment has been deprecated. Modifications to
     * this field are done in-place and don't result in creation of a new
     * fragment in chain.
     */
    deprecated?: boolean;
    /** Description of the custom schema fragment. */
    description?: string;
    /** List of all fields in this custom schema fragment. */
    fields?: FieldDescriptor[];
    /** Type of the custom schema fragment. */
    fragment_type?: CustomSchemaFragmentPrivateFragmentType;
    /**
     * Indicates if the leaf type corresponds to a custom object. Used
     * only in custom object RPCs.
     */
    is_custom_leaf_type?: boolean;
    /** Leaf type this fragment applies to. */
    leaf_type?: string;
    new_fragment_ref?: CustomSchemaFragmentSummary;
    old_fragment_ref?: CustomSchemaFragmentSummary;
};
/** custom-schema-fragment-private-base-summary */
export type CustomSchemaFragmentPrivateBaseSummary = AtomBaseSummary;
/** Type of the custom schema fragment. */
export declare enum CustomSchemaFragmentPrivateFragmentType {
    App = "app",
    CustomType = "custom_type",
    Tenant = "tenant"
}
export declare enum CustomSchemaFragmentPrivateType {
    AppFragmentPrivate = "app_fragment_private",
    CustomTypeFragmentPrivate = "custom_type_fragment_private",
    TenantFragmentPrivate = "tenant_fragment_private"
}
/** custom-schema-fragment-summary */
export type CustomSchemaFragmentSummary = (AppFragmentSummary | CustomTypeFragmentSummary | TenantFragmentSummary) & {
    type: CustomSchemaFragmentType;
};
export declare enum CustomSchemaFragmentType {
    AppFragment = "app_fragment",
    CustomTypeFragment = "custom_type_fragment",
    TenantFragment = "tenant_fragment"
}
/** custom-schema-fragments-get-request */
export interface CustomSchemaFragmentsGetRequest {
    /** The ID of the custom schema fragment. */
    id: string;
}
/** custom-schema-fragments-get-request-private */
export interface CustomSchemaFragmentsGetRequestPrivate {
    /** The ID of the custom schema fragment. */
    id: string;
}
/** custom-schema-fragments-get-response */
export interface CustomSchemaFragmentsGetResponse {
    fragment: CustomSchemaFragment;
}
/** custom-schema-fragments-get-response-private */
export interface CustomSchemaFragmentsGetResponsePrivate {
    fragment: CustomSchemaFragmentPrivate;
}
/** custom-schema-fragments-list-request */
export interface CustomSchemaFragmentsListRequest {
    /** The list of app names. */
    app?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** Whether only deprecated fragments should be filtered. */
    deprecated?: boolean;
    /** Whether the leaf type corresponds to a custom object */
    is_custom_leaf_type?: boolean;
    /** The list of leaf types. */
    leaf_type?: string[];
    /**
     * The maximum number of items.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /**
     * List of fields which are not required in the payload and can be
     * pruned away.
     */
    prune?: CustomSchemaFragmentsListRequestPrune[];
    /** The list of fields to sort the items by and how to sort them. */
    sort_by?: string[];
    /** The list of subtypes. */
    subtype?: string[];
    /** Filters for custom schema fragment of the provided types. */
    types?: CustomSchemaFragmentType[];
}
/** custom-schema-fragments-list-request-private */
export interface CustomSchemaFragmentsListRequestPrivate {
    /** The list of app names. */
    app?: string[];
    /**
     * The cursor to resume iteration from, otherwise if not provided,
     * then iteration starts from the beginning.
     */
    cursor?: string;
    /** Whether only deprecated fragments should be filtered. */
    deprecated?: boolean;
    /** The list of leaf types. */
    leaf_type?: string[];
    /**
     * The maximum number of items.
     * @format int32
     */
    limit?: number;
    /** The list of fields to sort the items by and how to sort them. */
    sort_by?: string[];
    /** The list of subtypes. */
    subtype?: string[];
    /** Filters for custom schema fragment of the provided types. */
    types?: CustomSchemaFragmentPrivateType[];
}
export declare enum CustomSchemaFragmentsListRequestPrune {
    Fields = "fields"
}
/** custom-schema-fragments-list-response */
export interface CustomSchemaFragmentsListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The custom schema fragments. */
    result: CustomSchemaFragment[];
}
/** custom-schema-fragments-list-response-private */
export interface CustomSchemaFragmentsListResponsePrivate {
    /**
     * The cursor to resume iteration from, otherwise if not provided,
     * then iteration starts from the beginning.
     */
    cursor?: string;
    /** The custom schema fragments. */
    result: CustomSchemaFragmentPrivate[];
}
/** custom-schema-fragments-set-request */
export type CustomSchemaFragmentsSetRequest = (CustomSchemaFragmentsSetRequestAppFragment | CustomSchemaFragmentsSetRequestCustomTypeFragment | CustomSchemaFragmentsSetRequestTenantFragment) & {
    /** List of conditions for this fragment. */
    conditions?: CustomSchemaFragmentCondition[];
    /** List of field names which are being dropped. */
    deleted_fields?: string[];
    /** Whether this fragment has been deprecated. */
    deprecated?: boolean;
    /** The description of the custom schema fragment. */
    description: string;
    /** List of all fields in this fragment. */
    fields?: SchemaFieldDescriptor[];
    /** Whether the leaf type corresponds to a custom object */
    is_custom_leaf_type?: boolean;
    /** The leaf type this fragment applies to. */
    leaf_type: string;
    type: CustomSchemaFragmentsSetRequestType;
};
/** custom-schema-fragments-set-request-app-fragment */
export interface CustomSchemaFragmentsSetRequestAppFragment {
    /** The app this fragment applies to. */
    app: string;
}
/** custom-schema-fragments-set-request-custom-type-fragment */
export interface CustomSchemaFragmentsSetRequestCustomTypeFragment {
    /**
     * Path components used to display available custom types in tree
     * form.
     */
    path?: CustomTypePathComponent[];
    /** The ID of the associated custom stage diagram. */
    stage_diagram?: string;
    /** List of Per-DevOrg stock field overrides. */
    stock_field_overrides?: StockFieldOverride[];
    /** The string used to populate the subtype in the leaf type. */
    subtype: string;
    /** The display name of the subtype. */
    subtype_display_name?: string;
}
/** custom-schema-fragments-set-request-private */
export type CustomSchemaFragmentsSetRequestPrivate = (CustomSchemaFragmentsSetRequestPrivateAppFragment | CustomSchemaFragmentsSetRequestPrivateCustomTypeFragment | CustomSchemaFragmentsSetRequestPrivateTenantFragment) & {
    /** List of conditions for this fragment. */
    conditions?: CustomSchemaFragmentCondition[];
    /** List of field names which are being dropped. */
    deleted_fields?: string[];
    /** Whether this fragment has been deprecated. */
    deprecated?: boolean;
    /** The description of the custom schema fragment. */
    description: string;
    /** List of all fields in this fragment. */
    fields?: FieldDescriptor[];
    /** The leaf type this fragment applies to. */
    leaf_type: string;
    type: CustomSchemaFragmentsSetRequestPrivateType;
};
/** custom-schema-fragments-set-request-private-app-fragment */
export interface CustomSchemaFragmentsSetRequestPrivateAppFragment {
    /** The app this fragment applies to. */
    app: string;
}
/** custom-schema-fragments-set-request-private-custom-type-fragment */
export interface CustomSchemaFragmentsSetRequestPrivateCustomTypeFragment {
    /**
     * Path components used to display available custom types in tree
     * form.
     */
    path?: CustomTypePathComponent[];
    /** The ID of the associated custom stage diagram. */
    stage_diagram?: string;
    /** The string used to populate the subtype in the leaf type. */
    subtype: string;
    /** The display name of the subtype. */
    subtype_display_name?: string;
}
/** custom-schema-fragments-set-request-private-tenant-fragment */
export type CustomSchemaFragmentsSetRequestPrivateTenantFragment = object;
export declare enum CustomSchemaFragmentsSetRequestPrivateType {
    AppFragment = "app_fragment",
    CustomTypeFragment = "custom_type_fragment",
    TenantFragment = "tenant_fragment"
}
/** custom-schema-fragments-set-request-tenant-fragment */
export interface CustomSchemaFragmentsSetRequestTenantFragment {
    /** The display ID prefix for the custom object. */
    id_prefix?: string;
    /** List of Per-DevOrg stock field overrides. */
    stock_field_overrides?: StockFieldOverride[];
}
export declare enum CustomSchemaFragmentsSetRequestType {
    AppFragment = "app_fragment",
    CustomTypeFragment = "custom_type_fragment",
    TenantFragment = "tenant_fragment"
}
/** custom-schema-fragments-set-response */
export interface CustomSchemaFragmentsSetResponse {
    /** The ID of the custom schema fragment. */
    id: string;
}
/** custom-schema-fragments-set-response-private */
export interface CustomSchemaFragmentsSetResponsePrivate {
    /** The ID of the custom schema fragment. */
    id: string;
}
/**
 * custom-schema-spec
 * Requested custom schemas described abstractly. Every provided schema's
 * custom field must be specified, otherwise a bad request error is
 * returned. If a new custom schema specifier is provided, then it will be
 * added to the work, otherwise if a custom schema is omitted from the
 * specifier, it remains unmodified.
 */
export interface CustomSchemaSpec {
    /** List of apps that are requested. */
    apps?: string[];
    /** Name of the subtype requested. */
    subtype?: string;
    /** Whether the tenant schema is requested. */
    tenant_fragment?: boolean;
    /** Whether to enforce required fields validation. */
    validate_required_fields?: boolean;
}
/** custom-stage */
export type CustomStage = AtomBase & {
    marketplace_ref?: AtomSummary;
    /** The human readable name of the state. */
    name?: string;
    /**
     * Ordinal used to sort/group stages.
     * @format int32
     */
    ordinal?: number;
    state?: CustomStateSummary;
};
/** custom-stage-summary */
export type CustomStageSummary = AtomBaseSummary;
/** custom-stages-create-request */
export interface CustomStagesCreateRequest {
    /**
     * A reference to the marketplace item from which this stage was
     * imported.
     */
    marketplace_ref?: string;
    /** The name of the custom stage. */
    name: string;
    /**
     * The ordinal of the custom stage used for ordering.
     * @format int32
     */
    ordinal: number;
    /** The state ID. */
    state: string;
}
/** custom-stages-create-response */
export interface CustomStagesCreateResponse {
    custom_stage: CustomStage;
}
/** custom-stages-get-request */
export interface CustomStagesGetRequest {
    /** The ID of the custom stage to get. */
    id: string;
}
/** custom-stages-get-response */
export interface CustomStagesGetResponse {
    custom_stage: CustomStage;
}
/** custom-stages-list-request */
export interface CustomStagesListRequest {
    /**
     * The cursor to resume iteration from, otherwise if not provided,
     * then iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of items.
     * @format int32
     */
    limit?: number;
    /** The list of marketplace ref. */
    marketplace_ref?: string[];
    /** The list of stage names. */
    name?: string[];
    /** The list of stage ordinals. */
    ordinal?: number[];
    /** The list of fields to sort the items by and how to sort them. */
    sort_by?: string[];
    /** The list of state IDs. */
    state?: string[];
}
/** custom-stages-list-response */
export interface CustomStagesListResponse {
    /**
     * The cursor to resume iteration from, otherwise if not provided,
     * then iteration starts from the beginning.
     */
    cursor?: string;
    /** The custom stages. */
    result: CustomStage[];
}
/** custom-stages-update-request */
export interface CustomStagesUpdateRequest {
    /** The ID of the custom stage to update. */
    id: string;
    /** The updated name of the custom stage. */
    name?: string;
    /**
     * The ordinal of the custom stage.
     * @format int32
     */
    ordinal?: number;
    /** The state ID. */
    state_id?: string;
}
/** custom-stages-update-response */
export interface CustomStagesUpdateResponse {
    custom_stage: CustomStage;
}
/** custom-state */
export type CustomState = AtomBase & {
    /** True if this is a final state that closes work. */
    is_final?: boolean;
    /** The human readable name of the state. */
    name?: string;
    /**
     * Ordinal used to identify system states.
     * @format int32
     */
    ordinal?: number;
};
/** custom-state-summary */
export type CustomStateSummary = AtomBaseSummary;
/** custom-states-create-request */
export interface CustomStatesCreateRequest {
    /** Whether this is a final state. */
    is_final?: boolean;
    /** The name of the custom state. */
    name: string;
    /**
     * Ordinal of the custom state used to identify system states.
     * @format int32
     */
    ordinal: number;
}
/** custom-states-create-response */
export interface CustomStatesCreateResponse {
    custom_state: CustomState;
}
/** custom-states-get-request */
export interface CustomStatesGetRequest {
    /** The ID of the custom state to get. */
    id: string;
}
/** custom-states-get-response */
export interface CustomStatesGetResponse {
    custom_state: CustomState;
}
/** custom-states-list-request */
export interface CustomStatesListRequest {
    /**
     * The cursor to resume iteration from, otherwise if not provided,
     * then iteration starts from the beginning.
     */
    cursor?: string;
    /** Whether only final states should be filtered. */
    is_final?: boolean;
    /**
     * The maximum number of items.
     * @format int32
     */
    limit?: number;
    /** The list of state names. */
    name?: string[];
    /** The list of state ordinals. */
    ordinal?: number[];
    /** The list of fields to sort the items by and how to sort them. */
    sort_by?: string[];
}
/** custom-states-list-response */
export interface CustomStatesListResponse {
    /**
     * The cursor to resume iteration from, otherwise if not provided,
     * then iteration starts from the beginning.
     */
    cursor?: string;
    /** The custom states. */
    result: CustomState[];
}
/** custom-states-update-request */
export interface CustomStatesUpdateRequest {
    field_mask?: FieldMask;
    /** The ID of the custom state to update. */
    id: string;
    /** Whether this is a final state. */
    is_final?: boolean;
    /** The name of the custom state. */
    name?: string;
    /**
     * Ordinal of the custom state used to identify system states.
     * @format int32
     */
    ordinal?: number;
}
/** custom-states-update-response */
export interface CustomStatesUpdateResponse {
    custom_state: CustomState;
}
/**
 * custom-tab
 * Custom tab.
 */
export interface CustomTab {
    /** If custom tabs are enabled. */
    enabled?: boolean;
    /** Name to display on the tab. */
    name?: string;
    /** URL to redirect to when the tab is clicked. */
    url?: string;
}
/** custom-type-fragment */
export type CustomTypeFragment = CustomSchemaFragmentBase & {
    /**
     * Path components used to display available custom types in tree
     * form.
     */
    path?: CustomTypePathComponent[];
    stage_diagram?: StageDiagramSummary;
    /** The stock field overrides. */
    stock_field_overrides?: StockFieldOverride[];
    /** The string used to populate the subtype in the leaf type. */
    subtype?: string;
    /**
     * Display name of the subtype. Modifications to this field are done
     * in-place and don't result in creation of a new fragment in chain.
     */
    subtype_display_name?: string;
};
/** custom-type-fragment-private */
export type CustomTypeFragmentPrivate = CustomSchemaFragmentPrivateBase & {
    /**
     * Path components used to display available custom types in tree
     * form.
     */
    path?: CustomTypePathComponent[];
    stage_diagram?: StageDiagramSummary;
    /** The stock field overrides. */
    stock_field_overrides?: StockFieldOverride[];
    /** The string used to populate the subtype in the leaf type. */
    subtype?: string;
    /**
     * Display name of the subtype. Modifications to this field are done
     * in-place and don't result in creation of a new fragment in chain.
     */
    subtype_display_name?: string;
};
/** custom-type-fragment-private-summary */
export type CustomTypeFragmentPrivateSummary = CustomSchemaFragmentPrivateBaseSummary;
/** custom-type-fragment-summary */
export type CustomTypeFragmentSummary = CustomSchemaFragmentBaseSummary;
/**
 * custom-type-path-component
 * Path component for rendering custom type lists in tree form.
 */
export interface CustomTypePathComponent {
    /** The displayed string in the tree. */
    display_name?: string;
}
/** custom-view */
export interface CustomView {
    /** A list of vista's column preferences in order. */
    column_properties?: CustomViewColumnProperties[];
    /** Boolean to specify whether to show groups or not. */
    show_groups?: boolean;
}
/** custom-view-column-properties */
export interface CustomViewColumnProperties {
    /** Name of the column. */
    name: string;
}
/**
 * custom-view-fields
 * Custom View Fields.
 */
export interface CustomViewFields {
    /** Boolean to specify whether to show groups or not. */
    show_groups?: boolean;
    /** Stores the corresponding vista's column preferences in order. */
    table_columns?: ColumnSpecItem[];
}
/** custom-work */
export type CustomWork = WorkBase;
/** custom-work-summary */
export type CustomWorkSummary = WorkBaseSummary;
/**
 * customization-configuration
 * Contains information regarding the global theming and layout of the
 * portal for customization purposes.
 */
export interface CustomizationConfiguration {
    /** Layouts for the portal. */
    layouts?: ArtifactSummary[];
    selected_layout?: ArtifactSummary;
    selected_theme?: ArtifactSummary;
    /** Global themes for the portal. */
    themes?: ArtifactSummary[];
}
/** dashboard */
export type Dashboard = AtomBase & {
    /**
     * A brief summary of what the dashboard is about or what it
     * represents.
     */
    description: string;
    /**
     * Set of dashboard specific filters to apply on tabs, sections, and
     * widgets.
     */
    filters?: DashboardFilter[];
    /** The identifier for the dashboard. */
    identifier?: DashboardIdentifier;
    /** Whether the dashboard is a system dashboard. */
    is_system?: boolean;
    /**
     * Layout of the dashboard. It determines the organization of the
     * dashboard.
     */
    layout: GridLayout[];
    /** Links associated with the object. */
    links?: ArchetypeLinkSummary[];
    /** A unique identifying name for the dashboard (optional). */
    name?: string;
    /**
     * Sections are organizational units within a dashboard. Each sections
     * is rendered as an inlined  block on the page. It can contain
     * widgets.
     */
    sections?: DashboardSection[];
    /**
     * The list of users, groups and audiences with whom the widget is
     * shared and the corresponding roles.
     */
    shared_with?: SharedWithMembership[];
    /**
     * Tabs are organizational units within a dashboard. Each tab is
     * rendered as a page. It can contain sections and widgets.
     */
    tabs?: DashboardTab[];
    /** The title of the dashboard. */
    title: string;
    /**
     * Widgets are the individual data visualization units within the
     * dashboard.
     */
    widgets?: DashboardWidget[];
};
/**
 * dashboard-filter
 * A dashboard filter is a filter that can be applied to tabs, sections,
 * and widgets.
 */
export interface DashboardFilter {
    /**
     * A filter expression that allows for logical AND/OR operations on a set
     * of  filter conditions or nested filter expressions.
     */
    expression: DashboardFilterExpression;
    /**
     * The reference id of the tab, section, or widget to which this
     * filter applies to.
     */
    reference_id: string;
}
/**
 * dashboard-filter-condition
 * A filter condition that compares a key to a value using a specified
 * operator.
 */
export interface DashboardFilterCondition {
    /** The value to be compared. */
    json_value?: object;
    /** The key to be compared. */
    key: string;
    /** The operator used to compare the key and value. */
    operator: DashboardFilterConditionOperator;
    /** A filter condition that compares a part value. */
    part_value?: DashboardFilterPartCondition;
    /**
     * A filter condition that compares a key to a value using a specified
     * operator.
     */
    relative_date_value?: DashboardFilterRelativeDateCondition;
    /** The operator used to compare the key and value. */
    value_type: DashboardFilterConditionValueType;
}
/** The operator used to compare the key and value. */
export declare enum DashboardFilterConditionOperator {
    Contains = "contains",
    Equals = "equals",
    NotEquals = "not_equals",
    Range = "range"
}
/** The operator used to compare the key and value. */
export declare enum DashboardFilterConditionValueType {
    JsonValue = "json_value",
    PartValue = "part_value",
    RelativeDateValue = "relative_date_value"
}
/**
 * dashboard-filter-expression
 * A filter expression that allows for logical AND/OR operations on a set
 * of  filter conditions or nested filter expressions.
 */
export interface DashboardFilterExpression {
    /**
     * The operands used for the logical operation. Each operand can be
     * either a filter  expression or a filter condition.
     */
    operands: DashboardFilterOperand[];
    /** The logical operator that binds the filter conditions or expressions. */
    operator: DashboardFilterExpressionOperator;
}
/** The logical operator that binds the filter conditions or expressions. */
export declare enum DashboardFilterExpressionOperator {
    And = "and",
    Or = "or"
}
/**
 * dashboard-filter-operand
 * A dashboard filter operand object.
 */
export interface DashboardFilterOperand {
    /**
     * A filter condition that compares a key to a value using a specified
     * operator.
     */
    condition?: DashboardFilterCondition;
    /**
     * A filter expression that allows for logical AND/OR operations on a set
     * of  filter conditions or nested filter expressions.
     */
    expression?: DashboardFilterExpression;
    /**
     * The type of the operand. It can be either a filter expression or a
     * filter condition.
     */
    type: DashboardFilterOperandType;
}
/**
 * The type of the operand. It can be either a filter expression or a
 * filter condition.
 */
export declare enum DashboardFilterOperandType {
    Condition = "condition",
    Expression = "expression"
}
/**
 * dashboard-filter-part-condition
 * A filter condition that compares a part value.
 */
export interface DashboardFilterPartCondition {
    /** Whether to include child parts. */
    include_child_parts?: boolean;
    /** The part ids to be compared. */
    part?: PartSummary[];
}
/**
 * dashboard-filter-relative-date-condition
 * A filter condition that compares a key to a value using a specified
 * operator.
 */
export interface DashboardFilterRelativeDateCondition {
    /** The type of the relative date condition. */
    type: DashboardFilterRelativeDateConditionType;
    /**
     * The relative time value to be compared.
     * @format int32
     */
    value: number;
}
/** The type of the relative date condition. */
export declare enum DashboardFilterRelativeDateConditionType {
    NextNDays = "next_n_days",
    NextNMonths = "next_n_months",
    NextNWeeks = "next_n_weeks",
    PrevNDays = "prev_n_days",
    PrevNMonths = "prev_n_months",
    PrevNWeeks = "prev_n_weeks"
}
/** The identifier for the dashboard. */
export declare enum DashboardIdentifier {
    CapiDashboard = "capi_dashboard",
    DrillthroughDashboard = "drillthrough_dashboard",
    SupportDashboard = "support_dashboard"
}
/** dashboard-search-summary */
export type DashboardSearchSummary = SearchSummaryBase & {
    dashboard: DashboardSummary;
};
/**
 * dashboard-section
 * Sections are organizational units within a dashboard. Each sections is
 * rendered as an inlined  block on the page. It can contain widgets.
 */
export interface DashboardSection {
    /**
     * A reference ID for the section. It should be unique within the
     * dashboard.
     */
    reference_id: string;
    /** The title of the section. */
    title: string;
}
/** dashboard-summary */
export type DashboardSummary = AtomBaseSummary & {
    /** Whether the dashboard is a system dashboard. */
    is_system?: boolean;
    /** The title of the dashboard. */
    title: string;
};
/**
 * dashboard-tab
 * Tabs are organizational units within a dashboard. Each tab is rendered
 * as a page. It can contain sections and widgets.
 */
export interface DashboardTab {
    /**
     * A reference ID for the tab. It should be unique within the
     * dashboard.
     */
    reference_id: string;
    /** The title of the tab. */
    title: string;
}
/**
 * dashboard-widget
 * Dashboard widget hold a reference to a widget.
 */
export interface DashboardWidget {
    /**
     * A reference ID for the widget. It should be unique within the
     * dashboard.
     */
    reference_id: string;
    widget: Atom;
}
/**
 * dashboards-create-request
 * The request to create a dashboard.
 */
export interface DashboardsCreateRequest {
    /**
     * A brief summary of what the dashboard is about or what it
     * represents.
     */
    description: string;
    /**
     * Set of dashboard specific filters to apply on tabs, sections, and
     * widgets.
     */
    filters?: CreateDashboardFilter[];
    /** The identifier for the dashboard. */
    identifier?: DashboardIdentifier;
    /** Whether the dashboard is a system dashboard. */
    is_system?: boolean;
    /**
     * Layout of the dashboard. It determines the organization of the
     * dashboard.
     */
    layout: CreateGridLayout[];
    /** Links associated with the dashboard. */
    links?: EmbedLinksCreateRequest[];
    /** A unique identifying name for the dashboard (optional). */
    name?: string;
    /**
     * Sections are organizational units within a dashboard. Each sections
     * is rendered as an inlined  block on the page. It can contain
     * widgets.
     */
    sections?: CreateDashboardSection[];
    /**
     * The list of users, groups and audiences with whom the widget is
     * shared and the corresponding roles.
     */
    shared_with?: SetSharedWithMembership[];
    /**
     * Tabs are organizational units within a dashboard. Each tab is
     * rendered as a page. It can contain sections and widgets.
     */
    tabs?: CreateDashboardTab[];
    /** The title of the dashboard. */
    title: string;
    /**
     * Widgets are the individual data visualization units within the
     * dashboard.
     */
    widgets?: CreateDashboardWidget[];
}
/**
 * dashboards-create-response
 * The response to a dashboard create request.
 */
export interface DashboardsCreateResponse {
    dashboard: Dashboard;
}
/**
 * dashboards-delete-request
 * The request to delete a dashboard.
 */
export interface DashboardsDeleteRequest {
    /** The ID of the dashboard to delete. */
    id: string;
}
/**
 * dashboards-get-request
 * The request to get a dashboard.
 */
export interface DashboardsGetRequest {
    /** The requested dashboard's ID. */
    id: string;
}
/**
 * dashboards-get-response
 * The response to a dashboard get request.
 */
export interface DashboardsGetResponse {
    dashboard: Dashboard;
}
export declare enum DashboardsListFilterCreatedByOpOperatorType {
    All = "all",
    Any = "any",
    Empty = "empty",
    NotAny = "not_any",
    NotEmpty = "not_empty"
}
/**
 * dashboards-list-filter-link-summary-filter
 * The filter for the link summary.
 */
export interface DashboardsListFilterLinkSummaryFilter {
    /** Filters for link type in links associated with the dashboard. */
    link_type?: string;
    /**
     * Filters for target id in links associated with the dashboard.
     * @example "VISTA-12345"
     */
    target?: string;
    /**
     * Filters for target object type in links associated with the
     * dashboard.
     */
    target_object_type?: string;
}
export declare enum DashboardsListFilterScopeValue {
    Org = "org",
    System = "system"
}
/**
 * dashboards-list-request
 * The request to list dashboards.
 */
export interface DashboardsListRequest {
    /**
     * Filters for the dashboards created by the user.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: DashboardsListFilterCreatedByOpOperatorType;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** Identifiers of the dashboard. */
    identifier?: DashboardIdentifier[];
    /**
     * The maximum number of dashboards to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /** Filters for links associated with the dashboard. */
    links?: DashboardsListFilterLinkSummaryFilter[];
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    scope?: DashboardsListFilterScopeValue;
    /** Fields to sort the dashboards by and the direction to sort them. */
    sort_by?: string[];
}
/**
 * dashboards-list-response
 * The response to a dashboard list request.
 */
export interface DashboardsListResponse {
    /** The list of dashboards. */
    dashboards: Dashboard[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/**
 * dashboards-update-request
 * The request to update a dashboard.
 */
export interface DashboardsUpdateRequest {
    /**
     * A brief summary of what the dashboard is about or what it
     * represents.
     */
    description?: string;
    /**
     * Set of dashboard specific filters to apply on tabs, sections, and
     * widgets.
     */
    filters?: UpdateDashboardFilter[];
    /** The ID of the dashboard to update. */
    id: string;
    /** The identifier for the dashboard. */
    identifier?: DashboardIdentifier;
    /**
     * Layout of the dashboard. It determines the organization of the
     * dashboard.
     */
    layout?: UpdateGridLayout[];
    links?: Links;
    /** A unique identifying name for the dashboard (optional). */
    name?: string;
    /**
     * Sections are organizational units within a dashboard. Each sections
     * is rendered as an inlined  block on the page. It can contain
     * widgets.
     */
    sections?: UpdateDashboardSection[];
    /**
     * The list of users, groups and audiences with whom the widget is
     * shared and the corresponding roles.
     */
    shared_with?: SetSharedWithMembership[];
    /**
     * Tabs are organizational units within a dashboard. Each tab is
     * rendered as a page. It can contain sections and widgets.
     */
    tabs?: UpdateDashboardTab[];
    /** The title of the dashboard. */
    title?: string;
    /**
     * Widgets are the individual data visualization units within the
     * dashboard.
     */
    widgets?: UpdateDashboardWidget[];
}
/**
 * dashboards-update-response
 * The response to a dashboard update request.
 */
export interface DashboardsUpdateResponse {
    dashboard: Dashboard;
}
/**
 * data-collection-app-settings
 * Configuration knobs for discovery application per devorg.
 */
export interface DataCollectionAppSettings {
    /**
     * Optionally set schedule for data collection interval in minutes. If
     * not defined default is used.
     * @format int32
     */
    data_collection_interval_minutes?: number;
    /**
     * Optionally set maximum Git coroutines. If not defined default is
     * used.
     * @format int32
     */
    git_max_coroutines?: number;
    /**
     * Optionally set maximum GitHub coroutine. If not defined default is
     * useds.
     * @format int32
     */
    github_max_coroutines?: number;
    /**
     * Optionally set maximum GitHub repository size in MB. If not defined
     * default is used.
     * @format int32
     */
    max_repo_size_mb?: number;
}
/** data-source */
export type DataSource = AtomBase & {
    /**
     * A brief summary of what the data source is about or what it
     * represents.
     */
    description?: string;
    /**
     * The dimensions provided by the data source. These are the
     * categories that can  be used to group or segment the measures.
     */
    dimensions?: WidgetColumnProjection[];
    /** Whether the data source is a system data source. */
    is_system?: boolean;
    /**
     * A list of possible joins for the data source. Follows foreign key
     * semantics.
     */
    joins?: DataSourceJoin[];
    /**
     * The measures provided by the data source. These are the numerical
     * values that  can be analyzed.
     */
    measures?: WidgetColumnProjection[];
    /** The unique name of the data source. */
    name: string;
    /** An oasis backed data source. */
    oasis: WidgetOasisDataSource;
    /** The title of the data source. */
    title: string;
    /** The type of the data source. */
    type: DataSourceType;
};
/**
 * data-source-join
 * A list of possible joins for the data source. Follows foreign key
 * semantics.
 */
export interface DataSourceJoin {
    /** A reference name for the join. */
    reference_name: string;
    /** The name of the column in the source data source. */
    source_reference_name: string;
    /** The name of the column in the target data source. */
    target_reference_name: string;
}
/** data-source-summary */
export type DataSourceSummary = AtomBaseSummary;
/** The type of the data source. */
export declare enum DataSourceType {
    Oasis = "oasis"
}
/**
 * data-sources-create-request
 * The request to create a data source.
 */
export interface DataSourcesCreateRequest {
    /**
     * A brief summary of what the data source is about or what it
     * represents.
     */
    description?: string;
    /**
     * The dimensions provided by the data source. These are the
     * categories that can  be used to group or segment the measures.
     */
    dimensions?: CreateWidgetColumnProjection[];
    /** Whether the data source is a system data source. */
    is_system?: boolean;
    /**
     * A list of possible joins for the data source. Follows foreign key
     * semantics.
     */
    joins?: CreateDataSourceJoin[];
    /**
     * The measures provided by the data source. These are the numerical
     * values that  can be analyzed.
     */
    measures?: CreateWidgetColumnProjection[];
    /** The unique name of the data source. */
    name: string;
    oasis: CreateWidgetOasisDataSource;
    /** The title of the data source. */
    title: string;
    /** The type of the data source. */
    type: DataSourceType;
}
/**
 * data-sources-create-response
 * The response to a data source create request.
 */
export interface DataSourcesCreateResponse {
    data_source: DataSource;
}
/**
 * data-sources-delete-request
 * The request to delete a data source.
 */
export interface DataSourcesDeleteRequest {
    /** The ID of the data source to delete. */
    id: string;
}
/**
 * data-sources-get-request
 * The request to get a data source.
 */
export interface DataSourcesGetRequest {
    /** The requested data source's ID. */
    id: string;
}
/**
 * data-sources-get-response
 * The response to a data source get request.
 */
export interface DataSourcesGetResponse {
    data_source: DataSource;
}
export declare enum DataSourcesListFilterScopeValue {
    Org = "org",
    System = "system"
}
/**
 * data-sources-list-request
 * The request to list data sources.
 */
export interface DataSourcesListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of data sources to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    scope?: DataSourcesListFilterScopeValue;
    /** Fields to sort the data sources by and the direction to sort them. */
    sort_by?: string[];
}
/**
 * data-sources-list-response
 * The response to a data source list request.
 */
export interface DataSourcesListResponse {
    /** The list of data sources. */
    data_sources: DataSource[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/**
 * data-sources-update-request
 * The request to update a data source.
 */
export interface DataSourcesUpdateRequest {
    /**
     * A brief summary of what the data source is about or what it
     * represents.
     */
    description?: string;
    /**
     * The dimensions provided by the data source. These are the
     * categories that can  be used to group or segment the measures.
     */
    dimensions?: UpdateWidgetColumnProjection[];
    /** The ID of the data source to update. */
    id: string;
    /**
     * A list of possible joins for the data source. Follows foreign key
     * semantics.
     */
    joins?: UpdateDataSourceJoin[];
    /**
     * The measures provided by the data source. These are the numerical
     * values that  can be analyzed.
     */
    measures?: UpdateWidgetColumnProjection[];
    /** The unique name of the data source. */
    name?: string;
    oasis?: UpdateWidgetOasisDataSource;
    /** The title of the data source. */
    title?: string;
    /** The type of the data source. */
    type?: DataSourceType;
}
/**
 * data-sources-update-response
 * The response to a data source update request.
 */
export interface DataSourcesUpdateResponse {
    data_source: DataSource;
}
/** dataset */
export type Dataset = AtomBase & {
    access_level?: AccessLevel;
    /** The columns of the dataset. */
    columns: OasisColumn[];
    /** The columns for the custom fields in the dataset. */
    custom_field_columns?: OasisColumn[];
    /** The format of the dataset. */
    data_format?: string;
    /** The name identifier for the datasets. */
    dataset_id?: string;
    /** The name of the dataset. */
    dataset_name: string;
    /** The description of the dataset. */
    description?: string;
    /** Oasis metadata object. */
    metadata?: OasisMetadata;
    /**
     * The columns used to partition the dataset. These are mutually
     * exclusive with the columns field.
     */
    partition_columns?: OasisPartitionColumn[];
    /** Tags associated with the dataset. */
    tags?: TagWithValue[];
    /** The title of the dataset. */
    title: string;
    /** The type of the dataset. */
    type?: string;
    /**
     * The version of the dataset, incremented every time the columns
     * change.
     * @format int32
     */
    version?: number;
};
/** The format of the dataset. */
export declare enum DatasetFormatValue {
    Csv = "csv",
    Json = "json",
    Parquet = "parquet",
    Unknown = "unknown"
}
/** dataset-summary */
export type DatasetSummary = AtomBaseSummary;
/** The type of the dataset. */
export declare enum DatasetTypeValue {
    Snapshot = "snapshot",
    Summary = "summary",
    Timeseries = "timeseries",
    Unknown = "unknown"
}
/**
 * date-filter
 * Provides ways to specify date ranges on objects.
 */
export type DateFilter = (DateTimeFilter | DateTimePreset) & {
    /** Type of date filter. */
    type: DateFilterType;
};
/** Type of date filter. */
export declare enum DateFilterType {
    Preset = "preset",
    Range = "range"
}
/** date-time-filter */
export interface DateTimeFilter {
    /**
     * Filters for objects created after the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    after?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    before?: string;
}
/**
 * date-time-preset
 * Provides preset types for date filter.
 */
export type DateTimePreset = (DateTimePresetAfterNDays | DateTimePresetAfterNHours | DateTimePresetBeforeNDays | DateTimePresetBeforeNHours | DateTimePresetLastNDays | DateTimePresetLastNHours | DateTimePresetNextNDays | DateTimePresetNextNHours) & {
    /** Type of date preset. */
    preset_type: DateTimePresetType;
};
/** date-time-preset-after-n-days */
export interface DateTimePresetAfterNDays {
    /**
     * The range of time after next n days.
     * @min 0
     * @max 4294967295
     */
    days: number;
}
/** date-time-preset-after-n-hours */
export interface DateTimePresetAfterNHours {
    /**
     * The range of time after next n hours.
     * @min 0
     * @max 4294967295
     */
    hours: number;
}
/** date-time-preset-before-n-days */
export interface DateTimePresetBeforeNDays {
    /**
     * The range of time before last n days.
     * @min 0
     * @max 4294967295
     */
    days: number;
}
/** date-time-preset-before-n-hours */
export interface DateTimePresetBeforeNHours {
    /**
     * The range of time before last n hours.
     * @min 0
     * @max 4294967295
     */
    hours: number;
}
/** date-time-preset-last-n-days */
export interface DateTimePresetLastNDays {
    /**
     * The range starts from the current timestamp and continues for the
     * past n days.
     * @min 0
     * @max 4294967295
     */
    days: number;
}
/** date-time-preset-last-n-hours */
export interface DateTimePresetLastNHours {
    /**
     * The range starts from the current timestamp and continues for the
     * past n hours.
     * @min 0
     * @max 4294967295
     */
    hours: number;
}
/** date-time-preset-next-n-days */
export interface DateTimePresetNextNDays {
    /**
     * The range starts from the current timestamp and continues for the
     * next n days.
     * @min 0
     * @max 4294967295
     */
    days: number;
}
/** date-time-preset-next-n-hours */
export interface DateTimePresetNextNHours {
    /**
     * The range starts from the current timestamp and continues for the
     * next n hours.
     * @min 0
     * @max 4294967295
     */
    hours: number;
}
/** Type of date preset. */
export declare enum DateTimePresetType {
    AfterNDays = "after_n_days",
    AfterNHours = "after_n_hours",
    BeforeNDays = "before_n_days",
    BeforeNHours = "before_n_hours",
    LastNDays = "last_n_days",
    LastNHours = "last_n_hours",
    NextNDays = "next_n_days",
    NextNHours = "next_n_hours"
}
/**
 * default-notification-content-template
 * Default notification content template.
 */
export interface DefaultNotificationContentTemplate {
    /** Body for the notification. */
    body?: string;
    /** Enum Value defines the structure for an enum. */
    language_code?: EnumValue;
    /** Title for the notification. */
    title?: string;
}
/** delete-discovery-profile-request */
export interface DeleteDiscoveryProfileRequest {
    /** Discovery Profile unique ID. */
    profile_id: string;
}
/** delete-discovery-profile-response */
export type DeleteDiscoveryProfileResponse = object;
/** delete-discovery-settings-request */
export interface DeleteDiscoverySettingsRequest {
    /**
     * Optional Dev organization ID. This allows running on another Dev
     * organization, as long as the logged in user has access to it.
     * @example "DEV-AbCdEfGh"
     */
    other_dev_org?: string;
}
/** delete-discovery-settings-response */
export type DeleteDiscoverySettingsResponse = object;
/** delete-recurring-line-items */
export interface DeleteRecurringLineItems {
    /** Recurring line item to be deleted from the service plan. */
    recurring_line_item_id: string;
}
/**
 * delete-workflow-request
 * The request to delete a workflow.
 */
export interface DeleteWorkflowRequest {
    /** The ID of the workflow to delete. */
    id: string;
}
/**
 * delete-workflow-response
 * The response to a workflow delete request.
 */
export type DeleteWorkflowResponse = object;
/**
 * delete-workflow-step-request
 * The request to delete a workflow step.
 */
export interface DeleteWorkflowStepRequest {
    /** The ID of the workflow step to delete. */
    id: string;
}
/**
 * delete-workflow-step-response
 * The response to a workflow step delete request.
 */
export type DeleteWorkflowStepResponse = object;
/**
 * destination-migration-item
 * The destination migration item report.
 */
export interface DestinationMigrationItem {
    /**
     * The count of all destination items that already exist.
     * @format int32
     */
    already_exists_count?: number;
    /**
     * The total count of destination items transferred.
     * @format int32
     */
    count?: number;
    /**
     * The count of all destination items created.
     * @format int32
     */
    created_count?: number;
    /**
     * The count of all destination items deleted.
     * @format int32
     */
    deleted_count?: number;
    /**
     * The count of all destination items that failed to be updated or
     * created.
     * @format int32
     */
    failed_count?: number;
    /** The migration destination item type. */
    type?: string;
    /**
     * The count of all destination items updated.
     * @format int32
     */
    updated_count?: number;
}
/** dev-org */
export type DevOrg = OrgBase & {
    /** Auth0 Org ID of the DevOrg. */
    auth0_org_id?: string;
    /** IDs of Auth0 connection available for this DevOrg. */
    available_org_connections?: string[];
    /** Customer chosen URL slug for the DevOrg. */
    dev_slug: string;
    /**
     * Timestamp of the last slug update.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    dev_slug_last_modified_date?: string;
    /**
     * Previously chosen URL slug for the DevOrg, preserved for
     * compatibility.
     */
    old_dev_slug?: string;
    /** Auth0 Org ID of the Dev Org for rev authentication. */
    rev_auth0_org_id?: string;
};
/**
 * dev-org-auth-connections-create-request
 * Request to create a new enterprise authentication connection.
 */
export type DevOrgAuthConnectionsCreateRequest = (AuthConnectionOptionsAzureAd | AuthConnectionOptionsGoogleApps | AuthConnectionOptionsOidc | AuthConnectionOptionsSaml) & {
    /**
     * Display name of the authentication connection. This name will be
     * visible to all the users when they sign in to this Dev
     * organization. For example, if the display_name is 'abclogin', then
     * it would appear on the login button as 'Log in to abclogin'.
     */
    display_name?: string;
    /**
     * Defines the type for the authentication connection. Different types of
     * authentication connections have different configuration parameters.
     */
    type: DevOrgAuthConnectionsCreateRequestType;
};
/**
 * Defines the type for the authentication connection. Different types of
 * authentication connections have different configuration parameters.
 */
export declare enum DevOrgAuthConnectionsCreateRequestType {
    GoogleApps = "google_apps",
    Oidc = "oidc",
    Samlp = "samlp",
    Waad = "waad"
}
/**
 * dev-org-auth-connections-create-response
 * Response for the request to create a new enterprise authentication
 * connection.
 */
export interface DevOrgAuthConnectionsCreateResponse {
    /**
     * Connection object that specifies the configuration for an
     * authentication connection that is set up for a Dev organization.
     */
    auth_connection: AuthConnection;
}
/**
 * dev-org-auth-connections-delete-request
 * Request to delete an enterprise authentication connection for a Dev
 * organization. A default connection and a connection which is currently
 * enabled cannot be deleted.
 */
export interface DevOrgAuthConnectionsDeleteRequest {
    /** ID of the authentication connection to be deleted. */
    id: string;
}
/**
 * dev-org-auth-connections-get-request
 * Request to get configuration details of organization's authentication
 * Connection.
 */
export interface DevOrgAuthConnectionsGetRequest {
    /** ID of the authentication connection. */
    id: string;
}
/**
 * dev-org-auth-connections-get-response
 * Response object encapsulating the configuration details of an
 * authentication connection.
 */
export interface DevOrgAuthConnectionsGetResponse {
    /**
     * Connection object that specifies the configuration for an
     * authentication connection that is set up for a Dev organization.
     */
    auth_connection: AuthConnection;
}
/**
 * dev-org-auth-connections-list-response
 * Response object for the request to list all the social and enterprise
 * authentication connections configured for a Dev organization.
 */
export interface DevOrgAuthConnectionsListResponse {
    /**
     * List of all the authentication connections currently configured for
     * a Dev organization.
     */
    auth_connections: AuthConnection[];
}
/**
 * dev-org-auth-connections-toggle-request
 * Request to enable or disable an authentication connection for a Dev
 * organization.
 */
export interface DevOrgAuthConnectionsToggleRequest {
    /** ID of the authentication connection to be toggled. */
    id: string;
    toggle?: AuthConnectionToggle;
}
/**
 * dev-org-auth-connections-update-request
 * Request to update an enterprise authentication connection for a Dev
 * organization.
 */
export type DevOrgAuthConnectionsUpdateRequest = (AuthConnectionOptionsAzureAd | AuthConnectionOptionsGoogleApps | AuthConnectionOptionsOidc | AuthConnectionOptionsSaml | Empty) & {
    /**
     * New display name of the authentication connection. This name will
     * be visible to all the users when they sign in to this Dev
     * organization. For example, if the display_name is 'abclogin', then
     * it would appear on the login button as 'Log in to abclogin'.
     */
    display_name?: string;
    /** ID of the authentication connection which is to be updated. */
    id: string;
    /**
     * Specifies the type for the authentication connection. Different types
     * of authentication connections have different configuration parameters
     * that can be updated.
     */
    type?: DevOrgAuthConnectionsUpdateRequestType;
};
/**
 * Specifies the type for the authentication connection. Different types
 * of authentication connections have different configuration parameters
 * that can be updated.
 */
export declare enum DevOrgAuthConnectionsUpdateRequestType {
    GoogleApps = "google_apps",
    None = "none",
    Oidc = "oidc",
    Samlp = "samlp",
    Waad = "waad"
}
/**
 * dev-org-auth-connections-update-response
 * Response for the request to update an enterprise authentication
 * connection.
 */
export interface DevOrgAuthConnectionsUpdateResponse {
    /**
     * Connection object that specifies the configuration for an
     * authentication connection that is set up for a Dev organization.
     */
    auth_connection: AuthConnection;
}
/** dev-org-commerce-details */
export type DevOrgCommerceDetails = AtomBase & {
    /** The stripe connect account id of the DevOrg. */
    account_id?: string;
    /**
     * Settings related to payment, proration, etc. Configurations may or may
     * not be defined by a DevO. 1. If DevO defines configurations then same
     * configurations are copied to RevO also to sub pack (for now, later RevO
     * can also set) 2. If DevO doesn't set anything then these configurations
     * would be set to default by application for which they were being
     * defined (for eg. if DevO doesn't set payment method for it's RevOs then
     * stripe would set it to 'charge_automatically' by default).
     */
    configurations?: Configuration;
    /** Details of a contact including email. */
    contact_details?: ContactDetailWithEmail;
    /** The URLs pointing to DevOrg logo. */
    logo?: string[];
    /** PDF generation templates defined for the DevOrg. */
    pdf_generation_templates?: PdfGenerationTemplate[];
};
/** dev-org-commerce-details-summary */
export type DevOrgCommerceDetailsSummary = AtomBaseSummary;
/** dev-org-global */
export type DevOrgGlobal = AtomBase & {
    /** Email domain allowed to join the organization without invitation. */
    allowed_email_domain?: string;
    /** Auth0 Org ID of the DevOrg. */
    auth0_org_id?: string;
    /** Customer chosen URL slug for the DevOrg. */
    dev_slug?: string;
    /**
     * Timestamp of the last slug update.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    dev_slug_last_modified_date?: string;
    /** Name of the Organization. */
    display_name?: string;
    /** Unique identifier for the operation which is pending to commit. */
    idempotent_key?: string;
    logo_id?: ArtifactSummary;
    /**
     * Previously chosen URL slug for the DevOrg, preserved for
     * compatibility.
     */
    old_dev_slug?: string;
    /** State of the record which is pending to commit. */
    pending_state?: DevOrgGlobalPendingState;
    /** Regional Dev org DON. */
    regional_dev_org_id?: string;
    /** Auth0 Org ID for rev authentication of the org. */
    rev_auth0_org_id?: string;
    /** State of the record. */
    state?: DevOrgGlobalState;
    /** Thumbnail Key of the organization logo. */
    thumbnail?: string;
};
/** dev-org-global-info */
export interface DevOrgGlobalInfo {
    dev_slug: string;
    display_id?: string;
    display_name?: string;
    id: string;
    id_v1?: string;
}
/** State of the record which is pending to commit. */
export declare enum DevOrgGlobalPendingState {
    Create = "create",
    Update = "update"
}
/** State of the record. */
export declare enum DevOrgGlobalState {
    Active = "active",
    Deactivated = "deactivated",
    Deleted = "deleted",
    Pending = "pending"
}
/** dev-org-global-summary */
export type DevOrgGlobalSummary = AtomBaseSummary;
/**
 * dev-org-public-info-request
 * Request object to get public information of a Dev organization.
 */
export interface DevOrgPublicInfoRequest {
    /** Auth0 organization id of the Dev organization. */
    auth0_org_id?: string;
    /** Slug of the Dev organization. */
    slug?: string;
}
/**
 * dev-org-public-info-response
 * Public information of a Dev organization.
 */
export interface DevOrgPublicInfoResponse {
    /** Auth0 org ID of the Dev organization. */
    auth0_org_id: string;
    /** Slug of the Dev organization. */
    dev_slug: string;
    /**
     * The ID of the devorg.
     * @example "DEV-AbCdEfGh"
     */
    id: string;
}
/** dev-org-summary */
export type DevOrgSummary = OrgBaseSummary & {
    /** Customer chosen URL slug for the DevOrg. */
    dev_slug: string;
};
/** dev-orgs-commerce-details-create-request */
export interface DevOrgsCommerceDetailsCreateRequest {
    /**
     * The dev org id for which commerce details are to be added.
     * @example "DEV-AbCdEfGh"
     */
    dev_org_id: string;
}
/** dev-orgs-commerce-details-create-response */
export interface DevOrgsCommerceDetailsCreateResponse {
    dev_org_commerce_details: DevOrgCommerceDetails;
}
/** dev-orgs-commerce-details-get-request */
export type DevOrgsCommerceDetailsGetRequest = object;
/** dev-orgs-commerce-details-get-response */
export interface DevOrgsCommerceDetailsGetResponse {
    dev_org_commerce_details: DevOrgCommerceDetails;
}
/** dev-orgs-commerce-details-update-request */
export interface DevOrgsCommerceDetailsUpdateRequest {
    /** The list of logo URLs to be added. */
    add_logos?: string[];
    /** The list of pdf generation templates to be added. */
    add_pdf_generation_templates?: DevOrgsCommerceDetailsUpdateRequestAddPdfGenerationTemplate[];
    /**
     * Settings related to payment, proration, etc. Configurations may or may
     * not be defined by a DevO. 1. If DevO defines configurations then same
     * configurations are copied to RevO also to sub pack (for now, later RevO
     * can also set) 2. If DevO doesn't set anything then these configurations
     * would be set to default by application for which they were being
     * defined (for eg. if DevO doesn't set payment method for it's RevOs then
     * stripe would set it to 'charge_automatically' by default).
     */
    configuration?: Configuration;
    /** Details of a contact including email. */
    contact_details?: ContactDetailWithEmail;
    /** The list of logo URLs to be removed. */
    remove_logos?: string[];
    /** The list of pdf generation template to be removed. */
    remove_pdf_generation_templates?: string[];
}
/** dev-orgs-commerce-details-update-request-add-pdf-generation-template */
export interface DevOrgsCommerceDetailsUpdateRequestAddPdfGenerationTemplate {
    /**
     * The artifact where the template is stored.
     * @example "ARTIFACT-12345"
     */
    artifact_id: string;
    /** PDF generation template name. */
    name: string;
    /** The type of the PDF generation template. */
    type: PdfGenerationTemplateType;
}
/** dev-orgs-commerce-details-update-response */
export interface DevOrgsCommerceDetailsUpdateResponse {
    dev_org_commerce_details: DevOrgCommerceDetails;
}
/**
 * dev-orgs-create-request
 * A request to create a new Dev organization.
 */
export interface DevOrgsCreateRequest {
    /**
     * The coupon codes to be applied to give credits to the Dev
     * organization.
     */
    credit_coupon_codes?: string[];
    /** Custom prefix for Dev organization ID. */
    dev_org_id_prefix?: string;
    /** Customer chosen URL slug. */
    dev_slug?: string;
    /** Display name of the new Dev organization. */
    display_name?: string;
    /** The environment of the Org. Defaults to 'production' if not specified. */
    environment?: OrgEnvironment;
    /** Whether the Dev organization allows access based on email domain. */
    give_domain_access?: boolean;
    /** Create object for service plan. */
    service_plan?: DevOrgsCreateRequestCreateServicePlan;
    /** UTM parameters for the Dev organization. */
    utm?: DevOrgsCreateRequestUTM;
}
/**
 * dev-orgs-create-request-create-service-plan
 * Create object for service plan.
 */
export interface DevOrgsCreateRequestCreateServicePlan {
    /**
     * Service plan line item details for creating the service plan as
     * part of the Dev organization onboarding.
     */
    service_plan_line_items?: DevOrgsCreateRequestCreateServicePlanCreateServicePlanLineItem[];
}
/**
 * dev-orgs-create-request-create-service-plan-create-service-plan-line-item
 * Create object for service plan line item.
 */
export interface DevOrgsCreateRequestCreateServicePlanCreateServicePlanLineItem {
    /** The sku family name detail to be included in the service plan. */
    sku_family_name: string;
}
/**
 * dev-orgs-create-request-u-t-m
 * UTM parameters for the Dev organization.
 */
export interface DevOrgsCreateRequestUTM {
    /** UTM campaign for the Dev organization. */
    campaign?: string;
    /** UTM content for the Dev organization. */
    content?: string;
    /** UTM medium for the Dev organization. */
    medium?: string;
    /** UTM source for the Dev organization. */
    source?: string;
    /** UTM term for the Dev organization. */
    term?: string;
}
/**
 * dev-orgs-create-response
 * The response to creating a new Dev organization.
 */
export interface DevOrgsCreateResponse {
    dev_org: DevOrg;
    dev_user: DevUser;
}
/**
 * dev-orgs-delete-request
 * A request to delete a Dev organization.
 */
export type DevOrgsDeleteRequest = object;
/**
 * dev-orgs-delete-response
 * The response to delete a Dev organization.
 */
export type DevOrgsDeleteResponse = object;
/**
 * dev-orgs-get-request
 * A request to get a Dev organization's information.
 */
export type DevOrgsGetRequest = object;
/**
 * dev-orgs-get-response
 * The response to get a Dev organization's information.
 */
export interface DevOrgsGetResponse {
    dev_org: DevOrg;
}
/**
 * dev-orgs-global-create-commit-request
 * A request to commit the creation of a new global Dev organization.
 */
export interface DevOrgsGlobalCreateCommitRequest {
    /** The Auth0 org ID of the Dev organization. */
    auth0_org_id?: string;
    dev_user?: RegionalDevUser;
    /** The display name of the Dev orgnization. */
    display_name?: string;
    /**
     * The DON of the global Dev organization. This also acts as an
     * idempotency key.
     */
    global_dev_org_id: string;
}
/**
 * dev-orgs-global-create-commit-response
 * The response to commit a new global Dev organization.
 */
export interface DevOrgsGlobalCreateCommitResponse {
    dev_org_global: DevOrgGlobal;
}
/**
 * dev-orgs-global-create-prepare-request
 * A request to create a new global Dev organization and lock the slug.
 */
export interface DevOrgsGlobalCreatePrepareRequest {
    /** Customer chosen URL slug. */
    dev_slug: string;
    /**
     * The DON of the regional Dev org. This also acts as an idempotency
     * key.
     */
    regional_dev_org_id: string;
}
/**
 * dev-orgs-global-create-prepare-response
 * The response to create a new global Dev organization.
 */
export interface DevOrgsGlobalCreatePrepareResponse {
    dev_org_global: DevOrgGlobal;
}
/**
 * dev-orgs-global-create-rollback-request
 * A request to rollback the creation of a new global Dev organization.
 */
export interface DevOrgsGlobalCreateRollbackRequest {
    /**
     * The DON of the global Dev organization. This also acts as an
     * idempotency key.
     */
    global_dev_org_id: string;
}
/**
 * dev-orgs-global-create-rollback-response
 * The response to rollback a new global Dev organization.
 */
export type DevOrgsGlobalCreateRollbackResponse = object;
/**
 * dev-orgs-global-delete-request
 * A request to delete a global Dev organization.
 */
export interface DevOrgsGlobalDeleteRequest {
    /** The DON of the global Dev organization. */
    global_dev_org_id: string;
}
/**
 * dev-orgs-global-delete-response
 * The response to delete a global Dev organization.
 */
export type DevOrgsGlobalDeleteResponse = object;
/**
 * dev-orgs-global-get-request
 * A request to get a global Dev organization.
 */
export interface DevOrgsGlobalGetRequest {
    /** Customer chosen URL slug. */
    dev_slug: string;
}
/**
 * dev-orgs-global-get-response
 * The response to get a global Dev organization.
 */
export interface DevOrgsGlobalGetResponse {
    dev_org_global: DevOrgGlobal;
}
/**
 * dev-orgs-global-list-request
 * A request to get the list of Dev organizations for the provided email.
 */
export interface DevOrgsGlobalListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** Email of the Dev user. */
    email: string;
    /**
     * Whether to list the Dev organizations available to join without
     * invitation.
     */
    is_available?: boolean;
    /**
     * The number of Dev organizations to be retrieved.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /**
     * Fields to sort the Dev organizations by and the direction to sort
     * them.
     */
    sort_by?: string[];
}
/**
 * dev-orgs-global-list-response
 * The response to get the list of Dev organizations for the authenticated
 * user.
 */
export interface DevOrgsGlobalListResponse {
    /**
     * The cursor that should be used to resume iteration. If not
     * provided, then iteration has completed.
     * @deprecated
     */
    cursor?: string;
    /** List of Dev organizations. */
    dev_orgs: DevOrgGlobal[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/**
 * dev-orgs-global-public-info-request
 * Request object to get public information of a Dev organization.
 */
export interface DevOrgsGlobalPublicInfoRequest {
    /** Auth0 organization id of the Dev organization. */
    auth0_org_id?: string;
    /** Slug of the Dev organization. */
    slug?: string;
}
/**
 * dev-orgs-global-public-info-response
 * Public information of a Dev organization.
 */
export interface DevOrgsGlobalPublicInfoResponse {
    /** Auth0 org ID of the Dev organization. */
    auth0_org_id: string;
    /** Slug of the Dev organization. */
    dev_slug: string;
    /**
     * The ID of the Dev organization.
     * @example "DEV-AbCdEfGh"
     */
    id: string;
}
/**
 * dev-orgs-global-update-commit-request
 * A request to commit the update of a global Dev organization.
 */
export interface DevOrgsGlobalUpdateCommitRequest {
    /** The display name of the Dev orgnization. */
    display_name?: string;
    /** The DON of the global Dev organization. */
    global_dev_org_id: string;
    /** Client chosen idempotent key for the update operation to commit. */
    idempotent_key: string;
}
/**
 * dev-orgs-global-update-commit-response
 * The response to commit the update for a global Dev organization.
 */
export interface DevOrgsGlobalUpdateCommitResponse {
    dev_org_global: DevOrgGlobal;
}
/**
 * dev-orgs-global-update-prepare-request
 * A request to update a global Dev organization and lock the slug.
 */
export interface DevOrgsGlobalUpdatePrepareRequest {
    /** Customer chosen new URL slug. */
    dev_slug: string;
    /** Client chosen idempotent key for the update operation. */
    idempotent_key: string;
    /** The DON of the regional Dev org. */
    regional_dev_org_id: string;
}
/**
 * dev-orgs-global-update-prepare-response
 * The response to update a global Dev organization.
 */
export interface DevOrgsGlobalUpdatePrepareResponse {
    dev_org_global: DevOrgGlobal;
}
/**
 * dev-orgs-global-update-rollback-request
 * A request to rollback the update of a global Dev organization.
 */
export interface DevOrgsGlobalUpdateRollbackRequest {
    /** The DON of the global Dev organization. */
    global_dev_org_id: string;
    /** Client chosen idempotent key for the update operation to rollback. */
    idempotent_key: string;
}
/**
 * dev-orgs-global-update-rollback-response
 * The response to rollback the update of a global Dev organization.
 */
export interface DevOrgsGlobalUpdateRollbackResponse {
    dev_org_global: DevOrgGlobal;
}
/**
 * dev-orgs-invites-create-request
 * A request to create an invitation for a user to the Dev organization.
 */
export interface DevOrgsInvitesCreateRequest {
    /** Email address of the user being invited. */
    email: string;
    /** Ids of the groups assigned to the invitee during invite. */
    group_ids?: string[];
    /** Licenses assigned to the invitee during invite. */
    licenses?: string[];
}
/**
 * dev-orgs-invites-create-response
 * A response to create an invitation for a user to the Dev organization.
 */
export interface DevOrgsInvitesCreateResponse {
    invite: DevuInvite;
}
/**
 * dev-orgs-invites-list-request
 * A request to get the list of invitations for the Dev organization.
 */
export interface DevOrgsInvitesListRequest {
    /** Filters invitations to those created by the specified users. */
    created_by_ids?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** Filters invitations to those assigned to the specified groups. */
    group_ids?: string[];
    /**
     * The maximum number of invited users to be retrieved.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Fields to sort the invites by and the direction to sort them. */
    sort_by?: string[];
    /** Array of state values to be filtered. */
    state?: DevuInviteState[];
}
/**
 * dev-orgs-invites-list-response
 * The response to listing the Dev organization invitations.
 */
export interface DevOrgsInvitesListResponse {
    /**
     * The cursor that should be used to resume iteration. If not
     * provided, then iteration has completed.
     * @deprecated
     */
    cursor?: string;
    /** The list of invited users. */
    invites: DevuInvite[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/**
 * dev-orgs-join-request
 * A request to get the invitation link for joining the Dev organization
 * for which domain-based access is allowed.
 */
export interface DevOrgsJoinRequest {
    /**
     * The globally unique ID of the DevRev organization.
     * @example "DEV-AbCdEfGh"
     */
    id: string;
}
/**
 * dev-orgs-join-response
 * The response to get the invitation link for joining the Dev
 * organization.
 */
export interface DevOrgsJoinResponse {
    /** The short-lived invitation link to join the Dev organization. */
    invitation_link: string;
}
/**
 * dev-orgs-list-request
 * A request to get the list of Dev organizations for the authenticated
 * user.
 */
export interface DevOrgsListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * Whether to list the Dev organizations available to join without
     * invitation.
     */
    is_available?: boolean;
    /**
     * The number of Dev organizations to be retrieved.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /**
     * Fields to sort the Dev organizations by and the direction to sort
     * them.
     */
    sort_by?: string[];
}
/**
 * dev-orgs-list-response
 * The response to get the list of Dev organizations for the authenticated
 * user.
 */
export interface DevOrgsListResponse {
    /**
     * The cursor that should be used to resume iteration. If not
     * provided, then iteration has completed.
     * @deprecated
     */
    cursor?: string;
    /** List of Dev organizations. */
    dev_orgs: DevOrg[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/**
 * dev-orgs-self-get-request
 * A request to get the authenticated user's Dev organization.
 */
export type DevOrgsSelfGetRequest = object;
/**
 * dev-orgs-self-get-response
 * The response to getting the Dev organization for the authenticated
 * user.
 */
export interface DevOrgsSelfGetResponse {
    dev_org: DevOrg;
}
/**
 * dev-orgs-update-request
 * A request to update a Dev organization's information.
 */
export interface DevOrgsUpdateRequest {
    /** Customer chosen URL slug. */
    dev_slug?: string;
    /** Display name of the new Dev organization. */
    display_name?: string;
    /** The domain for which Dev user access is allowed by default. */
    domain?: string;
    /** The environment of the Org. Defaults to 'production' if not specified. */
    environment?: OrgEnvironment;
    /**
     * Artifact ID of the Dev organization's logo.
     * @example "ARTIFACT-12345"
     */
    logo_id?: string | null;
}
/**
 * dev-orgs-update-response
 * The response to update a Dev organization's information.
 */
export interface DevOrgsUpdateResponse {
    dev_org: DevOrg;
}
/**
 * dev-rev-partitioner-merger
 * Configuration knobs for partitioners and partition mergers.
 */
export interface DevRevPartitionerMerger {
    /** Discovery partitioner/partition merger configuration. */
    config?: object;
    /** Discovery Dev partitioner/merger. */
    dev?: string;
    /** Discovery Rev partitioner/merger. */
    rev?: string;
}
/** dev-user */
export type DevUser = UserBase & {
    /** A representation of a postal address. */
    address?: PostalAddress;
    /** IDs of the auth0 users this Dev User account is linked with. */
    auth0_user_ids?: string[];
    /** Commerce license assignment details. */
    commerce_details?: CommerceDetail;
    /** Custom fields. */
    custom_fields?: object;
    /**
     * Custom schema fragments.
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    custom_schema_fragments?: string[];
    /**
     * Start date of the user's employment.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    experience_start_date?: string;
    /** IDs of the Dev User outside the DevRev SOR. */
    external_identities?: ExternalIdentity[];
    /** Job history of the user. */
    job_history?: JobHistoryItem[];
    /** Job title of the Dev User. */
    job_title?: DevUserJobTitle;
    /** Phone numbers of the Dev User. */
    phone_number?: PhoneNumber[];
    /** Reference of the DevRev Profile this Dev User is linked to. */
    profile_id?: string;
    /**
     * Combination of stock and custom schema fragment IDs.
     * @deprecated
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    schema_fragment_ids?: string[];
    /** Array of skills of the user. */
    skills?: UserSkill[];
    /** Status of the user. */
    status?: Status;
    /**
     * Stock schema fragment.
     * @example "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"
     */
    stock_schema_fragment?: string;
    /** Subtype corresponding to the custom type fragment. */
    subtype?: string;
    /**
     * Time when the terms and conditions were accepted.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    terms_conditions_accept_at?: string;
    /** Flag to denote if terms and conditions have been accepted. */
    terms_conditions_accepted?: boolean;
};
/** dev-user-external-identity-filter */
export interface DevUserExternalIdentityFilter {
    /** Unique ID of the user in the external source. */
    id?: string;
    /** Issuer of the external identity of the user. */
    issuer?: string;
}
/** dev-user-global */
export type DevUserGlobal = AtomBase & {
    /** Email address of the user. */
    email?: string;
    /** State of the user. */
    state?: DevUserGlobalState;
};
/**
 * dev-user-global-invitations-list-request
 * Request object to get the list of Dev organizations that the dev user
 * is invited to.
 */
export interface DevUserGlobalInvitationsListRequest {
    /** Email of the Dev user. */
    email: string;
}
/**
 * dev-user-global-invitations-list-response
 * The response to get the list of Dev organizations that the dev user is
 * invited to.
 */
export interface DevUserGlobalInvitationsListResponse {
    /** List of invitations to Dev organizations the user is invited to. */
    invites: DevUserInvitationGlobal[];
}
/** State of the user. */
export declare enum DevUserGlobalState {
    Active = "active",
    Deactivated = "deactivated",
    Deleted = "deleted",
    Locked = "locked",
    Shadow = "shadow",
    Unassigned = "unassigned"
}
/** dev-user-global-summary */
export type DevUserGlobalSummary = AtomBaseSummary;
/** dev-user-invitation */
export interface DevUserInvitation {
    dev_org: DevOrgSummary;
    /**
     * Time at which the invitation link expires.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    expires_at?: string;
    /**
     * Invitation link used to accept the invitation to a Dev
     * organization.
     */
    invitation_link?: string;
    inviter?: UserSummary;
}
/** dev-user-invitation-global */
export interface DevUserInvitationGlobal {
    dev_org: DevOrgGlobalInfo;
    /**
     * Time at which the invitation link expires.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    expires_at?: string;
    /**
     * Invitation link used to accept the invitation to a Dev
     * organization.
     */
    invitation_link?: string;
    inviter?: UserSummary;
}
/** Job title of the Dev User. */
export declare enum DevUserJobTitle {
    CustomerSuccessManager = "customer_success_manager",
    Cxo = "cxo",
    Designer = "designer",
    Developer = "developer",
    HeadOfSupport = "head_of_support",
    Operations = "operations",
    Others = "others",
    ProductManager = "product_manager",
    Qa = "qa",
    RevenueLeader = "revenue_leader",
    Support = "support",
    TechLead = "tech_lead"
}
/** dev-user-summary */
export type DevUserSummary = UserBaseSummary;
/**
 * dev-user-update-display-picture-request
 * A request to update the display picture of a Dev user
 */
export interface DevUserUpdateDisplayPictureRequest {
    /**
     * Artifact ID of the user's uploaded display picture, otherwise if
     * 'null', then the user's display picture is cleared.
     * @example "ARTIFACT-12345"
     */
    display_picture: string | null;
}
/**
 * dev-user-update-display-picture-response
 * The response to update the display picture of a Dev user.
 */
export type DevUserUpdateDisplayPictureResponse = object;
/**
 * dev-users-activate-request
 * A request to activate the Dev user.
 */
export interface DevUsersActivateRequest {
    /** IDs of the groups assigned to user during activation. */
    groups?: string[];
    /** The ID for the Dev User. */
    id: string;
}
/**
 * dev-users-activate-response
 * The response to activate the Dev user.
 */
export interface DevUsersActivateResponse {
    /** Whether an invitation has been sent to the Dev user. */
    invite_sent: boolean;
}
/**
 * dev-users-check-phone-number-code-request
 * A request to check a verification code for a phone number.
 */
export interface DevUsersCheckPhoneNumberCodeRequest {
    /**
     * The phone number, in E.164 format, to check the verification code
     * for.
     */
    phone_number: string;
    /** The verification code to check. */
    verification_code: string;
}
/**
 * dev-users-check-phone-number-code-response
 * The response to check a verification code for a phone number.
 */
export interface DevUsersCheckPhoneNumberCodeResponse {
    /** Whether the verification code is valid. */
    is_valid: boolean;
}
/**
 * dev-users-count-request
 * A request to get the count of Dev user's information.
 */
export interface DevUsersCountRequest {
    /**
     * Filters list of Dev users which are created by specified list of
     * Dev user IDs.
     */
    created_by?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** Filters Dev users based on email addresses. */
    email?: string[];
    /** Filters Dev users based on external identity. */
    external_identity?: DevUserExternalIdentityFilter[];
    /** Filters Dev users based on job titles. */
    job_title?: DevUserJobTitle[];
    /** Filters Dev users based on state. */
    state?: UserState[];
    /** Subtypes of devusers to be filtered. */
    subtype?: string[];
    subtype_op?: SubtypeOpOperatorType;
}
/** dev-users-count-response */
export interface DevUsersCountResponse {
    /**
     * Count of Dev users matching the filter.
     * @format int32
     */
    count: number;
}
/**
 * dev-users-create-request
 * Request object to create a new Dev User for a Dev Organization.
 */
export interface DevUsersCreateRequest {
    /** Application-defined custom fields. */
    custom_fields?: object;
    /**
     * Requested custom schemas described abstractly. Every provided schema's
     * custom field must be specified, otherwise a bad request error is
     * returned. If a new custom schema specifier is provided, then it will be
     * added to the work, otherwise if a custom schema is omitted from the
     * specifier, it remains unmodified.
     */
    custom_schema_spec?: CustomSchemaSpec;
    /** Email of the Dev User. */
    email: string;
    /** Full name of the Dev User. */
    full_name?: string;
    state?: DevUsersCreateRequestDevUsersCreateStateEnumValue;
}
export declare enum DevUsersCreateRequestDevUsersCreateStateEnumValue {
    Shadow = "shadow"
}
/**
 * dev-users-create-response
 * Response object for request to create a new Dev User for a Dev
 * Organization.
 */
export interface DevUsersCreateResponse {
    dev_user: DevUser;
}
/**
 * dev-users-deactivate-request
 * A request to deactivate the Dev user.
 */
export interface DevUsersDeactivateRequest {
    /** The ID for the Dev User. */
    id: string;
}
/**
 * dev-users-deactivate-response
 * The response to deactivate the Dev user.
 */
export type DevUsersDeactivateResponse = object;
/**
 * dev-users-delete-request
 * A request to delete the Dev user.
 */
export interface DevUsersDeleteRequest {
    /** The ID for the Dev User. */
    id: string;
}
/**
 * dev-users-delete-response
 * The response to delete the Dev user.
 */
export type DevUsersDeleteResponse = object;
/**
 * dev-users-get-request
 * A request to get a Dev user's information.
 */
export interface DevUsersGetRequest {
    /** User ID of the requested Dev user. */
    id: string;
}
/**
 * dev-users-get-response
 * The response to getting the information for the Dev user.
 */
export interface DevUsersGetResponse {
    dev_user: DevUser;
}
/**
 * dev-users-identities-link-request
 * Request to link external identity to a Dev user.
 */
export interface DevUsersIdentitiesLinkRequest {
    /** Display name of the Dev user in the external source. */
    display_name?: string;
    /** Unique ID of the Dev user in the external source. */
    id: string;
    /** Issuer of the external identity of the Dev user. */
    issuer: string;
}
/**
 * dev-users-identities-link-response
 * Response for the request to link an external identity to a Dev user.
 */
export interface DevUsersIdentitiesLinkResponse {
    dev_user: DevUser;
}
/**
 * dev-users-identities-unlink-request
 * Request to unlink an external identity from a Dev user.
 */
export interface DevUsersIdentitiesUnlinkRequest {
    /** Issuer that needs to be unlinked from a Dev user. */
    issuer: string;
}
/**
 * dev-users-identities-unlink-response
 * Response for the request to unlink an external identity from a Dev
 * user.
 */
export interface DevUsersIdentitiesUnlinkResponse {
    dev_user: DevUser;
}
/**
 * dev-users-is-display-handle-available-request
 * A request to check if a display handle is available for the
 * authenticated user or not.
 */
export interface DevUsersIsDisplayHandleAvailableRequest {
    /**
     * Display handle to be checked for availability.
     * @deprecated
     */
    display_handle?: string;
    /** Display name to be checked for availability. */
    display_name?: string;
}
/**
 * dev-users-is-display-handle-available-response
 * Response object to display handle availability check request.
 */
export interface DevUsersIsDisplayHandleAvailableResponse {
    /** Whether the display handle is available. */
    is_available: boolean;
}
/**
 * dev-users-list-request
 * A request to get the list of Dev user's information.
 */
export interface DevUsersListRequest {
    /**
     * Filters list of Dev users which are created by specified list of
     * Dev user IDs.
     */
    created_by?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** Filters for custom fields. */
    custom_fields?: object;
    /** Filters Dev users based on email addresses. */
    email?: string[];
    /** Filters Dev users based on external identity. */
    external_identity?: DevUserExternalIdentityFilter[];
    /** Filters Dev users based on job titles. */
    job_title?: DevUserJobTitle[];
    /**
     * The maximum number of Dev users to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Fields to sort the Dev users by and the direction to sort them. */
    sort_by?: string[];
    /** Filters Dev users based on state. */
    state?: UserState[];
    /** Subtypes of devusers to be filtered. */
    subtype?: string[];
    subtype_op?: SubtypeOpOperatorType;
}
/**
 * dev-users-list-response
 * The response to listing the Dev users.
 */
export interface DevUsersListResponse {
    /**
     * The cursor that should be used to resume iteration. If not
     * provided, then iteration has completed.
     * @deprecated
     */
    cursor?: string;
    /** The list of Dev users. */
    dev_users: DevUser[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/**
 * dev-users-logout-request
 * The request to logout from a Dev organization.It unregisters the device
 * for notifications and deletes the token from STS.
 */
export interface DevUsersLogoutRequest {
    /** The unique identifier for the token under a given Dev organization. */
    auth_token_id?: string;
    /** The unique identifier of the device. */
    device_id: string;
}
/**
 * dev-users-merge-request
 * Request object for DevUsersMerge call.
 */
export interface DevUsersMergeRequest {
    /** The unique ID of the primary user. */
    primary_user: string;
    /** The unique ID of the secondary user. */
    secondary_user: string;
}
/**
 * dev-users-merge-response
 * The response to DevUsersMerge call.
 */
export type DevUsersMergeResponse = object;
/**
 * dev-users-post-login-request
 * Request object for DevUsersPostLogin call.
 */
export type DevUsersPostLoginRequest = object;
/**
 * dev-users-post-login-response
 * Response object for post-login request.
 */
export interface DevUsersPostLoginResponse {
    dev_org?: DevOrg;
    dev_user?: DevUser;
    /** Whether a new access token is to be fetched. */
    refetch_id_token: boolean;
    user_preferences?: UserPreferences;
}
/**
 * dev-users-self-delete-request
 * A request to delete the authenticated user.
 */
export type DevUsersSelfDeleteRequest = object;
/**
 * dev-users-self-delete-response
 * The response to delete the authenticated user.
 */
export type DevUsersSelfDeleteResponse = object;
/**
 * dev-users-self-request
 * A request to get the authenticated user's information.
 */
export type DevUsersSelfRequest = object;
/**
 * dev-users-self-response
 * The response to getting the information for the authenticated user.
 */
export interface DevUsersSelfResponse {
    dev_user: DevUser;
}
/**
 * dev-users-self-update-request
 * A request to update the user's information for the authenticated Dev
 * user.
 */
export interface DevUsersSelfUpdateRequest {
    /** Application-defined custom fields. */
    custom_fields?: object;
    /**
     * Requested custom schemas described abstractly. Every provided schema's
     * custom field must be specified, otherwise a bad request error is
     * returned. If a new custom schema specifier is provided, then it will be
     * added to the work, otherwise if a custom schema is omitted from the
     * specifier, it remains unmodified.
     */
    custom_schema_spec?: CustomSchemaSpec;
    /**
     * The updated display handle of the Dev user.
     * @deprecated
     */
    display_handle?: string;
    /** The updated display name of the Dev user. */
    display_name?: string;
    /**
     * Artifact ID of a Dev user's display picture.
     * @example "ARTIFACT-12345"
     */
    display_picture_id?: string | null;
    /**
     * The updated email of the Dev user. Email update is only supported
     * for Dev users in 'Shadow' or 'Unassigned' state.
     */
    email?: string;
    /**
     * Start date of Dev user's experience
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    experience_start_date?: string;
    /** The updated full name of the Dev user. */
    full_name?: string;
    /** Job history of the Dev user. */
    job_history?: DevUsersUpdateJobHistoryItem[];
    /** Job title of the Dev User. */
    job_title?: DevUserJobTitle;
    /** Skills of the Dev user. */
    skills?: DevUsersUpdateSkill[];
    /** Status of the user. */
    status?: Status;
    /** If the Dev user has accepted terms and conditions. */
    terms_conditions_accepted?: boolean;
}
/**
 * dev-users-send-phone-number-code-request
 * A request to send a verification code to a phone number.
 */
export interface DevUsersSendPhoneNumberCodeRequest {
    /**
     * The phone number, in E.164 format, to send the verification code
     * to.
     */
    phone_number: string;
}
/**
 * dev-users-send-phone-number-code-response
 * The response to send a verification code to a phone number.
 */
export type DevUsersSendPhoneNumberCodeResponse = object;
/** dev-users-update-job-history-item */
export interface DevUsersUpdateJobHistoryItem {
    /**
     * Enum for the employment status of the user
     * @format int64
     */
    employment_status?: number;
    /**
     * End Date of the job
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    end_date?: string;
    /** Is this the current active job for the user. */
    is_current?: boolean;
    /** The job location for the user. */
    location?: string;
    /**
     * Start Date of the job
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    start_date?: string;
    /** The job title for the user. */
    title?: string;
}
/**
 * dev-users-update-request
 * A request to update the user's information corresponding to the
 * provided Dev user.
 */
export interface DevUsersUpdateRequest {
    /** Application-defined custom fields. */
    custom_fields?: object;
    /**
     * Requested custom schemas described abstractly. Every provided schema's
     * custom field must be specified, otherwise a bad request error is
     * returned. If a new custom schema specifier is provided, then it will be
     * added to the work, otherwise if a custom schema is omitted from the
     * specifier, it remains unmodified.
     */
    custom_schema_spec?: CustomSchemaSpec;
    /**
     * The updated display handle of the Dev user.
     * @deprecated
     */
    display_handle?: string;
    /** The updated display name of the Dev user. */
    display_name?: string;
    /**
     * Artifact ID of a Dev user's display picture.
     * @example "ARTIFACT-12345"
     */
    display_picture_id?: string | null;
    /**
     * The updated email of the Dev user. Email update is only supported
     * for Dev users in 'Shadow' or 'Unassigned' state.
     */
    email?: string;
    /**
     * Start date of Dev user's experience
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    experience_start_date?: string;
    /** The updated full name of the Dev user. */
    full_name?: string;
    /** The ID for the Dev user to be updated. */
    id: string;
    /** Job history of the Dev user. */
    job_history?: DevUsersUpdateJobHistoryItem[];
    /** Job title of the Dev User. */
    job_title?: DevUserJobTitle;
    /** Skills of the Dev user. */
    skills?: DevUsersUpdateSkill[];
    /** Status of the user. */
    status?: Status;
}
/**
 * dev-users-update-response
 * The response to update a Dev user.
 */
export interface DevUsersUpdateResponse {
    dev_user: DevUser;
}
/** dev-users-update-skill */
export interface DevUsersUpdateSkill {
    /** Name of the skill of the Dev user. */
    name: string;
}
/**
 * devrev-enum-group
 * Enum group information.
 */
export interface DevrevEnumGroup {
    /** enum group key. */
    group_key?: string;
    /** true if header is visible. */
    is_header_visible?: boolean;
    /** label of the field. */
    label?: string;
}
/** devrev-profile */
export type DevrevProfile = UserBase & {
    /** Professional biography of the user. */
    bio?: string;
    /**
     * Brief description of the user's professional experience or
     * interests.
     */
    headline?: string;
    /** Visibility of the profile to other users. */
    visibility?: DevrevProfileVisibility;
};
/** devrev-profile-summary */
export type DevrevProfileSummary = UserBaseSummary;
/** Visibility of the profile to other users. */
export declare enum DevrevProfileVisibility {
    Private = "private",
    Public = "public"
}
/** devrev-reminder */
export type DevrevReminder = NotificationBase & {
    /**
     * Time at which reminder was created.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_at?: string;
    /** Message included with reminder. */
    message?: string;
    /** The objects referenced in the message. */
    references?: AtomSummary[];
};
/** devrev-reminder-summary */
export type DevrevReminderSummary = NotificationBaseSummary;
/** devu-invite */
export type DevuInvite = AtomBase & {
    /** Email address of the user. */
    email?: string;
    /**
     * Time at which invite link expires.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    expires_at?: string;
    /** IDs of the groups assigned to user during invite. */
    group_ids?: GroupSummary[];
    /** Invitation Id of the invite sent to user. */
    invitation_id?: string;
    /** Invitaion link associated with given email. */
    invitation_link?: string;
    /** Licenses assigned to user during invite. */
    licenses?: string[];
    /** State of the invite. */
    state?: DevuInviteState;
};
/** devu-invite-global */
export type DevuInviteGlobal = AtomBase & {
    /** Email address of the Dev user to invite. */
    email?: string;
    /**
     * Timestamp at which invitation link expires.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    expires_at?: string;
    /** Auth0 invitation id of the invite. */
    invitation_id?: string;
    /** Unique invitation link sent to the associated email. */
    invitation_link?: string;
    /** State of the invite. */
    state?: DevuInviteGlobalState;
};
/** State of the invite. */
export declare enum DevuInviteGlobalState {
    Accepted = "accepted",
    Deleted = "deleted",
    Expired = "expired",
    Pending = "pending"
}
/** devu-invite-global-summary */
export type DevuInviteGlobalSummary = AtomBaseSummary;
/** State of the invite. */
export declare enum DevuInviteState {
    Accepted = "accepted",
    Deleted = "deleted",
    Expired = "expired",
    Pending = "pending"
}
/** devu-invite-summary */
export type DevuInviteSummary = AtomBaseSummary;
/** directories-count-request */
export interface DirectoriesCountRequest {
    /**
     * Filters for directories created by any of the provided users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_date?: DateTimeFilter;
    /**
     * Filters for directories modified by any of the provided users.
     * @example ["DEVU-12345"]
     */
    modified_by?: string[];
    modified_date?: DateTimeFilter;
    /** Filters for directories with the provided parent. */
    parent?: string[];
    parent_op?: DirectoriesFilterParentOpOperatorType;
    rank?: DirectoriesFilterRankFilter;
    /**
     * Filters for directories with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
}
/** directories-count-response */
export interface DirectoriesCountResponse {
    /**
     * The total number of directories matching the filter.
     * @format int32
     */
    count: number;
}
/**
 * directories-create-request
 * The request to create a directory.
 */
export interface DirectoriesCreateRequest {
    /** Description for the directory. */
    description?: string;
    /** Icon for the directory. */
    icon?: string;
    /** Parent directory of the directory. */
    parent?: string;
    /** Whether the directory is published. */
    published?: boolean;
    /** Tags associated with the directory. */
    tags?: SetTagWithValue[];
    /**
     * ID of the thumbnail artifact.
     * @example "ARTIFACT-12345"
     */
    thumbnail?: string;
    /** Title of the directory. */
    title: string;
}
/**
 * directories-create-response
 * Create directory response.
 */
export interface DirectoriesCreateResponse {
    directory: Directory;
}
/**
 * directories-delete-request
 * The request to delete a directory.
 */
export interface DirectoriesDeleteRequest {
    /** The ID of the directory to delete. */
    id: string;
}
/** directories-delete-response */
export type DirectoriesDeleteResponse = object;
export declare enum DirectoriesFilterParentOpOperatorType {
    All = "all",
    Any = "any",
    Empty = "empty",
    NotAny = "not_any",
    NotEmpty = "not_empty"
}
/** directories-filter-rank-filter */
export interface DirectoriesFilterRankFilter {
    /**
     * Filters for objects with a value lexicographically less than or
     * equal to the provided value.
     */
    max?: string;
    /**
     * Filters for objects with a value lexicographically greater than or
     * equal to the provided value.
     */
    min?: string;
}
/**
 * directories-get-request
 * The request to get a directory.
 */
export interface DirectoriesGetRequest {
    /** The ID of the requested directory. */
    id: string;
}
/**
 * directories-get-response
 * Get directory response.
 */
export interface DirectoriesGetResponse {
    directory: Directory;
}
/**
 * directories-list-request
 * The request to list directories.
 */
export interface DirectoriesListRequest {
    /**
     * Filters for directories created by any of the provided users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_date?: DateTimeFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of directories to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /**
     * Filters for directories modified by any of the provided users.
     * @example ["DEVU-12345"]
     */
    modified_by?: string[];
    modified_date?: DateTimeFilter;
    /** Filters for directories with the provided parent. */
    parent?: string[];
    parent_op?: DirectoriesFilterParentOpOperatorType;
    rank?: DirectoriesFilterRankFilter;
    /** Fields to sort the directories by and the direction to sort them. */
    sort_by?: string[];
    /**
     * Filters for directories with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
}
/**
 * directories-list-response
 * List directory response.
 */
export interface DirectoriesListResponse {
    /**
     * The cursor that should be used to resume iteration, otherwise if
     * not provided, then iteration has completed.
     * @deprecated
     */
    cursor?: string;
    /** The list of directories. */
    directories: Directory[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/**
 * directories-tree-request
 * The request to get the directory tree.
 */
export interface DirectoriesTreeRequest {
    /**
     * If true, directories with no article descendants will be excluded
     * from the response.
     */
    exclude_directories_with_no_article_descendants?: boolean;
    /** The ID of the directory whose subtree needs to be fetched. */
    id?: string;
}
/**
 * directories-tree-response
 * Get directory tree response.
 */
export interface DirectoriesTreeResponse {
    /** The requested directory tree. */
    directories: DirectoriesTreeResponseEntry[];
}
/** directories-tree-response-entry */
export interface DirectoriesTreeResponseEntry {
    /** The children of the directory. */
    children: DirectoriesTreeResponseEntry[];
    directory: Directory;
    /** Whether the directory has child articles. */
    has_child_articles: boolean;
    /** Whether the directory has article descendants. */
    has_descendant_articles: boolean;
}
/**
 * directories-update-request
 * The request to update a directory.
 */
export interface DirectoriesUpdateRequest {
    /** The updated description for the directory. */
    description?: string;
    /** The updated icon for the directory. */
    icon?: string;
    /** The ID of the directory to update. */
    id: string;
    /** The updated parent directory for the directory. */
    parent?: string | null;
    /** Whether the directory is published. */
    published?: boolean;
    reorder?: DirectoriesUpdateRequestReorder;
    tags?: DirectoriesUpdateRequestTags;
    /**
     * ID of the thumbnail artifact.
     * @example "ARTIFACT-12345"
     */
    thumbnail?: string;
    /** The updated title for the directory. */
    title?: string;
}
/** directories-update-request-reorder */
export interface DirectoriesUpdateRequestReorder {
    /** The directory after which the reordered directory is placed. */
    after?: string;
    /** The directory before which the reordered directory is placed. */
    before?: string;
}
/** directories-update-request-tags */
export interface DirectoriesUpdateRequestTags {
    /** Sets the provided tags on the directory. */
    set?: SetTagWithValue[];
}
/**
 * directories-update-response
 * Update directory response.
 */
export interface DirectoriesUpdateResponse {
    directory: Directory;
}
/** directory */
export type Directory = AtomBase & {
    body?: ArtifactSummary;
    /** Description of the directory. */
    description?: string;
    /** Icon of the directory. */
    icon?: string;
    parent?: DirectorySummary;
    /** Whether the directory is published. */
    published?: boolean;
    /** Rank of the directory. */
    rank?: string;
    /** Tags associated with the directory. */
    tags?: TagWithValue[];
    thumbnail?: ArtifactSummary;
    /** Title of the directory. */
    title?: string;
};
/**
 * directory-ancestors-request
 * The request to get a directory's ancestors.
 */
export interface DirectoryAncestorsRequest {
    /** The ID of the directory to get ancestors. */
    id: string;
}
/**
 * directory-ancestors-response
 * Get directory ancerstors response.
 */
export interface DirectoryAncestorsResponse {
    /**
     * The requested directory's ancestors ordered from root to the
     * current directory.
     */
    ancestors: Directory[];
}
/** directory-summary */
export type DirectorySummary = AtomBaseSummary;
/** discount-amount */
export interface DiscountAmount {
    /** @format double */
    amount: number;
}
/**
 * discount-detail
 * It represents a specific time period for an associated discount. It
 * encapsulates information about the start date, end date, and the
 * corresponding discount value in terms of amount or percentage. It is
 * designed to facilitate calculations and operations involving time-based
 * discounts.
 */
export interface DiscountDetail {
    /**
     * The end point of the time range, indicating the date and time at
     * which the object's validity or relevance concludes.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    end_date?: string;
    /** Unique identifier for the object. */
    id?: string;
    /**
     * The starting point of the time range, indicating the date and time
     * from which the object's validity or relevance begins.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    start_date?: string;
    /**
     * Information/Description to be shown when cursor is held over
     * text/icon.
     */
    tooltip?: string;
    /** The type of the discount that is associated. */
    type: DiscountDetailType;
    /**
     * The value of the discount that is associated.
     * @format double
     */
    value: number;
}
/** The type of the discount that is associated. */
export declare enum DiscountDetailType {
    Number = "number",
    Percentage = "percentage"
}
/**
 * discount-line-item
 * The discount applied on top of the usage.
 */
export interface DiscountLineItem {
    /**
     * Discount name (to be removed once schema is decided, adding this to
     * avoid archetype validation error).
     */
    name?: string;
}
/** discount-percentage */
export interface DiscountPercentage {
    /** @format double */
    percentage: number;
}
/** discover-rev-parts-request */
export type DiscoverRevPartsRequest = object;
/** discover-rev-parts-response */
export type DiscoverRevPartsResponse = object;
/**
 * discovery-app-settings
 * Configuration knobs for discovery application per devorg.
 */
export interface DiscoveryAppSettings {
    /**
     * Optionally set schedule for discovery run interval in minutes. If
     * not defined default is used.
     * @format int32
     */
    discovery_run_interval_minutes?: number;
    /**
     * Optionally set rate limit count in window. If not defined default
     * is used.
     * @format int32
     */
    rate_limit_count_in_window?: number;
}
/** discovery-event-base */
export type DiscoveryEventBase = AtomBase;
/** discovery-event-base-summary */
export type DiscoveryEventBaseSummary = AtomBaseSummary;
/** discovery-git-commit */
export type DiscoveryGitCommit = DiscoveryEventBase & {
    /** ID of the commit. */
    commit_id?: string;
    /** IDs of the issues that are associated with commit. */
    issue_ids: WorkSummary[];
    /** Least common repo path amongst paths associated with the commit. */
    repo_path?: string;
    /** Repo URL associated with the commit. */
    repo_url?: string;
};
/** discovery-git-commit-summary */
export type DiscoveryGitCommitSummary = DiscoveryEventBaseSummary;
/** discovery-git-event */
export type DiscoveryGitEvent = DiscoveryEventBase & {
    /** ID of the git event. */
    event_id?: string;
    /** IDs of the issues that are associated with the event. */
    issue_ids: WorkSummary[];
    /** Least common repo path amongst paths associated with the event. */
    repo_path?: string;
    /** Repo URL associated with the event. */
    repo_url?: string;
    /** Git event type. */
    type?: string;
};
/** discovery-git-event-summary */
export type DiscoveryGitEventSummary = DiscoveryEventBaseSummary;
/**
 * discovery-github-repos-settings
 * Configuration knobs for GitHub repositories for devorg.
 */
export interface DiscoveryGithubReposSettings {
    /** Repos that are excluded are part of this list. */
    exclude?: string[];
    /** Repos that are included are part of this list. */
    include?: string[];
    /** Name of the organization for GitHub repository. */
    organization?: string;
    /** Enum for repositories status for inclusion and exclusion. */
    repos_status?: DiscoveryGithubReposSettingsReposStatus;
}
/** Enum for repositories status for inclusion and exclusion. */
export declare enum DiscoveryGithubReposSettingsReposStatus {
    All = "all",
    Exclude = "exclude",
    Include = "include"
}
/** discovery-profile */
export type DiscoveryProfile = AtomBase & {
    /** Configuration knobs for extractors. */
    extractors?: Extractors;
    /** Configuration knobs for partitioners and partition mergers. */
    mergers?: DevRevPartitionerMerger;
    /**
     * Optionally allow to specify a different devorg's data as source. If
     * missing current devorg is used.
     */
    other_data_source_devorg?: string;
    /** Configuration knobs for partitioners and partition mergers. */
    partitioners?: DevRevPartitionerMerger;
    /** Name of the Discovery profile. */
    profile_name?: string;
};
/** discovery-profile-summary */
export type DiscoveryProfileSummary = AtomBaseSummary;
/** discovery-run */
export type DiscoveryRun = AtomBase & {
    /**
     * Set discovery run end time.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    completed_at?: string;
    /** Optionally set failure information if discovery run fail. */
    failure_info?: string;
    /** Optionally set if discovery is scheduled. */
    is_scheduled?: boolean;
    /**
     * Optionally set next status time. This would be helpful for client
     * to decide when next get status call should be made.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    next_status_at?: string;
    /** Discovery profile summary. */
    profile?: ProfileSummary;
    /**
     * Limit the use of the sources defined in the default profile to the
     * ones specified in this list. If this field is not provided, attempt
     * to use every source defined in the default profile.
     */
    selected_sources?: string[];
    /** Discovery sources information. */
    sources_status?: SourceDetails[];
    /**
     * Set discovery run start time.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    started_at?: string;
    /** Enum for discovery run status. */
    status?: DiscoveryRunStatus;
    /** Set discovery run triggered by User. */
    triggered_by?: string;
};
/** Enum for discovery run status. */
export declare enum DiscoveryRunStatus {
    Failed = "failed",
    Running = "running",
    Started = "started",
    Success = "success"
}
/** discovery-run-summary */
export type DiscoveryRunSummary = AtomBaseSummary;
/** discovery-settings */
export type DiscoverySettings = AtomBase & {
    /** Configuration knobs for discovery application per devorg. */
    data_collection_app_settings?: DataCollectionAppSettings;
    /** Configuration knobs for discovery application per devorg. */
    discovery_app_settings?: DiscoveryAppSettings;
    /** Optionally allow to specify profile Id associated with the devorg. */
    discovery_profile_id?: string;
    /** Discovery GitHub repositories settings for devorg. */
    github_repos?: DiscoveryGithubReposSettings[];
};
/** discovery-settings-summary */
export type DiscoverySettingsSummary = AtomBaseSummary;
/** discovery-source */
export interface DiscoverySource {
    /**
     * Timestamp at which the data was last captured for this source.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    last_captured_timestamp: string;
    /**
     * Size of the data, in bytes, that was collected for this source.
     * @format int64
     */
    size_bytes?: number;
    /** Name of the source used for parts discovery. */
    source_name: PartsDiscoverySourceName;
}
/**
 * dmarc-send-email-request
 * The request to send and email from the organisation's email address
 */
export interface DmarcSendEmailRequest {
    /** Email. */
    email: Email;
    /** The keyring to use to sign the email */
    keyring_id: string;
}
/** dmarc-send-email-response */
export interface DmarcSendEmailResponse {
    /** The message id of the email sent */
    message_id: string;
}
/**
 * dns-record
 * DNS record.
 */
export interface DnsRecord {
    /** Name of the DNS record. */
    name?: string;
    /** Type of DNS record. */
    type?: DnsRecordType;
    /** Value of the DNS record. */
    value?: string;
}
/** Type of DNS record. */
export declare enum DnsRecordType {
    Cname = "cname",
    Mx = "mx",
    Txt = "txt"
}
/**
 * doc-field
 * Docs Field details.
 */
export interface DocField {
    /** Type of doc. */
    doc_type?: string;
    /** Title text for the url. */
    title?: string;
    /** URL for the field. */
    url?: string;
}
/** document */
export interface Document {
    /** The key of the document. */
    key: string;
    /**
     * The document must be a valid JSON.
     * @maxLength 10485760
     */
    value: string;
}
/**
 * domain-identities-create-request
 * The request for creating domain identity.
 */
export interface DomainIdentitiesCreateRequest {
    /**
     * Whether to enable custom mail from address for DMARC. Deafult is
     * false.
     */
    custom_mail_from_enabled?: boolean;
    /** Domain for which identity needs to be created. */
    domain: string;
    /** The ID of the keyring to be used for storing domain identities. */
    keyring: string;
}
/**
 * domain-identities-create-response
 * The response for create domain identity.
 */
export interface DomainIdentitiesCreateResponse {
    /** Whether custom mail from address for DMARC is enabled. */
    custom_mail_from_enabled: boolean;
    /** DNS Records for domain identity verification. */
    dns_records: DnsRecord[];
}
/**
 * domain-identities-sync-request
 * The request for syncing the domain identity information.
 */
export interface DomainIdentitiesSyncRequest {
    /**
     * Whether to enable custom mail from address for DMARC. Deafult is
     * false.
     */
    custom_mail_from_enabled?: boolean;
    /** Domain for which identity information needs to be synced. */
    domain: string;
    /** The ID of the keyring having domain identity information. */
    keyring: string;
}
/**
 * domain-identities-sync-response
 * The response for sync domain identity.
 */
export interface DomainIdentitiesSyncResponse {
    /** Whether custom mail from address for DMARC is enabled. */
    custom_mail_from_enabled: boolean;
    /** DNS Records for domain identity verification. */
    dns_records: DnsRecord[];
    /** Domain Verification status. */
    status: DomainVerificationStatus;
}
/**
 * domain-verification-status
 * Domain Verification status.
 */
export interface DomainVerificationStatus {
    /** Status of the identity. */
    value?: DomainVerificationStatusValue;
}
/** Status of the identity. */
export declare enum DomainVerificationStatusValue {
    Failed = "failed",
    NotStarted = "not_started",
    Pending = "pending",
    Success = "success",
    TemporaryFailure = "temporary_failure"
}
/**
 * donut-visualization-x-axis
 * The X-axis for a donut visualization.
 */
export interface DonutVisualizationXAxis {
    /** The color for an axis. This can be a single color or a gradient. */
    color?: VisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: VisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name: string;
}
/**
 * donut-visualization-y-axis
 * The Y-axis for a donut visualization.
 */
export interface DonutVisualizationYAxis {
    /** The color for an axis. This can be a single color or a gradient. */
    color?: VisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: VisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name: string;
}
/**
 * donut-widget-visualization
 * A donut chart visualization configuration. Includes metadata specific
 * to donut charts.
 */
export interface DonutWidgetVisualization {
    /** The configuration for the X-axis. */
    x: DonutVisualizationXAxis[];
    /** The Y-axis for a donut visualization. */
    y: DonutVisualizationYAxis;
}
/** draft-marketplace-submission */
export interface DraftMarketplaceSubmission {
    /**
     * A marketplace the submission belongs to. Once marketplace value is
     * set it cannot be changed.
     */
    marketplace: string;
    /**
     * Name of the marketplace listing. The value for a name can be any
     * string with a minimum length of 3 and a maximum length of 128.
     */
    name: string;
    /**
     * URL slug of the marketplace listing. Slug cannot be changed after
     * it has been set. Its' value needs to be in the right format and it
     * has to be unique per marketplace. Slug value must start with  a
     * lowercase letter, followed by zero or more lowercase letters or
     * hyphens, and must end with a lowercase letter. For example, a valid
     * slug value might be 'my-automation', but an invalid value might be
     * 'MyAutomation' or 'my-automation-1'.
     */
    slug?: string;
}
/**
 * duplicate-account-pair
 * Duplicate account pair.
 */
export interface DuplicateAccountPair {
    account1: AccountSummary;
    account2: AccountSummary;
    created_by: UserSummary;
    /**
     * Timestamp when the object was created.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_date: string;
    modified_by: UserSummary;
    /**
     * Timestamp when the object was last modified.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    modified_date: string;
}
/**
 * duplicate-account-pairs-count-request
 * A request to count the duplicate accounts.
 */
export type DuplicateAccountPairsCountRequest = object;
/**
 * duplicate-account-pairs-count-response
 * The count of duplicate pairs.
 */
export interface DuplicateAccountPairsCountResponse {
    /**
     * The count of duplicate pairs.
     * @format int32
     */
    count: number;
}
/**
 * duplicate-account-pairs-ignore-request
 * A request to ignore the duplicate account pair.
 */
export interface DuplicateAccountPairsIgnoreRequest {
    /** Account IDs for Account1 and Account2. */
    duplicate_pair_identifier: DuplicateAccountPairsIgnoreRequestDuplicateAccountPairIdentifier;
}
/**
 * duplicate-account-pairs-ignore-request-duplicate-account-pair-identifier
 * Account IDs for Account1 and Account2.
 */
export interface DuplicateAccountPairsIgnoreRequestDuplicateAccountPairIdentifier {
    /**
     * Account ID of Account1.
     * @example "ACC-12345"
     */
    account1: string;
    /**
     * Account ID of Account2.
     * @example "ACC-12345"
     */
    account2: string;
}
/**
 * duplicate-account-pairs-ignore-response
 * The response to ignoring the duplicate account pair.
 */
export type DuplicateAccountPairsIgnoreResponse = object;
/**
 * duplicate-account-pairs-list-request
 * A request to list the duplicate accounts.
 */
export interface DuplicateAccountPairsListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of object members to return. If not set, then
     * the default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
}
/**
 * duplicate-account-pairs-list-response
 * The list of duplicate pairs.
 */
export interface DuplicateAccountPairsListResponse {
    /** List of duplicate account pairs. */
    duplicate_pairs: DuplicateAccountPair[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/**
 * duration
 * Duration encapsulates the value of the duration and the type of the
 * duration. For example, 1 day where value is '1' and type is 'day'.
 */
export interface Duration {
    /** Type defines the type of the duration. */
    type?: DurationType;
    /**
     * Value defines the value of the duration.
     * @format int32
     */
    value?: number;
}
/** Type defines the type of the duration. */
export declare enum DurationType {
    Day = "day",
    Hour = "hour",
    Minute = "minute",
    Month = "month",
    OneTime = "one_time",
    Year = "year"
}
/**
 * dynamic-group-info
 * Information to define dynamic groups.
 */
export interface DynamicGroupInfo {
    /** Boolean expression. */
    membership_expression?: BooleanExpression;
}
/**
 * dynamic-vista
 * Dynamic collection of Devrev objects, all adhering to a specific
 * filter.
 */
export type DynamicVista = VistaBase & (DynamicVistaAccountsVista | DynamicVistaConversationsVista | DynamicVistaCreditsVista | DynamicVistaIncidentsVista | DynamicVistaInvoicesVista | DynamicVistaPartsVista | DynamicVistaQuotesVista | DynamicVistaRevOrgsVista | DynamicVistaRevUsersVista | DynamicVistaWorksVista) & {
    /** Type of DevRev object for which the vista is applicable. */
    filter_type: DynamicVistaFilterType;
};
/** dynamic-vista-accounts-vista */
export interface DynamicVistaAccountsVista {
    filter: DynamicVistaAccountsVistaFilter;
    /** Pinned items associated with the vista. */
    items?: DynamicVistaAccountsVistaItemValue[];
}
/** dynamic-vista-accounts-vista-filter */
export interface DynamicVistaAccountsVistaFilter {
    /** Filters for accounts created by the specified user(s). */
    created_by?: string[];
    created_by_op?: RevObjectTagsOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** Array of display names of accounts to be filtered. */
    display_name?: string[];
    /** Domains for accounts to be filtered. */
    domains?: string[];
    domains_op?: RevObjectTagsOperatorType;
    /** Environment values to be filtered. */
    environment?: OrgEnvironment[];
    /** Array of references of accounts to be filtered. */
    external_refs?: string[];
    external_refs_op?: RevObjectTagsOperatorType;
    /** The field to group the collection by. */
    group_by?: string;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** Filters for accounts owned by the specified user(s). */
    owned_by?: string[];
    owned_by_op?: RevObjectTagsOperatorType;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** Filters for accounts on specified stages. */
    stage?: string[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    subtype_op?: SubtypeOpOperatorType;
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    tags_op?: RevObjectTagsOperatorType;
    /** Array of tier for accounts to be filtered. */
    tier?: string[];
    tier_op?: RevObjectTagsOperatorType;
    /** Array of websites of accounts to be filtered. */
    websites?: string[];
    websites_op?: RevObjectTagsOperatorType;
}
/** dynamic-vista-accounts-vista-item-value */
export interface DynamicVistaAccountsVistaItemValue {
    item: AccountSummary;
}
/** dynamic-vista-conversations-vista */
export interface DynamicVistaConversationsVista {
    filter: DynamicVistaConversationsVistaFilter;
    /** Pinned items associated with the vista. */
    items?: DynamicVistaConversationsVistaItemValue[];
}
/** dynamic-vista-conversations-vista-filter */
export interface DynamicVistaConversationsVistaFilter {
    /**
     * Filters for conversations belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_parts?: string[];
    created_date?: DateTimeFilter;
    /** Filters for conversation that belong to the given groups. */
    group?: string[];
    /** The field to group the collection by. */
    group_by?: string;
    /** Filters for conversations that are created by verified users. */
    is_creator_verified?: boolean;
    /** Filters for conversations that are spam. */
    is_spam?: boolean;
    /**
     * Filters for conversations where these users are participants.
     * @example ["DEVU-12345"]
     */
    members?: string[];
    modified_date?: DateTimeFilter;
    /**
     * Filters for conversations owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for conversations that are associated with any of the
     * provided Rev organizations.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org?: string[];
    /**
     * Filters for conversations with any of the provided SLAs applying to
     * it.
     */
    sla?: string[];
    /**
     * Filters for conversations with any of the provided SLA stages.
     * @deprecated
     */
    sla_stage?: SlaSummaryStage[];
    /** The filter for SLA summary. */
    sla_summary?: SlaSummaryFilter;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** Filters for conversations with any of the provided source channels. */
    source_channels?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for conversations with any of the provided states. */
    state?: string[];
    /** The filter for survey aggregation. */
    surveys?: SurveyAggregationFilter;
    /**
     * Filters for conversations with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for conversations with any of the provided tags with value. */
    tags_v2?: TagWithValueFilter[];
    /** Filters for conversations with any of the provided ticket IDs. */
    tickets?: string[];
    /** Filters for conversations in which turing is active. */
    turing_active?: boolean;
}
/** dynamic-vista-conversations-vista-item-value */
export interface DynamicVistaConversationsVistaItemValue {
    item: ConversationSummary;
}
/** dynamic-vista-credits-vista */
export interface DynamicVistaCreditsVista {
    filter: DynamicVistaCreditsVistaFilter;
}
/** dynamic-vista-credits-vista-filter */
export interface DynamicVistaCreditsVistaFilter {
    /**
     * Filter credits by account.
     * @example ["ACC-12345"]
     */
    account_ids?: string[];
    /**
     * Filter items which have expiry date after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    after_expiry_date?: string;
    /**
     * Filter items which have expiry date before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    before_expiry_date?: string;
    /** Provides ways to specify date ranges on objects. */
    expiry_date?: DateFilter;
    /** The field to group the collection by. */
    group_by?: string;
    /** The list of credit object DONs which are to be aggregated. */
    ids?: string[];
    /**
     * The list of rev org DONs which are to be aggregated.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org_ids?: string[];
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** The list of status values which are to be aggregated. */
    statuses?: CreditStatus[];
    /** The list of type values which are to be aggregated. */
    types?: CreditType[];
}
/** Type of DevRev object for which the vista is applicable. */
export declare enum DynamicVistaFilterType {
    Accounts = "accounts",
    Conversations = "conversations",
    Credits = "credits",
    Incidents = "incidents",
    Invoices = "invoices",
    Parts = "parts",
    Quotes = "quotes",
    RevOrgs = "rev_orgs",
    RevUsers = "rev_users",
    Works = "works"
}
/** dynamic-vista-incidents-vista */
export interface DynamicVistaIncidentsVista {
    filter: DynamicVistaIncidentsVistaFilter;
}
/** dynamic-vista-incidents-vista-filter */
export interface DynamicVistaIncidentsVistaFilter {
    /** Filters for incidents that apply to any of the provided parts. */
    applies_to_parts?: string[];
    /**
     * Filters for incidents created by any of the provided users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: IncidentsListFiltersCreatedByOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /** The field to group the collection by. */
    group_by?: string;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** Filters for incidents owned by any of the provided users. */
    owned_by?: string[];
    owned_by_op?: IncidentsListFiltersOwnedByOperatorType;
    /** Filters for incidents containing any of the provided severities. */
    severity?: number[];
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** Filters for incidents in any of the provided stages. */
    stage?: string[];
    /** Filters for incidents with any of the provided states. */
    state?: string[];
    /** Filters for incidents with the provided tag and value. */
    tags?: TagWithValueFilter[];
    /** Filters for incidents by the provided titles. */
    title?: string[];
}
/** dynamic-vista-invoices-vista */
export interface DynamicVistaInvoicesVista {
    filter: DynamicVistaInvoicesVistaFilter;
}
/** dynamic-vista-invoices-vista-filter */
export interface DynamicVistaInvoicesVistaFilter {
    /**
     * Filter invoices by account.
     * @example ["ACC-12345"]
     */
    account_ids?: string[];
    /**
     * Filter items which have invoice amount due greater than value
     * provided.
     * @format double
     */
    amount_due_greater_than?: number;
    /**
     * Filter items which have invoice amount due less than value
     * provided.
     * @format double
     */
    amount_due_less_than?: number;
    /**
     * Filter items which have invoice amount paid greater than value
     * provided.
     * @format double
     */
    amount_paid_greater_than?: number;
    /**
     * Filter items which have invoice amount paid less than value
     * provided.
     * @format double
     */
    amount_paid_less_than?: number;
    /** Provides ways to specify date ranges on objects. */
    billing_date?: DateFilter;
    /**
     * Filter items which have billing date after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    billing_date_after?: string;
    /**
     * Filter items which have billing date before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    billing_date_before?: string;
    /** Provides ways to specify date ranges on objects. */
    due_date?: DateFilter;
    /**
     * Filter items which have due date after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    due_date_after?: string;
    /**
     * Filter items which have due date before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    due_date_before?: string;
    /** The field to group the collection by. */
    group_by?: string;
    /** The list of Invoice DONs which are to be aggregated. */
    ids?: string[];
    /**
     * Filter items by doing queries on revs. To allow devs filter
     * invoices for specific revs.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org_ids?: string[];
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** The list of Invoice statuses which are to be aggregated. */
    statuses?: InvoiceStatus[];
    /**
     * Filter items which have invoice total greater than value provided.
     * @format double
     */
    total_greater_than?: number;
    /**
     * Filter items which have invoice total less than value provided.
     * @format double
     */
    total_less_than?: number;
    /** The list of invoice types which are to be aggregated. */
    types?: InvoiceType[];
}
/** dynamic-vista-parts-vista */
export interface DynamicVistaPartsVista {
    filter: DynamicVistaPartsVistaFilter;
    /** Pinned items associated with the vista. */
    items?: DynamicVistaPartsVistaItemValue[];
}
/** dynamic-vista-parts-vista-filter */
export interface DynamicVistaPartsVistaFilter {
    /** Filters for parts of the provided categories. */
    categories?: PartCategory[];
    /**
     * Filters for parts created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: PartsFilterCreatedByOpOperatorType;
    created_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    created_date_v2?: DateFilter;
    /** Filters for custom fields. */
    custom_fields?: object;
    enhancement?: PartsFilterEnhancement;
    /** The field to group the collection by. */
    group_by?: string;
    modified_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    modified_date_v2?: DateFilter;
    /** Filters for parts of the provided name(s). */
    name?: string[];
    /**
     * Filters for parts owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for parts owned by any of the provided users.
     * @deprecated
     * @example ["DEVU-12345"]
     */
    owned_by_ids?: string[];
    owned_by_op?: PartsFilterOwnedByOpOperatorType;
    /** The filter for specifying parent part. */
    parent_part?: ParentPartFilter;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for part with any of the provided states. */
    state?: string[];
    /** Filters for subtypes. */
    subtype?: string[];
    /**
     * Filters for parts with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tag_ids?: string[];
    /**
     * Filters for part with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    tags_op?: PartsFilterTagsOpOperatorType;
    /** Filters for parts of the provided type(s). */
    type?: PartType[];
    /**
     * Filters for parts of the provided type(s).
     * @deprecated
     */
    types?: PartType[];
    /**
     * Filters for parts belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
/** dynamic-vista-parts-vista-item-value */
export interface DynamicVistaPartsVistaItemValue {
    item: PartSummary;
}
/** dynamic-vista-quotes-vista */
export interface DynamicVistaQuotesVista {
    filter: DynamicVistaQuotesVistaFilter;
}
/** dynamic-vista-quotes-vista-filter */
export interface DynamicVistaQuotesVistaFilter {
    /**
     * The list of Account DONs for which quote objects are to be
     * aggregated.
     * @example ["ACC-12345"]
     */
    account_ids?: string[];
    /** Provides ways to specify date ranges on objects. */
    expiration_date?: DateFilter;
    /** The field to group the collection by. */
    group_by?: string;
    /** The list of Quote DONs which are to be aggregated. */
    ids?: string[];
    /**
     * The list of Opportunity DONs for which quote objects are to be
     * aggregated.
     * @example ["OPP-12345"]
     */
    opportunity_ids?: string[];
    /** Filter items which are owned by provided owner IDs. */
    owner_ids?: string[];
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for quote with any of the provided states. */
    state?: string[];
}
/** dynamic-vista-rev-orgs-vista */
export interface DynamicVistaRevOrgsVista {
    filter: DynamicVistaRevOrgsVistaFilter;
    /** Pinned items associated with the vista. */
    items?: DynamicVistaRevOrgsVistaItemValue[];
}
/** dynamic-vista-rev-orgs-vista-filter */
export interface DynamicVistaRevOrgsVistaFilter {
    /**
     * Filters by account.
     * @example ["ACC-12345"]
     */
    account?: string[];
    account_op?: RevOrgsFiltersAccountOperatorType;
    /** Filters by creator. */
    created_by?: string[];
    created_by_op?: RevObjectTagsOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** Array of display names of Rev orgs to be filtered. */
    display_name?: string[];
    /** Array of domain for Rev organizations to be filtered. */
    domain?: string[];
    /** Environment values to be filtered. */
    environment?: OrgEnvironment[];
    /** List of external refs to filter Rev organizations for. */
    external_ref?: string[];
    /** Array of external ref issuers for Rev organizations to be filtered. */
    external_ref_issuer?: string[];
    /** The field to group the collection by. */
    group_by?: string;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** Filters by owners. */
    owned_by?: string[];
    /**
     * Filters by owners.
     * @deprecated
     */
    owned_by_ids?: string[];
    owned_by_op?: RevObjectTagsOperatorType;
    /** Filter by SLA */
    sla?: string[];
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** State values to be filtered. */
    state?: OrgState[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    subtype_op?: SubtypeOpOperatorType;
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    tags_op?: RevObjectTagsOperatorType;
    /** Array of tier for Rev organizations to be filtered. */
    tier?: string[];
    /** Types of Rev organizations to be filtered. */
    type?: RevOrgType[];
}
/** dynamic-vista-rev-orgs-vista-item-value */
export interface DynamicVistaRevOrgsVistaItemValue {
    item: RevOrgSummary;
}
/** dynamic-vista-rev-users-vista */
export interface DynamicVistaRevUsersVista {
    filter: DynamicVistaRevUsersVistaFilter;
    /** Pinned items associated with the vista. */
    items?: DynamicVistaRevUsersVistaItemValue[];
}
/** dynamic-vista-rev-users-vista-filter */
export interface DynamicVistaRevUsersVistaFilter {
    /**
     * Filters for Rev users belonging to the provided account IDs.
     * @maxItems 1
     * @example ["ACC-12345"]
     */
    account?: string[];
    /** Filters for Rev users that were created by the specified user(s). */
    created_by?: string[];
    created_by_op?: RevObjectTagsOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2)
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** List of emails of Rev users to be filtered. */
    email?: string[];
    email_op?: RevObjectTagsOperatorType;
    /** List of external refs to filter Rev users for. */
    external_ref?: string[];
    /** List of external ref issuers for Rev users to be filtered. */
    external_ref_issuer?: string[];
    external_ref_op?: RevObjectTagsOperatorType;
    /** The field to group the collection by. */
    group_by?: string;
    /** Value of is_verified field to filter the Rev users. */
    is_verified?: boolean;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** List of phone numbers, in E.164 format, to filter Rev users on. */
    phone_numbers?: string[];
    /** Filters for PLuG availability. */
    plug_availability?: RevUserPlugAvailability[];
    /**
     * List of IDs of Rev organizations to be filtered.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org?: string[];
    rev_org_op?: RevUsersFiltersRevOrgOperatorType;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** List of state of Rev users to be filtered. */
    state?: UserState[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    subtype_op?: SubtypeOpOperatorType;
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    tags_op?: RevObjectTagsOperatorType;
}
/** dynamic-vista-rev-users-vista-item-value */
export interface DynamicVistaRevUsersVistaItemValue {
    item: RevUserSummary;
}
/**
 * dynamic-vista-summary
 * Dynamic collection of Devrev objects, all adhering to a specific
 * filter.
 */
export type DynamicVistaSummary = VistaBaseSummary;
/** dynamic-vista-works-vista */
export interface DynamicVistaWorksVista {
    filter: DynamicVistaWorksVistaFilter;
    /** Pinned items associated with the vista. */
    items?: DynamicVistaWorksVistaItemValue[];
}
/** dynamic-vista-works-vista-filter */
export interface DynamicVistaWorksVistaFilter {
    /** Provides ways to specify date ranges on objects. */
    actual_close_date?: DateFilter;
    /**
     * Filters for work which have one of the parts present as its
     * ancestor part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /**
     * Filters for work belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_part?: string[];
    /**
     * Filters for work created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: WorksFilterCreatedByOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /** Filters for custom fields. */
    custom_fields?: object;
    /**
     * Filters for work excluding the provided work IDs.
     * @example ["ISS-12345"]
     */
    exclude?: string[];
    external_source_data?: WorksFilterExternalSourceData;
    /** The field to group the collection by. */
    group_by?: string;
    issue?: WorksFilterIssue;
    /** Provides ways to specify date ranges on objects. */
    last_internal_comment_date?: DateFilter;
    /** Filters for work with any of the provided link target objects. */
    link_target_object?: string[];
    link_target_object_op?: WorksFilterLinkTargetObjectOperatorType;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    opportunity?: WorksFilterOpportunity;
    /**
     * Filters for work owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    owned_by_op?: WorksFilterOwnedByOperatorType;
    /**
     * Filters for work reported by any of these users.
     * @example ["DEVU-12345"]
     */
    reported_by?: string[];
    reported_by_op?: WorksFilterReportedByOperatorType;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for work for the provided stage names. */
    stage_names?: string[];
    staged_info?: StagedInfoFilter;
    /** Filters for work with any of the provided states. */
    state?: string[];
    sync_metadata?: SyncMetadataFilter;
    tag_ids_op?: WorksFilterTagIdsOperatorType;
    /**
     * Filters for work with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for work with the provided tag and value. */
    tags_v2?: TagWithValueFilter[];
    /** Provides ways to specify date ranges on objects. */
    target_close_date?: DateFilter;
    task?: WorksFilterTask;
    ticket?: WorksFilterTicket;
    /** Filters for work of the provided types. */
    type?: WorkType[];
    /**
     * Filters for work belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
/** dynamic-vista-works-vista-item-value */
export interface DynamicVistaWorksVistaItemValue {
    item: WorkSummary;
}
/** edge-v2 */
export interface EdgeV2 {
    /** ID of the link. Currently a mocked one. */
    link_id: string;
    /** Type of link used to define the relationship. */
    link_type: LinkType;
    /** ID of the source object. */
    source_id: string;
    /** Type of source object. */
    source_object_type: string;
    /** ID of target object. */
    target_id: string;
    /** Type of target object. */
    target_object_type: string;
}
/**
 * effect
 * An effect associated with a condition.
 */
export interface Effect {
    /**
     * Allowed values for the fields based on the condition. This takes
     * precedence over allowed_values in field_descriptor.
     */
    allowed_values?: string[];
    /** The fields which are affected by the condition. */
    fields: string[];
    /**
     * Whether the fields should be made immutable or not based on the
     * condition.
     */
    immutable?: boolean;
    /**
     * Whether the fields are required or not based on the condition. This
     * takes precedence over is_required in field_descriptor.
     */
    require?: boolean;
    /** Whether the fields are shown or not based on the condition. */
    show?: boolean;
}
/**
 * email
 * Email.
 */
export interface Email {
    /** Attachment ids. */
    artifact_ids?: string[];
    /** BCC Addressses. */
    bcc_addresses?: string[];
    /** Body of the email. */
    body?: string;
    /** Html/markdown body of the email. */
    body_format?: string;
    /** CC Addressses. */
    cc_addresses?: string[];
    /** Source address. */
    from_address?: string;
    /** Custom headers. */
    headers?: Header[];
    /** In reply to address. */
    in_reply_to?: string;
    /** Plaintext body of the email. */
    plaintext_body?: string;
    /** References. */
    references?: string[];
    /** Reply to. */
    reply_to?: string;
    /** Subject of the email. */
    subject?: string;
    /** Recipient address. */
    to_addresses: string[];
}
/**
 * email-event-source-deregister-request
 * The request to deregister an event source.
 */
export interface EmailEventSourceDeregisterRequest {
    /** ID of the event source. */
    event_source_id: string;
}
/** email-event-source-deregister-response */
export type EmailEventSourceDeregisterResponse = object;
/**
 * email-event-source-get-request
 * The request to get the email event source.
 */
export interface EmailEventSourceGetRequest {
    /** The registered default subdomain. */
    default_subdomain: string;
}
/**
 * email-event-source-get-response
 * Email event source response.
 */
export interface EmailEventSourceGetResponse {
    /** ID of the event source. */
    event_source_id: string;
}
/**
 * email-event-source-register-request
 * The request to create map of default email address to event source.
 */
export interface EmailEventSourceRegisterRequest {
    /** ID of the event source. */
    event_source_id: string;
}
/**
 * email-event-source-register-response
 * Register email event source response.
 */
export interface EmailEventSourceRegisterResponse {
    /** The registered default subdomain. */
    default_subdomain: string;
}
/** email-info */
export interface EmailInfo {
    /** The email address. */
    address: string;
    /** The email recipient's name. */
    name?: string;
    user?: UserSummary;
}
/** email-inline-attachment */
export interface EmailInlineAttachment {
    artifact?: ArtifactSummary;
    /** The content id of the attachment. */
    content_id?: string;
}
/** email-preview-widget */
export type EmailPreviewWidget = SnapWidgetBase & {
    /** The list of bcc addresses. */
    bcc: EmailInfo[];
    /** The list of cc addresses. */
    cc: EmailInfo[];
    /** The list of from addresses. */
    from: EmailInfo[];
    /** The html body of the email. */
    html_body?: string;
    /** The in-reply-to header of the email. */
    in_reply_to?: string;
    /** The list of inline attachments. */
    inlines: EmailInlineAttachment[];
    /** The message id of the email. */
    message_id?: string;
    raw_email_artifact?: ArtifactSummary;
    /** The references header in the email. */
    references: string[];
    /** The list of reply to addresses. */
    reply_to: EmailInfo[];
    /**
     * The time the email was sent.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    sent_timestamp?: string;
    /** The subject of the email. */
    subject?: string;
    /** The text body of the email. */
    text_body?: string;
    /** The list of to addresses. */
    to: EmailInfo[];
};
/** email-preview-widget-summary */
export type EmailPreviewWidgetSummary = SnapWidgetBaseSummary;
/**
 * embed-links-create-request
 * The request to create a new link embedded inside another create
 * request.
 */
export interface EmbedLinksCreateRequest {
    /** Type of link used to define the relationship. */
    link_type?: LinkType;
    /** The ID of the source object. */
    source?: string;
    /**
     * The ID of the source object.
     * @deprecated
     */
    source_id?: string;
    /** The ID of the target object. */
    target?: string;
    /**
     * The ID of the target object.
     * @deprecated
     */
    target_id?: string;
    /** Type of link used to define the relationship. */
    type?: LinkType;
}
/** embeddable-widget */
export type EmbeddableWidget = SnapKitEmbeddableWidget & {
    embeddable_type: EmbeddableWidgetEmbeddableType;
};
/** embeddable-widget-base */
export type EmbeddableWidgetBase = SnapWidgetBase;
/** embeddable-widget-base-summary */
export type EmbeddableWidgetBaseSummary = SnapWidgetBaseSummary;
export declare enum EmbeddableWidgetEmbeddableType {
    SnapKit = "snap_kit"
}
/** embeddable-widget-summary */
export type EmbeddableWidgetSummary = SnapKitEmbeddableWidgetSummary & {
    embeddable_type: EmbeddableWidgetEmbeddableType;
};
/** emoji */
export type Emoji = AtomBase & {
    /**
     * The display name associated with the emoji.
     * @maxLength 128
     */
    display_name?: string;
    /**
     * URL to the emoji's image.
     * @maxLength 1024
     */
    image?: string;
    /**
     * The names associated with the emoji.
     * @minLength 1
     * @maxLength 64
     * @maxItems 16
     */
    names?: string[];
};
/** emoji-summary */
export type EmojiSummary = AtomBaseSummary & {
    /**
     * The display name associated with the emoji.
     * @maxLength 128
     */
    display_name?: string;
    /**
     * URL to the emoji's image.
     * @maxLength 1024
     */
    image?: string;
};
/** emojis-create-request */
export interface EmojisCreateRequest {
    /**
     * URL to the emoji's image.
     * @maxLength 1024
     */
    image?: string;
    /**
     * The names to associate with the emoji.
     * @minLength 1
     * @maxLength 64
     * @maxItems 16
     */
    names?: string[];
}
/** emojis-create-response */
export interface EmojisCreateResponse {
    emoji: Emoji;
}
/** emojis-delete-request */
export interface EmojisDeleteRequest {
    /** The ID of the emoji to delete. */
    id: string;
}
/** emojis-delete-response */
export type EmojisDeleteResponse = object;
/** emojis-get-request */
export interface EmojisGetRequest {
    /** The ID of the emoji to get. */
    id: string;
}
/** emojis-get-response */
export interface EmojisGetResponse {
    emoji: Emoji;
}
/** emojis-list-request */
export interface EmojisListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of emojis to return.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
}
/** emojis-list-response */
export interface EmojisListResponse {
    /** The list of emojis. */
    emojis: Emoji[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/** emojis-search-request */
export interface EmojisSearchRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of emojis to return.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
}
/** emojis-search-response */
export interface EmojisSearchResponse {
    /** The found emojis. */
    emojis: Emoji[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/** emojis-update-request */
export interface EmojisUpdateRequest {
    /** The ID of the emoji to get. */
    id: string;
    /**
     * Updates the emoji's image to the provided URL.
     * @maxLength 1024
     */
    image?: string | null;
    names?: EmojisUpdateRequestNames;
}
/** emojis-update-request-names */
export interface EmojisUpdateRequestNames {
    /**
     * Adds names to be associated with the emoji. If a provided name is
     * already associated, then nothing is done.
     * @minLength 1
     * @maxLength 64
     * @maxItems 16
     */
    add?: string[];
    /**
     * Removes the names from association with the emoji. If a provided
     * name isn't associated, then nothing is done.
     * @minLength 1
     * @maxLength 64
     * @maxItems 16
     */
    remove?: string[];
    /**
     * Sets the names associated with the emoji.
     * @minLength 1
     * @maxLength 64
     * @maxItems 16
     */
    set?: string[];
}
/** emojis-update-response */
export interface EmojisUpdateResponse {
    emoji: Emoji;
}
/** empty */
export type Empty = object;
/** engagement */
export type Engagement = AtomBase & {
    /** The artifacts attached to the engagement. */
    artifacts?: ArtifactSummary[];
    /** Description of the engagement object. */
    description?: string;
    /** Reference ID associated with the new engagement. */
    engagement_new_ref?: string;
    /** Type of engagement. */
    engagement_type?: EngagementType;
    /** External Reference ID associated with the engagement. */
    external_ref?: string;
    /** External URL associated with the engagement. */
    external_url?: string;
    /** meeting engagement summary object. */
    meeting_summary?: MeetingEngagementSummary;
    /** The users in the engagement. */
    members: UserSummary[];
    parent?: AtomSummary;
    /**
     * Time at which engagement was scheduled.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    scheduled_date?: string;
    source_id?: AtomSummary;
    /** Survey engagement summary object. */
    survey_summary?: SurveyEngagementSummary;
    /** Tags associated with the object. */
    tags?: TagWithValue[];
    /** Title of the engagement object. */
    title?: string;
};
/** engagement-new-base */
export type EngagementNewBase = AtomBase & {
    /** The artifacts attached to the engagement. */
    artifacts?: ArtifactSummary[];
    /** Custom fields. */
    custom_fields?: object;
    /**
     * Custom schema fragments.
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    custom_schema_fragments?: string[];
    /** Description of the engagement. */
    description?: string;
    /**
     * End time of the engagement.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    end_date?: string;
    /** The type of engagement. */
    engagement_new_type?: EngagementNewType;
    /**
     * External ref is a unique identifier for the engagement from a
     * customer's system of record.
     */
    external_ref?: string;
    /** External URL associated with the engagement. */
    external_url?: string;
    /** Notes relevant to the engagement. */
    notes?: string;
    /** Owners of the engagement. */
    owned_by: UserSummary[];
    /** Parent IDs of the engagement. */
    parents: AtomSummary[];
    /**
     * Combination of stock and custom schema fragment IDs.
     * @deprecated
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    schema_fragment_ids?: string[];
    /** Describes the current stage of a object. */
    stage?: Stage;
    /**
     * Start time of the engagement.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    start_date?: string;
    /**
     * Stock schema fragment.
     * @example "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"
     */
    stock_schema_fragment?: string;
    /** Subtype corresponding to the custom type fragment. */
    subtype?: string;
    /** Tags associated with the engagement. */
    tags?: TagWithValue[];
    /** Title of the engagement. */
    title?: string;
};
/** engagement-new-base-summary */
export type EngagementNewBaseSummary = AtomBaseSummary;
/** The type of engagement. */
export declare enum EngagementNewType {
    Call = "call",
    CustomEngagement = "custom_engagement",
    MeetingNew = "meeting_new"
}
/** engagement-summary */
export type EngagementSummary = AtomBaseSummary;
/** Type of engagement. */
export declare enum EngagementType {
    Call = "call",
    Default = "default",
    Email = "email",
    LinkedIn = "linked_in",
    Meeting = "meeting",
    Offline = "offline",
    Survey = "survey"
}
/** engagements-count-request */
export interface EngagementsCountRequest {
    /** Filters for meetings with the provided external_refs. */
    external_ref?: string[];
    /**
     * Filters for engagement of the provided members.
     * @example ["DEVU-12345"]
     */
    members?: string[];
    /**
     * Filters for engagements with the provided parent.
     * @example ["ACC-12345"]
     */
    parent?: string[];
    /** Filters for engagement of the provided types. */
    type?: EngagementType[];
}
/** engagements-count-response */
export interface EngagementsCountResponse {
    /**
     * The number of engagements matching the filter.
     * @format int64
     */
    count: number;
}
/** engagements-create-request */
export interface EngagementsCreateRequest {
    /**
     * The IDs of the artifacts to associate with the engagement.
     * @example ["ARTIFACT-12345"]
     */
    artifacts?: string[];
    /** The description of the engagement. */
    description?: string;
    /** The type of engagement. */
    engagement_type?: EngagementsCreateRequestEngagementType;
    /** External Reference for the engagement. */
    external_ref?: string;
    /** External URL for the engagement. */
    external_url?: string;
    /**
     * IDs of the users that were part of the engagement.
     * @maxItems 50
     * @minItems 1
     * @example ["DEVU-12345"]
     */
    members: string[];
    /**
     * The parent object ID in which the engagement was created.
     * Currently, only accounts and opportunities are supported.
     * @example "ACC-12345"
     */
    parent: string;
    /**
     * The date and time when the engagement was scheduled.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    scheduled_date: string;
    /** Tags associated with the engagement. */
    tags?: SetTagWithValue[];
    /** The title of the engagement. */
    title: string;
}
/** The type of engagement. */
export declare enum EngagementsCreateRequestEngagementType {
    Call = "call",
    Default = "default",
    Email = "email",
    LinkedIn = "linked_in",
    Offline = "offline"
}
/** engagements-create-response */
export interface EngagementsCreateResponse {
    engagement: Engagement;
}
/** engagements-delete-request */
export interface EngagementsDeleteRequest {
    /** The engagement ID. */
    id: string;
}
/** engagements-delete-response */
export type EngagementsDeleteResponse = object;
/** engagements-get-request */
export interface EngagementsGetRequest {
    /** The engagement ID. */
    id: string;
}
/** engagements-get-response */
export interface EngagementsGetResponse {
    engagement: Engagement;
}
/** engagements-list-request */
export interface EngagementsListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** Filters for meetings with the provided external_refs. */
    external_ref?: string[];
    /**
     * The maximum number of engagements to return.
     * @format int32
     */
    limit?: number;
    /**
     * Filters for engagement of the provided members.
     * @example ["DEVU-12345"]
     */
    members?: string[];
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /**
     * Filters for engagements with the provided parent.
     * @example ["ACC-12345"]
     */
    parent?: string[];
    /** Fields to sort the engagements by and the direction to sort them. */
    sort_by?: string[];
    /** Filters for engagement of the provided types. */
    type?: EngagementType[];
}
/** engagements-list-response */
export interface EngagementsListResponse {
    /** The list of engagements. */
    engagements: Engagement[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/** engagements-update-request */
export interface EngagementsUpdateRequest {
    artifacts?: EngagementsUpdateRequestArtifactIds;
    /** Updates the description of the engagement. */
    description?: string;
    /** External Reference for the engagement. */
    external_ref?: string;
    /** Updates the external URL for the engagement. */
    external_url?: string;
    /** The engagement ID. */
    id: string;
    members?: EngagementsUpdateRequestMembers;
    /**
     * Updates the date and time when the engagement was scheduled.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    scheduled_date?: string | null;
    tags?: EngagementsUpdateRequestTags;
    /** Updates the title of the engagement. */
    title?: string;
}
/** engagements-update-request-artifact-ids */
export interface EngagementsUpdateRequestArtifactIds {
    /**
     * Sets the IDs to the provided artifact IDs.
     * @example ["ARTIFACT-12345"]
     */
    set?: string[];
}
/** engagements-update-request-members */
export interface EngagementsUpdateRequestMembers {
    /**
     * Sets the members to the provided user IDs. If specified, this must
     * not be empty.
     * @maxItems 50
     * @example ["DEVU-12345"]
     */
    set?: string[];
}
/** engagements-update-request-tags */
export interface EngagementsUpdateRequestTags {
    /** Sets the provided tags on the engagement item. */
    set?: SetTagWithValue[];
}
/** engagements-update-response */
export interface EngagementsUpdateResponse {
    engagement: Engagement;
}
/** enhancement */
export type Enhancement = PartBase & {
    /** Accounts associated to enhancement. */
    accounts?: AccountSummary[];
    /**
     * Actual close date for the object.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    actual_close_date?: string;
    /**
     * Actual start date for the object.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    actual_start_date?: string;
    /** Mutation purpose and related metadata. */
    mutation_info?: MutationInfoField;
    /** Opportunities from the enhancement. */
    opportunities?: WorkSummary[];
    /**
     * Potential revenue from the enhancement.
     * @format double
     */
    potential_revenue?: number;
    /** Release notes of the enhancement. */
    release_notes?: string;
    /**
     * Rev Score of the enhancement.
     * @format double
     */
    rev_score?: number;
    /** Rev Score tier of the enhancement. */
    rev_score_tier?: EnhancementRevScoreTier;
    /** Describes the current stage of a object. */
    stage_v2?: Stage;
    /** State of the object based upon the stage. */
    state_v2?: string;
    /**
     * Target close date for the object.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    target_close_date?: string;
    /**
     * Target start date for the object.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    target_start_date?: string;
    /** Tickets associated with the enhancement. */
    tickets?: WorkSummary[];
};
/** Rev Score tier of the enhancement. */
export declare enum EnhancementRevScoreTier {
    High = "high",
    Low = "low",
    Medium = "medium"
}
/** enhancement-summary */
export type EnhancementSummary = PartBaseSummary;
/**
 * entitlement
 * Every SKU, will contain a list of entitlements defined under it.
 * Entitlement encapsulates 'HOW MUCH and HOW LONG' aspect of the given
 * UOM ID under specified SKU.
 */
export interface Entitlement {
    /**
     * Aggregation type to be used while aggregating the metering data for the
     * UOM. 1] Sum - sum of all the values for the meter in a given period Ex.
     * { M1:2, M1:4 } => {M1:6} 2] Minimum - min of all the values for the
     * meter in a given period Ex. { M1:2, M1:4 } => {M1:2} 3] Maximum - max
     * of all the values for the meter in a given period Ex. { M1:2, M1:4 } =>
     * {M1:4} 4] Unique Count - Sum of distinct unique dimension observed for
     * the meter in the given period (not considering the data from the
     * previous billing period) Ex. January {M1:{VM:VM0}}, February
     * {M1:{VM:VM1}, M1:{VM:VM2}, M1:{VM:VM1}} => {M1:2} 5] Running Total -
     * Sum of distinct active unique dimension observed for a meter in the
     * given period, taking into consideration the active data from the
     * previous billing cycle Ex. January {M1:{VM:VM0,on}, {M1:{VM:VM1,off}
     * February {M1:{VM:VM2, on}, M1:{VM:VM2, off}, M1:{VM:VM3, on}} => {M1:3}
     * 6] Duration - Sum of distinct active unique dimension duration for a
     * meter in the given period, taking into consideration the active data
     * from the previous month Ex. January15 {M1:{VM:VM0,on, 4}} February15
     * {M1:{VM:VM0,off}, February18 {M1:{VM:VM1,on,5} => M1->
     * 30*4*charge_per_day + 10*5*charge_per_day 7] Latest - consider the
     * latest/last meter in the given period 8] Oldest - consider the
     * oldest/first record in the given period.
     */
    aggregation_type?: EntitlementAggregationType;
    /** Category to group SKU entitlements together. */
    category?: string;
    /**
     * Duration encapsulates the value of the duration and the type of the
     * duration. For example, 1 day where value is '1' and type is 'day'.
     */
    duration?: Duration;
    /** Metric name of the UOM in this entitlement. */
    metric_name?: string;
    /**
     * Quantity, that the entitlement is entitled to use for the specified
     * UOM ID. In case of UOM being a boolean type (like
     * inline_compression, SAML, OAUTH) then quantity will simply be 0/1.
     * @format int32
     */
    quantity?: number;
    /**
     * Scope defines whether the entitlement is at org level or at each user
     * level. Knowing this will help on enforcing them for the given SKU at
     * rev, or at rev user level.
     */
    scope: EntitlementScope;
    uom: UomSummary;
    uom_id: UomSummary;
}
/**
 * Aggregation type to be used while aggregating the metering data for the
 * UOM. 1] Sum - sum of all the values for the meter in a given period Ex.
 * { M1:2, M1:4 } => {M1:6} 2] Minimum - min of all the values for the
 * meter in a given period Ex. { M1:2, M1:4 } => {M1:2} 3] Maximum - max
 * of all the values for the meter in a given period Ex. { M1:2, M1:4 } =>
 * {M1:4} 4] Unique Count - Sum of distinct unique dimension observed for
 * the meter in the given period (not considering the data from the
 * previous billing period) Ex. January {M1:{VM:VM0}}, February
 * {M1:{VM:VM1}, M1:{VM:VM2}, M1:{VM:VM1}} => {M1:2} 5] Running Total -
 * Sum of distinct active unique dimension observed for a meter in the
 * given period, taking into consideration the active data from the
 * previous billing cycle Ex. January {M1:{VM:VM0,on}, {M1:{VM:VM1,off}
 * February {M1:{VM:VM2, on}, M1:{VM:VM2, off}, M1:{VM:VM3, on}} => {M1:3}
 * 6] Duration - Sum of distinct active unique dimension duration for a
 * meter in the given period, taking into consideration the active data
 * from the previous month Ex. January15 {M1:{VM:VM0,on, 4}} February15
 * {M1:{VM:VM0,off}, February18 {M1:{VM:VM1,on,5} => M1->
 * 30*4*charge_per_day + 10*5*charge_per_day 7] Latest - consider the
 * latest/last meter in the given period 8] Oldest - consider the
 * oldest/first record in the given period.
 */
export declare enum EntitlementAggregationType {
    Duration = "duration",
    Latest = "latest",
    Maximum = "maximum",
    Minimum = "minimum",
    Oldest = "oldest",
    RunningTotal = "running_total",
    Sum = "sum",
    UniqueCount = "unique_count"
}
/**
 * Scope defines whether the entitlement is at org level or at each user
 * level. Knowing this will help on enforcing them for the given SKU at
 * rev, or at rev user level.
 */
export declare enum EntitlementScope {
    Org = "org",
    User = "user"
}
/**
 * enum-value
 * Enum Value defines the structure for an enum.
 */
export interface EnumValue {
    /**
     * Unique ID of the enum value. This is immutable.
     * @format int64
     */
    id: number;
    /** Display label of the enum value. This is mutable. */
    label: string;
    /**
     * Order number of the enum value. This is mutable.
     * @format int64
     */
    ordinal: number;
}
/**
 * enum-value-summary
 * Enum Value defines the structure for an enum.
 */
export type EnumValueSummary = object;
/** error */
export interface Error {
    /** The debug error message. */
    debug_message?: string;
    /** Information about the error. */
    message: string;
    /** ID that can be used to reference the error occurrence. */
    reference_id?: string;
    /**
     * The corresponding HTTP status code.
     * @format int32
     */
    status: number;
    /** The error type. */
    type?: string;
}
/** error-bad-request */
export type ErrorBadRequest = ErrorBase & (ErrorBadRequestArtifactAlreadyAttachedToAParent | ErrorBadRequestBadRequest | ErrorBadRequestInvalidApiVersion | ErrorBadRequestInvalidEnumValue | ErrorBadRequestInvalidField | ErrorBadRequestMissingDependency | ErrorBadRequestMissingRequiredField | ErrorBadRequestParseError | ErrorBadRequestStaleSchemaFragments | ErrorBadRequestUnexpectedJsonType | ErrorBadRequestValueNotPermitted) & {
    type: ErrorBadRequestType;
};
/** error-bad-request-artifact-already-attached-to-a-parent */
export interface ErrorBadRequestArtifactAlreadyAttachedToAParent {
    /** The existing parent attached to the artifact. */
    existing_parent: string;
    /** Whether the existing parent is the same as the new parent. */
    is_same: boolean;
}
/** error-bad-request-bad-request */
export type ErrorBadRequestBadRequest = object;
/** error-bad-request-invalid-api-version */
export interface ErrorBadRequestInvalidApiVersion {
    /** The provided API version. */
    value: string;
}
/** error-bad-request-invalid-enum-value */
export interface ErrorBadRequestInvalidEnumValue {
    /** The allowed values for the field. */
    allowed_values: string[];
    /** The field whose enum value is invalid. */
    field_name: string;
    /** The value that was received. */
    value: string;
}
/** error-bad-request-invalid-field */
export interface ErrorBadRequestInvalidField {
    /** The field name that's invalid. */
    field_name: string;
}
/** error-bad-request-missing-dependency */
export interface ErrorBadRequestMissingDependency {
    /** The dependent fields. */
    dependencies?: ErrorBadRequestMissingDependencyDependency[];
    /** The field on which the value depends. */
    dependent_field_name?: string;
    /** The value which needs to be set of the dependent field. */
    dependent_field_value?: string;
    /** The field whose value was received. */
    provided_field_name?: string;
    /** The value that was received. */
    provided_field_value?: string;
}
/** error-bad-request-missing-dependency-dependency */
export interface ErrorBadRequestMissingDependencyDependency {
    /** The dependent field name. */
    field_name: string;
    /** The dependent field value. */
    field_value: string;
}
/** error-bad-request-missing-required-field */
export interface ErrorBadRequestMissingRequiredField {
    /** The missing field's name. */
    field_name: string;
}
/** error-bad-request-parse-error */
export type ErrorBadRequestParseError = object;
/**
 * error-bad-request-stale-schema-fragments
 * Error indicating that the request contained one or more stale schema
 * fragments, which are schema fragments that have been replaced by a
 * newer version and are therefore considered deprecated schema fragments.
 * The caller should refresh and use the latest schema fragments in their
 * request.
 */
export type ErrorBadRequestStaleSchemaFragments = object;
export declare enum ErrorBadRequestType {
    ArtifactAlreadyAttachedToAParent = "artifact_already_attached_to_a_parent",
    BadRequest = "bad_request",
    InvalidApiVersion = "invalid_api_version",
    InvalidEnumValue = "invalid_enum_value",
    InvalidField = "invalid_field",
    MissingDependency = "missing_dependency",
    MissingRequiredField = "missing_required_field",
    ParseError = "parse_error",
    StaleSchemaFragments = "stale_schema_fragments",
    UnexpectedJsonType = "unexpected_json_type",
    ValueNotPermitted = "value_not_permitted"
}
/** error-bad-request-unexpected-json-type */
export interface ErrorBadRequestUnexpectedJsonType {
    actual: ErrorBadRequestUnexpectedJsonTypeType;
    expected: ErrorBadRequestUnexpectedJsonTypeType;
    /** The field name that's invalid. */
    field_name: string;
}
export declare enum ErrorBadRequestUnexpectedJsonTypeType {
    Array = "array",
    Bool = "bool",
    Null = "null",
    Number = "number",
    Object = "object",
    String = "string"
}
/** error-bad-request-value-not-permitted */
export interface ErrorBadRequestValueNotPermitted {
    /** The allowed values for the field. */
    allowed_values?: string[];
    /** The field whose value is not permitted. */
    field_name: string;
    /** The reason the value isn't permitted. */
    reason?: string;
}
/** error-base */
export interface ErrorBase {
    /** The debug message associated with the error. */
    debug_message?: string;
    /** Error detail information. */
    detail?: string;
    /** The message associated with the error. */
    message?: string;
}
/** error-conflict */
export type ErrorConflict = ErrorBase & ErrorConflictConflict & {
    type: ErrorConflictType;
};
/** error-conflict-conflict */
export type ErrorConflictConflict = object;
export declare enum ErrorConflictType {
    Conflict = "conflict"
}
/** error-forbidden */
export type ErrorForbidden = ErrorBase & ErrorForbiddenForbidden & {
    type: ErrorForbiddenType;
};
/** error-forbidden-forbidden */
export type ErrorForbiddenForbidden = object;
export declare enum ErrorForbiddenType {
    Forbidden = "forbidden"
}
/** error-internal-server-error */
export type ErrorInternalServerError = ErrorBase & ErrorInternalServerErrorInternalError & {
    /**
     * A unique ID that's generated for the error that can be used for
     * inquiry.
     */
    reference_id?: string;
    type: ErrorInternalServerErrorType;
};
/** error-internal-server-error-internal-error */
export type ErrorInternalServerErrorInternalError = object;
export declare enum ErrorInternalServerErrorType {
    InternalError = "internal_error"
}
/** error-not-found */
export type ErrorNotFound = ErrorBase & ErrorNotFoundNotFound & {
    type: ErrorNotFoundType;
};
/** error-not-found-not-found */
export type ErrorNotFoundNotFound = object;
export declare enum ErrorNotFoundType {
    NotFound = "not_found"
}
/** error-service-unavailable */
export type ErrorServiceUnavailable = ErrorBase & ErrorServiceUnavailableServiceUnavailable & {
    type: ErrorServiceUnavailableType;
};
/** error-service-unavailable-service-unavailable */
export type ErrorServiceUnavailableServiceUnavailable = object;
export declare enum ErrorServiceUnavailableType {
    ServiceUnavailable = "service_unavailable"
}
/** error-too-many-requests */
export type ErrorTooManyRequests = ErrorBase & ErrorTooManyRequestsTooManyRequests & {
    /**
     * The number of seconds after which the client should retry.
     * @format int64
     */
    retry_after?: number;
    type: ErrorTooManyRequestsType;
};
/** error-too-many-requests-too-many-requests */
export type ErrorTooManyRequestsTooManyRequests = object;
export declare enum ErrorTooManyRequestsType {
    TooManyRequests = "too_many_requests"
}
/** error-unauthorized */
export type ErrorUnauthorized = ErrorBase & ErrorUnauthorizedUnauthenticated & {
    type: ErrorUnauthorizedType;
};
export declare enum ErrorUnauthorizedType {
    Unauthenticated = "unauthenticated"
}
/** error-unauthorized-unauthenticated */
export type ErrorUnauthorizedUnauthenticated = object;
/**
 * evaluate-sentiment-request
 * Evaluate Sentiment request.
 */
export interface EvaluateSentimentRequest {
    /** The ID of the object to evaluate sentiment for. */
    object: string;
}
/**
 * evaluate-sentiment-response
 * Evaluate Sentiment Response.
 */
export interface EvaluateSentimentResponse {
    /** The justification for the sentiment evaluated. */
    justification?: string;
    /** Sentiment value. */
    sentiment: EvaluateSentimentResponseSentiment;
}
/** Sentiment value. */
export declare enum EvaluateSentimentResponseSentiment {
    Delighted = "delighted",
    Frustrated = "frustrated",
    Happy = "happy",
    Neutral = "neutral",
    Unhappy = "unhappy",
    Unknown = "unknown"
}
/** event-account-created */
export interface EventAccountCreated {
    account: Account;
}
/** event-account-deleted */
export interface EventAccountDeleted {
    /**
     * The ID of the account that was deleted.
     * @example "ACC-12345"
     */
    id: string;
}
/** event-account-updated */
export interface EventAccountUpdated {
    account: Account;
    old_account?: Account;
}
/**
 * event-activity
 * An event activity.
 */
export interface EventActivity {
    change_event?: TimelineChangeEvent;
}
/**
 * event-annotated
 * Base event for annotated type event.
 */
export interface EventAnnotated {
    /** Event for account RevOrg operation. */
    account_rev_org_operation?: AccountRevOrgOperationEvent;
    /** Microflow action external annotated event. */
    microflow_action?: MicroflowActionEvent;
    /** Event for part merging. */
    part_merge?: PartMergeEvent;
    /** Event for part promotion. */
    part_promote?: PartPromoteEvent;
    /** The type of the annotated event. */
    type?: string;
}
/** event-article-created */
export interface EventArticleCreated {
    article: Article;
}
/** event-article-deleted */
export interface EventArticleDeleted {
    /**
     * The ID of the article that was deleted.
     * @example "ARTICLE-12345"
     */
    id: string;
}
/** event-article-updated */
export interface EventArticleUpdated {
    article: Article;
    old_article?: Article;
}
/** event-artifact-created */
export interface EventArtifactCreated {
    artifact: Artifact;
}
/** event-artifact-deleted */
export interface EventArtifactDeleted {
    /**
     * The ID of the artifact that was deleted.
     * @example "ARTIFACT-12345"
     */
    id: string;
}
/** event-artifact-updated */
export interface EventArtifactUpdated {
    artifact: Artifact;
    old_artifact?: Artifact;
}
/** event-atom-notify */
export interface EventAtomNotify {
    event?: EventAtomNotifyEventValue;
    /** The ID of the object that's notified. */
    id?: string;
    type?: AtomType;
}
export declare enum EventAtomNotifyEventValue {
    Created = "created",
    Deleted = "deleted",
    Updated = "updated"
}
/** event-chat-created */
export interface EventChatCreated {
    chat: Chat;
}
/** event-chat-deleted */
export interface EventChatDeleted {
    /** The ID of the chat that was deleted. */
    id: string;
}
/** event-chat-updated */
export interface EventChatUpdated {
    chat: Chat;
    old_chat?: Chat;
}
/** event-conversation-created */
export interface EventConversationCreated {
    conversation: Conversation;
}
/** event-conversation-deleted */
export interface EventConversationDeleted {
    /** The ID of the conversation that was deleted. */
    id: string;
}
/** event-conversation-updated */
export interface EventConversationUpdated {
    conversation: Conversation;
    old_conversation?: Conversation;
}
/**
 * event-created
 * A creation event.
 */
export interface EventCreated {
    object?: AtomSummary;
}
/** event-credit-created */
export interface EventCreditCreated {
    credit: Credit;
}
/** event-credit-deleted */
export interface EventCreditDeleted {
    /** The ID of the credit that was deleted. */
    id: string;
}
/** event-credit-updated */
export interface EventCreditUpdated {
    credit: Credit;
    old_credit?: Credit;
}
/** event-custom-schema-fragment-created */
export interface EventCustomSchemaFragmentCreated {
    custom_schema_fragment: CustomSchemaFragment;
}
/** event-custom-schema-fragment-deleted */
export interface EventCustomSchemaFragmentDeleted {
    /** The ID of the custom schema fragment that was deleted. */
    id: string;
}
/** event-custom-schema-fragment-updated */
export interface EventCustomSchemaFragmentUpdated {
    custom_schema_fragment: CustomSchemaFragment;
    old_custom_schema_fragment?: CustomSchemaFragment;
}
/** event-custom-stage-created */
export interface EventCustomStageCreated {
    custom_stage: CustomStage;
}
/** event-custom-stage-updated */
export interface EventCustomStageUpdated {
    custom_stage: CustomStage;
    old_custom_stage?: CustomStage;
}
/** event-custom-state-created */
export interface EventCustomStateCreated {
    custom_state: CustomState;
}
/** event-custom-state-updated */
export interface EventCustomStateUpdated {
    custom_state: CustomState;
    old_custom_state?: CustomState;
}
/**
 * event-deleted
 * A deletion event.
 */
export interface EventDeleted {
    /** The ID correspending to the deleted object. */
    object_id?: string;
}
/** event-dev-user-created */
export interface EventDevUserCreated {
    dev_user: DevUser;
}
/** event-dev-user-deleted */
export interface EventDevUserDeleted {
    /** The ID of the Dev user that was deleted. */
    id: string;
}
/** event-dev-user-updated */
export interface EventDevUserUpdated {
    dev_user: DevUser;
    old_dev_user?: DevUser;
}
/** event-engagement-created */
export interface EventEngagementCreated {
    engagement: Engagement;
}
/** event-engagement-deleted */
export interface EventEngagementDeleted {
    /** The ID of the engagement that was deleted. */
    id: string;
}
/** event-engagement-updated */
export interface EventEngagementUpdated {
    engagement: Engagement;
    old_engagement?: Engagement;
}
/** event-external-sync-unit-discovered */
export interface EventExternalSyncUnitDiscovered {
    /** The discovered external sync units. */
    external_sync_units: ExternalSyncUnit[];
}
/** event-flow-created */
export interface EventFlowCreated {
    flow: Flow;
}
/** event-flow-deleted */
export interface EventFlowDeleted {
    /** The ID of the flow that was deleted. */
    id: string;
}
/** event-flow-updated */
export interface EventFlowUpdated {
    flow: Flow;
    old_flow?: Flow;
}
/** event-incident-created */
export interface EventIncidentCreated {
    incident: Incident;
}
/** event-incident-deleted */
export interface EventIncidentDeleted {
    /** The ID of the incident that was deleted. */
    id: string;
}
/** event-incident-updated */
export interface EventIncidentUpdated {
    incident: Incident;
    old_incident?: Incident;
}
/** event-invoice-created */
export interface EventInvoiceCreated {
    invoice: Invoice;
}
/** event-invoice-deleted */
export interface EventInvoiceDeleted {
    /** The ID of the invoice that was deleted. */
    id: string;
}
/** event-invoice-updated */
export interface EventInvoiceUpdated {
    invoice: Invoice;
    old_invoice?: Invoice;
}
/** event-job-created */
export interface EventJobCreated {
    job: Job;
}
/** event-job-deleted */
export interface EventJobDeleted {
    /** The ID of the job that was deleted. */
    id: string;
}
/** event-job-updated */
export interface EventJobUpdated {
    job: Job;
    old_job?: Job;
}
/** event-link-created */
export interface EventLinkCreated {
    link: Link;
}
/** event-link-deleted */
export interface EventLinkDeleted {
    /** The ID of the link that was deleted. */
    id: string;
}
/** event-link-updated */
export interface EventLinkUpdated {
    link: Link;
    old_link?: Link;
}
/**
 * event-linked
 * A linking event.
 */
export interface EventLinked {
    link?: LinkSummary;
}
/** event-marketplace-item-created */
export interface EventMarketplaceItemCreated {
    marketplace_item: MarketplaceItem;
}
/** event-marketplace-item-deleted */
export interface EventMarketplaceItemDeleted {
    /** The ID of the marketplace item that was deleted. */
    id: string;
}
/** event-marketplace-item-updated */
export interface EventMarketplaceItemUpdated {
    marketplace_item: MarketplaceItem;
    old_marketplace_item?: MarketplaceItem;
}
/** event-meeting-created */
export interface EventMeetingCreated {
    meeting: Meeting;
}
/** event-meeting-deleted */
export interface EventMeetingDeleted {
    /** The ID of the meeting that was deleted. */
    id: string;
}
/** event-meeting-updated */
export interface EventMeetingUpdated {
    meeting: Meeting;
    old_meeting?: Meeting;
}
/** event-notification-created */
export interface EventNotificationCreated {
    notification: Notification;
}
/** event-notification-deleted */
export interface EventNotificationDeleted {
    /** The ID of the notification that was deleted. */
    id: string;
}
/** event-notification-updated */
export interface EventNotificationUpdated {
    notification: Notification;
    old_notification?: Notification;
}
/** event-part-created */
export interface EventPartCreated {
    part: Part;
}
/** event-part-deleted */
export interface EventPartDeleted {
    /**
     * The ID of the part that was deleted.
     * @example "PROD-12345"
     */
    id: string;
}
/** event-part-updated */
export interface EventPartUpdated {
    old_part?: Part;
    part: Part;
}
/** event-quote-created */
export interface EventQuoteCreated {
    quote: Quote;
}
/** event-quote-deleted */
export interface EventQuoteDeleted {
    /** The ID of the quote that was deleted. */
    id: string;
}
/** event-quote-updated */
export interface EventQuoteUpdated {
    old_quote?: Quote;
    quote: Quote;
}
/** event-rev-org-created */
export interface EventRevOrgCreated {
    rev_org: RevOrg;
}
/** event-rev-org-deleted */
export interface EventRevOrgDeleted {
    /**
     * The ID of the Rev organization that was deleted.
     * @example "REV-AbCdEfGh"
     */
    id: string;
}
/** event-rev-org-updated */
export interface EventRevOrgUpdated {
    old_rev_org?: RevOrg;
    rev_org: RevOrg;
}
/** event-rev-user-created */
export interface EventRevUserCreated {
    rev_user: RevUser;
}
/** event-rev-user-deleted */
export interface EventRevUserDeleted {
    /** The ID of the Rev user that was deleted. */
    id: string;
}
/** event-rev-user-updated */
export interface EventRevUserUpdated {
    old_rev_user?: RevUser;
    rev_user: RevUser;
}
/** event-sla-tracker-created */
export interface EventSlaTrackerCreated {
    sla_tracker: SlaTracker;
}
/** event-sla-tracker-deleted */
export interface EventSlaTrackerDeleted {
    /** The ID of the SLA tracker that was deleted. */
    id: string;
}
/** event-sla-tracker-updated */
export interface EventSlaTrackerUpdated {
    old_sla_tracker?: SlaTracker;
    sla_tracker: SlaTracker;
}
/** event-snap-in-created */
export interface EventSnapInCreated {
    snap_in: SnapIn;
}
/** event-snap-in-deleted */
export interface EventSnapInDeleted {
    /** The ID of the snap-in that was deleted. */
    id: string;
}
/** event-snap-in-updated */
export interface EventSnapInUpdated {
    old_snap_in?: SnapIn;
    snap_in: SnapIn;
}
/** event-source */
export type EventSource = AtomBase & {
    /** The keyring connected to the event-source. */
    auth_connection_id?: string;
    /**
     * Configuration of the event source. Fields depend on the event
     * source type.
     */
    config?: object;
    /** Policy instance enables to use a policy defined in the source code. */
    context_policy?: PolicyInstance;
    /**
     * Stores the db for the event source as a JSON string. This db stores
     * things like webhook id, secret etc. and is hidden from user.
     */
    db_string?: string;
    /**
     * Any other metadata associated with the event source we might want
     * to show in UI.
     */
    metadata?: object;
    /** Name of the event source. */
    name?: string;
    /** Policy instance enables to use a policy defined in the source code. */
    run_policy?: PolicyInstance;
    /**
     * The secret corresponding to the event source. Only exposed to user
     * if the user needs it while registration.
     */
    secret?: string;
    /** Instructions for setting up the event source. */
    setup_instructions?: EventSourceSetupInstructions;
    /** ID of the source snap-in which created this event source. */
    source_id?: string;
    /**
     * Status of the event source. Note that paused/blocked event sources
     * return NotFound error on triggering.
     */
    status?: EventSourceStatus;
    /**
     * id of the ticker task which is responsible for scheduling this
     * event. Relevant for timer-based sources.
     */
    trigger_task_id?: string;
    /**
     * The URL to trigger the event source. Valid only for HTTP
     * based-event sources. This URL supports both GET and POST requests.
     */
    trigger_url?: string;
    /**
     * type describes which event source is being instantiated from list
     * of event sources we support. It would contain values like
     * pd/github/new-or-updated-pull-request, etc.
     */
    type?: string;
};
/**
 * event-source-config-template
 * Stores the definition for an event source configuration template.
 */
export interface EventSourceConfigTemplate {
    /** Template body that is populated based on the inputs of the snap-in. */
    template?: string;
    /** Parser type for the template. */
    type?: EventSourceConfigTemplateType;
}
/** Parser type for the template. */
export declare enum EventSourceConfigTemplateType {
    Rego = "rego"
}
/** event-source-create-request */
export interface EventSourceCreateRequest {
    /** The keyring connected to the event-source. */
    auth_connection_id?: string;
    /**
     * Configuration of the event source. Fields depend on the event
     * source type.
     */
    config?: object;
    context_policy?: CreatePolicyInstance;
    /** Name of the event source */
    name?: string;
    run_policy?: CreatePolicyInstance;
    setup_instructions?: CreateEventSourceSetupInstructions;
    /** ID of the source snap-in which created this event source. */
    source_id?: string;
    /**
     * Status of the event source. Note that paused/blocked event sources
     * return NotFound error on triggering.
     */
    status?: EventSourceStatus;
    /**
     * type describes which event source is being instantiated from list
     * of event sources we support. It would contain values like
     * pd/github/new-or-updated-pull-request, etc.
     */
    type: string;
}
/** event-source-create-response */
export interface EventSourceCreateResponse {
    event_source: EventSource;
}
/** event-source-delete-request */
export interface EventSourceDeleteRequest {
    /** The event source's ID. */
    id: string;
    /** Flag to indicate if the deactivate errors must be ignored. */
    ignore_deactivate_error?: boolean;
}
/** event-source-get-request */
export interface EventSourceGetRequest {
    /** The event source's ID. */
    id: string;
}
/** event-source-get-response */
export interface EventSourceGetResponse {
    event_source: EventSource;
}
/**
 * event-source-setup-instructions
 * Instructions for setting up the event source.
 */
export interface EventSourceSetupInstructions {
    /** Content of the instructions. */
    content?: string;
    /** Format in which content is defined. */
    format?: InstructionsFormat;
}
/**
 * Status of the event source. Note that paused/blocked event sources
 * return NotFound error on triggering.
 */
export declare enum EventSourceStatus {
    Active = "active",
    Blocked = "blocked",
    Paused = "paused"
}
/** event-source-summary */
export type EventSourceSummary = AtomBaseSummary;
/** event-source-update-request */
export interface EventSourceUpdateRequest {
    /** The keyring connected to the event-source. */
    auth_connection_id?: string;
    /**
     * Configuration of the event source. Fields depend on the event
     * source type.
     */
    config?: object;
    context_policy?: UpdatePolicyInstance;
    /** The event source's ID. */
    id: string;
    /** Name of the event source */
    name?: string;
    run_policy?: UpdatePolicyInstance;
    setup_instructions?: UpdateEventSourceSetupInstructions;
    /** ID of the source snap-in which created this event source. */
    source_id?: string;
    /**
     * Status of the event source. Note that paused/blocked event sources
     * return NotFound error on triggering.
     */
    status?: EventSourceStatus;
}
/** event-source-update-response */
export interface EventSourceUpdateResponse {
    event_source: EventSource;
}
/** event-sources-delete-scheduled-event-request */
export interface EventSourcesDeleteScheduledEventRequest {
    /** The event key for the event which we want to delete. */
    event_key: string;
    /** The event source's ID. */
    id: string;
}
/** event-sources-list-request */
export interface EventSourcesListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Fields to sort the event sources by and the direction to sort them. */
    sort_by?: string[];
    /** ID of the source snap-in which created this event source. */
    source_id?: string[];
    /**
     * type describes which event source is being instantiated from list
     * of event sources we support. It would contain values like
     * pd/github/new-or-updated-pull-request, etc.
     */
    type?: string[];
}
/** event-sources-list-response */
export interface EventSourcesListResponse {
    /** List of the event sources. */
    event_sources: EventSource[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/** event-sources-schedule-event-request */
export interface EventSourcesScheduleEventRequest {
    /**
     * A unique key for this event (scoped to an event source) used for
     * updating/getting/deleting scheduled events.
     */
    event_key?: string;
    /** The type of the event. */
    event_type: string;
    /** The event source's ID. */
    id: string;
    /**
     * The raw payload of the event.
     * @format byte
     */
    payload: string;
    /**
     * The timestamp at which the event should be published. The event is
     * guaranteed to be published after this. If omitted, the event is
     * published immediately.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    publish_at?: string;
    /**
     * The timestamp (milliseconds since Unix epoch) at which the event
     * should be published. The event is guaranteed to be published after
     * this. If omitted, the event is published immediately.
     * @deprecated
     * @format int64
     */
    publish_timestamp?: number;
    /**
     * Whether or not to update an existing scheduled event with the same
     * event key. If this is false, and an event is already scheduled with
     * the same event key, then HTTP 409 Conflict is returned.
     */
    update_if_exists?: boolean;
}
/** event-sources-schedule-event-response */
export interface EventSourcesScheduleEventResponse {
    /**
     * The event key for this event. Auto-generated if the caller doesn't
     * specify the event key. This may be empty if the event was published
     * immediately.
     */
    event_key?: string;
}
/** event-stage-diagram-created */
export interface EventStageDiagramCreated {
    stage_diagram: StageDiagram;
}
/** event-stage-diagram-updated */
export interface EventStageDiagramUpdated {
    old_stage_diagram?: StageDiagram;
    stage_diagram: StageDiagram;
}
/** event-stock-schema-fragment-updated */
export interface EventStockSchemaFragmentUpdated {
    old_stock_schema_fragment?: StockSchemaFragment;
    stock_schema_fragment: StockSchemaFragment;
}
/** event-subscribe */
export interface EventSubscribe {
    /** The event subscriptions that were added. */
    add?: string[];
    /**
     * The ID provided in the subscribe action.
     * @minLength 1
     */
    id?: string;
    /** The event subscriptions that were removed. */
    remove?: string[];
}
/** event-survey-response-created */
export interface EventSurveyResponseCreated {
    survey_response: SurveyResponse;
}
/** event-survey-response-deleted */
export interface EventSurveyResponseDeleted {
    /** The ID of the survey response that was deleted. */
    id: string;
}
/** event-survey-response-updated */
export interface EventSurveyResponseUpdated {
    old_survey_response?: SurveyResponse;
    survey_response: SurveyResponse;
}
/** event-sync-unit-created */
export interface EventSyncUnitCreated {
    sync_unit: SyncUnit;
}
/** event-sync-unit-deleted */
export interface EventSyncUnitDeleted {
    /** The ID of the sync unit that was deleted. */
    id: string;
}
/** event-sync-unit-updated */
export interface EventSyncUnitUpdated {
    old_sync_unit?: SyncUnit;
    sync_unit: SyncUnit;
}
/** event-tag-created */
export interface EventTagCreated {
    tag: Tag;
}
/** event-tag-deleted */
export interface EventTagDeleted {
    /**
     * The ID of the tag that was deleted.
     * @example "TAG-12345"
     */
    id: string;
}
/** event-tag-updated */
export interface EventTagUpdated {
    old_tag?: Tag;
    tag: Tag;
}
/** event-timeline-entry-created */
export interface EventTimelineEntryCreated {
    entry: TimelineEntry;
}
/** event-timeline-entry-deleted */
export interface EventTimelineEntryDeleted {
    /**
     * The ID of the timeline entry that was deleted.
     * @example "don:core:<partition>:devo/<dev-org-id>:ticket/123:timeline_event/<timeline-event-id>"
     */
    id: string;
}
/** event-timeline-entry-updated */
export interface EventTimelineEntryUpdated {
    entry: TimelineEntry;
    old_entry?: TimelineEntry;
}
/**
 * event-updated
 * An update event.
 */
export interface EventUpdated {
    /** List of field changes. */
    field_deltas?: FieldDelta[];
    /** Type of DevRev object. */
    object_type?: string;
}
/** event-user-presence */
export interface EventUserPresence {
    /**
     * The ID of the user whose presence is updated.
     * @example "DEVU-12345"
     */
    id: string;
    presence?: UserPresenceValue;
}
/** event-user-typing */
export interface EventUserTyping {
    /**
     * The collection(s) that the typing event belongs to.
     * @maxItems 2
     */
    collections?: TimelineEntryCollection[];
    /** The labels associated with data that's being typed. */
    labels?: string[];
    /** The ID of the object that the user is typing in the context of. */
    object: string;
    /** Display panels for the typing event. */
    panels?: TimelineEntryPanel[];
    timeline_comment_draft?: EventUserTypingTimelineCommentDraft;
    user: UserSummary;
    /**
     * The visibility of the entry. If 'private', then the entry is only
     * visible to the creator, 'internal' is visible with the Dev
     * organization, 'external' is visible to the Dev organzation and Rev
     * users, and 'public' is visible to all. If not set, then the default
     * visibility is 'external'.
     */
    visibility?: TimelineEntryVisibility;
}
/** event-user-typing-timeline-comment-draft */
export interface EventUserTypingTimelineCommentDraft {
    /** The artifacts for the comment. */
    artifacts?: ArtifactSummary[];
    /** The comment's body. This may be empty. */
    body: string;
    /** The type of the body to use for the comment. */
    body_type?: TimelineCommentBodyType;
    /** The objects referenced in the comment. */
    references?: AtomSummary[];
    /** Snap Kit Body of the comment. */
    snap_kit_body?: TimelineSnapKitBody;
}
/** event-vista-created */
export interface EventVistaCreated {
    /** Represents a collection of DevRev objects. */
    vista: Vista;
}
/** event-vista-deleted */
export interface EventVistaDeleted {
    /**
     * The ID of the vista that was deleted.
     * @example "VISTA-12345"
     */
    id: string;
}
/** event-vista-group-item-created */
export interface EventVistaGroupItemCreated {
    /** Vista group item. */
    vista_group_item: VistaGroupItem;
}
/** event-vista-group-item-deleted */
export interface EventVistaGroupItemDeleted {
    /** The ID of the vista group item that was deleted. */
    id: string;
}
/** event-vista-group-item-updated */
export interface EventVistaGroupItemUpdated {
    /** Vista group item. */
    old_vista_group_item?: VistaGroupItem;
    /** Vista group item. */
    vista_group_item: VistaGroupItem;
}
/** event-vista-updated */
export interface EventVistaUpdated {
    /** Represents a collection of DevRev objects. */
    old_vista?: Vista;
    /** Represents a collection of DevRev objects. */
    vista: Vista;
}
/** event-webhook-created */
export interface EventWebhookCreated {
    webhook: Webhook;
}
/** event-webhook-deleted */
export interface EventWebhookDeleted {
    /**
     * The ID of the webhook that was deleted.
     * @example "don:integration:<partition>:devo/<dev-org-id>:webhook/<webhook-id>"
     */
    id: string;
}
/** event-webhook-updated */
export interface EventWebhookUpdated {
    old_webhook?: Webhook;
    webhook: Webhook;
}
/** event-work-created */
export interface EventWorkCreated {
    work: Work;
}
/** event-work-deleted */
export interface EventWorkDeleted {
    /**
     * The ID of the work that was deleted.
     * @example "ISS-12345"
     */
    id: string;
}
/** event-work-updated */
export interface EventWorkUpdated {
    old_work?: Work;
    work: Work;
}
/**
 * executable-notification-action
 * Executable action to execute directly through notification.
 */
export interface ExecutableNotificationAction {
    /** The SnapKit body to be rendered and executed. */
    snap_kit_body?: object;
}
/** execute-snap-kit-action-request */
export interface ExecuteSnapKitActionRequest {
    /** List of actions triggered in the request. */
    actions: SnapKitActionRequest[];
    /**
     * Parent ID to which snap kit body belongs to.
     * @example "don:core:<partition>:devo/<dev-org-id>:ticket/123:timeline_event/<timeline-event-id>"
     */
    parent?: string;
    /** Snap Kit Body of the comment. */
    snap_kit_body: TimelineSnapKitBody;
}
/** execute-snap-kit-action-response */
export interface ExecuteSnapKitActionResponse {
    /** Output SnapKit body. */
    snap_kit_body?: object;
}
/** experience-flags-get-request */
export type ExperienceFlagsGetRequest = object;
/** experience-flags-get-response */
export interface ExperienceFlagsGetResponse {
    /**
     * Whether DevOrg on specific environment can create migration units
     * and see airdrop imports tab.
     */
    airdrop_imports_enabled?: boolean;
    /** Whether Airdrop periodic sync is enabled. */
    airdrop_periodic_sync_enabled?: boolean;
    /**
     * Whether UI should offer for selected source systems the ability to
     * decide between importing as different work types
     */
    airdrop_target_work_type_selection_enabled?: boolean;
    /** Whether the artifacts v2 feature is enabled. */
    artifacts_v2_enabled?: boolean;
    /** Whether creating AWS connections is enabled in the UI. */
    aws_connection_enabled?: boolean;
    /** Whether the bitbucket connection feature is enabled. */
    bitbucket_connection_enabled?: boolean;
    /** Whether capture phone number workflow is enabled. */
    capture_phone_number_enabled?: boolean;
    /** Whether Cellarman's capabilities API uses Archon feature flags */
    cellarman_capabilities_enabled?: boolean;
    /** Whether the clearbit connection feature is enabled. */
    clearbit_connection_enabled?: boolean;
    /** Whether conversation translation is enabled. */
    conversation_translation_enabled?: boolean;
    /** Whether creation of default objects during onboarding is enabled. */
    default_objects_creation_enabled?: boolean;
    /** Whether default vistas are enabled or not. */
    default_vista_enabled?: boolean;
    /** Whether Dev organization creation is allowed. */
    dev_org_create_allowed?: boolean;
    /** Whether the devorg environment can be set. */
    devorg_environment_enabled?: boolean;
    /** Whether the discord connection feature is enabled. */
    discord_connection_enabled?: boolean;
    /**
     * Whether the domain based access option is available to the user on
     * the basis of email.
     */
    domain_based_access_enabled?: boolean;
    /** Whether to enable the domain based join organization workflow. */
    domain_based_join_workflow_enabled?: boolean;
    /** Whether MFZ is enabled. */
    enable_mfz?: boolean;
    /** Whether MFZ permissions are enabled. */
    enable_mfz_permissions?: boolean;
    /** The exported flags. */
    flags?: object;
    /** Whether MFZ is enabled for flows object type. */
    flow_mfz_enabled?: boolean;
    /** Whether the cellarman api for connections is enabled for flows. */
    flows_connections_v2_enabled?: boolean;
    /** Whether flows are enabled or not. */
    flows_enabled?: boolean;
    /** Whether to load default profile pic as initials */
    initials_profile_pic_enabled?: boolean;
    /** Whether the intercom connection feature is enabled. */
    intercom_connection_enabled?: boolean;
    /** Whether the invitation workflow is enabled. */
    invitation_enabled?: boolean;
    /** Whether creating Kubernetes connections is enabled in the UI. */
    kubernetes_connection_enabled?: boolean;
    /** Whether the link devuser to profile workflow is enabled. */
    link_profile_enabled?: boolean;
    /** Whether to use lobby of conversation object type. */
    lobby_conversation_type_enabled?: boolean;
    /**
     * Login sequence that's used to force re-logins.
     * @format int64
     */
    login_sequence?: number;
    /** The maintenance message that should be displayed to the user. */
    maintenance_message?: string;
    /** Whether to enable the merge devuser workflow. */
    merge_devuser_enabled?: boolean;
    /** Whether Mutate Parts events in timeline is enabled. */
    mutate_timeline_events_enabled?: boolean;
    /** New user experience (NUX) workflow information. */
    nux_workflow?: object;
    /** Whether the part hierarchy will be deleted */
    part_archive_hierarchy_enabled?: boolean;
    /** Whether parts discovery is enabled in the UI. */
    parts_discovery_enabled?: boolean;
    /** Whether password-less logins are enabled or not. */
    passwordless_enabled?: boolean;
    /** Whether plug domain input is enabled */
    plug_domain_input_enabled?: boolean;
    /** Whether new plug platform is integrated in devrev product */
    plug_platform_integration_enabled?: boolean;
    /** Whether new plug platform setup setting is enabled. */
    plug_platform_setup_setting_enabled?: boolean;
    /** Whether the search articles feature on plug widget is enabled */
    plug_widget_articles_search_enabled?: boolean;
    /** Whether the rev user notifications on plug widget are enabled */
    plug_widget_rev_user_notifications_enabled?: boolean;
    /** Whether to publish post login events to blubox. */
    publish_post_login_event?: boolean;
    /** Whether push notifications are enabled. */
    push_notifications_enabled?: boolean;
    /** Whether this devOrg is for sandbox/demo use or not. */
    sandbox_devorg?: boolean;
    /** Whether the sendgrid connection feature is enabled. */
    sendgrid_connection_enabled?: boolean;
    /** Weather the plans page for pricing is enabled. */
    service_plan_details_enabled?: boolean;
    /** Whether masking for the session replay feature is enabled. */
    session_replay_masking_enabled?: boolean;
    /** Whether the session replays feature is enabled. */
    session_replays_enabled?: boolean;
    /** Whether stage v2 is enabled. */
    stage_v2_enabled?: boolean;
    /** Whether to enable sts token based authentication in api requests. */
    sts_token_enabled?: boolean;
    /** Whether Accounts is enabled */
    ui_accounts_enabled?: boolean;
    /** Whether Account global context  is enabled on the UI. */
    ui_accounts_search_enabled?: boolean;
    /** Whether Analytics is enabled */
    ui_analytics_enabled?: boolean;
    /**
     * Threshold below which async clustering should enabled in UI.
     * @format int64
     */
    ui_async_clustering_threshold?: number;
    /** Whether async ticket clustering is enabled on the UI */
    ui_async_ticket_clustering_enabled?: boolean;
    /** Whether Build Insights is enabled. */
    ui_build_insights_enabled?: boolean;
    /** Whether creation of enhancement from bulk issues/tickets enabled. */
    ui_bulk_create_enhancement_enabled?: boolean;
    /** Whether Bulk Import Revorgs is enabled in the UI. */
    ui_bulk_import_revorgs_enabled?: boolean;
    /**
     * Cache clear sequence that's used to force clear UI cache and
     * reload.
     * @format int64
     */
    ui_cache_clear_sequence?: number;
    /**
     * Threshold below which clustering should enabled in UI.
     * @format int64
     */
    ui_clustering_threshold?: number;
    /** Whether commerce is enabled or not. */
    ui_commerce_enabled?: boolean;
    /**
     * Whether connections should use popup for connections requiring
     * redirects.
     */
    ui_connections_popup_enabled?: boolean;
    /** Whether the credits dev org workflow is enabled in UI. */
    ui_credits_flow_enabled?: boolean;
    /** Whether Custom Emojis is enabled on the UI. */
    ui_custom_emojis_enabled?: boolean;
    /** Whether new custom filter is enabled on the UI. */
    ui_custom_filters_enabled?: boolean;
    /** Whether custom groups are enabled */
    ui_custom_groups_enabled?: boolean;
    /** Whether custom range filter for date is enabled on the UI */
    ui_custom_range_filter_enabled?: boolean;
    /** Whether Custom Stages are enabled on the UI. */
    ui_custom_stages_enabled?: boolean;
    /** Whether customization admin ui is enabled or not. */
    ui_customization_admin_enabled?: boolean;
    /** Whether customization is enabled. */
    ui_customization_enabled?: boolean;
    /** Whether delete devOrg feature is enabled. */
    ui_delete_dev_org_enabled?: boolean;
    /** Whether artifacts v2 based dev-org logo enabled. */
    ui_dev_org_logo_v2_enabled?: boolean;
    /** Whether Dev user status is enabled */
    ui_dev_user_status_enabled?: boolean;
    /** Whether the DevRev PAT connection is enabled. */
    ui_devrev_pat_connection_enabled?: boolean;
    /** Whether discovery page is enabled on the UI */
    ui_discovery_page_enabled?: boolean;
    /** Whether domain verification connection is enabled. */
    ui_domain_verification_connection_enabled?: boolean;
    /** Whether engagements are enabled */
    ui_engagement_enabled?: boolean;
    /** Whether external comments are enabled on tickets on  the UI. */
    ui_external_comments_on_tickets_enabled?: boolean;
    /**
     * Whether event source selection/creation is enabled in flows
     * configuration on the UI
     */
    ui_flows_config_event_source_enabled?: boolean;
    /** Whether the Flows editor feature is enabled. */
    ui_flows_editor_enabled?: boolean;
    /** Whether event source V2 API is enabled on the UI. */
    ui_flows_event_source_v2_enabled?: boolean;
    /** Whether grouped work vistas is enabled on the UI. */
    ui_grouped_work_vistas_enabled?: boolean;
    /** Whether GrowthOS is enabled. */
    ui_growth_os_enabled?: boolean;
    /** Whether hiding of rev-orgs is enabled on the UI. */
    ui_hide_rev_orgs_enabled?: boolean;
    /** Whether huddle in conversations is enabled in UI. */
    ui_huddle_conv_enabled?: boolean;
    /** Whether the huddle feature is enabled in UI. */
    ui_huddle_enabled?: boolean;
    /** Whether commerce admin invoices flow is enabled or not. */
    ui_invoices_flow_enabled?: boolean;
    /** Whether knowledge v2 is enabled */
    ui_knowledge_v2_enabled?: boolean;
    /** Whether to enable the light mode. */
    ui_light_mode_enabled?: boolean;
    /** Whether to enable link bitbucket account button in UI. */
    ui_link_bitbucket_account_enabled?: boolean;
    /** Whether to enable link external identities in accounts in UI. */
    ui_link_external_identities_enabled?: boolean;
    /** Whether to enable link github account button in UI. */
    ui_link_github_account_enabled?: boolean;
    /** Whether the UI is locked. */
    ui_lock?: boolean;
    /** Whether Manual creation of revorg is enabled. */
    ui_manual_create_revorgs_enabled?: boolean;
    /**
     * Meerkat cache clear sequence that's used to force clear UI meerkat
     * cache and reload.
     * @format int64
     */
    ui_meerkat_cache_clear_sequence?: number;
    /** Whether the new Snap UI is enabled. */
    ui_new_snap_enabled?: boolean;
    /** Whether notification V2 is enabled on ui or not. */
    ui_notification_v2_enabled?: boolean;
    /** Whether Now vista insights page is enabled in UI. */
    ui_now_vista_insights_page_enabled?: boolean;
    /** Whether Onbaording Walkthrough is enabled in the UI. */
    ui_onboarding_walkthrough_enabled?: boolean;
    /** Whether Opportunity is enabled on the UI. */
    ui_opportunity_enabled?: boolean;
    /**
     * Whether the work items of children parts are also shown on filter
     * by a part.
     */
    ui_part_hierarchy_works_filter_enabled?: boolean;
    /** Whether to enable caching of last used org in the UI */
    ui_remove_cache_last_used_org?: boolean;
    /** Whether Rev Customization is enabled */
    ui_rev_customization_enabled?: boolean;
    /** Flag to control dev0 specific fields. */
    ui_rev_dev0_fields_enabled?: boolean;
    /** Whether Environment field for revorg is editable. */
    ui_rev_environment_edit_enabled?: boolean;
    /** Whether Environment field for revorg is enabled. */
    ui_rev_environment_enabled?: boolean;
    /** Whether GroupBy is enabled for rev */
    ui_rev_groupby_enabled?: boolean;
    /** Whether rev insights is enabled on the UI. */
    ui_rev_insights_enabled?: boolean;
    /** Whether tier stock field is enabled for rev orgs in UI. */
    ui_rev_org_tier_stock_field?: boolean;
    /** Whether Rev user delete is enabled on the UI. */
    ui_revu_delete_enabled?: boolean;
    /** Whether multi rev-org on customer portal is enabled or not. */
    ui_revu_portal_multi_rev_org_enabled?: boolean;
    /** Whether sprint board is enabled on the UI. */
    ui_sprint_board_enabled?: boolean;
    /** Whether Sprint Insights is enabled on the UI. */
    ui_sprint_insights_enabled?: boolean;
    /** Wheter sprint settings is enabled on the UI. */
    ui_sprint_settings_enabled?: boolean;
    /** Whether streaming comments are enabled on the UI. */
    ui_streaming_comments_enabled?: boolean;
    /** Whether ticket clustering is enabled on the UI */
    ui_ticket_clustering_enabled?: boolean;
    /** Whether timeline comments V2 is enabled on ui or not. */
    ui_timeline_comments_v2_enabled?: boolean;
    /** Whether timeline events V2 is enabled on ui or not. */
    ui_timeline_events_v2_enabled?: boolean;
    /** Whether trails v2 experience is enabled in the UI */
    ui_trails_v2_enabled?: boolean;
    /** Whether User Preferences are enabled on the UI. */
    ui_user_preferences_enabled?: boolean;
    /** Whether to use v2 work components in UI. */
    ui_v2_work_enabled?: boolean;
    /** The current UI version. */
    ui_version?: string;
    /** Whether web is enabled for mobile */
    ui_web_for_mobile?: boolean;
    /** whether reordering on dynamic vistas is enabled. */
    vista_dynamic_reordering_enabled?: boolean;
    /** Whether MFZ is enabled for vistas object type. */
    vista_mfz_enabled?: boolean;
    /** Whether subscribers are shown in work panel. */
    work_subscribers_field_enabled?: boolean;
}
/** experience-toggles-get-request */
export interface ExperienceTogglesGetRequest {
    /**
     * The actor to get the toggles for, otherwise if omitted, then the
     * authenticated user.
     * @example "DEVU-12345"
     */
    actor?: string;
    /** The toggles to get. */
    toggles: string[];
}
/** experience-toggles-get-response */
export interface ExperienceTogglesGetResponse {
    /**
     * The toggles' values. Note if a toggle is unset, then it will be
     * 'null'.
     */
    toggles: object;
}
/** experience-toggles-set-request */
export interface ExperienceTogglesSetRequest {
    /**
     * The actor to set the toggles for, otherwise if omitted, then the
     * authenticated user.
     * @example "DEVU-12345"
     */
    actor?: string;
    /**
     * The toggles to set. This should be a mapping from toggle to value,
     * where 'null' indicates a value should be cleared.
     */
    toggles: object;
}
/** experience-toggles-set-response */
export type ExperienceTogglesSetResponse = object;
/** Filters for the section views of explore. */
export declare enum ExploreFilterViewType {
    Dashboards = "dashboards",
    Lists = "lists",
    SprintBoards = "sprint_boards"
}
/** Name of explore section. */
export declare enum ExploreSection {
    Apps = "apps",
    MyViews = "my_views",
    SharedWithMe = "shared_with_me"
}
/** explore-view */
export interface ExploreView {
    created_by: UserSummary;
    /**
     * Timestamp when the view was created.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_date: string;
    /** Description of the view. */
    description?: string;
    /** A view object. */
    menu_view: MenuView;
    /** Collaborators (shared with) for the view. */
    shared_with: SharedWithMembership[];
}
/** explore-views-list-request */
export interface ExploreViewsListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of views to return. If not set, then the default
     * is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Name of explore section. */
    section: ExploreSection;
    /** Filter on view type. */
    view_types?: ExploreFilterViewType[];
}
/** explore-views-list-response */
export interface ExploreViewsListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /**
     * The total number of explore views available.
     * @format int32
     */
    total: number;
    /** Views of the section. */
    views: ExploreView[];
}
/**
 * external-identity
 * External identity of a user.
 */
export interface ExternalIdentity {
    /** Display name of the user in the external source. */
    display_name?: string;
    /** Unique ID of the user in the external source. */
    id?: string;
    /** Whether the external identity is verified or not. */
    is_verified?: boolean;
    /** Issuer of the external identity of the user. */
    issuer?: string;
    /** State of the user in the external source. */
    state?: ExternalIdentityState;
}
/** State of the user in the external source. */
export declare enum ExternalIdentityState {
    Active = "active",
    Deleted = "deleted",
    Inactive = "inactive"
}
/** external-orgs-list-request */
export interface ExternalOrgsListRequest {
    /** The keyring's ID. */
    id: string;
}
/** external-orgs-list-response */
export interface ExternalOrgsListResponse {
    external_orgs: ExternalOrgsListResponseExternalOrg[];
}
/** external-orgs-list-response-external-org */
export interface ExternalOrgsListResponseExternalOrg {
    id: string;
    name: string;
}
/**
 * external-source-data-comp
 * Information about the source fields that have been airdropped into
 * DevRev.
 */
export interface ExternalSourceDataComp {
    /**
     * Timestamp when the object was created in the source system.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_date?: string;
    /**
     * Timestamp when the object was modified in the source system.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    modified_date?: string;
}
/** external-sync-unit */
export type ExternalSyncUnit = AtomBase & {
    /** External sync unit description. */
    description?: string;
    /**
     * The unique ID of the external system which is facilitating this
     * unit.
     */
    external_system_id?: string;
    external_system_type?: ExternalSystemType;
    /** Keyrings that have access to the external sync unit. */
    keyrings_with_access: KeyringSummary[];
    /**
     * The external sync unit name. (e.g. GitHub repository, Jira project,
     * etc.).
     */
    name?: string;
    /**
     * Total number of records.
     * @format int32
     */
    record_count?: number;
    /**
     * A flag signaling if ExternalSyncUnit is used by an existing
     * SyncUnit.
     */
    used?: boolean;
};
/** external-sync-unit-summary */
export type ExternalSyncUnitSummary = AtomBaseSummary;
/** external-system-capabilities */
export interface ExternalSystemCapabilities {
    /** Display name of the SoR of this migration. */
    display_name: string;
    /**
     * External import slug which will perform syncs, only populated for
     * adaas external system type.
     */
    external_import_slug?: string;
    external_system_type: ExternalSystemType;
    /**
     * Import slug which will perform syncs, only populated for adaas
     * external system type.
     */
    import_slug?: string;
    /** List of keyring type IDs that can be used for this sync. */
    keyring_type_ids: string[];
    /** Types of keyrings that can be used for this sync. */
    keyring_types: KeyringTypeEnum[];
    /**
     * Minimum value of minutes that can be set for periodic sync of this
     * external system type.
     * @format int32
     */
    min_sync_period: number;
    /** Allowed sync directions for the periodic sync configuration. */
    periodic_sync_directions: SyncDirection[];
    /**
     * Snap in slug which will perform syncs, only populated for adaas
     * external system type.
     */
    snap_in_slug?: string;
}
export declare enum ExternalSystemType {
    Adaas = "adaas",
    Confluence = "confluence",
    Github = "github",
    Hubspot = "hubspot",
    Jira = "jira",
    Linear = "linear",
    Rocketlane = "rocketlane",
    SalesforceSales = "salesforce_sales",
    SalesforceService = "salesforce_service",
    Servicenow = "servicenow",
    Zendesk = "zendesk"
}
/**
 * extractors
 * Configuration knobs for extractors.
 */
export interface Extractors {
    /** Discovery clues extractors configuration. */
    config?: object;
    /** Discovery mapping from a source name to a dev clue extractor. */
    dev?: object;
    /** Discovery mapping from a source name to a rev clue extractor. */
    rev?: object;
}
/** feature */
export type Feature = PartBase & {
    /** Associated API endpoints. */
    api_endpoints?: ApiEndpoint[];
    /** Associated API parameters. */
    api_parameters_summary?: string[];
    /** Common Path Denominators of the Api Operations. */
    api_prefix_summary?: string[];
    development_owner?: UserSummary;
    /**
     * A confidence score computed by the inference engine. Currently, the
     * score is not normalized across different part inferences. Until
     * this is improved, this should only be comparable to confidence of
     * same part type.
     * @format double
     */
    discovery_confidence?: number;
    /**
     * A evidences that the inferer were able to find that justify the
     * inference outcome.
     */
    discovery_evidences?: string[];
    /**
     * The time when this inference occurred.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    discovery_last_inferred_at?: string;
    /** IDs of the runnables that fulfill this feature. */
    fulfilled_by?: PartSummary[];
    part_of_part?: PartSummary;
    pm_owner?: UserSummary;
    qa_owner?: UserSummary;
    /** Versions of the feature. */
    versions?: string[];
};
/** The HTTP Operations that can be assigned to a Feature's API Operation. */
export declare enum FeatureApiOperationHttpOperation {
    Connect = "connect",
    Delete = "delete",
    Get = "get",
    Head = "head",
    Options = "options",
    Patch = "patch",
    Post = "post",
    Put = "put",
    Trace = "trace",
    Unknown = "unknown"
}
/** feature-pin */
export type FeaturePin = PartPinBase & {
    /**
     * Host and API Path combinations of the API Endpoints that are pinned
     * to be excluded from this feature.
     */
    api_endpoint_exclusion_list?: AtomSummary[];
    /**
     * Host and API Path combinations of the API Endpoints that are pinned
     * to be included in this feature.
     */
    api_endpoint_inclusion_list?: AtomSummary[];
    /**
     * Host and API Path combinations of the API Endpoints that were
     * included in the feature when the feature was deleted, if at all.
     */
    deleted_with_api_endpoint_list?: AtomSummary[];
    /**
     * Excluded IDs of the parts in pin entry that this feature is
     * developed with.
     */
    developed_with_exclusion_list?: PartSummary[];
    /**
     * Included IDs of the parts in pin entry that this feature is
     * developed with.
     */
    developed_with_inclusion_list?: PartSummary[];
    /**
     * Excluded IDs of the runnables in pin entry that fulfill this
     * feature.
     */
    fulfilled_by_ids_exclusion_list?: PartSummary[];
    /**
     * Included IDs of the runnables in pin entry that fulfill this
     * feature.
     */
    fulfilled_by_ids_inclusion_list?: PartSummary[];
    /**
     * Excluded IDs of the parts in pin entry that this feature is part
     * of.
     */
    part_of_exclusion_list?: PartSummary[];
    /**
     * Included IDs of the parts in pin entry that this feature is part
     * of.
     */
    part_of_inclusion_list?: PartSummary[];
};
/** feature-pin-summary */
export type FeaturePinSummary = PartPinBaseSummary;
/** feature-summary */
export type FeatureSummary = PartBaseSummary;
/**
 * field-delta
 * A field change.
 */
export interface FieldDelta {
    /** Set of field attributes. */
    field_descriptor?: SchemaFieldDescriptor;
    /** The name of the field. */
    name?: string;
    new_value?: FieldValue;
    old_value?: FieldValue;
    /** The objects referenced in the delta value. */
    references?: AtomSummary[];
}
/**
 * field-descriptor
 * Set of field attributes.
 */
export interface FieldDescriptor {
    /** The default value for this field. */
    default_value?: object;
    /** Description of the field. */
    description?: string;
    /** Composite type. */
    devrev_composite_type?: string;
    /** Allowed values for an enum field type. */
    devrev_enum?: string[];
    /** DevRev field type. */
    devrev_field_type?: string;
    /** Object ID types. */
    devrev_id_type?: string[];
    /** The schema of gateway specific fields. */
    gateway?: FieldGatewayMetadata;
    /** Whether this field is filterable, groupable and sortable. */
    is_filterable?: boolean;
    /** Whether this field is immutable or not. */
    is_immutable?: boolean;
    /** Whether a stock unified enum is overridable. */
    is_overridable?: boolean;
    /** Whether this field can hold PII. */
    is_pii?: boolean;
    /** Whether this field is required or not. */
    is_required?: boolean;
    /**
     * Whether this field can hold PII or sensitive information that
     * should not be logged.
     */
    is_sensitive?: boolean;
    /** Whether this field is a system field or not. */
    is_system?: boolean;
    /** The schema of MFZ specific fields. */
    mfz?: SchemaFieldMfzMetadata;
    /** Name of the field. */
    name?: string;
    /** The schema of oasis specific fields. */
    oasis?: SchemaFieldOasisMetadata;
    /** Field origin type. */
    origin?: string;
    /** Allowed values for a unified enum. */
    uenum_values?: SchemaFieldUenumValue[];
    /** The schema of ui specific fields. */
    ui?: SchemaFieldUiMetadata;
    /** Validation annotations. */
    validation?: FieldValidation;
}
/**
 * field-details
 * Field details and errors as seen by the loader.
 */
export interface FieldDetails {
    /** Resolved source value or ID to display in the UI. */
    display_value?: string;
    /** Human readable error message. */
    error_message?: string;
    /** Error type. */
    error_type?: string;
    source_reference?: AtomSummary;
    /** Source value. */
    source_value?: string;
}
/**
 * field-gateway-metadata
 * The schema of gateway specific fields.
 */
export interface FieldGatewayMetadata {
    /** Gateway api name of the field. */
    api_name?: string;
}
/** field-mask */
export interface FieldMask {
    paths: string[];
}
/**
 * field-modification-record
 * All modification records for one field.
 */
export interface FieldModificationRecord {
    /** Field details & errors as seen by the loader. */
    details?: FieldDetails[];
    /** DevRev field name of the object's attribute. */
    devrev_field_name?: string;
    /** External field name of the object's attribute. */
    external_field_name?: string;
    /** Field name of the object's attribute. */
    field_name?: string;
}
/**
 * field-options
 * Field Options.
 */
export interface FieldOptions {
    /** Whether all fields are opted. */
    all?: boolean;
    /** List of field names. */
    fields?: string[];
    /** List of field names from the stock schema. */
    stock_fields?: string[];
    /** List of field names from the subtype schema. */
    subtype_fields?: string[];
    /** List of field names from the tenant schema. */
    tenant_fields?: string[];
}
/** field-privilege */
export interface FieldPrivilege {
    name: FieldPrivilegeFieldPrivilegeEnum;
}
export declare enum FieldPrivilegeFieldPrivilegeEnum {
    Read = "read",
    Write = "write"
}
/**
 * field-privileges
 * Field Privileges.
 */
export interface FieldPrivileges {
    /** Field Options. */
    read?: FieldOptions;
    /** Field Options. */
    write?: FieldOptions;
}
/**
 * field-validation
 * Validation annotations.
 */
export interface FieldValidation {
    /** string contains. */
    contains?: string;
    /** disables validations for this field. */
    disabled?: boolean;
    /**
     * exact array length.
     * @format int32
     */
    eq_items?: number;
    /**
     * exact string length.
     * @format int32
     */
    eq_len?: number;
    /**
     * int must be greater than this.
     * @format int32
     */
    gt?: number;
    /**
     * int must be greater or equal than this.
     * @format int32
     */
    gte?: number;
    /**
     * int must be less than this.
     * @format int32
     */
    lt?: number;
    /**
     * int must be less or equal than this.
     * @format int32
     */
    lte?: number;
    /**
     * maximum array length.
     * @format int32
     */
    max_items?: number;
    /**
     * maximum string length.
     * @format int32
     */
    max_len?: number;
    /**
     * minimum array length.
     * @format int32
     */
    min_items?: number;
    /**
     * minimum string length.
     * @format int32
     */
    min_len?: number;
    /** string pattern (re). */
    pattern?: string;
    /** string prefix. */
    prefix?: string;
    /** string suffix. */
    suffix?: string;
}
/** field-value */
export type FieldValue = (FieldValueBool | FieldValueBoolList | FieldValueComposite | FieldValueCompositeList | FieldValueDateList | FieldValueDateTimeList | FieldValueDateTimeValue | FieldValueDateValue | FieldValueDouble | FieldValueDoubleList | FieldValueId | FieldValueIdList | FieldValueInt64 | FieldValueInt64List | FieldValueStage | FieldValueString | FieldValueStringList | FieldValueTagSummary | FieldValueTagSummaryList) & {
    placeholder?: string;
    type: FieldValueType;
};
/** field-value-bool */
export interface FieldValueBool {
    value: boolean;
}
/** field-value-bool-list */
export interface FieldValueBoolList {
    values: boolean[];
}
/** field-value-composite */
export interface FieldValueComposite {
    fields: Record<string, FieldValue>;
}
/** field-value-composite-list */
export interface FieldValueCompositeList {
    values: FieldValueComposite[];
}
/** field-value-date-list */
export interface FieldValueDateList {
    /** @example ["2023-01-01"] */
    values: string[];
}
/** field-value-date-time-list */
export interface FieldValueDateTimeList {
    /** @example ["2023-01-01T12:00:00.000Z"] */
    values: string[];
}
/** field-value-date-time-value */
export interface FieldValueDateTimeValue {
    /**
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    value: string;
}
/** field-value-date-value */
export interface FieldValueDateValue {
    /**
     * @format date
     * @example "2023-01-01"
     */
    value: string;
}
/** field-value-double */
export interface FieldValueDouble {
    /** @format double */
    value: number;
}
/** field-value-double-list */
export interface FieldValueDoubleList {
    values: number[];
}
/** field-value-id */
export interface FieldValueId {
    value: string;
}
/** field-value-id-list */
export interface FieldValueIdList {
    values: string[];
}
/** field-value-int64 */
export interface FieldValueInt64 {
    /** @format int64 */
    value: number;
}
/** field-value-int64-list */
export interface FieldValueInt64List {
    values: number[];
}
/** field-value-stage */
export interface FieldValueStage {
    name?: string;
    notes?: string;
}
/** field-value-string */
export interface FieldValueString {
    value: string;
}
/** field-value-string-list */
export interface FieldValueStringList {
    values: string[];
}
/** field-value-tag-summary */
export interface FieldValueTagSummary {
    name?: string;
    style?: string;
    tag_id: string;
}
/** field-value-tag-summary-list */
export interface FieldValueTagSummaryList {
    values: FieldValueTagSummary[];
}
export declare enum FieldValueType {
    Bool = "bool",
    BoolList = "bool_list",
    Composite = "composite",
    CompositeList = "composite_list",
    Date = "date",
    DateList = "date_list",
    DateTime = "date_time",
    DateTimeList = "date_time_list",
    Double = "double",
    DoubleList = "double_list",
    Id = "id",
    IdList = "id_list",
    Int = "int",
    IntList = "int_list",
    Stage = "stage",
    String = "string",
    StringList = "string_list",
    TagSummary = "tag_summary",
    TagSummaryList = "tag_summary_list"
}
/**
 * field-values
 * Information about the field values.
 */
export interface FieldValues {
    /** Specify the field name. */
    field_name?: string;
    /** Values of the given field. */
    field_value?: object;
}
/**
 * file
 * Defines a file object.
 */
export interface File {
    /** S3 key for the file. */
    key?: string;
    /** Name of the file. */
    name?: string;
    /**
     * Size of the file in bytes.
     * @format int32
     */
    size?: number;
    /** Type of the file. */
    type?: string;
}
/**
 * file-summary
 * Defines a file object.
 */
export interface FileSummary {
    /** Type of the file. */
    type?: string;
}
/** flow */
export type Flow = AtomBase & {
    /** List of automations used in the flow. */
    automations?: FlowNameReferenceMapping[];
    /** List of commands used in the flow. */
    commands?: FlowNameReferenceMapping[];
    /** List of connections used in the flow. */
    connections?: FlowNameValuePair[];
    /** Description of the flow. */
    description?: string;
    /** List of event sources used in the flow. */
    event_sources?: FlowNameReferenceMapping[];
    flow_config?: FlowConfig;
    /** List of inputs to be provided from the user to be used in the flow. */
    inputs?: GlobalInput[];
    /** Snap-kit for the inputs part of flow. */
    inputs_snap_kit?: object;
    marketplace_item?: MarketplaceItemSummary;
    /**
     * Version of the Marketplace Item template through which this flow
     * was installed.
     */
    marketplace_item_version?: string;
    /** Name of the flow. */
    name?: string;
    /** Raw template which created the flow. */
    raw_template?: string;
    /** List of secrets used in the flow. */
    secrets?: FlowNameReferenceMapping[];
    service_account?: UserSummary;
    /** List of resources created as part of the flow. */
    setup_resources?: FlowSetupResource[];
    /**
     * List of snapkit actions used in the flow. An snapkit action is a
     * synchronous code path called when an interactive element on the
     * snap-kit is interacted with. Interactive elements include buttons,
     * checkboxes, date-pickers etc. A snapkit action is defined as change
     * in value of these elements.
     */
    snap_kit_actions?: FlowNameReferenceMapping[];
    /** Deployment status of the flow. */
    status?: FlowStatus;
};
/** flow-config */
export interface FlowConfig {
    /** List of connections in flow definition. */
    connections?: FlowConnection[];
    /** List of event sources in flow definition. */
    event_sources?: FlowEventSource[];
    /** List of inputs in flow definition. */
    global_inputs?: FlowGlobalInput[];
    /** List of secrets in flow definition. */
    secrets?: FlowSecret[];
}
/** flow-connection */
export interface FlowConnection {
    /** Display name of connection in flow definition. */
    display_name?: string;
    /** Name of connection in flow definition. */
    name: string;
    /** List of keyring types this connection can be. */
    types: string[];
}
/** flow-delete-request */
export interface FlowDeleteRequest {
    /** The flow's ID. */
    id: string;
}
/** flow-event-source */
export interface FlowEventSource {
    /** Display name of event source in flow definition. */
    display_name?: string;
    /** Name of event source in flow definition. */
    name: string;
    /** Type of event source in flow definition. */
    type: string;
}
/** flow-get-request */
export interface FlowGetRequest {
    /** The flow's ID. */
    id: string;
}
/** flow-get-response */
export interface FlowGetResponse {
    flow: Flow;
}
/** flow-global-input */
export interface FlowGlobalInput {
    /** Allowed values for the input. */
    allowed_values?: string[];
    /** Default value for the input. */
    default_value?: string;
    /** Description of the input value. */
    description?: string;
    /** Display name for the input. */
    display_name?: string;
    /** Name of input in the flow definition. */
    name: string;
    /** Type of the input. */
    type: FlowGlobalInputType;
}
/** Type of the input. */
export declare enum FlowGlobalInputType {
    Bool = "bool",
    EmailAddress = "email_address",
    Enum = "enum",
    EnumList = "enum_list",
    Float = "float",
    FloatList = "float_list",
    Integer = "integer",
    IntegerList = "integer_list",
    Json = "json",
    KeyValues = "key_values",
    Part = "part",
    String = "string",
    StringList = "string_list",
    User = "user"
}
/**
 * flow-name-reference-mapping
 * Stores mapping from template defined name to corresponding ID.
 */
export interface FlowNameReferenceMapping {
    /**
     * Name by which the object is being referred in the flow. May be
     * different from the value of the `name` field (if present) of the
     * object.
     */
    name: string;
    reference?: AtomSummary;
}
/**
 * flow-name-value-pair
 * Stores a string name to string value mapping.
 */
export interface FlowNameValuePair {
    /** Name. */
    name: string;
    /** Value. */
    value?: string;
}
/** flow-secret */
export interface FlowSecret {
    /** Description of secret in flow definition. */
    description?: string;
    /** Display name of secret in flow definition. */
    display_name?: string;
    /** Name of secret in flow definition. */
    name: string;
}
/**
 * flow-setup-resource
 * Resource created as part of setup of a flow.
 */
export interface FlowSetupResource {
    /** Stores mapping from template defined name to corresponding ID. */
    resource?: FlowNameReferenceMapping;
    /** Type of the created resource. */
    resource_type?: SetupResourceResourceType;
}
/** Deployment status of the flow. */
export declare enum FlowStatus {
    Active = "active",
    Draft = "draft",
    Error = "error",
    Inactive = "inactive"
}
/** flow-summary */
export type FlowSummary = AtomBaseSummary & {
    /** Description of the flow. */
    description?: string;
    /** Name of the flow. */
    name?: string;
    /** Deployment status of the flow. */
    status?: FlowStatus;
};
/** flow-update-request */
export interface FlowUpdateRequest {
    /** List of automations used in the flow. */
    automations?: UpdateFlowNameReferenceMapping[];
    /** List of commands used in the flow. */
    commands?: UpdateFlowNameReferenceMapping[];
    /** List of connections used in the flow. */
    connections?: UpdateFlowNameValuePair[];
    /** Description of the flow. */
    description?: string;
    /** List of event sources used in the flow. */
    event_sources?: UpdateFlowNameReferenceMapping[];
    /** The flow's ID. */
    id: string;
    /** List of inputs to be provided from the user to be used in the flow. */
    inputs?: UpdateGlobalInput[];
    /**
     * The action payload generated by user interaction if the inputs are
     * being updated via snap-kits.
     */
    inputs_snap_kit_action_payload?: object;
    /**
     * Version of the Marketplace Item template through which this flow
     * was installed.
     */
    marketplace_item_version?: string;
    /** Name of the flow. */
    name?: string;
    /** Raw template which created the flow. */
    raw_template?: string;
    /** List of secrets used in the flow. */
    secrets?: UpdateFlowNameReferenceMapping[];
    /** List of resources created as part of the flow. */
    setup_resources?: UpdateFlowSetupResource[];
    /**
     * List of snapkit actions used in the flow. An snapkit action is a
     * synchronous code path called when an interactive element on the
     * snap-kit is interacted with. Interactive elements include buttons,
     * checkboxes, date-pickers etc. A snapkit action is defined as change
     * in value of these elements.
     */
    snap_kit_actions?: UpdateFlowNameReferenceMapping[];
    /** Deployment status of the flow. */
    status?: FlowStatus;
}
/** flow-update-response */
export interface FlowUpdateResponse {
    flow: Flow;
}
/** flows-github-create-request */
export interface FlowsGithubCreateRequest {
    /** The transitions to enable for the flow. */
    enabled_transitions?: GithubFlowEventTransition[];
    /**
     * ID of the GitHub event source. If provided, this event source is
     * used instead of creating a new one.
     */
    event_source_id?: string;
    /**
     * The default part ID to use for the autonomous works created via
     * this flow.
     * @example "PROD-12345"
     */
    new_branch_works_part_id?: string;
}
/** flows-github-create-response */
export interface FlowsGithubCreateResponse {
    flow: Flow;
    /** Secret value to use while configuring the webhook on GitHub. */
    webhook_secret: string;
    /** Webhook URL to be configured manually on GitHub webhooks page. */
    webhook_url: string;
}
/** flows-list-request */
export interface FlowsListRequest {
    /** The cursor to begin iteration from. */
    cursor?: string;
    /** ID of Marketplace Item which installed this flow. */
    marketplace_item?: string[];
    /** Parameter to indicate if the response must omit the raw_template. */
    omit_raw_template?: boolean;
    /** Fields to sort the flows by and the direction to sort them. */
    sort_by?: string[];
    /** Deployment status of the flow. */
    status?: FlowStatus[];
}
/** flows-list-response */
export interface FlowsListResponse {
    /**
     * The cursor that should be used to resume iteration, otherwise if
     * not provided, then iteration has completed.
     */
    cursor?: string;
    /** List of flows. */
    flows: Flow[];
}
/** focus */
export interface Focus {
    focus_point: FocusFocusPoint;
}
export declare enum FocusFocusPoint {
    Spacebar = "spacebar",
    Unknown = "unknown"
}
/**
 * function-backend-info
 * Info of backend used to deploy function.
 */
export interface FunctionBackendInfo {
    /** Backend configuration for the deployment layer. */
    config?: object;
}
/**
 * function-build-config
 * Build config for a snap-in function.
 */
export type FunctionBuildConfig = object;
/**
 * function-build-info
 * Build related info about function.
 */
export type FunctionBuildInfo = object;
/**
 * function-config
 * Input config for function runtime.
 */
export type FunctionConfig = object;
/**
 * function-source-info
 * Info about source of function code.
 */
export interface FunctionSourceInfo {
    /** Configuration of the source where to pull the code from. */
    config?: object;
    /** The source type containing the function code. */
    type?: FunctionSourceInfoType;
}
/** The source type containing the function code. */
export declare enum FunctionSourceInfoType {
    Artifact = "artifact",
    Http = "http",
    PrebuiltLambda = "prebuilt_lambda"
}
/**
 * general-preferences-group
 * Preferences group for General settings.
 */
export interface GeneralPreferencesGroup {
    /** Preferences group for App. */
    app?: AppPreferencesGroup;
    /** Preferences group for Availability. */
    availability?: AvailabilityPreferencesGroup;
    /** Preferred locale of the user. */
    preferred_locale?: GeneralPreferencesGroupPreferredLocale;
}
/** Preferred locale of the user. */
export declare enum GeneralPreferencesGroupPreferredLocale {
    EnUs = "en_us",
    JaJp = "ja_jp"
}
/**
 * generate-release-notes-request
 * Generate Release notes request.
 */
export interface GenerateReleaseNotesRequest {
    date_time_filter?: DateTimeFilter;
    /**
     * The ID of the part object.
     * @example "PROD-12345"
     */
    part_id: string;
}
/** generate-release-notes-response */
export interface GenerateReleaseNotesResponse {
    comments: string;
    release_notes: string;
}
/**
 * generate-reply-request
 * The request to generate a reply for a conversation.
 */
export interface GenerateReplyRequest {
    /**
     * List of messages in chronological order.
     * @minItems 1
     */
    messages: GenerateReplyRequestMessage[];
    /** Interface of interaction with Turing. */
    surface?: TuringSurface;
}
/** generate-reply-request-message */
export interface GenerateReplyRequestMessage {
    /**
     * ID of the user who created the message.
     * @example "DEVU-12345"
     */
    created_by?: string;
    /**
     * Text content of the message.
     * @minLength 1
     */
    text: string;
}
/**
 * generate-reply-response
 * The response for the generated reply.
 */
export interface GenerateReplyResponse {
    /** The reply string that's generated for the requested messages. */
    reply?: string;
    /** Source articles from which the reply is generated. */
    sources?: ArticleSummary[];
}
/** generate-rule-prompt */
export interface GenerateRulePrompt {
    /** The context ID of the previous chat, if any. */
    context_id?: string;
    /**
     * The natural language prompt.
     * @minLength 1
     * @maxLength 4096
     */
    natural_language_prompt: string;
    /**
     * The preferred language for the response. Format is ISO 639-1
     * language code. Example: 'en', 'hi', 'fr'. If not provided, value
     * will be inferred.
     */
    response_preferred_language?: string;
}
/**
 * generate-snap-kit-request
 * Generate snap-kit request.
 */
export interface GenerateSnapKitRequest {
    /** The context ID of the previous chat, if any. */
    context_id?: string;
    /**
     * The natural language prompt to guide the snap-kit generation.
     * @minLength 1
     * @maxLength 4096
     */
    prompt: string;
    /**
     * The preferred language for the response. Snap-kit will be generated
     * in this language. Format is ISO 639-1 language code. Example: "en",
     * "hi", "fr". If not provided, value will be inferred.
     */
    response_preferred_language?: string;
}
/**
 * generate-snap-kit-response
 * Generate snap-kit response.
 */
export interface GenerateSnapKitResponse {
    context: ConversationContext;
    /** The generated snap-kit. */
    snap_kit: object;
    system_response: GeneratedSystemResponse;
}
/** generated-system-response */
export interface GeneratedSystemResponse {
    /**
     * The ISO 639-1 language code of the response.Format is ISO 639-1
     * language code. Example: 'en', 'hi', 'fr'. If not passed, the
     * default language is 'en' (English).
     */
    language: string;
    /**
     * System natural language response to the user. Can be empty string
     * if no response is sent.
     */
    message: string;
}
/** generic-notification */
export type GenericNotification = NotificationBase & {
    /** Event ID to cluster notifications. */
    event_id?: string;
    /** Event type of the notification. */
    event_type?: GenericNotificationEventType;
    /** Metadata for the objects that triggered the notification. */
    metadata: NotificationMetadata[];
};
/** Event type of the notification. */
export declare enum GenericNotificationEventType {
    Alert = "alert",
    Assignment = "assignment",
    Mention = "mention",
    Reminder = "reminder",
    Update = "update"
}
/** generic-notification-summary */
export type GenericNotificationSummary = NotificationBaseSummary & {
    /** Event type of the notification. */
    event_type?: GenericNotificationEventType;
};
/**
 * get-account-sample-csv-request
 * Request object to get sample CSV for bulk ingestion.
 */
export type GetAccountSampleCsvRequest = object;
/**
 * get-account-sample-csv-response
 * Response object to get sample CSV for bulk ingestion.
 */
export interface GetAccountSampleCsvResponse {
    /** Sample CSV for bulk import. */
    sample_csv: string;
}
/** get-discovery-profile-request */
export interface GetDiscoveryProfileRequest {
    /** Discovery Profile unique ID. */
    profile_id: string;
}
/** get-discovery-profile-response */
export interface GetDiscoveryProfileResponse {
    discovery_profile: DiscoveryProfile;
}
/** get-discovery-run-request */
export interface GetDiscoveryRunRequest {
    /** Discovery run unique ID. */
    id: string;
}
/** get-discovery-run-response */
export interface GetDiscoveryRunResponse {
    run: DiscoveryRun;
}
/** get-discovery-settings-request */
export interface GetDiscoverySettingsRequest {
    /**
     * Optional Dev organization ID. This allows running on another Dev
     * organization, as long as the logged in user has access to it.
     * @example "DEV-AbCdEfGh"
     */
    other_dev_org?: string;
}
/** get-discovery-settings-response */
export interface GetDiscoverySettingsResponse {
    discovery_settings: DiscoverySettings;
}
/**
 * get-reply-request
 * The request to get a reply for a user query using an organizations KBs.
 */
export interface GetReplyRequest {
    /**
     * The query string.
     * @minLength 1
     */
    query: string;
    /** Interface of interaction with Turing. */
    surface?: TuringSurface;
}
/**
 * get-reply-response
 * The response for the generated reply.
 */
export interface GetReplyResponse {
    /** The reply string that's generated for the requested query. */
    reply?: string;
    /** Sources from which the reply is generated. */
    sources?: TuringSources[];
}
/**
 * get-rev-org-sample-csv-request
 * Request object to get sample CSV for bulk ingestion.
 */
export type GetRevOrgSampleCsvRequest = object;
/**
 * get-rev-org-sample-csv-response
 * Response object to get sample CSV for bulk ingestion.
 */
export interface GetRevOrgSampleCsvResponse {
    /** Sample CSV for bulk import. */
    sample_csv: string;
}
/**
 * get-rev-user-sample-csv-request
 * Request object to get sample CSV for bulk ingestion.
 */
export type GetRevUserSampleCsvRequest = object;
/**
 * get-rev-user-sample-csv-response
 * Response object to get sample CSV for bulk ingestion.
 */
export interface GetRevUserSampleCsvResponse {
    /** Sample CSV for bulk import. */
    sample_csv: string;
}
/**
 * get-schema-operation-request
 * The request to fetch an operation's input/output schema.
 */
export interface GetSchemaOperationRequest {
    /** The ID of the operation to get the schema for. */
    operation: string;
}
/** get-schema-operation-response */
export interface GetSchemaOperationResponse {
    /** Input ports and the corresponding schemas of the operation. */
    input_ports: OperationInputPort[];
    /** Output ports and the corresponding schemas of the operation. */
    output_ports: OperationOutputPort[];
}
/**
 * get-schema-workflow-steps-request
 * The request to fetch workflow steps' input/output schema.
 */
export interface GetSchemaWorkflowStepsRequest {
    /** The IDs of the workflow steps to get the schema for. */
    ids: string[];
}
/** get-schema-workflow-steps-response */
export interface GetSchemaWorkflowStepsResponse {
    /** The list of workflow steps and their schemas. */
    schemas: GetSchemaWorkflowStepsResponseGetSchemaWorkflowStepsItem[];
}
/** get-schema-workflow-steps-response-get-schema-workflow-steps-item */
export interface GetSchemaWorkflowStepsResponseGetSchemaWorkflowStepsItem {
    /** The ID of the workflow step. */
    id: string;
    /** Input ports and the corresponding schemas of the workflow step. */
    input_ports: OperationPortIoSchema[];
    /** Output ports and the corresponding schemas of the workflow step. */
    output_ports: OperationPortIoSchema[];
}
/**
 * get-workflow-request
 * The request to get a workflow.
 */
export interface GetWorkflowRequest {
    /** The requested workflow's ID. */
    id: string;
}
/**
 * get-workflow-response
 * The response to a workflow get request.
 */
export interface GetWorkflowResponse {
    workflow: Workflow;
}
/**
 * get-workflow-run-request
 * The request to get a workflow run.
 */
export interface GetWorkflowRunRequest {
    /** The requested workflow run's ID. */
    id: string;
}
/**
 * get-workflow-run-response
 * The response to a workflow run get request.
 */
export interface GetWorkflowRunResponse {
    workflow_run: WorkflowRun;
}
/**
 * get-workflow-step-request
 * The request to get a workflow step.
 */
export interface GetWorkflowStepRequest {
    /** The requested workflow step's ID. */
    id: string;
}
/**
 * get-workflow-step-response
 * The response to a workflow step get request.
 */
export interface GetWorkflowStepResponse {
    workflow_step: WorkflowStep;
}
/** Github flow event transition. */
export declare enum GithubFlowEventTransition {
    NewBranchTransition = "new_branch_transition",
    NewBranchWorkCreateTransition = "new_branch_work_create_transition",
    NewCommitTransition = "new_commit_transition",
    PrMergedInprogressToClosedTransition = "pr_merged_inprogress_to_closed_transition",
    PrMergedOpenToClosedTransition = "pr_merged_open_to_closed_transition",
    PrOpenedTransition = "pr_opened_transition"
}
/**
 * global-input
 * global_input defines the schema for input to get from user deploying
 * the flows.
 */
export interface GlobalInput {
    /**
     * Allowed values for this input, applicable only for enum and
     * enum_list types.
     */
    allowed_values?: string[];
    /** Default value to be used if value is not provided. */
    default_value?: string;
    /**
     * Description of the input to be provided by flow author to help the
     * flow user to provide value.
     */
    description?: string;
    /** Display Name. */
    display_name?: string;
    /** The type of input expected from the user. */
    input_type?: GlobalInputInputType;
    /** Name. */
    name: string;
    /** JSON Schema object. */
    schema?: string;
    /** Value. */
    value?: string;
}
/** The type of input expected from the user. */
export declare enum GlobalInputInputType {
    Bool = "bool",
    EmailAddress = "email_address",
    Enum = "enum",
    EnumList = "enum_list",
    Float = "float",
    FloatList = "float_list",
    Integer = "integer",
    IntegerList = "integer_list",
    Json = "json",
    KeyValues = "key_values",
    Part = "part",
    String = "string",
    StringList = "string_list",
    User = "user"
}
/** global-keyring-create-request */
export interface GlobalKeyringCreateRequest {
    /** The secret key of the keyring. */
    key: string;
    keyring: Keyring;
}
/** global-keyring-create-response */
export interface GlobalKeyringCreateResponse {
    /** The ID of the keyring. */
    id: string;
}
/** global-keyring-get-request */
export interface GlobalKeyringGetRequest {
    /** The ID of the keyring. */
    id: string;
}
/** global-keyring-get-response */
export interface GlobalKeyringGetResponse {
    /** The secret key of the keyring. */
    key: string;
    keyring: Keyring;
}
/** global-keyring-update-request */
export interface GlobalKeyringUpdateRequest {
    /** The ID of the keyring. */
    id: string;
    keyring: UpdateKeyring;
}
/** global-keyring-update-response */
export interface GlobalKeyringUpdateResponse {
    keyring: Keyring;
}
export declare enum GlobalStoreListMarketplaceItemsFilterCreatedByOperatorType {
    Any = "any",
    NotAny = "not_any"
}
/**
 * global-store-marketplace-categories-create-request
 * A request to create a new marketplace category.
 */
export interface GlobalStoreMarketplaceCategoriesCreateRequest {
    access_level: AccessLevel;
    /** Actor ID who is creating the category. */
    actor: string;
    /** An informative description for the category. */
    description?: string;
    /**
     * Marketplace ID the category belongs to. Marketplace ID cannot be
     * changed after it has been set.
     */
    marketplace?: string;
    /**
     * The name of the category. The name is guaranteed to be unique. The
     * name can be changed at any time as long as the new name is still
     * unique per marketplace.
     */
    name: string;
    /**
     * A parent category ID. Note that marketplace items can be associated
     * only with the leaf categories (i.e. categories where a parent is
     * not set).
     */
    parent: string;
}
/** global-store-marketplace-categories-create-response */
export interface GlobalStoreMarketplaceCategoriesCreateResponse {
    category: MarketplaceCategory;
}
/**
 * global-store-marketplace-categories-delete-request
 * A request to delete a marketplace category.
 */
export interface GlobalStoreMarketplaceCategoriesDeleteRequest {
    /** Actor ID who is deleting the category. */
    actor: string;
    /** The marketplace category ID. */
    id: string;
}
/** global-store-marketplace-categories-delete-response */
export type GlobalStoreMarketplaceCategoriesDeleteResponse = object;
/** global-store-marketplace-categories-get-request */
export interface GlobalStoreMarketplaceCategoriesGetRequest {
    /** The marketplace category ID. */
    id: string;
}
/** global-store-marketplace-categories-get-response */
export interface GlobalStoreMarketplaceCategoriesGetResponse {
    marketplace_category: MarketplaceCategory;
}
/** global-store-marketplace-categories-list-request */
export interface GlobalStoreMarketplaceCategoriesListRequest {
    /** Actor ID who is listing the marketplace categories. */
    actor: string;
    /** Whether to exclude empty categories. */
    exclude_empty_categories?: boolean;
    /** The marketplace ID. */
    marketplace?: string;
}
/** global-store-marketplace-categories-list-response */
export interface GlobalStoreMarketplaceCategoriesListResponse {
    /** The list of marketplace categories. */
    marketplace_categories: MarketplaceCategory[];
}
/**
 * global-store-marketplace-categories-update-request
 * A request to update a marketplace category.
 */
export interface GlobalStoreMarketplaceCategoriesUpdateRequest {
    access_level?: AccessLevel;
    /** Actor ID who is updating the category. */
    actor: string;
    /** Updates the description for the category. */
    description?: string;
    /** The marketplace category to update. */
    id: string;
    /**
     * Updates the name of the category. If another category with the same
     * name already exists update will be rejected. The name must be
     * unique per marketplace.
     */
    name?: string;
    /**
     * Updates a parent category. Note that marketplace items can be
     * associated only with the leaf categories (i.e. categories where a
     * parent is not set).
     */
    parent?: string | null;
}
/** global-store-marketplace-categories-update-response */
export interface GlobalStoreMarketplaceCategoriesUpdateResponse {
    category: MarketplaceCategory;
}
/** global-store-marketplace-items-artifact-list-update */
export interface GlobalStoreMarketplaceItemsArtifactListUpdate {
    /**
     * Artifact IDs to be added to the marketplace item.
     * @example ["ARTIFACT-12345"]
     */
    add?: string[];
    /**
     * Artifact IDs to be removed from the marketplace item.
     * @example ["ARTIFACT-12345"]
     */
    remove?: string[];
    /**
     * Artifact IDs to be set to the marketplace item.
     * @example ["ARTIFACT-12345"]
     */
    set?: string[];
}
/** global-store-marketplace-items-category-list-update */
export interface GlobalStoreMarketplaceItemsCategoryListUpdate {
    /** Categories to be added to the marketplace item. */
    add?: string[];
    /** Categories to be removed from the marketplace item. */
    remove?: string[];
    /** Categories to be set to the marketplace item. */
    set?: string[];
}
/**
 * global-store-marketplace-items-create-request
 * A request to create a new marketplace item.
 */
export interface GlobalStoreMarketplaceItemsCreateRequest {
    access_level: AccessLevel;
    /** Actor ID who is creating the new marketplace item. */
    actor: string;
    /**
     * Media artifact IDs relevant to the marketplace item (e.g.
     * screenshots, videos, banner image).
     * @example ["ARTIFACT-12345"]
     */
    artifacts?: string[];
    /**
     * The snap-in version blueprint associated with the marketplace item.
     * @example "ARTIFACT-12345"
     */
    blueprint_artifact?: string;
    /**
     * Flag indicating whether marketplace item will be soon available to
     * purchase.
     */
    coming_soon?: boolean;
    /** Description of the marketplace item (Markdown formatted text). */
    description: string;
    /**
     * Artifact ID relevant to the marketplace item icon.
     * @example "ARTIFACT-12345"
     */
    icon_artifact: string;
    /**
     * Marketplace listing type defines what backing service will be used when
     * validating a create marketplace submission request, installing
     * marketplace items in some organizations, etc. It is important to note
     * that marketplace listings of type app are not backed by any service and
     * are only placeholders for existing functionality in the DevRev platform
     * (e.g. Jira Airdrop). Note: 'flow' type is deprecated, use 'snapin'
     * instead.
     */
    item_type: MarketplaceItemItemType;
    /** Keywords of the marketplace item. */
    keywords?: string;
    /** The Markteplace where the item will be created. */
    marketplace?: string;
    /** Marketplace category IDs relevant to the marketplace item. */
    marketplace_categories?: string[];
    /**
     * OrgReference of the dev orgs that are invited to access the
     * marketplace items.
     */
    member_orgs?: OrgReference[];
    /**
     * Meta score of the marketplace item.
     * @format int64
     */
    meta_score?: number;
    /** The name of the marketplace item. */
    name: string;
    /** Denormalized organization reference. */
    owned_by_org: OrgReference;
    /** URL slug of the marketplace item. */
    slug: string;
    /** The snap-in version associated with the marketplace item. */
    snap_in_version?: string;
    /** Summary of the marketplace item. */
    summary: string;
    /** Tagline of the marketplace item. */
    tagline: string;
    template?: GlobalStoreMarketplaceItemsUpsertTemplate;
}
/** global-store-marketplace-items-create-response */
export interface GlobalStoreMarketplaceItemsCreateResponse {
    marketplace_item: MarketplaceItem;
}
/**
 * global-store-marketplace-items-delete-request
 * A request to delete a marketplace item.
 */
export interface GlobalStoreMarketplaceItemsDeleteRequest {
    /** Actor ID who is deleting the marketplace item. */
    actor: string;
    /** The marketplace item's ID. */
    id: string;
}
/**
 * global-store-marketplace-items-get-request
 * A request to get a marketplace item.
 */
export interface GlobalStoreMarketplaceItemsGetRequest {
    /** Actor ID who is getting the marketplace item. */
    actor: string;
    /** The marketplace item ID. */
    id?: string;
    /** Marketplace ID where to search a marketplace item by slug. */
    marketplace_id?: string;
    /** The marketplace item's slug. */
    slug?: string;
}
/** global-store-marketplace-items-get-response */
export interface GlobalStoreMarketplaceItemsGetResponse {
    marketplace_item: MarketplaceItem;
}
/**
 * global-store-marketplace-items-invite-request
 * A request to invite a DEV organization to access marketplace item.
 */
export interface GlobalStoreMarketplaceItemsInviteRequest {
    /**
     * Actor ID who is inviting the dev org to access the marketplace
     * item.
     */
    actor: string;
    /** The marketplace item's ID. */
    id: string;
    /** Denormalized organization reference. */
    org: OrgReference;
}
/** global-store-marketplace-items-invite-response */
export interface GlobalStoreMarketplaceItemsInviteResponse {
    marketplace_item: MarketplaceItem;
}
/**
 * global-store-marketplace-items-list-request
 * A request to list marketplace items.
 */
export interface GlobalStoreMarketplaceItemsListRequest {
    /** Actor ID who requested to list the marketplace items. */
    actor: string;
    /** Filters marketplace items relevant for these categories. */
    categories?: string[];
    /**
     * Filters for marketplace items created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: GlobalStoreListMarketplaceItemsFilterCreatedByOperatorType;
    created_date?: DateTimeFilter;
    /**
     * To start listing marketplace items cursor field should not be
     * provided. Set cursor to value returned by the previous call to list
     * items in the next page.
     */
    cursor?: string;
    /**
     * Limit for how many items to be retrieved per page. Default is 50.
     * @format int32
     */
    limit?: number;
    /** Markteplace ID where to list marketplace items. */
    marketplace?: string;
    modified_date?: DateTimeFilter;
    /**
     * Filters for marketplace items owned by some organization.
     * @example "DEV-AbCdEfGh"
     */
    owned_by?: string;
    /** Search query to search marketplace items. */
    search_query?: string;
    /** Filters marketplace items relevant for these snap-in packages. */
    snap_in_package?: string[];
    /** Filters marketplace items relevant for these snap-in versions. */
    snap_in_version?: string[];
    /**
     * List of fields to sort the marketplace item object, by and how to
     * sort them. Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
    /** Filters on state for marketplace items. */
    state?: MarketplaceItemState[];
}
/** global-store-marketplace-items-list-response */
export interface GlobalStoreMarketplaceItemsListResponse {
    /**
     * Next cursor to continue listing marketplace items. If cursor is not
     * set you have reached the last page of items.
     */
    cursor?: string;
    /** The list of marketplace items. */
    marketplace_items: MarketplaceItem[];
}
/**
 * global-store-marketplace-items-rank-request
 * A request to update the meta score for the provided marketplace item.
 */
export interface GlobalStoreMarketplaceItemsRankRequest {
    /** Actor ID who is updating the meta score of the marketplace item. */
    actor: string;
    /** The marketplace item's ID. */
    id: string;
    /**
     * The marketplace item's meta score.
     * @format int64
     */
    meta_score: number;
}
/** global-store-marketplace-items-rank-response */
export interface GlobalStoreMarketplaceItemsRankResponse {
    marketplace_item: MarketplaceItem;
}
/** global-store-marketplace-items-search-request */
export interface GlobalStoreMarketplaceItemsSearchRequest {
    /** Actor ID who is searching the marketplace item. */
    actor: string;
    /** Markteplace ID where to search marketplace items. */
    marketplace?: string;
    /** Search query to search marketplace items. */
    search_query: string;
}
/** global-store-marketplace-items-search-response */
export interface GlobalStoreMarketplaceItemsSearchResponse {
    /** The list of marketplace items. */
    marketplace_items: MarketplaceItem[];
}
/**
 * global-store-marketplace-items-transition-request
 * A request to transition a marketplace item.
 */
export interface GlobalStoreMarketplaceItemsTransitionRequest {
    /** Actor ID who is transitioning the marketplace item. */
    actor: string;
    /** The marketplace item's ID. */
    id: string;
    /**
     * The state represents the life cycle of the marketplace item. When a new
     * marketplace item is created it is put in the state 'draft'. Once
     * publisher (member of an organization who created a marketplace item)
     * finishes editing the item he will transition it into the state
     * 'in_review'. Marketplace owner (member of an organization that owns the
     * marketplace) will be able to do a review of the submission and either
     * transition it  back into state 'draft' (if changes are required) or in
     * state 'published'  (if submission met the required standards).
     * Publisher can transit the published marketplace item into the state
     * 'end_of_sale' if he wants to temporarily remove the marketplace item
     * from the shelves ( the item won't appear on the marketplace and users
     * won't be able to install it). From state 'end_of_sale' one can
     * transition the item back into state 'draft' or  'published' (if there
     * were no changes done). Once an item is deleted it is transitioned into
     * the state 'end_of_life'.
     */
    state: MarketplaceItemState;
}
/** global-store-marketplace-items-transition-response */
export interface GlobalStoreMarketplaceItemsTransitionResponse {
    marketplace_item: MarketplaceItem;
}
/**
 * global-store-marketplace-items-update-request
 * A request to update a marketplace item. Update is allowed only for the
 * marketplace items of type 'flow'.
 */
export interface GlobalStoreMarketplaceItemsUpdateRequest {
    /** Actor ID who is deleting the marketplace item. */
    actor: string;
    artifacts?: GlobalStoreMarketplaceItemsArtifactListUpdate;
    categories?: GlobalStoreMarketplaceItemsCategoryListUpdate;
    /**
     * Updates flag indicating whether marketplace item will be soon
     * available to purchase.
     */
    coming_soon?: boolean;
    /** Updates description of the marketplace item. */
    description?: string;
    /**
     * Updates artifact ID relevant to the marketplace item icon.
     * @example "ARTIFACT-12345"
     */
    icon_artifact?: string;
    /** The marketplace item's ID. */
    id: string;
    /**
     * Marketplace listing type defines what backing service will be used when
     * validating a create marketplace submission request, installing
     * marketplace items in some organizations, etc. It is important to note
     * that marketplace listings of type app are not backed by any service and
     * are only placeholders for existing functionality in the DevRev platform
     * (e.g. Jira Airdrop). Note: 'flow' type is deprecated, use 'snapin'
     * instead.
     */
    item_type?: MarketplaceItemItemType;
    /** Updates keywords of the marketplace item. */
    keywords?: string;
    /**
     * Updates meta score of the marketplace item.
     * @format int64
     */
    meta_score?: number;
    /** Updates name of the marketplace item. */
    name?: string;
    /** Updates summary of the marketplace item. */
    summary?: string;
    /** Updates tagline of the marketplace item. */
    tagline?: string;
    template?: GlobalStoreMarketplaceItemsUpsertTemplate;
}
/** global-store-marketplace-items-update-response */
export interface GlobalStoreMarketplaceItemsUpdateResponse {
    marketplace_item: MarketplaceItem;
}
/** global-store-marketplace-items-upsert-template */
export interface GlobalStoreMarketplaceItemsUpsertTemplate {
    /**
     * Artifact ID relevant to the marketplace item template.
     * @example "ARTIFACT-12345"
     */
    artifact: string;
    /** Version of the latest marketplace item template. */
    version: string;
}
/** global-store-marketplaces-get-request */
export interface GlobalStoreMarketplacesGetRequest {
    /** The marketplace ID. */
    id: string;
}
/** global-store-marketplaces-get-response */
export interface GlobalStoreMarketplacesGetResponse {
    marketplace: Marketplace;
}
/** global-store-marketplaces-list-request */
export type GlobalStoreMarketplacesListRequest = object;
/** global-store-marketplaces-list-response */
export interface GlobalStoreMarketplacesListResponse {
    /** The list of marketplaces. */
    marketplaces: Marketplace[];
}
/** graphql-request */
export interface GraphqlRequest {
    /** The GraphQL request query. */
    query: string;
    /** The variables to substitute into the query. */
    variables?: object;
}
/** graphql-response */
export interface GraphqlResponse {
    /** The response data. */
    data: object;
    /** The resulting errors. */
    errors?: object[];
    /** Extensions for the response data. */
    extensions?: object;
}
/**
 * grid-layout
 * Grid layout represents the organization of the elements within a
 * layout.
 */
export interface GridLayout {
    /** Layout of the elements within the current element. */
    layout?: GridLayout[];
    /**
     * A grid position represents the location and size of a widget or section
     * within  its container (dashboard, tab, or section).
     */
    position?: GridPosition;
    /**
     * The reference ID for the element to be laid out. It should be an ID
     * of a tab, section, or widget.
     */
    reference_id: string;
}
/**
 * grid-position
 * A grid position represents the location and size of a widget or section
 * within  its container (dashboard, tab, or section).
 */
export interface GridPosition {
    /**
     * The height of the widget or section, in grid units.
     * @format int32
     */
    height: number;
    /**
     * The width of the widget or section, in grid units.
     * @format int32
     */
    width: number;
    /**
     * The x-coordinate of the top-left corner of the widget or section,
     * based on  a grid system.
     * @format int32
     */
    x: number;
    /**
     * The y-coordinate of the top-left corner of the widget or section,
     * based on  a grid system.
     * @format int32
     */
    y: number;
}
/** group */
export type Group = AtomBase & {
    /** Version of the default group. */
    default_version?: string;
    /** Description of the group. */
    description?: string;
    /** Information to define dynamic groups. */
    dynamic_group_info?: DynamicGroupInfo;
    /** Whether it is a default group. */
    is_default: boolean;
    /** Type of the members in the group. */
    member_type?: GroupMemberType;
    /** Name of the group. */
    name?: string;
    owner?: UserSummary;
    /** Type of the group. */
    type?: GroupType;
};
/** Type of the vista group item object. */
export declare enum GroupItemType {
    Curated = "curated",
    Dynamic = "dynamic"
}
/** Type of the members in the group. */
export declare enum GroupMemberType {
    DevUser = "dev_user",
    RevUser = "rev_user",
    SvcAcc = "svc_acc"
}
/**
 * group-members-add-request
 * A request to add a new member to a group.
 */
export interface GroupMembersAddRequest {
    /** ID of the group where the member is being added. */
    group: string;
    /**
     * ID of the member to be added.
     * @example "DEVU-12345"
     */
    member: string;
}
/** group-members-add-response */
export type GroupMembersAddResponse = object;
/**
 * group-members-list-request
 * A request to list group members.
 */
export interface GroupMembersListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** ID of the group for which to list members. */
    group: string;
    /**
     * The maximum number of members to return. If not set, then the
     * default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
}
/**
 * group-members-list-response
 * List of group members.
 */
export interface GroupMembersListResponse {
    /** List of members. */
    members: GroupMembersListResponseMember[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/**
 * group-members-list-response-member
 * A group member.
 */
export interface GroupMembersListResponseMember {
    member: MemberSummary;
}
/**
 * group-members-remove-request
 * A request to remove a group member.
 */
export interface GroupMembersRemoveRequest {
    /** ID of the group where the member is being removed. */
    group: string;
    /**
     * ID of the member to be removed.
     * @example "DEVU-12345"
     */
    member: string;
}
/** group-members-remove-response */
export type GroupMembersRemoveResponse = object;
/** group-search-summary */
export type GroupSearchSummary = SearchSummaryBase & {
    group: GroupSummary;
};
/** group-summary */
export type GroupSummary = AtomBaseSummary & {
    /** Type of the members in the group. */
    member_type?: GroupMemberType;
    /** Name of the group. */
    name?: string;
};
/** Type of the group. */
export declare enum GroupType {
    Dynamic = "dynamic",
    Static = "static"
}
/**
 * grouped-vista
 * Represents a group of multiple vistas as a single unit.
 */
export type GroupedVista = VistaBase & (GroupedVistaConversationsVista | GroupedVistaPartsVista | GroupedVistaWorksVista) & {
    /** Type of DevRev object for which the grouped vista is applicable. */
    filter_type: GroupedVistaFilterType;
    /** Denotes the use case of the grouped vista. */
    flavor?: GroupedVistaFlavor;
};
/** grouped-vista-conversations-vista */
export interface GroupedVistaConversationsVista {
    filter?: GroupedVistaConversationsVistaFilter;
    /** The list of vista groups. */
    groups?: ConversationsVistaGroupItem[];
}
/** grouped-vista-conversations-vista-filter */
export interface GroupedVistaConversationsVistaFilter {
    /**
     * Filters for conversations belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_parts?: string[];
    created_date?: DateTimeFilter;
    /** Filters for conversation that belong to the given groups. */
    group?: string[];
    /** The field to group the collection by. */
    group_by?: string;
    /** Filters for conversations that are created by verified users. */
    is_creator_verified?: boolean;
    /** Filters for conversations that are spam. */
    is_spam?: boolean;
    /**
     * Filters for conversations where these users are participants.
     * @example ["DEVU-12345"]
     */
    members?: string[];
    modified_date?: DateTimeFilter;
    /**
     * Filters for conversations owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for conversations that are associated with any of the
     * provided Rev organizations.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org?: string[];
    /**
     * Filters for conversations with any of the provided SLAs applying to
     * it.
     */
    sla?: string[];
    /**
     * Filters for conversations with any of the provided SLA stages.
     * @deprecated
     */
    sla_stage?: SlaSummaryStage[];
    /** The filter for SLA summary. */
    sla_summary?: SlaSummaryFilter;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** Filters for conversations with any of the provided source channels. */
    source_channels?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for conversations with any of the provided states. */
    state?: string[];
    /** The filter for survey aggregation. */
    surveys?: SurveyAggregationFilter;
    /**
     * Filters for conversations with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for conversations with any of the provided tags with value. */
    tags_v2?: TagWithValueFilter[];
    /** Filters for conversations with any of the provided ticket IDs. */
    tickets?: string[];
    /** Filters for conversations in which turing is active. */
    turing_active?: boolean;
}
/** Type of DevRev object for which the grouped vista is applicable. */
export declare enum GroupedVistaFilterType {
    Conversations = "conversations",
    Parts = "parts",
    Works = "works"
}
/** Denotes the use case of the grouped vista. */
export declare enum GroupedVistaFlavor {
    Nnl = "nnl",
    SprintBoard = "sprint_board",
    SupportInbox = "support_inbox"
}
/** grouped-vista-parts-vista */
export interface GroupedVistaPartsVista {
    filter?: GroupedVistaPartsVistaFilter;
    /** The list of vista groups. */
    groups?: PartsVistaGroupItem[];
}
/** grouped-vista-parts-vista-filter */
export interface GroupedVistaPartsVistaFilter {
    /** Filters for parts of the provided categories. */
    categories?: PartCategory[];
    /**
     * Filters for parts created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: PartsFilterCreatedByOpOperatorType;
    created_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    created_date_v2?: DateFilter;
    /** Filters for custom fields. */
    custom_fields?: object;
    enhancement?: PartsFilterEnhancement;
    /** The field to group the collection by. */
    group_by?: string;
    modified_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    modified_date_v2?: DateFilter;
    /** Filters for parts of the provided name(s). */
    name?: string[];
    /**
     * Filters for parts owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for parts owned by any of the provided users.
     * @deprecated
     * @example ["DEVU-12345"]
     */
    owned_by_ids?: string[];
    owned_by_op?: PartsFilterOwnedByOpOperatorType;
    /** The filter for specifying parent part. */
    parent_part?: ParentPartFilter;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for part with any of the provided states. */
    state?: string[];
    /** Filters for subtypes. */
    subtype?: string[];
    /**
     * Filters for parts with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tag_ids?: string[];
    /**
     * Filters for part with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    tags_op?: PartsFilterTagsOpOperatorType;
    /** Filters for parts of the provided type(s). */
    type?: PartType[];
    /**
     * Filters for parts of the provided type(s).
     * @deprecated
     */
    types?: PartType[];
    /**
     * Filters for parts belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
/**
 * grouped-vista-summary
 * Represents a group of multiple vistas as a single unit.
 */
export type GroupedVistaSummary = VistaBaseSummary & {
    /** Denotes the use case of the grouped vista. */
    flavor?: GroupedVistaFlavor;
};
/** grouped-vista-works-vista */
export interface GroupedVistaWorksVista {
    filter?: GroupedVistaWorksVistaFilter;
    /** The list of vista groups. */
    groups?: WorksVistaGroupItem[];
}
/** grouped-vista-works-vista-filter */
export interface GroupedVistaWorksVistaFilter {
    /** Provides ways to specify date ranges on objects. */
    actual_close_date?: DateFilter;
    /**
     * Filters for work which have one of the parts present as its
     * ancestor part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /**
     * Filters for work belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_part?: string[];
    /**
     * Filters for work created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: WorksFilterCreatedByOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /** Filters for custom fields. */
    custom_fields?: object;
    /**
     * Filters for work excluding the provided work IDs.
     * @example ["ISS-12345"]
     */
    exclude?: string[];
    external_source_data?: WorksFilterExternalSourceData;
    /** The field to group the collection by. */
    group_by?: string;
    issue?: WorksFilterIssue;
    /** Provides ways to specify date ranges on objects. */
    last_internal_comment_date?: DateFilter;
    /** Filters for work with any of the provided link target objects. */
    link_target_object?: string[];
    link_target_object_op?: WorksFilterLinkTargetObjectOperatorType;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    opportunity?: WorksFilterOpportunity;
    /**
     * Filters for work owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    owned_by_op?: WorksFilterOwnedByOperatorType;
    /**
     * Filters for work reported by any of these users.
     * @example ["DEVU-12345"]
     */
    reported_by?: string[];
    reported_by_op?: WorksFilterReportedByOperatorType;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for work for the provided stage names. */
    stage_names?: string[];
    staged_info?: StagedInfoFilter;
    /** Filters for work with any of the provided states. */
    state?: string[];
    sync_metadata?: SyncMetadataFilter;
    tag_ids_op?: WorksFilterTagIdsOperatorType;
    /**
     * Filters for work with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for work with the provided tag and value. */
    tags_v2?: TagWithValueFilter[];
    /** Provides ways to specify date ranges on objects. */
    target_close_date?: DateFilter;
    task?: WorksFilterTask;
    ticket?: WorksFilterTicket;
    /** Filters for work of the provided types. */
    type?: WorkType[];
    /**
     * Filters for work belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
/**
 * groups-create-request
 * A request to create a new group.
 */
export interface GroupsCreateRequest {
    /** Description of the group. */
    description: string;
    /** Information to define dynamic groups. */
    dynamic_group_info?: DynamicGroupInfo;
    /** Type of the members in the group. */
    member_type?: GroupMemberType;
    /** Unique name of the group. */
    name: string;
    /** Owner of the group. */
    owner?: string;
    /** Type of the group. */
    type?: GroupType;
}
/**
 * groups-create-response
 * The response to group creation.
 */
export interface GroupsCreateResponse {
    group: Group;
}
/**
 * groups-delete-request
 * A request to delete a group.
 */
export interface GroupsDeleteRequest {
    /** The ID of the group to delete. */
    id: string;
}
/**
 * groups-delete-response
 * The response to deleting a group.
 */
export type GroupsDeleteResponse = object;
/**
 * groups-get-request
 * A request to get information about a group.
 */
export interface GroupsGetRequest {
    /** The ID of the group to get. */
    id: string;
}
/**
 * groups-get-response
 * The response to getting the group.
 */
export interface GroupsGetResponse {
    group: Group;
}
/**
 * groups-list-request
 * A request to get information about a list of groups.
 */
export interface GroupsListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** Filters the groups based on the group type. */
    group_type?: GroupType[];
    /**
     * The maximum number of groups to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /** Filters the groups on basis of member type. */
    member_type?: GroupMemberType[];
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Comma-separated fields to sort the groups by. */
    sort_by?: string[];
}
/**
 * groups-list-response
 * The response to listing the groups.
 */
export interface GroupsListResponse {
    /** The list of groups. */
    groups: Group[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/**
 * groups-update-request
 * A request to update a group.
 */
export interface GroupsUpdateRequest {
    /** The updated group's description. */
    description?: string;
    dynamic_group_info?: GroupsUpdateRequestDynamicGroupInfo;
    /** The ID of the group to update. */
    id: string;
    /** The updated group's name. */
    name?: string;
    /** The updated group's owner. */
    owner?: string;
}
/** groups-update-request-dynamic-group-info */
export interface GroupsUpdateRequestDynamicGroupInfo {
    /** Boolean expression. */
    membership_expression: BooleanExpression;
}
/**
 * groups-update-response
 * The response to group update.
 */
export interface GroupsUpdateResponse {
    group: Group;
}
/**
 * header
 * Header.
 */
export interface Header {
    /** header key. */
    key?: string;
    /** haeader value. */
    value?: string;
}
/**
 * headers
 * Defines a headers object.
 */
export interface Headers {
    /** Content-Disposition of the file. */
    content_disposition: HeadersContentDisposition;
    /** Content-ID of the file. */
    content_id?: string;
}
/** Content-Disposition of the file. */
export declare enum HeadersContentDisposition {
    Attachment = "attachment",
    Inline = "inline"
}
/**
 * headers-summary
 * Defines a headers object.
 */
export interface HeadersSummary {
    /** Content-Disposition of the file. */
    content_disposition: HeadersContentDisposition;
    /** Content-ID of the file. */
    content_id?: string;
}
/**
 * help-center
 * Portal Help Center.
 */
export interface HelpCenter {
    /** Whether the portal help center is enabled. */
    enabled?: boolean;
}
/**
 * http-request-template
 * Define the template for making HTTP requests, including URL, method,
 * headers, query parameters, body (if needed), and optional JQ filtering.
 */
export interface HttpRequestTemplate {
    /** Provide the request body content, if the method requires it. */
    body?: string;
    /**
     * Define additional headers to be sent with the request, if
     * necessary.
     */
    headers?: KeyValue[];
    /** Apply a JQ filter to extract specific data from the response. */
    jq_filter?: string;
    /**
     * Choose the HTTP request method (e.g., GET, POST, PUT, DELETE,
     * UPDATE).
     */
    method?: string;
    /** Add query parameters to the URL for filtering or specifying data. */
    query_parameters?: KeyValue[];
    /** Specify the complete URL of the HTTP request. */
    url?: string;
}
/** incident */
export type Incident = AtomBase & {
    /**
     * Timestamp when the work was actually completed.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    actual_close_date?: string;
    /** Parts to which the work is attached. */
    applies_to_parts: PartSummary[];
    /** The artifacts attached to the work item. */
    artifacts?: ArtifactSummary[];
    /** Body of the work object. */
    body?: string;
    /** Custom fields. */
    custom_fields?: object;
    /**
     * Custom schema fragments.
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    custom_schema_fragments?: string[];
    /** The users that own the work. */
    owned_by?: UserSummary[];
    pia?: AtomSummary;
    reported_by?: UserSummary;
    /**
     * Combination of stock and custom schema fragment IDs.
     * @deprecated
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    schema_fragment_ids?: string[];
    /** Enum Value defines the structure for an enum. */
    severity?: EnumValue;
    /** Describes the current stage of a object. */
    stage?: Stage;
    /** State of the object based upon the stage. */
    state?: string;
    /**
     * Stock schema fragment.
     * @example "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"
     */
    stock_schema_fragment?: string;
    /** Subtype corresponding to the custom type fragment. */
    subtype?: string;
    /** Tags associated with the object. */
    tags?: TagWithValue[];
    /**
     * Timestamp when the work is expected to be complete.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    target_close_date?: string;
    /** Title of the work object. */
    title: string;
};
/** incident-summary */
export type IncidentSummary = AtomBaseSummary & {
    /** Enum Value defines the structure for an enum. */
    severity?: EnumValueSummary;
    /** Title of the work object. */
    title: string;
};
/** incidents-count-request */
export interface IncidentsCountRequest {
    /** Filters for incidents that apply to any of the provided parts. */
    applies_to_parts?: string[];
    /**
     * Filters for incidents created by any of the provided users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: IncidentsListFiltersCreatedByOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** Filters for incidents owned by any of the provided users. */
    owned_by?: string[];
    owned_by_op?: IncidentsListFiltersOwnedByOperatorType;
    /** Filters for incidents containing any of the provided severities. */
    severity?: number[];
    /** Filters for incidents in any of the provided stages. */
    stage?: string[];
    /** Filters for incidents with any of the provided states. */
    state?: string[];
    /** Filters for incidents with the provided tag and value. */
    tags?: TagWithValueFilter[];
    /** Filters for incidents by the provided titles. */
    title?: string[];
}
/** incidents-count-response */
export interface IncidentsCountResponse {
    /**
     * Count of Unit of Measurements matching the filter.
     * @format int32
     */
    count: number;
}
/** incidents-create-request */
export interface IncidentsCreateRequest {
    /** Parts to which the work is attached. */
    applies_to_parts: string[];
    /**
     * IDs of the artifact items
     * @example ["ARTIFACT-12345"]
     */
    artifacts?: string[];
    /** Body of the work object */
    body?: string;
    /** Application-defined custom fields. */
    custom_fields?: object;
    /**
     * Requested custom schemas described abstractly. Every provided schema's
     * custom field must be specified, otherwise a bad request error is
     * returned. If a new custom schema specifier is provided, then it will be
     * added to the work, otherwise if a custom schema is omitted from the
     * specifier, it remains unmodified.
     */
    custom_schema_spec?: CustomSchemaSpec;
    /** User IDs of the users that own the work */
    owned_by?: string[];
    /**
     * Post Incident Analysis(PIA) for the incident
     * @example "ARTIFACT-12345"
     */
    pia?: string;
    /** ID of the user who reported the incident */
    reported_by?: string;
    /**
     * Severity of the work
     * @format int64
     */
    severity?: number;
    /** Create object for stage. */
    stage: CreateStage;
    /** Tags associated with the object */
    tags?: CreateTagWithValue[];
    /**
     * Timestamp when the work is expected to be complete
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    target_close_date?: string;
    /** Title of the work object */
    title: string;
}
/** incidents-create-response */
export interface IncidentsCreateResponse {
    incident: Incident;
}
/**
 * incidents-delete-request
 * A request to delete an incident.
 */
export interface IncidentsDeleteRequest {
    /** ID for the incident. */
    id: string;
}
/**
 * incidents-delete-response
 * The response to deleting the incident.
 */
export type IncidentsDeleteResponse = object;
/** incidents-get-request */
export interface IncidentsGetRequest {
    /** The ID of the incident to get. */
    id: string;
}
/** incidents-get-response */
export interface IncidentsGetResponse {
    incident: Incident;
}
/** incidents-group */
export interface IncidentsGroup {
    /** The group of incidents. */
    incidents: Incident[];
    /** Unique key according to which the items are grouped. */
    key: string;
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/** incidents-group-request */
export interface IncidentsGroupRequest {
    /** Filters for incidents that apply to any of the provided parts. */
    applies_to_parts?: string[];
    /**
     * Filters for incidents created by any of the provided users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: IncidentsListFiltersCreatedByOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** The field to group the incidents by. */
    group_by: string;
    /**
     * The maximum number of groups to return. If not set, then the
     * default is '10'.
     * @format int32
     */
    limit?: number;
    /**
     * The maximum number of incidents to return for an individual group.
     * The default is '50'.
     * @format int32
     */
    limit_per_group?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** Filters for incidents owned by any of the provided users. */
    owned_by?: string[];
    owned_by_op?: IncidentsListFiltersOwnedByOperatorType;
    /** Filters for incidents containing any of the provided severities. */
    severity?: number[];
    /** Comma-separated fields to sort the incidents by. */
    sort_by?: string[];
    /** Filters for incidents in any of the provided stages. */
    stage?: string[];
    /** Filters for incidents with any of the provided states. */
    state?: string[];
    /** Filters for incidents with the provided tag and value. */
    tags?: TagWithValueFilter[];
    /** Filters for incidents by the provided titles. */
    title?: string[];
}
/** incidents-group-response */
export interface IncidentsGroupResponse {
    /** The list of groups. */
    groups: IncidentsGroup[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
export declare enum IncidentsListFiltersCreatedByOperatorType {
    Any = "any",
    NotAny = "not_any"
}
export declare enum IncidentsListFiltersOwnedByOperatorType {
    Any = "any",
    NotAny = "not_any"
}
/** incidents-list-request */
export interface IncidentsListRequest {
    /** Filters for incidents that apply to any of the provided parts. */
    applies_to_parts?: string[];
    /**
     * Filters for incidents created by any of the provided users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: IncidentsListFiltersCreatedByOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of items.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** Filters for incidents owned by any of the provided users. */
    owned_by?: string[];
    owned_by_op?: IncidentsListFiltersOwnedByOperatorType;
    /** Filters for incidents containing any of the provided severities. */
    severity?: number[];
    /** The list of fields to sort the items by and how to sort them. */
    sort_by?: string[];
    /** Filters for incidents in any of the provided stages. */
    stage?: string[];
    /** Filters for incidents with any of the provided states. */
    state?: string[];
    /** Filters for incidents with the provided tag and value. */
    tags?: TagWithValueFilter[];
    /** Filters for incidents by the provided titles. */
    title?: string[];
}
/** incidents-list-response */
export interface IncidentsListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The matching incidents. */
    result: Incident[];
}
/** incidents-update-request */
export interface IncidentsUpdateRequest {
    /** Parts to which the work is attached. */
    applies_to_parts?: string[];
    /**
     * IDs of the artifact items
     * @example ["ARTIFACT-12345"]
     */
    artifacts?: string[];
    /** Body of the work object */
    body?: string;
    /** Application-defined custom fields. */
    custom_fields?: object;
    /**
     * Requested custom schemas described abstractly. Every provided schema's
     * custom field must be specified, otherwise a bad request error is
     * returned. If a new custom schema specifier is provided, then it will be
     * added to the work, otherwise if a custom schema is omitted from the
     * specifier, it remains unmodified.
     */
    custom_schema_spec?: CustomSchemaSpec;
    /** The ID of the incident to be updated. */
    id: string;
    /** User IDs of the users that own the work */
    owned_by?: string[];
    /**
     * Post Incident Analysis(PIA) for the incident
     * @example "ARTIFACT-12345"
     */
    pia?: string;
    /** ID of the user who reported the incident */
    reported_by?: string;
    /**
     * Severity of the work
     * @format int64
     */
    severity?: number;
    /** Update object for Stage. */
    stage?: UpdateStage;
    /** Tags associated with the object */
    tags?: UpdateTagWithValue[];
    /**
     * Timestamp when the work is expected to be complete
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    target_close_date?: string;
    /** Title of the work object */
    title?: string;
}
/** incidents-update-response */
export interface IncidentsUpdateResponse {
    incident: Incident;
}
/**
 * inference-details
 * Holds details about the inference of a part. Including evidence and
 * confidence.
 */
export interface InferenceDetails {
    /**
     * A confidence score computed by the inference engine. Currently, the
     * score is not normalized across different part inferences. Until
     * this is improved, this should only be comparable to confidence of
     * same part type.
     * @format double
     */
    confidence?: number;
    /**
     * A evidences that the inferer were able to find that justify the
     * inference outcome.
     */
    evidences?: string[];
    /**
     * The time when this inference occured.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    inferred_at?: string;
}
/**
 * initial-submission
 * A request to create a new marketplace submission.
 */
export interface InitialSubmission {
    access_level?: AccessLevel;
    /**
     * Artifact IDs relevant to the marketplace submission.
     * @example ["ARTIFACT-12345"]
     */
    artifacts?: string[];
    /** Marketplace category IDs relevant to the marketplace submission. */
    categories?: string[];
    /**
     * Flag indicating whether marketplace submission will be soon
     * available to purchase.
     */
    coming_soon?: boolean;
    /**
     * Description of the marketplace submission (Markdown formatted
     * text).
     */
    description: string;
    /**
     * Artifact ID relevant to the marketplace submission icon.
     * @example "ARTIFACT-12345"
     */
    icon_artifact: string;
    /**
     * Marketplace listing type defines what backing service will be used when
     * validating a create marketplace submission request, installing
     * marketplace items in some organizations, etc. It is important to note
     * that marketplace listings of type app are not backed by any service and
     * are only placeholders for existing functionality in the DevRev platform
     * (e.g. Jira Airdrop). Note: 'flow' type is deprecated, use 'snapin'
     * instead.
     */
    item_type?: MarketplaceSubmissionItemType;
    /** Keywords of the marketplace submission. */
    keywords?: string;
    /** Markteplace where the marketplace submission will be created. */
    marketplace: string;
    /** The name of the marketplace submission. */
    name: string;
    /**
     * URL slug of the marketplace listing. If not provided the slug will
     * be auto-generated based on the provided name.
     */
    slug?: string;
    /** SnapIn Version ID relevant to the marketplace submission. */
    snap_in_version?: string;
    /** Stock keeping unit IDs relevant to the marketplace submission. */
    stock_keeping_units?: string[];
    /** Summary of the marketplace submission. */
    summary: string;
    /** Tagline of the marketplace submission. */
    tagline: string;
    template?: MarketplaceSubmissionUpsertTemplate;
}
/** initialize-snap-component-request */
export interface InitializeSnapComponentRequest {
    /** ID of the snap-component to be initialized. */
    id: string;
    /**
     * Object ID in context of which the snap-component is initialized.
     * @example "ISS-12345"
     */
    object_id?: string;
}
/** initialize-snap-component-response */
export interface InitializeSnapComponentResponse {
    /** Output SnapKit body. */
    snap_kit_body?: object;
}
/**
 * Identifies the nature of the input value, distinguishing between a
 * literal constant and a dynamic expression.
 */
export declare enum InputValueDefinitionType {
    Expression = "expression",
    JsonataExpression = "jsonata_expression",
    Literal = "literal"
}
/** insight */
export type Insight = (RealTimeInsight | WindowBasedInsight) & {
    type: InsightType;
};
/** insight-base */
export type InsightBase = AtomBase & {
    /** Description of insight. */
    description?: string;
    insight_type?: InsightType;
    /** If true, a lower value of this insight is better. */
    inverted?: boolean;
    /** Name of the insight. */
    name?: string;
    /** Parents of this insight. */
    parent_ids?: string[];
};
/** insight-base-summary */
export type InsightBaseSummary = AtomBaseSummary;
export declare enum InsightType {
    RealTimeInsight = "real_time_insight",
    WindowBasedInsight = "window_based_insight"
}
/** insight-value */
export type InsightValue = (RealTimeInsightValue | WindowBasedInsightValue) & {
    type: InsightValueType;
};
/** insight-value-base */
export type InsightValueBase = AtomBase & {
    /** Id of the object for which this value corresponds to. */
    for_object_id?: string;
    /** Id of the insight for which this value corresponds to. */
    insight_id?: string;
    insight_value_type?: InsightValueType;
};
/** insight-value-base-summary */
export type InsightValueBaseSummary = AtomBaseSummary;
export declare enum InsightValueType {
    RealTimeInsightValue = "real_time_insight_value",
    WindowBasedInsightValue = "window_based_insight_value"
}
/** insights-get-request */
export interface InsightsGetRequest {
    /** The insights's ID. */
    id: string;
}
/** insights-get-response */
export interface InsightsGetResponse {
    insight: Insight;
}
/** insights-list-request */
export interface InsightsListRequest {
    /**
     * The cursor to begin iteration from, otherwise if not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of insights to return. If not set, then the
     * default is '50'.
     * @format int32
     */
    limit?: number;
}
/** insights-list-response */
export interface InsightsListResponse {
    /**
     * The cursor that should be used to resume iteration, otherwise if
     * not provided, then iteration has completed.
     */
    cursor?: string;
    /** The list of insights. */
    insights: Insight[];
}
/** insights-values-list-request */
export interface InsightsValuesListRequest {
    /**
     * The cursor to begin iteration from, otherwise if not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * Filter based on for_object_id.
     * @example ["PROD-12345"]
     */
    for_object_ids?: string[];
    /** Filter based on insight ids. */
    insight_ids?: string[];
    /**
     * The maximum number of insights to return. If not set, then the
     * default is '50'.
     * @format int32
     */
    limit?: number;
}
/** insights-values-list-response */
export interface InsightsValuesListResponse {
    /**
     * The cursor that should be used to resume iteration, otherwise if
     * not provided, then iteration has completed.
     */
    cursor?: string;
    /** The list of insight values. */
    insight_values: InsightValue[];
}
/** Format in which content is defined. */
export declare enum InstructionsFormat {
    Markdown = "markdown"
}
/** interaction */
export type Interaction = AtomBase & {
    /** Accounts in the interaction. */
    accounts?: AccountSummary[];
    /** Details of the parts relevant to the interaction. */
    applies_to_parts?: PartSummary[];
    /** Body of the interaction object. */
    body?: string;
    /**
     * Timestamp when the interaction is closed.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    closed_at?: string;
    closed_by?: UserSummary;
    /** Custom fields. */
    custom_fields?: object;
    /**
     * Custom schema fragments.
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    custom_schema_fragments?: string[];
    /**
     * Timestamp when the interaction is embedded into the parent object.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    embedded_at?: string;
    embedded_by?: UserSummary;
    /**
     * Timestamp of the first message by dev user in the interaction.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    first_response_timestamp?: string;
    /** Whether the interaction is spam. */
    is_spam?: boolean;
    /** Message on a interaction. */
    last_external_message?: InteractionMessage;
    /** Message on a interaction. */
    last_message?: InteractionMessage;
    /** Members in the interaction. */
    members?: UserSummary[];
    owned_by?: UserSummary;
    /** Composite type for general parent details. */
    parent?: ParentReference;
    /**
     * Combination of stock and custom schema fragment IDs.
     * @deprecated
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    schema_fragment_ids?: string[];
    sla?: SlaSummary;
    /** SLA summary for the object. */
    sla_summary?: ArchetypeSlaSummary;
    sla_tracker?: SlaTrackerSummary;
    /** Enum Value defines the structure for an enum. */
    source_channel?: EnumValue;
    /** Describes the current stage of a object. */
    stage?: Stage;
    /** State of the object based upon the stage. */
    state?: string;
    /**
     * Stock schema fragment.
     * @example "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"
     */
    stock_schema_fragment?: string;
    /** Subtype corresponding to the custom type fragment. */
    subtype?: string;
    /** Aggregate of surveys responses. */
    surveys_aggregation?: ArchetypeSurveyAggregation[];
    /** The channel where the interaction will be broadcasted. */
    sync_channels?: EnumValue[];
};
/**
 * interaction-handler-definition
 * Interaction handler definition.
 */
export interface InteractionHandlerDefinition {
    /**
     * Function called to initialize the interaction when type is
     * snap_component.
     */
    initializer?: string;
    /** Name of the snap kit action used for the snap-component. */
    snap_kit_action_name?: string;
    /** Interaction type. */
    type?: InteractionHandlerDefinitionType;
}
/** Interaction type. */
export declare enum InteractionHandlerDefinitionType {
    SnapComponent = "snap_component"
}
/**
 * interaction-message
 * Message on a interaction.
 */
export interface InteractionMessage {
    created_by_id?: AtomSummary;
    id?: AtomSummary;
    /**
     * Timestmap of the message.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    timestamp?: string;
    /** Type of the user that created the message. */
    user_type?: InteractionMessageUserType;
}
/** Type of the user that created the message. */
export declare enum InteractionMessageUserType {
    Devu = "devu",
    Revu = "revu",
    Sysu = "sysu"
}
/** interaction-summary */
export type InteractionSummary = AtomBaseSummary;
/** interactions-create-request */
export interface InteractionsCreateRequest {
    /**
     * The part that the interaction applies to.
     * @example "PROD-12345"
     */
    applies_to_part?: string;
    /** Body of the interaction object. */
    body?: string;
    /** Application-defined custom fields. */
    custom_fields?: object;
    /**
     * Requested custom schemas described abstractly. Every provided schema's
     * custom field must be specified, otherwise a bad request error is
     * returned. If a new custom schema specifier is provided, then it will be
     * added to the work, otherwise if a custom schema is omitted from the
     * specifier, it remains unmodified.
     */
    custom_schema_spec?: CustomSchemaSpec;
    /** Whether the interaction is spam. */
    is_spam?: boolean;
    /**
     * The users in the interaction.
     * @example ["DEVU-12345"]
     */
    members?: string[];
    /** Initial messages on the interaction. */
    messages?: InteractionsCreateRequestMessage[];
    /**
     * The owner of the interaction.
     * @example "DEVU-12345"
     */
    owned_by?: string;
    /**
     * The channel from where the interaction is initiated.
     * @format int64
     */
    source_channel: number;
    /** Create object for stage. */
    stage: CreateStage;
    /** The channels where the interaction will be broadcasted. */
    sync_channels?: number[];
}
/** interactions-create-request-message */
export interface InteractionsCreateRequestMessage {
    /**
     * The IDs of the artifacts to the message.
     * @example ["ARTIFACT-12345"]
     */
    artifacts?: string[];
    /** The message's body. */
    body?: string;
}
/**
 * interactions-create-response
 * The response to creating an interaction.
 */
export interface InteractionsCreateResponse {
    interaction: Interaction;
    /** The latest messages on the interaction. */
    messages?: TimelineEntry[];
}
/**
 * interactions-delete-request
 * The request to delete an interaction.
 */
export interface InteractionsDeleteRequest {
    /** The ID of the interaction to delete. */
    id: string;
}
/**
 * interactions-delete-response
 * The response for deleting an interaction.
 */
export type InteractionsDeleteResponse = object;
/**
 * interactions-embed-request
 * Request to embed an interaction into parent object.
 */
export interface InteractionsEmbedRequest {
    /**
     * The ID of the interaction to embed. A new interaction will be
     * created if id is not provided.
     */
    id?: string;
    /**
     * The ID of the parent object to embed the interaction into. A new
     * instance of the parent object will be created if ID is not
     * provided.
     */
    parent?: string;
}
/**
 * interactions-embed-response
 * The response to embedding an interaction into parent object.
 */
export interface InteractionsEmbedResponse {
    interaction: Interaction;
    parent?: 'ticket';
    ticket?: Ticket;
}
export declare enum InteractionsFilterAppliesToPartsOpOperatorType {
    Any = "any",
    Empty = "empty",
    NotAny = "not_any",
    NotEmpty = "not_empty"
}
export declare enum InteractionsFilterClosedByOpOperatorType {
    Any = "any",
    Empty = "empty",
    NotAny = "not_any",
    NotEmpty = "not_empty"
}
export declare enum InteractionsFilterCreatedByOpOperatorType {
    Any = "any",
    NotAny = "not_any"
}
export declare enum InteractionsFilterEmbeddedByOpOperatorType {
    Any = "any",
    Empty = "empty",
    NotAny = "not_any",
    NotEmpty = "not_empty"
}
export declare enum InteractionsFilterMembersOpOperatorType {
    All = "all",
    Any = "any",
    Empty = "empty",
    NotAny = "not_any",
    NotEmpty = "not_empty"
}
export declare enum InteractionsFilterOwnedByOpOperatorType {
    Any = "any",
    Empty = "empty",
    NotAny = "not_any",
    NotEmpty = "not_empty"
}
export declare enum InteractionsFilterParentOpOperatorType {
    Any = "any",
    Empty = "empty",
    NotAny = "not_any",
    NotEmpty = "not_empty"
}
/**
 * interactions-get-request
 * Request to get an interaction.
 */
export interface InteractionsGetRequest {
    /** The requested interaction's ID. */
    id: string;
    /** Whether to include the latest messages on the interaction. */
    include_latest_messages?: boolean;
}
/**
 * interactions-get-response
 * The response to getting an interaction's information.
 */
export interface InteractionsGetResponse {
    interaction: Interaction;
    /** The latest messages on the interaction. */
    messages?: TimelineEntry[];
    timeline_info?: TimelineInfo;
}
/**
 * interactions-list-request
 * The request to get information about a list of interactions.
 */
export interface InteractionsListRequest {
    /**
     * Filters for interactions that apply to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_parts?: string[];
    applies_to_parts_op?: InteractionsFilterAppliesToPartsOpOperatorType;
    /** Provides ways to specify date ranges on objects. */
    closed_at?: DateFilter;
    /** Filters for interactions closed by any of the provided users. */
    closed_by?: string[];
    closed_by_op?: InteractionsFilterClosedByOpOperatorType;
    /**
     * Filters for interactions created by any of the provided users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: InteractionsFilterCreatedByOpOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** Provides ways to specify date ranges on objects. */
    embedded_at?: DateFilter;
    /**
     * Filters for interactions embedded by any of the provided users in
     * parent object.
     */
    embedded_by?: string[];
    embedded_by_op?: InteractionsFilterEmbeddedByOpOperatorType;
    /** Filters for interactions that are spam. */
    is_spam?: boolean;
    /**
     * The maximum number of interactions to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * Filters for interactions where these users are participants.
     * @example ["DEVU-12345"]
     */
    members?: string[];
    members_op?: InteractionsFilterMembersOpOperatorType;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** Filters for interactions owned by any of the provided users. */
    owned_by?: string[];
    owned_by_op?: InteractionsFilterOwnedByOpOperatorType;
    /** Filters for interactions by its parent. */
    parent?: string[];
    parent_op?: InteractionsFilterParentOpOperatorType;
    /** The filter for SLA summary. */
    sla_summary?: SlaSummaryFilter;
    /** Fields to sort the interactions by and the direction to sort them. */
    sort_by?: string[];
    /**
     * Filters for interactions with any of the provided source channel
     * enum ids.
     */
    source_channel?: number[];
    /** Filters for interactions in any of the provided stages. */
    stage?: string[];
    /** Filters for interactions with any of the provided states. */
    state?: string[];
    /** The filter for survey aggregation. */
    surveys?: SurveyAggregationFilter;
    /**
     * Filters for interactions with any of the provided sync channel enum
     * ids.
     */
    sync_channels?: number[];
}
/**
 * interactions-list-response
 * The response to listing the interactions.
 */
export interface InteractionsListResponse {
    /** The list of interactions. */
    interactions: Interaction[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /**
     * Maps interaction ID to its Timeline information, or omitted if not
     * available.
     */
    timeline_info?: Record<string, TimelineInfo>;
}
/**
 * interactions-update-request
 * Request to update an interaction.
 */
export interface InteractionsUpdateRequest {
    /**
     * Updates the part that the interaction applies to.
     * @example "PROD-12345"
     */
    applies_to_part?: string;
    /** Updated body of the work object, or unchanged if not provided. */
    body?: string;
    /** Application-defined custom fields. */
    custom_fields?: object;
    /**
     * Requested custom schemas described abstractly. Every provided schema's
     * custom field must be specified, otherwise a bad request error is
     * returned. If a new custom schema specifier is provided, then it will be
     * added to the work, otherwise if a custom schema is omitted from the
     * specifier, it remains unmodified.
     */
    custom_schema_spec?: CustomSchemaSpec;
    /** The ID of the interaction to update. */
    id: string;
    /** Whether the interaction is spam. */
    is_spam?: boolean;
    /**
     * Sets the member IDs to the provided user IDs.
     * @example ["DEVU-12345"]
     */
    members?: string[];
    /**
     * Sets the owner ID to the provided user IDs.
     * @example "DEVU-12345"
     */
    owned_by?: string;
    /** Update object for Stage. */
    stage?: UpdateStage;
    /** The channels where the interaction will be broadcasted. */
    sync_channels?: number[];
}
/**
 * interactions-update-response
 * The response to updating an interaction.
 */
export interface InteractionsUpdateResponse {
    interaction: Interaction;
}
/** invoice */
export type Invoice = AtomBase & {
    account?: AccountSummary;
    /**
     * Final amount due at this time for this invoice. If the invoice
     * total is smaller than the minimum charge amount, for example, or if
     * there is account credit that can be applied to the invoice, the
     * amount_due may be 0. If there is a positive starting_balance for
     * the invoice (the customer owes money), the amount_due will also
     * take that into account. The charge that gets generated for the
     * invoice will be for the amount specified in amount_due.
     * @format double
     */
    amount_due: number;
    /**
     * The amount that was paid.
     * @format double
     */
    amount_paid: number;
    /**
     * The amount remaining that is due.
     * @format double
     */
    amount_remaining: number;
    /**
     * Date on which invoice was generated.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    billing_date: string;
    /** Contact Details of the customer. */
    billing_details?: ContactDetails;
    /** The billing contact's email. */
    billing_email: string;
    /**
     * Provides the amount of credits that were applied to this invoice's
     * total.
     * @format double
     */
    credits_applied?: number;
    /** The currency for which the invoice is generated. */
    currency: string;
    /**
     * The date on which payment for this invoice is due. This value will
     * be null for invoices where collection_method=charge_automatically.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    due_date?: string;
    /** Platform on which the invoice will be generated. */
    invoicing_platform: InvoiceInvoicingPlatform;
    /** The line items that make up the invoice. */
    items?: InvoiceLineItemSummary[];
    /** Payments platform on which the payment on the invoice will be made. */
    payments_platform: InvoicePaymentsPlatform;
    /** URL to download the invoice in pdf format. */
    pdf_url?: string;
    /**
     * End of the usage period during which invoice items were added to
     * this invoice.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    period_end?: string;
    /**
     * Start of the usage period during which invoice items were added to
     * this invoice.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    period_start?: string;
    /**
     * Service plan information if the invoice is generated for a service
     * plan or plans information in case if invoice is to be generated at
     * the account level.
     */
    service_plan_details?: ServicePlanDetail[];
    /** Contact Details of the customer. */
    shipping_details?: ContactDetails;
    /** Status of the invoice. */
    status: InvoiceStatus;
    /** Stripe metadata used for invoicing. */
    stripe_invoicing_details?: StripeInvoicingDetail;
    /**
     * Stripe metadata need for payment, if payment is being done through
     * stripe.
     */
    stripe_payment_details?: StripePaymentDetail;
    /**
     * Total of all subscriptions, invoice items, and prorations on the
     * invoice before any invoice level discount or tax is applied.
     * @format double
     */
    subtotal: number;
    /**
     * The amount of tax on this invoice. This is the sum of all the tax
     * amounts on this invoice.
     * @format double
     */
    tax: number;
    /**
     * The invoice total is the sum of charges included in the invoice.
     * @format double
     */
    total: number;
    /** Type of the invoice. */
    type: InvoiceType;
};
/** Platform on which the invoice will be generated. */
export declare enum InvoiceInvoicingPlatform {
    Aws = "aws",
    Stripe = "stripe"
}
/** invoice-line-item */
export type InvoiceLineItem = AtomBase & {
    account?: AccountSummary;
    /**
     * Array of pricing, quantity and amount related details, that
     * constitute charges in line item.
     */
    charge_details?: ChargeDetail[];
    /**
     * The devrev credits applied on top of the invoice, represented in the
     * form of a line item.
     */
    credit_line_item_details?: CreditLineItem;
    /** Description of the invoice line item. */
    description?: string;
    /** The discount applied on top of the usage. */
    discount_line_item_details?: DiscountLineItem;
    invoice_id: InvoiceSummary;
    /**
     * The period associated with this invoice item. End of the usage
     * period for which invoice items were added to this invoice.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    period_end?: string;
    /**
     * The period associated with this invoice item. Start of the usage
     * period for which invoice items were added to this invoice.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    period_start?: string;
    /**
     * The SKU level prorated value on top of the usage considering the SKU
     * active time.
     */
    prorated_line_item_details?: ProratedLineItem;
    /**
     * The aggregated quantity across all charge detail items.
     * @format int32
     */
    quantity?: number;
    /**
     * The regular metered item for each SKU on which the utilization is
     * recorded.
     */
    regular_line_item_details?: RegularLineItem;
    /**
     * Service plan information if the invoice item is generated for a
     * service plan or plans information in case if invoice item is to be
     * generated at the account level.
     */
    service_plan_details?: ServicePlanDetail[];
    /**
     * Tax on the invoice item total amount.
     * @format double
     */
    tax_amount?: number;
    /**
     * The tax applied on top of the invoice, represented in the form of a
     * line item.
     */
    tax_line_item_details?: TaxLineItem;
    /**
     * The invoice item total is the sum of all the charged tiers included
     * in this invoice item.
     * @format double
     */
    total?: number;
    /** The type of line item. */
    type: InvoiceLineItemType;
    /**
     * The derived unit price on the line item total amount.
     * @format double
     */
    unit_price?: number;
};
/** invoice-line-item-summary */
export type InvoiceLineItemSummary = AtomBaseSummary & {
    /**
     * Array of pricing, quantity and amount related details, that
     * constitute charges in line item.
     */
    charge_details?: ChargeDetailSummary[];
    /** Description of the invoice line item. */
    description?: string;
    /**
     * The period associated with this invoice item. End of the usage
     * period for which invoice items were added to this invoice.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    period_end?: string;
    /**
     * The period associated with this invoice item. Start of the usage
     * period for which invoice items were added to this invoice.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    period_start?: string;
    /**
     * The aggregated quantity across all charge detail items.
     * @format int32
     */
    quantity?: number;
    /**
     * Tax on the invoice item total amount.
     * @format double
     */
    tax_amount?: number;
    /**
     * The invoice item total is the sum of all the charged tiers included
     * in this invoice item.
     * @format double
     */
    total?: number;
    /** The type of line item. */
    type: InvoiceLineItemType;
    /**
     * The derived unit price on the line item total amount.
     * @format double
     */
    unit_price?: number;
};
/** The type of line item. */
export declare enum InvoiceLineItemType {
    Credit = "credit",
    Discount = "discount",
    Prorated = "prorated",
    Regular = "regular",
    Tax = "tax"
}
/** Payments platform on which the payment on the invoice will be made. */
export declare enum InvoicePaymentsPlatform {
    Aws = "aws",
    Stripe = "stripe"
}
/** Status of the invoice. */
export declare enum InvoiceStatus {
    Draft = "draft",
    FinalizedPending = "finalized_pending",
    Open = "open",
    Paid = "paid",
    Posted = "posted",
    Uncollectible = "uncollectible",
    Void = "void"
}
/** invoice-summary */
export type InvoiceSummary = AtomBaseSummary;
/** Type of the invoice. */
export declare enum InvoiceType {
    OneTime = "one_time",
    Recurring = "recurring"
}
/** Invoice status update supported values. */
export declare enum InvoiceUpdateStatus {
    Uncollectible = "uncollectible",
    Void = "void"
}
/** invoices-count-request */
export interface InvoicesCountRequest {
    /**
     * Filter invoices by account.
     * @example ["ACC-12345"]
     */
    account_ids?: string[];
    /**
     * Filter items which have invoice amount due greater than value
     * provided.
     * @format double
     */
    amount_due_greater_than?: number;
    /**
     * Filter items which have invoice amount due less than value
     * provided.
     * @format double
     */
    amount_due_less_than?: number;
    /**
     * Filter items which have invoice amount paid greater than value
     * provided.
     * @format double
     */
    amount_paid_greater_than?: number;
    /**
     * Filter items which have invoice amount paid less than value
     * provided.
     * @format double
     */
    amount_paid_less_than?: number;
    /** Provides ways to specify date ranges on objects. */
    billing_date?: DateFilter;
    /**
     * Filter items which have billing date after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    billing_date_after?: string;
    /**
     * Filter items which have billing date before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    billing_date_before?: string;
    /** Provides ways to specify date ranges on objects. */
    due_date?: DateFilter;
    /**
     * Filter items which have due date after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    due_date_after?: string;
    /**
     * Filter items which have due date before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    due_date_before?: string;
    /** The list of Invoice DONs which are to be aggregated. */
    ids?: string[];
    /**
     * Filter items by doing queries on revs. To allow devs filter
     * invoices for specific revs.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org_ids?: string[];
    /** The list of Invoice statuses which are to be aggregated. */
    statuses?: InvoiceStatus[];
    /**
     * Filter items which have invoice total greater than value provided.
     * @format double
     */
    total_greater_than?: number;
    /**
     * Filter items which have invoice total less than value provided.
     * @format double
     */
    total_less_than?: number;
    /** The list of invoice types which are to be aggregated. */
    types?: InvoiceType[];
}
/** invoices-count-response */
export interface InvoicesCountResponse {
    /**
     * Count of Invoices matching the filter.
     * @format int32
     */
    count: number;
}
/** invoices-delete-request */
export interface InvoicesDeleteRequest {
    /** The invoice DON. */
    id: string;
}
/** invoices-download-request */
export interface InvoicesDownloadRequest {
    /** The invoice object's DON. */
    id: string;
}
/** invoices-download-response */
export interface InvoicesDownloadResponse {
    /**
     * The invoice pdf bytes.
     * @format byte
     */
    data?: string;
}
/** invoices-get-request */
export interface InvoicesGetRequest {
    /** The invoice object's DON. */
    id: string;
}
/** invoices-get-response */
export interface InvoicesGetResponse {
    invoice: Invoice;
}
/** invoices-list-request */
export interface InvoicesListRequest {
    /**
     * Filter invoices by account.
     * @example ["ACC-12345"]
     */
    account_ids?: string[];
    /**
     * Filter items which have invoice amount due greater than value
     * provided.
     * @format double
     */
    amount_due_greater_than?: number;
    /**
     * Filter items which have invoice amount due less than value
     * provided.
     * @format double
     */
    amount_due_less_than?: number;
    /**
     * Filter items which have invoice amount paid greater than value
     * provided.
     * @format double
     */
    amount_paid_greater_than?: number;
    /**
     * Filter items which have invoice amount paid less than value
     * provided.
     * @format double
     */
    amount_paid_less_than?: number;
    /** Provides ways to specify date ranges on objects. */
    billing_date?: DateFilter;
    /**
     * Filter items which have billing date after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    billing_date_after?: string;
    /**
     * Filter items which have billing date before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    billing_date_before?: string;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** Provides ways to specify date ranges on objects. */
    due_date?: DateFilter;
    /**
     * Filter items which have due date after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    due_date_after?: string;
    /**
     * Filter items which have due date before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    due_date_before?: string;
    /** The list of Invoice DONs which are to be aggregated. */
    ids?: string[];
    /**
     * The maximum number of invoices to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /**
     * Filter items by doing queries on revs. To allow devs filter
     * invoices for specific revs.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org_ids?: string[];
    /**
     * List of fields to sort the Invoice object, by and how to sort them.
     * Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
    /** The list of Invoice statuses which are to be aggregated. */
    statuses?: InvoiceStatus[];
    /**
     * Filter items which have invoice total greater than value provided.
     * @format double
     */
    total_greater_than?: number;
    /**
     * Filter items which have invoice total less than value provided.
     * @format double
     */
    total_less_than?: number;
    /** The list of invoice types which are to be aggregated. */
    types?: InvoiceType[];
}
/** invoices-list-response */
export interface InvoicesListResponse {
    /** The list of Invoice objects. */
    invoices: Invoice[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/** invoices-one-time-create-request */
export interface InvoicesOneTimeCreateRequest {
    /**
     * The account for which invoice is to be created.
     * @example "ACC-12345"
     */
    account_id: string;
    /** Add invoice line items. */
    add_invoice_line_items?: UpdateInvoiceItemsAddInvoiceLineItem[];
    /**
     * The date on which payment for this invoice is due.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    due_date?: string;
    /**
     * If set to true, the invoice is finalized and cannot be updated.If
     * set to false, the invoice is created in draft state and can be
     * updated.
     */
    finalize?: boolean;
}
/** invoices-one-time-create-response */
export interface InvoicesOneTimeCreateResponse {
    invoice: Invoice;
}
/** invoices-pay-request */
export interface InvoicesPayRequest {
    /** The invoice object's DON. */
    id: string;
}
/** invoices-pay-response */
export interface InvoicesPayResponse {
    /** URL to pay the invoice. */
    invoice_pay_url?: string;
}
/** invoices-update-request */
export interface InvoicesUpdateRequest {
    /**
     * The date on which payment for this invoice is due.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    due_date?: string;
    /**
     * If set to true, the invoice is finalized and cannot be updated.If
     * set to false, the invoice is created in draft state and can be
     * updated.
     */
    finalize?: boolean;
    /** The invoice object's DON. */
    id: string;
    invoice_items?: UpdateInvoiceItems;
    /** Invoice status update supported values. */
    status?: InvoiceUpdateStatus;
}
/** invoices-update-response */
export interface InvoicesUpdateResponse {
    invoice: Invoice;
}
/** Schema type used to describe fields. */
export declare enum IoPortFieldsSchemaType {
    FieldDescriptor = "field_descriptor"
}
/** issue */
export type Issue = WorkBase & {
    /** Accounts associated to issues. */
    accounts?: AccountSummary[];
    /**
     * Actual effort to complete the issue.
     * @format double
     */
    actual_effort?: number;
    /**
     * Actual start date for the object.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    actual_start_date?: string;
    /** Part versions relevant to the work. */
    applies_to_versions?: string[];
    /** Parts associated based on git events. */
    developed_with?: PartSummary[];
    /**
     * Estimated effort to complete the issue.
     * @format double
     */
    estimated_effort?: number;
    /** Priority of the work based upon impact and criticality. */
    priority?: IssuePriority;
    /** Enum Value defines the structure for an enum. */
    priority_v2?: EnumValue;
    /** Versions that will contain the resolving commit IDs. */
    release_versions?: string[];
    /** Rev orgs associated to issues. */
    rev_orgs?: OrgSummary[];
    /**
     * Rev Score of the issue.
     * @format double
     */
    rev_score?: number;
    /** Vista group item. */
    sprint?: VistaGroupItemSummary;
    /**
     * Target start date for the object.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    target_start_date?: string;
};
/** Priority of the work based upon impact and criticality. */
export declare enum IssuePriority {
    P0 = "p0",
    P1 = "p1",
    P2 = "p2",
    P3 = "p3"
}
/**
 * issue-selector
 * The conditions by which an issue is selected to be under the SLA
 * policy. AND is taken between the filters on different fields.
 */
export interface IssueSelector {
    /**
     * Custom fields on the issue with their fully qualified names and the
     * associated with their exact allowed values. The SLA policy applies
     * to issues where all named custom fields have exactly the specified
     * values.
     */
    custom_fields?: object;
    /** The SLA policy applies to the issues of these parts. */
    parts?: PartSummary[];
    /** The SLA policy applies to the issues with these customers. */
    rev_orgs?: OrgSummary[];
    /** The SLA policy applies to issues with these stages. */
    stage_name?: string[];
    /** The issue subtype for which the SLA policy applies. */
    subtype?: string[];
    /**
     * Specifies the logical operation to perform between the presence of the
     * specified tags, whether all or any are needed.
     */
    tag_op?: IssueSelectorTagOp;
    /**
     * The SLA policy applies to issues with these tags. If empty, the tag
     * filter isn't applied.
     */
    tags?: TagSummary[];
}
/**
 * Specifies the logical operation to perform between the presence of the
 * specified tags, whether all or any are needed.
 */
export declare enum IssueSelectorTagOp {
    All = "all",
    Any = "any",
    NotAny = "not_any"
}
/** issue-summary */
export type IssueSummary = WorkBaseSummary & {
    /** Priority of the work based upon impact and criticality. */
    priority?: IssuePriority;
};
/** job */
export type Job = AtomBase & {
    /** External reference. */
    external_ref?: string;
    /** Category of your job. */
    job_category?: JobCategory;
    /** Name of your job. */
    job_id?: string;
    owned_by_id?: UserSummary;
    /** Objects associated with this job. */
    parent_ids?: AtomSummary[];
    /**
     * Progress of your item in percentage.
     * @format int32
     */
    progress?: number;
    /** State of your Job. */
    state?: JobState;
    /** Title of your item. */
    title?: string;
};
/** Category of your job. */
export declare enum JobCategory {
    MergeAccount = "merge_account",
    MergeDevuser = "merge_devuser",
    MergeRevuser = "merge_revuser",
    MoveRevuser = "move_revuser"
}
/**
 * job-history-item
 * Defines a job history line item.
 */
export interface JobHistoryItem {
    /** Enum Value defines the structure for an enum. */
    employment_status?: EnumValue;
    /**
     * The end date of the job, or not specified if current.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    end_date?: string;
    /** Is this the current active job for the user. */
    is_current?: boolean;
    /** The job location for the user. */
    location?: string;
    /**
     * The start date of the job.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    start_date?: string;
    /** The job title for the user. */
    title?: string;
}
/** State of your Job. */
export declare enum JobState {
    Completed = "completed",
    Failed = "failed",
    InProgress = "in_progress",
    Queued = "queued",
    Started = "started"
}
/** job-summary */
export type JobSummary = AtomBaseSummary;
/**
 * jobs-get-request
 * Request object to get a job's information.
 */
export interface JobsGetRequest {
    /** The ID of the job to be retrieved. */
    id: string;
}
/**
 * jobs-get-response
 * The returned job.
 */
export interface JobsGetResponse {
    job: Job;
}
/**
 * jobs-list-request
 * List the jobs.
 */
export interface JobsListRequest {
    /** Filters for jobs created by the specified user(s). */
    created_by?: string[];
    created_by_op?: RevObjectTagsOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of jobs to return per page. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** Filters on parent ids for jobs. */
    parent_ids?: string[];
    /** Fields to sort the jobs by and the direction to sort them in. */
    sort_by?: string[];
}
/** jobs-list-response */
export interface JobsListResponse {
    jobs: Job[];
}
/** Type of the key extractor. */
export declare enum KeyExtractorExecutorType {
    Rego = "rego"
}
/**
 * key-value
 * Key value.
 */
export interface KeyValue {
    /** Specify a unique identifier (name) for this piece of data. */
    key?: string;
    /** Specify the actual data associated with the chosen key. */
    value?: string;
}
/**
 * key-value-pair
 * Stores a string key to string value mapping.
 */
export interface KeyValuePair {
    /** Key. */
    key: string;
    /** Value. */
    value?: string;
}
/** keyring */
export type Keyring = AtomBase & {
    /** Categories associated with the keyring. */
    categories?: string[];
    /** Description of the keyring. */
    description?: string;
    /** External organization ID (e.g. id of github org). */
    external_org_id?: string;
    /** External organization (e.g. name of github org). */
    external_org_name?: string;
    /**
     * Special keyring provided by the snap-in developer. Fed into context
     * to all installed snap-ins, in all orgs. Cannot be accessed by the
     * snap-in users.
     */
    is_developer_keyring?: boolean;
    /** Does key have expiration time. */
    is_key_expirable?: boolean;
    /**
     * Indicates whether this keyring is a private keyring and belongs to
     * someone else.
     */
    is_private?: boolean;
    /**
     * Key expiration time.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    key_expiration?: string;
    /** Key type in authorization header (token, Bearer, Basic, ...). */
    key_type?: string;
    /** Name of the keyring. Doesn't have to be unique. */
    name?: string;
    /** OAuth scopes associated with the keyring. */
    oauth_scopes?: string;
    /** Scope of keyring. */
    scope?: KeyringScope;
    /** keyring status. */
    status?: KeyringStatus;
    /** keyring status message. */
    status_message?: string;
    /** Obsolete. Use type_id instead. */
    type?: KeyringTypeEnum;
    /** Keyring type defines the authentication method. */
    type_id?: string;
};
/** Scope of keyring. */
export declare enum KeyringScope {
    Org = "org",
    User = "user"
}
/** keyring status. */
export declare enum KeyringStatus {
    Active = "active",
    CollectionPending = "collection_pending",
    Error = "error",
    SelectOrg = "select_org",
    UserActionRequired = "user_action_required",
    Warning = "warning"
}
/** keyring-summary */
export type KeyringSummary = AtomBaseSummary;
/** keyring-type */
export type KeyringType = AtomBase & {
    /**
     * Configure how users authorize your application to access their data by
     * setting the authentication method, URLs, parameters, and optional token
     * expiry check.
     */
    authorize?: AuthorizeRequestConfig;
    /** Description of the keyring. */
    description?: string;
    /**
     * External Service ID is a unique identifier used to group
     * connections belonging to the same snap-in.
     */
    external_service_id?: string;
    /** External Service Name. */
    external_service_name?: string;
    /**
     * IsSubdomain field indicates whether an external organization URL
     * contains a subdomain.
     */
    is_subdomain?: boolean;
    /** Kind defines the external system authentication method. */
    kind?: KeyringTypeKind;
    /** Name of the keyring. Doesn't have to be unique. */
    name?: string;
    oauth_secret_id?: KeyringSummary;
    /**
     * AdaptableRequestConfig, versatile configuration for tailored API
     * interactions and authentication.
     */
    organization_data?: AdaptableRequestConfig;
    /**
     * AdaptableRequestConfig, versatile configuration for tailored API
     * interactions and authentication.
     */
    refresh?: AdaptableRequestConfig;
    /**
     * AdaptableRequestConfig, versatile configuration for tailored API
     * interactions and authentication.
     */
    revoke?: AdaptableRequestConfig;
    /** Specify the delimiter used to separate scopes in the scope string. */
    scope_delimiter?: string;
    /** defines the scopes available for the connection. */
    scopes?: ScopeDefinition[];
    /**
     * Secret configuration for Basic Auth connection / multi-field Secret
     * connection.
     */
    secret_config?: SecretConfig;
};
/** Obsolete. Use type_id instead. */
export declare enum KeyringTypeEnum {
    Aws = "aws",
    Bitbucket = "bitbucket",
    Cci = "cci",
    Clearbit = "clearbit",
    Confluence = "confluence",
    ConfluencePat = "confluence_pat",
    Datadog = "datadog",
    Descope = "descope",
    DevrevAat = "devrev_aat",
    DevrevPat = "devrev_pat",
    Dialog360 = "dialog_360",
    Discord = "discord",
    DiscoursePat = "discourse_pat",
    DomainVerification = "domain_verification",
    FlowSecret = "flow_secret",
    Freshdesk = "freshdesk",
    Gainsight = "gainsight",
    Gcp = "gcp",
    GhApp = "gh_app",
    GhOauth = "gh_oauth",
    GhPat = "gh_pat",
    Goodmeetings = "goodmeetings",
    Google = "google",
    GoogleBigQuery = "google_big_query",
    GoogleCalendar = "google_calendar",
    HubspotOauth = "hubspot_oauth",
    HubspotPat = "hubspot_pat",
    Intercom = "intercom",
    Jira = "jira",
    Kubernetes = "kubernetes",
    LinearOauth = "linear_oauth",
    LinearPat = "linear_pat",
    MsTeams = "ms_teams",
    OauthSecret = "oauth_secret",
    Outreach = "outreach",
    PagerdutyPat = "pagerduty_pat",
    Rocketlane = "rocketlane",
    SalesforceSales = "salesforce_sales",
    SalesforceService = "salesforce_service",
    Sendgrid = "sendgrid",
    ServiceAccounts = "service_accounts",
    Servicenow = "servicenow",
    Slack = "slack",
    SnapInSecret = "snap_in_secret",
    Stripe = "stripe",
    Twilio = "twilio",
    WarehouseOutreachBigdata = "warehouse_outreach_bigdata",
    Xero = "xero",
    Zendesk = "zendesk",
    ZendeskPat = "zendesk_pat"
}
/** Kind defines the external system authentication method. */
export declare enum KeyringTypeKind {
    Oauth2 = "oauth2",
    Secret = "secret"
}
/** keyring-type-summary */
export type KeyringTypeSummary = AtomBaseSummary;
/** keyrings-create-callback-request */
export interface KeyringsCreateCallbackRequest {
    /** Request for user sign-in authentication */
    authuser?: string;
    /** Channel IDs [for 360Dialog] */
    channels?: string;
    /** Client ID [for 360Dialog] */
    client?: string;
    /** Code to exchange for an access token */
    code?: string;
    /** OAuth2 short error */
    error?: string;
    /** OAuth2 error description */
    error_description?: string;
    /** Server ID where the application is authorized [for discord] */
    guild_id?: string;
    /** The hosted domain of the user account */
    hd?: string;
    /** Github installation ID */
    installation_id?: string;
    /** OAuth2 permissions for an application */
    permissions?: string;
    /** User consent dialog */
    prompt?: string;
    /** OAuth2 scope */
    scope?: string;
    /** Github action information */
    setup_action?: string;
    /** State value given to the authorization request */
    state?: string;
}
/** keyrings-create-request */
export interface KeyringsCreateRequest {
    /** Additional OAuth scopes to request. */
    additional_oauth_scopes?: string[];
    keyring: CreateKeyring;
    /**
     * Optional subdomain used for API calls to the external system (for
     * oauth2).
     */
    subdomain?: string;
    /** UI callback (for oauth2). */
    ui_callback_url?: string;
}
/** keyrings-create-response */
export interface KeyringsCreateResponse {
    keyring?: Keyring;
    /** Redirect to. */
    redirect_url?: string;
}
/** keyrings-delete-request */
export interface KeyringsDeleteRequest {
    /** The keyring's ID. */
    id: string;
}
/** keyrings-get-request */
export interface KeyringsGetRequest {
    /** The keyring's ID. */
    id: string;
}
/** keyrings-get-response */
export interface KeyringsGetResponse {
    keyring: Keyring;
}
/** keyrings-list-request */
export interface KeyringsListRequest {
    /** Filters keyrings with associated categories. */
    categories?: string[];
    /** The cursor to begin iteration from */
    cursor?: string;
    include_private?: boolean;
    /**
     * Comma separated fields to sort the items by and how to sort them
     * (field_name1:[asc/desc],field_name2:[asc/desc]).
     */
    sort_by?: string;
    /** Filters for keyring of the provided type IDs. */
    type_ids?: string[];
    /** Filters for keyring of the provided types. */
    types?: KeyringTypeEnum[];
}
/** keyrings-list-response */
export interface KeyringsListResponse {
    /**
     * The cursor that should be used to resume iteration, otherwise if
     * not provided, then iteration has completed.
     */
    cursor?: string;
    /** List of keyrings. */
    keyrings: Keyring[];
}
/** keyrings-update-request */
export interface KeyringsUpdateRequest {
    /** The keyring's ID. */
    id: string;
    keyring?: UpdateKeyring;
    /** UI callback (for oauth2). */
    ui_callback_url?: string;
}
/** keyrings-update-response */
export interface KeyringsUpdateResponse {
    keyring?: Keyring;
    /** The updated keyring. */
    redirect_url?: string;
}
/** knowledge-v2-request */
export type KnowledgeV2Request = object;
/** knowledge-v2-response */
export interface KnowledgeV2Response {
    /** List of all the edges in knowledge graph */
    edges: EdgeV2[];
    /** List of all the vertices in knowledge graph */
    vertices: VertexV2[];
}
/** language-item */
export interface LanguageItem {
    /**
     * Supported language code, generally consisting of its ISO 639-1
     * identifier. (E.g. 'en', 'ja'). In certain cases, BCP-47 codes
     * including language + region identifiers are returned (e.g. 'zh-TW'
     * and 'zh-CH').
     */
    language: string;
    /**
     * Human readable name of the language localized to the target
     * language.
     */
    name: string;
}
/** language-resource */
export interface LanguageResource {
    /**
     * Supported language code, generally consisting of its ISO 639-1
     * identifier. (E.g. 'en', 'ja'). In certain cases, BCP-47 codes
     * including language + region identifiers are returned (e.g. 'zh-TW'
     * and 'zh-CH').
     */
    language: string;
    /**
     * Human readable name of the language localized to the target
     * language.
     */
    name: string;
}
/**
 * legacy-stage
 * Describes the current stage of a work item.
 */
export interface LegacyStage {
    /** Current stage name of the work item. */
    name: string;
    /** Notes relevant to the stage. */
    notes?: string;
    /**
     * Current stage number of the work item (sortable).
     * @format int32
     */
    ordinal?: number;
    stage?: CustomStageSummary;
    state?: CustomStateSummary;
}
/**
 * legacy-stage-summary
 * Describes the current stage of a work item.
 */
export interface LegacyStageSummary {
    /** Current stage name of the work item. */
    name: string;
}
/** license-assignment */
export type LicenseAssignment = AtomBase & {
    /**
     * The recipient email for the assigned license is the email address
     * to which the license is initially assigned when a user is invited.
     * Once the user accepts the invitation, the email address is then
     * linked to the assigned to ID.
     */
    assigned_to_email?: string;
    assigned_to_id?: UserSummary;
    assigned_to_org?: OrgSummary;
    /**
     * External reference is a unique identifier from the customer's
     * system of record.
     */
    external_ref?: string;
    /** The assignment of line items. */
    line_item_assignments?: LineItemAssignment[];
    service_plan?: ServicePlanSummary;
};
/** license-assignment-summary */
export type LicenseAssignmentSummary = AtomBaseSummary;
/** license-assignments-create-request */
export interface LicenseAssignmentsCreateRequest {
    /** Add license assignments. */
    add_assignments?: LicenseAssignmentsCreateRequestAddAssignment[];
    /**
     * Email address of the Rev User. In Commerce system, email address is
     * used to capture the intent of assigning licenses to invited users.
     * When invited user is completely on-boarded to DevRev app, a unique
     * rev user ID is provisioned for user's email address. The intended
     * license assignments for a given rev user can be accessed using
     * either email address or rev user ID.
     */
    assigned_to_email?: string;
    /**
     * Rev User ID of the user for whom license assignment records are
     * being created. Supported updates are, given a rev user ID, assign
     * new license(s). Additionally, invited users are recorded in
     * Commerce System using email addresses when users are invited to Dev
     * Org. This update will provide a capability to assign rev user ID
     * for recorded email address, once its available as part of a user
     * on-onboarding workflow.
     */
    assigned_to_id?: string;
}
/** license-assignments-create-request-add-assignment */
export interface LicenseAssignmentsCreateRequestAddAssignment {
    /** The line item for which the license needs to be assigned. */
    line_item_id: string;
    /**
     * Number of licenses to be assigned.
     * @format int64
     */
    quantity: number;
}
/** license-assignments-create-response */
export interface LicenseAssignmentsCreateResponse {
    license_assignment: LicenseAssignment;
}
/** license-assignments-delete-request */
export interface LicenseAssignmentsDeleteRequest {
    /** ID for the license assignment. */
    id: string;
}
/** license-assignments-get-request */
export interface LicenseAssignmentsGetRequest {
    /** The ID of the license assignment to get. */
    id: string;
}
/** license-assignments-get-response */
export interface LicenseAssignmentsGetResponse {
    license_assignment: LicenseAssignment;
}
/** license-assignments-list-request */
export interface LicenseAssignmentsListRequest {
    /** Provides ways to specify date ranges on objects. */
    assigned_date?: DateFilter;
    /** Filter license assignments by assigned to emails. */
    assigned_to_emails?: string[];
    /** Filter license assignments by assigned to ids. */
    assigned_to_ids?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** Filter license assignments by external ref identifiers. */
    external_refs?: string[];
    /** Filter license assignments by ids. */
    ids?: string[];
    /**
     * The maximum number of license assignments to return. The default is
     * '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Filter license assignments by SKUs. */
    sku_ids?: string[];
    /**
     * List of fields to sort the license assignment object, by and how to
     * sort them. Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
}
/** license-assignments-list-response */
export interface LicenseAssignmentsListResponse {
    /** The list of License Assignment objects. */
    license_assignments: LicenseAssignment[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/** license-assignments-update-request */
export interface LicenseAssignmentsUpdateRequest {
    /**
     * Assign licenses only if available. If the flag is set to true and
     * the input license assignment request cannot be completed, perhaps
     * due to the SKU not being in the customer's service plan or the
     * customer having reached the maximum limit for the SKU, we do not
     * raise an error. We attempt to assign whatever is possible. This
     * flag will be utilized when trying to assign licenses to a user who
     * accepts an invite with licenses, and the status of the licenses may
     * be invalid when the user logs in.
     */
    allow_partial_license_assignments: boolean;
    /**
     * The revOid for which the assignment is being done.If the call is
     * made by rev user then the revOid is taken from auth token.If the
     * call is mde by dev user then revOid is required.
     * @example "REV-AbCdEfGh"
     */
    assigned_to_org?: string;
    /** Update license assignments. */
    license_assignments: LicenseAssignmentsUpdateRequestUpdateLicenseAssignment[];
}
/** license-assignments-update-request-update-license-assignment */
export interface LicenseAssignmentsUpdateRequestUpdateLicenseAssignment {
    /** Add license assignments. */
    add_assignments?: LicenseAssignmentsUpdateRequestUpdateLicenseAssignmentAddAssignment[];
    /**
     * Email address of the Rev User. In Commerce system, email address is
     * used to capture the intent of assigning licenses to invited users.
     * When invited user is completely on-boarded to DevRev app, a unique
     * rev user ID is provisioned for user's email address. The intended
     * license assignments for a given rev user can be accessed using
     * either email address or rev user ID.
     */
    assigned_to_email?: string;
    /**
     * Rev User ID of the user for whom license assignment records are
     * being updated. Supported updates are, given a rev user ID,
     * add/assign new license(s) and remove/revoke existing license(s).
     * Additionally, invited users are recorded in Commerce System using
     * email addresses when users are invited to Dev Org. This update will
     * provide a capability to assign rev user ID for recorded email
     * address, once its available as part of a user on-onboarding
     * workflow.
     */
    assigned_to_id?: string;
    /**
     * External reference is a unique identifier from the customer's
     * system of record..
     */
    external_ref?: string;
    /** Remove license assignments. */
    remove_assignments?: LicenseAssignmentsUpdateRequestUpdateLicenseAssignmentRemoveAssignment[];
}
/** license-assignments-update-request-update-license-assignment-add-assignment */
export interface LicenseAssignmentsUpdateRequestUpdateLicenseAssignmentAddAssignment {
    /** The line item for which the license needs to be assigned. */
    line_item_id?: string;
    /**
     * Number of licenses to be assigned.
     * @format int64
     */
    quantity: number;
    /** The sku name for which the license needs to be assigned. */
    sku_name?: string;
}
/** license-assignments-update-request-update-license-assignment-remove-assignment */
export interface LicenseAssignmentsUpdateRequestUpdateLicenseAssignmentRemoveAssignment {
    /** The line item for which the license needs to be removed. */
    line_item_id?: string;
    /** The sku name for which the license needs to be removed. */
    sku_name?: string;
}
/** license-assignments-update-response */
export interface LicenseAssignmentsUpdateResponse {
    /** Updated license assignments. */
    license_assignments: LicenseAssignment[];
}
/**
 * line-item-assignment
 * The object represents the assignment of a line item.
 */
export interface LineItemAssignment {
    /**
     * Timestamp when the line item assignment was made.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    assigned_date?: string;
    line_item?: RecurringLineItemSummary;
    /**
     * The quantity represents the number of licenses allocated to the
     * user for the specific SKU. For instance, if we are selling a
     * subscription for a SKU that provides 1000 API calls per license,
     * and we intend to provide 2000 API calls to a user, then the number
     * of licenses required for that user would be 2.
     * @format int32
     */
    quantity?: number;
    sku?: SkuSummary;
    /** Sku name associated with the license. */
    sku_name?: string;
}
/** line-item-base */
export type LineItemBase = AtomBase & {
    account?: AccountSummary;
    pricing: PricingSummary;
    /**
     * The quantity of units purchased.
     * @format int32
     */
    quantity?: number;
    rev_org: OrgSummary;
    service_plan: ServicePlanSummary;
    sku: SkuSummary;
    /**
     * The used quantity units.
     * @format int32
     */
    used_quantity?: number;
};
/** line-item-base-summary */
export type LineItemBaseSummary = AtomBaseSummary & {
    pricing: PricingSummary;
    /**
     * The quantity of units purchased.
     * @format int32
     */
    quantity?: number;
    sku: SkuSummary;
    /**
     * The used quantity units.
     * @format int32
     */
    used_quantity?: number;
};
/**
 * line-visualization-x-axis
 * The X-axis for a line visualization.
 */
export interface LineVisualizationXAxis {
    /** The color for an axis. This can be a single color or a gradient. */
    color?: VisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: VisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name: string;
}
/**
 * line-visualization-y-axis
 * The Y-axis for a line visualization.
 */
export interface LineVisualizationYAxis {
    /** The color for an axis. This can be a single color or a gradient. */
    color?: VisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: VisualizationAxisDrillThrough[];
    /** Whether the area under the line should be filled. */
    is_area_filled?: boolean;
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name: string;
    /** The stroke style for the line. */
    stroke_style?: LineVisualizationYAxisStrokeStyle;
}
/** The stroke style for the line. */
export declare enum LineVisualizationYAxisStrokeStyle {
    Dashed = "dashed",
    Dotted = "dotted",
    Solid = "solid"
}
/**
 * line-widget-visualization
 * A line chart visualization configuration. Includes metadata specific to
 * line charts.
 */
export interface LineWidgetVisualization {
    /** The configuration for the X-axis. */
    x: LineVisualizationXAxis[];
    /** The configuration for the Y-axes. */
    y: LineVisualizationYAxis[];
}
/**
 * linear-normalization
 * Linear normalization inputs.
 */
export interface LinearNormalization {
    /**
     * Maximum value for the metric, above which values will be scaled to
     * 1 if metric is positively correlated and -1 if metric is negatively
     * correlated.
     * @format double
     */
    max?: number;
    /**
     * Minimum value for the metric, below which values will be scaled to
     * -1 if metric is positively correlated and 1 if metric is negatively
     * correlated.
     * @format double
     */
    min?: number;
}
/**
 * lines-of-code
 * Details of lines of code in this code change.
 */
export interface LinesOfCode {
    /**
     * Count of files involved in this code change.
     * @format int64
     */
    file_count?: number;
    /**
     * Number of new lines added in this code change.
     * @format int64
     */
    lines_added?: number;
    /**
     * Number of lines deleted in this code change.
     * @format int64
     */
    lines_deleted?: number;
    /**
     * Number of lines modified in this code change.
     * @format int64
     */
    lines_modified?: number;
}
/** link */
export type Link = AtomBase & {
    /** Type of link used to define the relationship. */
    link_type: LinkType;
    source: LinkEndpointSummary;
    target: LinkEndpointSummary;
    /** Type of link used to define the relationship. */
    type: LinkType;
};
/** link-endpoint-summary */
export type LinkEndpointSummary = (ArtifactSummary | CapabilitySummary | CodeChangeSummary | ConversationSummary | CustomPartSummary | CustomWorkSummary | DashboardSummary | EnhancementSummary | FeatureSummary | IncidentSummary | IssueSummary | LinkableSummary | OpportunitySummary | ProductSummary | RunnableSummary | TaskSummary | TicketSummary | UtilRequiredKeys<VistaSummary, 'type'>) & {
    type: LinkEndpointType;
};
export declare enum LinkEndpointType {
    Artifact = "artifact",
    Capability = "capability",
    CodeChange = "code_change",
    Conversation = "conversation",
    CustomPart = "custom_part",
    CustomWork = "custom_work",
    Dashboard = "dashboard",
    Enhancement = "enhancement",
    Feature = "feature",
    Incident = "incident",
    Issue = "issue",
    Linkable = "linkable",
    Opportunity = "opportunity",
    Product = "product",
    Runnable = "runnable",
    Task = "task",
    Ticket = "ticket",
    Vista = "vista"
}
/** link-preview-widget */
export type LinkPreviewWidget = (NativeLinkPreviewWidget | SnapKitLinkPreviewWidget) & {
    link_preview_type: LinkPreviewWidgetLinkPreviewType;
};
/** link-preview-widget-base */
export type LinkPreviewWidgetBase = SnapWidgetBase;
/** link-preview-widget-base-summary */
export type LinkPreviewWidgetBaseSummary = SnapWidgetBaseSummary;
export declare enum LinkPreviewWidgetLinkPreviewType {
    Native = "native",
    SnapKit = "snap_kit"
}
/** link-preview-widget-summary */
export type LinkPreviewWidgetSummary = (NativeLinkPreviewWidgetSummary | SnapKitLinkPreviewWidgetSummary) & {
    link_preview_type: LinkPreviewWidgetLinkPreviewType;
};
/**
 * link-rev-user-to-rev-org-request
 * Request to link a Rev user to an existing Rev organization.
 */
export interface LinkRevUserToRevOrgRequest {
    /** The ID of the Rev user. */
    id?: string;
    /**
     * The ID of the Rev organization to link the Rev user to.
     * @example "REV-AbCdEfGh"
     */
    rev_org?: string;
}
/**
 * link-rev-user-to-rev-org-response
 * Response for linking a Rev user to an existing Rev organization.
 */
export interface LinkRevUserToRevOrgResponse {
    rev_user: RevUser;
}
/** link-search-summary */
export type LinkSearchSummary = SearchSummaryBase & {
    link: LinkSummary;
};
/** link-summary */
export type LinkSummary = AtomBaseSummary & {
    /** Type of link used to define the relationship. */
    link_type: LinkType;
    source: LinkEndpointSummary;
    target: LinkEndpointSummary;
};
/**
 * link-target-request
 * Link target request.
 */
export interface LinkTargetRequest {
    /** Work fields required for recommendation. */
    context: WorkContext;
    /** Type of link used to define the relationship. */
    link_type: LinkType;
    /**
     * Number of results to be returned.
     * @format int32
     */
    num_results?: number;
    /**
     * Boolean to indicate if the work context is source of the link
     * relationship.
     */
    source: boolean;
    /**
     * List of target object types for which recommendations are
     * requested.
     */
    target_types?: TargetObjectType[];
}
/**
 * link-target-response
 * Link target response.
 */
export interface LinkTargetResponse {
    /** The link target results. */
    results: LinkTargetResult[];
}
/**
 * link-target-result
 * A link target result.
 */
export interface LinkTargetResult {
    part?: PartSummary;
    recommendation?: 'part' | 'work';
    work?: WorkSummary;
}
/** Type of link used to define the relationship. */
export declare enum LinkType {
    DevelopedWith = "developed_with",
    Imports = "imports",
    IsDependentOn = "is_dependent_on",
    IsDuplicateOf = "is_duplicate_of",
    IsParentOf = "is_parent_of",
    IsPartOf = "is_part_of",
    IsRelatedTo = "is_related_to",
    Serves = "serves"
}
/** linkable */
export type Linkable = PartBase & {
    /**
     * Code part surface area is defined as all the source files or file
     * globs that make up this code part. This field lists the surface
     * area of this code part as it was inferred automatically.
     */
    code_inferred_surface_area?: string[];
    /**
     * Holds details about the inference of a part. Including evidence and
     * confidence.
     */
    code_last_inference_details?: InferenceDetails;
    /** Paths in the repository for the code part. */
    code_repo_paths?: string;
    /** URL to the server & repo for the code part. */
    code_repo_url?: string;
    /** Versions of the code. */
    code_versions?: CodeVersionSummary[];
    /**
     * A confidence score computed by the inference engine. Currently, the
     * score is not normalized across different part inferences. Until
     * this is improved, this should only be comparable to confidence of
     * same part type.
     * @format double
     */
    discovery_confidence?: number;
    /**
     * A evidences that the inferer were able to find that justify the
     * inference outcome.
     */
    discovery_evidences?: string[];
    /**
     * The time when this inference occurred.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    discovery_last_inferred_at?: string;
    /** The kind of linkable. */
    kind?: LinkableKind;
};
/** The kind of linkable. */
export declare enum LinkableKind {
    Component = "component",
    Library = "library"
}
/** linkable-pin */
export type LinkablePin = PartPinBase & {
    /**
     * Excluded IDs of the parts in pin entry that this linkable is
     * dependent on.
     */
    dependent_on_exclusion_list?: PartSummary[];
    /**
     * Included IDs of the parts in pin entry that this linkable is
     * dependent on.
     */
    dependent_on_inclusion_list?: PartSummary[];
    /**
     * Excluded IDs of the parts in pin entry that are imported by this
     * likable.
     */
    imported_by_exclusion_list?: PartSummary[];
    /**
     * Included IDs of the parts in pin entry that are imported by this
     * likable.
     */
    imported_by_inclusion_list?: PartSummary[];
};
/** linkable-pin-summary */
export type LinkablePinSummary = PartPinBaseSummary;
/** linkable-summary */
export type LinkableSummary = PartBaseSummary;
/** links */
export interface Links {
    /** Add links to the dashboard. */
    add?: EmbedLinksCreateRequest[];
    /** Remove links from the dashboard. */
    remove?: string[];
}
/**
 * links-create-request
 * The request to create a new link.
 */
export interface LinksCreateRequest {
    /** Type of link used to define the relationship. */
    link_type?: LinkType;
    /** The ID of the source object. */
    source?: string;
    /**
     * The ID of the source object.
     * @deprecated
     */
    source_id?: string;
    /** The ID of the target object. */
    target?: string;
    /**
     * The ID of the target object.
     * @deprecated
     */
    target_id?: string;
    /** Type of link used to define the relationship. */
    type?: LinkType;
}
/**
 * links-create-response
 * The response to creating a new link.
 */
export interface LinksCreateResponse {
    link: Link;
}
/**
 * links-delete-request
 * The request to delete a link.
 */
export interface LinksDeleteRequest {
    /** The ID of the link to delete. */
    id: string;
}
/**
 * links-delete-response
 * The response for deleting a link.
 */
export type LinksDeleteResponse = object;
/**
 * The direction of link, which can either be outbound such that the
 * object is the source of the link, otherwise inbound where the object is
 * the target of the link.
 */
export declare enum LinksDirection {
    IsSource = "is_source",
    IsTarget = "is_target"
}
/**
 * links-get-request
 * The request to get a link's information.
 */
export interface LinksGetRequest {
    /** The requested link's ID. */
    id: string;
}
/**
 * links-get-response
 * The response to getting a link's information.
 */
export interface LinksGetResponse {
    link: Link;
}
/** links-group */
export interface LinksGroup {
    /**
     * The cursor that should be used to resume iteration, otherwise if
     * not provided, then iteration has completed.
     * @deprecated
     */
    cursor?: string;
    /** Unique key according to which the items are grouped. */
    key: string;
    /** The group of links. */
    links: Link[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/** links-group-request */
export interface LinksGroupRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The direction of link, which can either be outbound such that the
     * object is the source of the link, otherwise inbound where the object is
     * the target of the link.
     */
    direction?: LinksDirection;
    /** The field to group the links by. */
    group_by: string;
    /**
     * The maximum number of groups to return. If not set, then the
     * default is '10'.
     * @format int32
     */
    limit?: number;
    /**
     * The maximum number of links to return for an individual group. If
     * not set, then the default is '50'.
     * @format int32
     */
    limit_per_group?: number;
    /**
     * The link type(s) to filter for, otherwise if not present, all link
     * types are included.
     */
    link_type?: LinkType[];
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** The ID of the object to list the link groups for. */
    object?: string;
    /**
     * The ID of the object to list the link groups for.
     * @deprecated
     */
    object_id?: string;
    /**
     * The link types to filter for, otherwise if not present, all link
     * types are included.
     * @deprecated
     */
    types?: LinkType[];
}
/** links-group-response */
export interface LinksGroupResponse {
    /**
     * The cursor that should be used to resume iteration, otherwise if
     * not provided, then iteration has completed.
     * @deprecated
     */
    cursor?: string;
    /** The list of groups. */
    groups: LinksGroup[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/**
 * links-list-request
 * The request to get information about a list of links.
 */
export interface LinksListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The direction of link, which can either be outbound such that the
     * object is the source of the link, otherwise inbound where the object is
     * the target of the link.
     */
    direction?: LinksDirection;
    /**
     * The maximum number of links to return. If not set, then the default
     * is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The link type(s) to filter for, otherwise if not present, all link
     * types are included.
     */
    link_type?: LinkType[];
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** The ID of the object to list the links for. */
    object?: string;
    /**
     * The ID of the object to list the links for.
     * @deprecated
     */
    object_id?: string;
    /**
     * The link types to filter for, otherwise if not present, all link
     * types are included.
     * @deprecated
     */
    types?: LinkType[];
}
/**
 * links-list-response
 * The response to listing the links.
 */
export interface LinksListResponse {
    /**
     * The cursor that should be used to resume iteration, otherwise if
     * not provided, then iteration has completed.
     * @deprecated
     */
    cursor?: string;
    /** The list of links. */
    links: Link[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/**
 * links-replace-request
 * The request to replace a link.
 */
export interface LinksReplaceRequest {
    /** Type of link used to define the relationship. */
    link_type?: LinkType;
    /** The ID of the link object to be replaced. */
    replace_link_id: string;
    /** The ID of the source object. */
    source?: string;
    /**
     * The ID of the source object.
     * @deprecated
     */
    source_id?: string;
    /** The ID of the target object. */
    target?: string;
    /**
     * The ID of the target object.
     * @deprecated
     */
    target_id?: string;
    /** Type of link used to define the relationship. */
    type?: LinkType;
}
/**
 * links-replace-response
 * The response to replacing a link.
 */
export interface LinksReplaceResponse {
    link: Link;
}
/**
 * list-dev-user-invitations-request
 * A request to get the list of Dev organizations that the user is
 * invited.
 */
export type ListDevUserInvitationsRequest = object;
/**
 * list-dev-user-invitations-response
 * The response to get the list of Dev organizations that the user is
 * invited to.
 */
export interface ListDevUserInvitationsResponse {
    /** List of invitations to Dev organizations the user is invited to. */
    invites: DevUserInvitation[];
}
/** list-discovery-profiles-request */
export interface ListDiscoveryProfilesRequest {
    /**
     * Filters for discovery profile created after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_after_date?: string;
    /**
     * Filters for discovery profile created before the timestamp
     * provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_before_date?: string;
    /**
     * Filters for discovery profile created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by_ids?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of discovery profiles to return. If not set,
     * then the default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /**
     * Filters for discovery profile modified after the provided
     * timestamp.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    modified_after_date?: string;
    /**
     * Filters for discovery profile modified before the provided
     * timestamp.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    modified_before_date?: string;
    /**
     * Optional Dev organization ID. This allows running on another Dev
     * organization, as long as the logged in user has access to it.
     * @example "DEV-AbCdEfGh"
     */
    other_dev_org?: string;
    /** Filters for discovery profile with any of these names. */
    profile_name?: string[];
    /** Fields to sort the works by and the direction to sort them. */
    sort_by?: string[];
}
/** list-discovery-profiles-response */
export interface ListDiscoveryProfilesResponse {
    /** The list of discovery profiles. */
    discovery_profile: DiscoveryProfile[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/** list-discovery-sources-request */
export interface ListDiscoverySourcesRequest {
    /**
     * Optional Dev organization ID. This allows running on another Dev
     * organization, as long as the logged in user has access to it.
     * @example "DEV-AbCdEfGh"
     */
    other_dev_org?: string;
}
/** list-discovery-sources-response */
export interface ListDiscoverySourcesResponse {
    /** List of sources from which data was collected for parts discovery. */
    discovery_sources: DiscoverySource[];
}
export declare enum ListMarketplaceItemsFilterCreatedByOperatorType {
    Any = "any",
    NotAny = "not_any"
}
export declare enum ListMarketplaceSubmissionsFilterCreatedByOperatorType {
    Any = "any",
    NotAny = "not_any"
}
/**
 * The iteration mode to use. If "after", then entries after the provided
 * cursor will be returned, or if no cursor is provided, then from the
 * beginning. If "before", then entries before the provided cursor will be
 * returned, or if no cursor is provided, then from the end. Entries will
 * always be returned in the specified sort-by order.
 */
export declare enum ListMode {
    After = "after",
    Before = "before"
}
/**
 * list-operations-request
 * The request to list operations.
 */
export interface ListOperationsRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of operations to return. The default is '50',
     * the maximum is '100'
     * @format int32
     * @max 100
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Fields to sort the operations by and the direction to sort them in. */
    sort_by?: string[];
    /** Filters on type for operations. */
    type?: OperationTypeEnum[];
}
/**
 * list-operations-response
 * The response to an operation list request.
 */
export interface ListOperationsResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /** The list of operations. */
    operations: Operation[];
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/** list-snap-components-request */
export interface ListSnapComponentsRequest {
    /**
     * Filters for snap component created after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_after_date?: string;
    /**
     * Filters for snap component created before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_before_date?: string;
    /**
     * Filters for snap component created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by_ids?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * Ordered list of snap component ids such that the response is sorted
     * by ids from this set.
     */
    include_snap_component_ids?: string[];
    /**
     * The maximum number of snap components profiles to return. If not
     * set, then the default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /**
     * Filters for snap component modified after the provided timestamp.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    modified_after_date?: string;
    /**
     * Filters for snap component modified before the provided timestamp.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    modified_before_date?: string;
    /** Filters for snap components with any of these names. */
    name?: string[];
    /**
     * Fields to sort the snap components by and the direction to sort
     * them. This is used only if
     */
    sort_by?: string[];
}
/** list-snap-components-response */
export interface ListSnapComponentsResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The list of snap components. */
    snap_component: SnapComponent[];
}
/** list-value */
export interface ListValue {
    values: object[];
}
/**
 * list-workflow-runs-request
 * The request to list workflow runs.
 */
export interface ListWorkflowRunsRequest {
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** Provides ways to specify date ranges on objects. */
    end_time?: DateFilter;
    /**
     * The maximum number of workflow runs to return. The default is '50',
     * the maximum is '100'
     * @format int32
     * @max 100
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /**
     * Fields to sort the workflow runs by and the direction to sort them
     * in.
     */
    sort_by?: string[];
    /** Provides ways to specify date ranges on objects. */
    start_time?: DateFilter;
    /** Filters on status for workflow runs. */
    status?: WorkflowRunStatus[];
    /** Filters for workflow runs for any of these workflows. */
    workflow?: string[];
}
/**
 * list-workflow-runs-response
 * The response to a workflow run list request.
 */
export interface ListWorkflowRunsResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The list of workflow runs. */
    workflow_runs: WorkflowRun[];
}
/**
 * list-workflow-steps-request
 * The request to list workflow steps.
 */
export interface ListWorkflowStepsRequest {
    /**
     * Filters for workflow steps created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of workflow steps to return. The default is
     * '50', the maximum is '100'
     * @format int32
     * @max 100
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /**
     * Fields to sort the workflow steps by and the direction to sort them
     * in.
     */
    sort_by?: string[];
    /** Filters for workflow steps for any of these workflows. */
    workflow?: string[];
}
/**
 * list-workflow-steps-response
 * The response to a workflow step list request.
 */
export interface ListWorkflowStepsResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The list of workflow steps. */
    workflow_steps: WorkflowStep[];
}
/**
 * list-workflows-request
 * The request to list workflows.
 */
export interface ListWorkflowsRequest {
    /**
     * Filters for workflows created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of workflows to return. The default is '50', the
     * maximum is '100'
     * @format int32
     * @max 100
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** Fields to sort the workflows by and the direction to sort them in. */
    sort_by?: string[];
    /** Filters on status for workflows. */
    status?: WorkflowStatus[];
}
/**
 * list-workflows-response
 * The response to a workflow list request.
 */
export interface ListWorkflowsResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The list of workflows. */
    workflows: Workflow[];
}
/**
 * lobbies-list-request
 * The request to get information about a list of lobbies.
 */
export interface LobbiesListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of lobbies to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
}
/**
 * lobbies-list-response
 * The response to listing the lobbies.
 */
export interface LobbiesListResponse {
    /** The list of lobbies. */
    lobbies: Conversation[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/** log-ml-feedback-request */
export type LogMlFeedbackRequest = (LogMlFeedbackRequestBinarySentiment | LogMlFeedbackRequestClassification | LogMlFeedbackRequestUserInteraction) & {
    feedback_type: LogMlFeedbackRequestFeedbackType;
    /** Reason for the given feedback. */
    reason?: string;
    /** ID of the request for which the feedback is being logged. */
    request_id?: string;
    /** ID of the session for which the feedback is being logged. */
    session_id: string;
};
/** log-ml-feedback-request-binary-sentiment */
export interface LogMlFeedbackRequestBinarySentiment {
    sentiment: LogMlFeedbackRequestBinarySentimentSentiment;
}
export declare enum LogMlFeedbackRequestBinarySentimentSentiment {
    Dislike = "dislike",
    Like = "like"
}
/** log-ml-feedback-request-classification */
export interface LogMlFeedbackRequestClassification {
    correct_class_label: string;
}
export declare enum LogMlFeedbackRequestFeedbackType {
    BinarySentiment = "binary_sentiment",
    Classification = "classification",
    UserInteraction = "user_interaction"
}
/** log-ml-feedback-request-user-interaction */
export interface LogMlFeedbackRequestUserInteraction {
    interaction_type: LogMlFeedbackRequestUserInteractionType;
    retry_run_request_id: string;
    retry_run_session_id: string;
}
export declare enum LogMlFeedbackRequestUserInteractionType {
    Accepted = "accepted",
    Modified = "modified",
    Rejected = "rejected",
    Retry = "retry",
    Unspecified = "unspecified"
}
/** log-ml-feedback-response */
export type LogMlFeedbackResponse = object;
/**
 * markdown-to-html-request
 * The request for converting markdown to HTML
 */
export interface MarkdownToHtmlRequest {
    /** Markdown to be converted to HTML. */
    markdown: string;
}
/**
 * markdown-to-html-response
 * The reqsponse for converting markdown to HTML
 */
export interface MarkdownToHtmlResponse {
    /** HTML converted from Markdown. */
    html: string;
}
/** marketplace */
export type Marketplace = AtomBase & {
    /** Description of the marketplace. */
    description?: string;
    /**
     * A marketplace can be either of two types universal or organizational. A
     * universal marketplace is publicly available (all the users on the
     * internet can access it). While an organizational marketplace can be
     * accessed only by the members of the organization. Also, only
     * organization members can install its marketplace items. Once the
     * marketplace type value is set it can't be changed.
     */
    marketplace_type?: MarketplaceType;
    /**
     * Name of the marketplace. It must be longer than 3 characters and no
     * longer than 128 characters.
     */
    name?: string;
    /**
     * URL slug of the marketplace. The slug cannot be changed after it
     * has been set. Its' value needs to be in the right format and it has
     * to be globally unique. Slug value must start with  one or more
     * lowercase letters or digits, optionally followed  by zero or more
     * hyphen-separated groups of lowercase letters or digits. For
     * example, a valid slug value might be 'my-marketplace-123', but an
     * invalid value might be 'MyMarketplace' or '123456'.
     */
    slug?: string;
};
/**
 * marketplace-categories-create-request
 * A request to create a new marketplace category.
 */
export interface MarketplaceCategoriesCreateRequest {
    access_level?: AccessLevel;
    /** An informative description for the category. */
    description?: string;
    /**
     * Marketplace ID the category belongs to. Marketplace ID cannot be
     * changed after it has been set.
     */
    marketplace: string;
    /**
     * The name of the category. The name is guaranteed to be unique. The
     * name can be changed at any time as long as the new name is still
     * unique per marketplace.
     */
    name: string;
    /**
     * A parent category ID. Note that marketplace items can be associated
     * only with the leaf categories (i.e. categories where a parent is
     * not set).
     */
    parent?: string;
}
/** marketplace-categories-create-response */
export interface MarketplaceCategoriesCreateResponse {
    marketplace_category: MarketplaceCategory;
}
/**
 * marketplace-categories-delete-request
 * A request to delete a marketplace category.
 */
export interface MarketplaceCategoriesDeleteRequest {
    /** The marketplace category ID. */
    id: string;
}
/** marketplace-categories-delete-response */
export type MarketplaceCategoriesDeleteResponse = object;
/** marketplace-categories-get-request */
export interface MarketplaceCategoriesGetRequest {
    /** The marketplace category ID. */
    id: string;
}
/** marketplace-categories-get-response */
export interface MarketplaceCategoriesGetResponse {
    marketplace_category: MarketplaceCategory;
}
/** marketplace-categories-list-request */
export interface MarketplaceCategoriesListRequest {
    /** Whether to exclude empty categories. */
    exclude_empty_categories?: boolean;
    /** The marketplace ID. */
    marketplace_id?: string;
}
/** marketplace-categories-list-response */
export interface MarketplaceCategoriesListResponse {
    /** The list of marketplace categories. */
    marketplace_categories: MarketplaceCategory[];
}
/**
 * marketplace-categories-update-request
 * A request to update a marketplace category.
 */
export interface MarketplaceCategoriesUpdateRequest {
    access_level?: AccessLevel;
    /** Updates the description for the category. */
    description?: string;
    /** The marketplace category to update. */
    id: string;
    /**
     * Updates the name of the category. If another category with the same
     * name already exists update will be rejected. The name must be
     * unique per marketplace.
     */
    name?: string;
    /**
     * Updates a parent category. Note that marketplace items can be
     * associated only with the leaf categories (i.e. categories where a
     * parent is not set).
     */
    parent?: string | null;
}
/** marketplace-categories-update-response */
export interface MarketplaceCategoriesUpdateResponse {
    marketplace_category: MarketplaceCategory;
}
/** marketplace-category */
export type MarketplaceCategory = AtomBase & {
    access_level?: AccessLevel;
    /** An informative description for the category. */
    description?: string;
    marketplace?: MarketplaceSummary;
    /**
     * The name of the category. The name is guaranteed to be unique. The
     * name can be changed at any time as long as the new name is still
     * unique per marketplace.
     */
    name: string;
    parent_marketplace_category?: MarketplaceCategorySummary;
};
/** marketplace-category-summary */
export type MarketplaceCategorySummary = AtomBaseSummary & {
    /**
     * The name of the category. The name is guaranteed to be unique. The
     * name can be changed at any time as long as the new name is still
     * unique per marketplace.
     */
    name: string;
};
/** marketplace-item */
export type MarketplaceItem = AtomBase & {
    access_level?: AccessLevel;
    /**
     * Artifacts relevant to the marketplace listing (e.g. screenshots,
     * videos, banner image, icon).
     */
    artifacts?: ArtifactSummary[];
    blueprint_artifact?: ArtifactSummary;
    /**
     * Categories relevant to the marketplace listing. One can provide at
     * most three categories. It's important to note that the categories
     * must belong to the same marketplace as the marketplace listing
     * does. Categories can be fetched from 'marketplace_categories.list'
     * API endpoint. Marketplace listing can associate only leaf
     * categories (i.e. ones without a child category). Categories are
     * used to organize and classify listings on a marketplace, making it
     * easier for users to find and browse related products. Therefore one
     * needs to select only the categories that are relevant to this
     * specific listing.
     */
    categories?: MarketplaceCategorySummary[];
    /**
     * Flag indicating whether marketplace listing will be soon available
     * to purchase and install. Coming soon listings doesn't have to have
     * a template/snap-in-version or pricing. When creating an initial
     * submission one can set the value to be either true or false. In a
     * later submission (non-initial submission) only setting coming-soon
     * from true to false is allowed.
     */
    coming_soon?: boolean;
    /**
     * The description provides detailed information about the marketplace
     * listing. It can be plain text or markdown formatted text.
     * Description text should describe all the major futures of the
     * marketplace listings and some installation guidelines.
     */
    description?: string;
    icon_artifact?: ArtifactSummary;
    /**
     * Marketplace listing type defines what backing service will be used when
     * validating a create marketplace submission request, installing
     * marketplace items in some organizations, etc. It is important to note
     * that marketplace listings of type app are not backed by any service and
     * are only placeholders for existing functionality in the DevRev platform
     * (e.g. Jira Airdrop). Note: 'flow' type is deprecated, use 'snapin'
     * instead.
     */
    item_type?: MarketplaceItemItemType;
    /** Keywords relevant to the marketplace listing. */
    keywords?: string;
    marketplace?: MarketplaceSummary;
    /**
     * The marketplace listing is accessible to organizations represented
     * by member entities.  When there are no member entities listed, all
     * organizations with access to the marketplace can access the
     * specific listing.  To include a member entity in the marketplace
     * listing, utilize the invite API.  Conversely, to remove a member
     * entity, make use of the revoke-invitation API.
     */
    member_orgs?: OrgReference[];
    /**
     * Meta score of the marketplace items. Its value must be in range
     * from 1 to 100000. It is used for ranking marketplace items on the
     * Marketplace home page. Items with higher meta_score will be placed
     * on the top of the list.
     * @format int64
     */
    meta_score?: number;
    /**
     * Name of the marketplace listing. The value for a name can be any
     * string with a minimum length of 3 and a maximum length of 128.
     */
    name?: string;
    /** Denormalized organization reference. */
    owned_by_org?: OrgReference;
    /**
     * URL slug of the marketplace item. Slug cannot be changed after it
     * has been set. Its' value needs to be in the right format and it has
     * to be unique per marketplace. Slug value must start with  a
     * lowercase letter, followed by zero or more lowercase letters or
     * hyphens, and must end with a lowercase letter. For example, a valid
     * slug value might be 'my-automation', but an invalid value might be
     * 'MyAutomation' or 'my-automation-1'.
     */
    slug?: string;
    /** Snap-in package relevant to the marketplace listing. */
    snap_in_package?: string;
    /** Snap-in version relevant to the marketplace listing. */
    snap_in_version?: string;
    /**
     * The state represents the life cycle of the marketplace item. When a new
     * marketplace item is created it is put in the state 'draft'. Once
     * publisher (member of an organization who created a marketplace item)
     * finishes editing the item he will transition it into the state
     * 'in_review'. Marketplace owner (member of an organization that owns the
     * marketplace) will be able to do a review of the submission and either
     * transition it  back into state 'draft' (if changes are required) or in
     * state 'published'  (if submission met the required standards).
     * Publisher can transit the published marketplace item into the state
     * 'end_of_sale' if he wants to temporarily remove the marketplace item
     * from the shelves ( the item won't appear on the marketplace and users
     * won't be able to install it). From state 'end_of_sale' one can
     * transition the item back into state 'draft' or  'published' (if there
     * were no changes done). Once an item is deleted it is transitioned into
     * the state 'end_of_life'.
     */
    state?: MarketplaceItemState;
    /**
     * Stock keeping units relevant to the marketplace listing. Coming
     * soon marketplace listings and free marketplace listings are allowed
     * to have no references to the SKUs.
     */
    stock_keeping_units?: SkuSummary[];
    /** Summary is a short description of the marketplace listing. */
    summary?: string;
    /**
     * Tagline is a one-liner description of the marketplace listing. It
     * is used when presenting a marketplace listing on the home page.
     */
    tagline?: string;
    /**
     * Template refers to the semver formatted version of a flow and its
     * source code. Once a new version of a flow is released (i.e. marketplace
     * item is updated and  transitioned to state 'published') all the
     * installations of such items will be updated to the new flow.
     */
    template?: Template;
    type?: MarketplaceItemType;
};
/** marketplace-item-artifact-list-update */
export interface MarketplaceItemArtifactListUpdate {
    /**
     * Artifact IDs to be added to the marketplace item.
     * @example ["ARTIFACT-12345"]
     */
    add?: string[];
    /**
     * Artifact IDs to be removed from the marketplace item.
     * @example ["ARTIFACT-12345"]
     */
    remove?: string[];
    /**
     * Artifact IDs to be set to the marketplace item.
     * @example ["ARTIFACT-12345"]
     */
    set?: string[];
}
/** marketplace-item-category-list-update */
export interface MarketplaceItemCategoryListUpdate {
    /** Categories to be added to the marketplace item. */
    add?: string[];
    /** Categories to be removed from the marketplace item. */
    remove?: string[];
    /** Categories to be set to the marketplace item. */
    set?: string[];
}
/**
 * marketplace-item-details
 * Details of the marketplace item.
 */
export interface MarketplaceItemDetails {
    marketplace?: MarketplaceSummary;
    /** Slug of the marketplace item from which this snap-in was installed. */
    marketplace_item_slug?: string;
}
/**
 * Marketplace listing type defines what backing service will be used when
 * validating a create marketplace submission request, installing
 * marketplace items in some organizations, etc. It is important to note
 * that marketplace listings of type app are not backed by any service and
 * are only placeholders for existing functionality in the DevRev platform
 * (e.g. Jira Airdrop). Note: 'flow' type is deprecated, use 'snapin'
 * instead.
 */
export declare enum MarketplaceItemItemType {
    App = "app",
    Flow = "flow",
    Snapin = "snapin"
}
/** marketplace-item-sku-list-update */
export interface MarketplaceItemSkuListUpdate {
    /** SKUs to be added to the marketplace item. */
    add?: string[];
    /** SKUs to be removed from the marketplace item. */
    remove?: string[];
    /** SKUs to be set to the marketplace item. */
    set?: string[];
}
/**
 * The state represents the life cycle of the marketplace item. When a new
 * marketplace item is created it is put in the state 'draft'. Once
 * publisher (member of an organization who created a marketplace item)
 * finishes editing the item he will transition it into the state
 * 'in_review'. Marketplace owner (member of an organization that owns the
 * marketplace) will be able to do a review of the submission and either
 * transition it  back into state 'draft' (if changes are required) or in
 * state 'published'  (if submission met the required standards).
 * Publisher can transit the published marketplace item into the state
 * 'end_of_sale' if he wants to temporarily remove the marketplace item
 * from the shelves ( the item won't appear on the marketplace and users
 * won't be able to install it). From state 'end_of_sale' one can
 * transition the item back into state 'draft' or  'published' (if there
 * were no changes done). Once an item is deleted it is transitioned into
 * the state 'end_of_life'.
 */
export declare enum MarketplaceItemState {
    Draft = "draft",
    EndOfLife = "end_of_life",
    EndOfSale = "end_of_sale",
    InReview = "in_review",
    Published = "published"
}
/** marketplace-item-summary */
export type MarketplaceItemSummary = AtomBaseSummary & {
    access_level?: AccessLevel;
    /**
     * Marketplace listing type defines what backing service will be used when
     * validating a create marketplace submission request, installing
     * marketplace items in some organizations, etc. It is important to note
     * that marketplace listings of type app are not backed by any service and
     * are only placeholders for existing functionality in the DevRev platform
     * (e.g. Jira Airdrop). Note: 'flow' type is deprecated, use 'snapin'
     * instead.
     */
    item_type?: MarketplaceItemItemType;
    /**
     * Name of the marketplace listing. The value for a name can be any
     * string with a minimum length of 3 and a maximum length of 128.
     */
    name?: string;
};
export declare enum MarketplaceItemType {
    App = "app",
    Flow = "flow",
    Snapin = "snapin"
}
/** marketplace-item-upsert-template */
export interface MarketplaceItemUpsertTemplate {
    /**
     * Artifact ID relevant to the marketplace item template.
     * @example "ARTIFACT-12345"
     */
    artifact_id: string;
    /** Version of the latest marketplace item template. */
    version: string;
}
/**
 * marketplace-items-create-request
 * A request to create a new marketplace item.
 */
export interface MarketplaceItemsCreateRequest {
    access_level?: AccessLevel;
    /**
     * Artifact IDs relevant to the marketplace item.
     * @example ["ARTIFACT-12345"]
     */
    artifact_ids?: string[];
    /**
     * Flag indicating whether marketplace item will be soon available to
     * purchase.
     */
    coming_soon?: boolean;
    /** Description of the marketplace item (Markdown formatted text). */
    description: string;
    /**
     * Artifact ID relevant to the marketplace item icon.
     * @example "ARTIFACT-12345"
     */
    icon_artifact_id: string;
    /**
     * Marketplace listing type defines what backing service will be used when
     * validating a create marketplace submission request, installing
     * marketplace items in some organizations, etc. It is important to note
     * that marketplace listings of type app are not backed by any service and
     * are only placeholders for existing functionality in the DevRev platform
     * (e.g. Jira Airdrop). Note: 'flow' type is deprecated, use 'snapin'
     * instead.
     */
    item_type: MarketplaceItemItemType;
    /** Keywords of the marketplace item. */
    keywords?: string;
    /** Marketplace category IDs relevant to the marketplace item. */
    marketplace_category_ids?: string[];
    /** Markteplace where the marketplace item will be created. */
    marketplace_id: string;
    /**
     * Meta score of the marketplace item.
     * @format int64
     */
    meta_score?: number;
    /** The name of the marketplace item. */
    name: string;
    /** Stock keeping unit IDs relevant to the marketplace item. */
    sku_ids?: string[];
    /** URL slug of the marketplace item. */
    slug: string;
    /** Summary of the marketplace item. */
    summary: string;
    /** Tagline of the marketplace item. */
    tagline: string;
    template?: MarketplaceItemUpsertTemplate;
}
/** marketplace-items-create-response */
export interface MarketplaceItemsCreateResponse {
    marketplace_item: MarketplaceItem;
}
/** marketplace-items-delete-request */
export interface MarketplaceItemsDeleteRequest {
    /** The marketplace item's ID. */
    id: string;
}
/** marketplace-items-get-request */
export interface MarketplaceItemsGetRequest {
    /** The marketplace item's ID. */
    id?: string;
    /** Markteplace ID where to search a marketplace item by slug. */
    marketplace_id?: string;
    /** The marketplace item's slug. */
    slug?: string;
}
/** marketplace-items-get-response */
export interface MarketplaceItemsGetResponse {
    marketplace_item: MarketplaceItem;
}
/** marketplace-items-install-request */
export interface MarketplaceItemsInstallRequest {
    /** The marketplace item's ID. */
    id: string;
}
/** marketplace-items-install-response */
export interface MarketplaceItemsInstallResponse {
    created_object: AtomSummary;
}
/** marketplace-items-invite-request */
export interface MarketplaceItemsInviteRequest {
    /**
     * The dev org to invite to access marketplace item.
     * @example "DEV-AbCdEfGh"
     */
    dev_org: string;
    /** The marketplace item's ID. */
    id: string;
}
/** marketplace-items-invite-response */
export interface MarketplaceItemsInviteResponse {
    marketplace_item: MarketplaceItem;
}
/** marketplace-items-list-request */
export interface MarketplaceItemsListRequest {
    /** Filters marketplace items relevant for these categories. */
    categories?: string[];
    /**
     * Filters for marketplace items created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: ListMarketplaceItemsFilterCreatedByOperatorType;
    created_date?: DateTimeFilter;
    /**
     * To start listing marketplace items cursor field should not be
     * provided. Set cursor to value returned by the previous call to list
     * items in the next page.
     */
    cursor?: string;
    /**
     * Limit for how many items to be retrieved per page. Default is 50.
     * @format int32
     */
    limit?: number;
    /** Markteplace ID where to list marketplace items. */
    marketplace_id?: string;
    modified_date?: DateTimeFilter;
    /**
     * Filters for marketplace items owned by some organization.
     * @example "DEV-AbCdEfGh"
     */
    owned_by?: string;
    /** Search query to search marketplace items. */
    search_query?: string;
    /** Filters marketplace items relevant for these snap-in packages. */
    snap_in_package?: string[];
    /** Filters marketplace items relevant for these snap-in versions. */
    snap_in_version?: string[];
    /**
     * List of fields to sort the marketplace item object, by and how to
     * sort them. Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
    /** Filters on state for marketplace items. */
    state?: MarketplaceItemState[];
}
/** marketplace-items-list-response */
export interface MarketplaceItemsListResponse {
    /**
     * Next cursor to continue listing marketplace items. If cursor is not
     * set you have reached the last page of items.
     */
    cursor?: string;
    /** The list of marketplace items. */
    marketplace_items: MarketplaceItem[];
}
/** marketplace-items-publish-request */
export interface MarketplaceItemsPublishRequest {
    /** The marketplace submission's ID to publish to the marketplace. */
    id: string;
}
/** marketplace-items-publish-response */
export interface MarketplaceItemsPublishResponse {
    marketplace_item: MarketplaceItem;
}
/** marketplace-items-rank-request */
export interface MarketplaceItemsRankRequest {
    /** The marketplace item's ID. */
    id: string;
    /**
     * The marketplace item's meta score.
     * @format int64
     */
    meta_score: number;
}
/** marketplace-items-rank-response */
export interface MarketplaceItemsRankResponse {
    marketplace_item: MarketplaceItem;
}
/** marketplace-items-search-request */
export interface MarketplaceItemsSearchRequest {
    /** Markteplace ID where to search marketplace items. */
    marketplace?: string;
    /** Search query to search marketplace items. */
    search_query: string;
}
/** marketplace-items-search-response */
export interface MarketplaceItemsSearchResponse {
    /** The list of marketplace items. */
    marketplace_items: MarketplaceItem[];
}
/** marketplace-items-transition-request */
export interface MarketplaceItemsTransitionRequest {
    /** The marketplace item's ID. */
    id: string;
    /**
     * The state represents the life cycle of the marketplace item. When a new
     * marketplace item is created it is put in the state 'draft'. Once
     * publisher (member of an organization who created a marketplace item)
     * finishes editing the item he will transition it into the state
     * 'in_review'. Marketplace owner (member of an organization that owns the
     * marketplace) will be able to do a review of the submission and either
     * transition it  back into state 'draft' (if changes are required) or in
     * state 'published'  (if submission met the required standards).
     * Publisher can transit the published marketplace item into the state
     * 'end_of_sale' if he wants to temporarily remove the marketplace item
     * from the shelves ( the item won't appear on the marketplace and users
     * won't be able to install it). From state 'end_of_sale' one can
     * transition the item back into state 'draft' or  'published' (if there
     * were no changes done). Once an item is deleted it is transitioned into
     * the state 'end_of_life'.
     */
    state: MarketplaceItemState;
}
/** marketplace-items-transition-response */
export interface MarketplaceItemsTransitionResponse {
    marketplace_item: MarketplaceItem;
}
/** marketplace-items-update-request */
export interface MarketplaceItemsUpdateRequest {
    access_level?: AccessLevel;
    artifact_ids?: MarketplaceItemArtifactListUpdate;
    category_ids?: MarketplaceItemCategoryListUpdate;
    /**
     * Flag indicating whether marketplace item will be soon available to
     * purchase.
     */
    coming_soon?: boolean;
    /** Description of the marketplace item. */
    description?: string;
    /**
     * Artifact ID relevant to the marketplace item icon.
     * @example "ARTIFACT-12345"
     */
    icon_artifact_id?: string;
    /** The marketplace item's ID. */
    id: string;
    /**
     * Marketplace listing type defines what backing service will be used when
     * validating a create marketplace submission request, installing
     * marketplace items in some organizations, etc. It is important to note
     * that marketplace listings of type app are not backed by any service and
     * are only placeholders for existing functionality in the DevRev platform
     * (e.g. Jira Airdrop). Note: 'flow' type is deprecated, use 'snapin'
     * instead.
     */
    item_type?: MarketplaceItemItemType;
    /** Keywords of the marketplace item. */
    keywords?: string;
    /**
     * Meta score of the marketplace item.
     * @format int64
     */
    meta_score?: number;
    /** Name of the marketplace item. */
    name?: string;
    sku_ids?: MarketplaceItemSkuListUpdate;
    /** Summary of the marketplace item. */
    summary?: string;
    /** Tagline of the marketplace item. */
    tagline?: string;
    template?: MarketplaceItemUpsertTemplate;
}
/** marketplace-items-update-response */
export interface MarketplaceItemsUpdateResponse {
    marketplace_item: MarketplaceItem;
}
/**
 * marketplace-slug-registration
 * Slug registration represents a registration of a slug for either a
 * marketplace or a marketplace listing.
 */
export interface MarketplaceSlugRegistration {
    /** The user that created the object. */
    created_by?: string;
    /**
     * Timestamp when the object was created.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_date?: string;
    /** Slug registration ID. */
    id: string;
    /**
     * ID of the marketplace for which the marketplace listing slug is
     * registered to. This field is only applicable for marketplace
     * listing slug registrations.
     */
    marketplace_id?: string;
    /** User that last modified the object. */
    modified_by?: string;
    /**
     * Timestamp when the object was last modified.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    modified_date?: string;
    /**
     * Object type for which the slug is registered. It can be 'marketplace'
     * or 'marketplace_item'.
     */
    object_type?: SlugRegistrationObjectType;
    /** ID of the object for which the slug is registered. */
    parent_id?: string;
    /**
     * Slug to be registered.  Slugs are unique within a marketplace or a
     * marketplace listing.
     */
    slug?: string;
    /** State of the slug registration. */
    state?: SlugRegistrationState;
}
/**
 * marketplace-slug-registrations-abort-request
 * A request to delete lock registration.
 */
export interface MarketplaceSlugRegistrationsAbortRequest {
    /** Actor ID who is deleting the slug registration. */
    actor: string;
    /** Slug registration ID. */
    id: string;
}
/** marketplace-slug-registrations-abort-response */
export type MarketplaceSlugRegistrationsAbortResponse = object;
/**
 * marketplace-slug-registrations-commit-request
 * A request to commit existing lock registration.
 */
export interface MarketplaceSlugRegistrationsCommitRequest {
    /** Actor ID who is committing the slug registration. */
    actor: string;
    /** Slug registration ID. */
    id: string;
    /**
     * Either marketplace or marketplace item ID for which the slug is
     * registered to.
     */
    parent: string;
}
/** marketplace-slug-registrations-commit-response */
export interface MarketplaceSlugRegistrationsCommitResponse {
    /**
     * Slug registration represents a registration of a slug for either a
     * marketplace or a marketplace listing.
     */
    slug_registration: MarketplaceSlugRegistration;
}
/**
 * marketplace-slug-registrations-is-available-request
 * A request to check if provided slug registration is available.
 */
export interface MarketplaceSlugRegistrationsIsAvailableRequest {
    /** Actor ID who is requesting the lock. */
    actor: string;
    /**
     * ID of the marketplace for which the marketplace listing slug is
     * registered to. This field is only applicable for marketplace
     * listing slug registrations.
     */
    marketplace?: string;
    /**
     * Object type for which the slug is registered. It can be 'marketplace'
     * or 'marketplace_item'.
     */
    object_type: SlugRegistrationObjectType;
    /**
     * Slug to be registered. Slugs are unique within a marketplace or a
     * marketplace listing.
     */
    slug: string;
}
/** marketplace-slug-registrations-is-available-response */
export interface MarketplaceSlugRegistrationsIsAvailableResponse {
    /** Indicates if the slug is available for registration. */
    is_available: boolean;
}
/**
 * marketplace-slug-registrations-prepare-request
 * A request to lock new slug registration.
 */
export interface MarketplaceSlugRegistrationsPrepareRequest {
    /** Actor ID who is requesting the lock. */
    actor: string;
    /**
     * ID of the marketplace for which the marketplace listing slug is
     * registered to. This field is only applicable for marketplace
     * listing slug registrations.
     */
    marketplace?: string;
    /**
     * Object type for which the slug is registered. It can be 'marketplace'
     * or 'marketplace_item'.
     */
    object_type: SlugRegistrationObjectType;
    /**
     * Slug to be registered. Slugs are unique within a marketplace or a
     * marketplace listing.
     */
    slug: string;
}
/** marketplace-slug-registrations-prepare-response */
export interface MarketplaceSlugRegistrationsPrepareResponse {
    /**
     * Slug registration represents a registration of a slug for either a
     * marketplace or a marketplace listing.
     */
    slug_registration: MarketplaceSlugRegistration;
}
/** marketplace-submission */
export type MarketplaceSubmission = AtomBase & {
    access_level?: AccessLevel;
    /**
     * Artifacts relevant to the marketplace listing (e.g. screenshots,
     * videos, banner image, icon).
     */
    artifacts?: ArtifactSummary[];
    /**
     * Categories relevant to the marketplace listing. One can provide at
     * most three categories. It's important to note that the categories
     * must belong to the same marketplace as the marketplace listing
     * does. Categories can be fetched from 'marketplace_categories.list'
     * API endpoint. Marketplace listing can associate only leaf
     * categories (i.e. ones without a child category). Categories are
     * used to organize and classify listings on a marketplace, making it
     * easier for users to find and browse related products. Therefore one
     * needs to select only the categories that are relevant to this
     * specific listing.
     */
    categories?: MarketplaceCategorySummary[];
    /**
     * Flag indicating whether marketplace listing will be soon available
     * to purchase and install. Coming soon listings doesn't have to have
     * a template/snap-in-version or pricing. When creating an initial
     * submission one can set the value to be either true or false. In a
     * later submission (non-initial submission) only setting coming-soon
     * from true to false is allowed.
     */
    coming_soon?: boolean;
    /**
     * The description provides detailed information about the marketplace
     * listing. It can be plain text or markdown formatted text.
     * Description text should describe all the major futures of the
     * marketplace listings and some installation guidelines.
     */
    description?: string;
    destination_marketplace_item?: MarketplaceItemSummary;
    icon_artifact?: ArtifactSummary;
    /**
     * Marketplace listing type defines what backing service will be used when
     * validating a create marketplace submission request, installing
     * marketplace items in some organizations, etc. It is important to note
     * that marketplace listings of type app are not backed by any service and
     * are only placeholders for existing functionality in the DevRev platform
     * (e.g. Jira Airdrop). Note: 'flow' type is deprecated, use 'snapin'
     * instead.
     */
    item_type?: MarketplaceSubmissionItemType;
    /** Keywords relevant to the marketplace listing. */
    keywords?: string;
    marketplace?: MarketplaceSummary;
    /**
     * The marketplace listing is accessible to organizations represented
     * by member entities.  When there are no member entities listed, all
     * organizations with access to the marketplace can access the
     * specific listing.  To include a member entity in the marketplace
     * listing, utilize the invite API.  Conversely, to remove a member
     * entity, make use of the revoke-invitation API.
     */
    member_orgs?: OrgReference[];
    /** The latest messages in the timeline of the submission. */
    messages?: TimelineEntry[];
    /**
     * Name of the marketplace listing. The value for a name can be any
     * string with a minimum length of 3 and a maximum length of 128.
     */
    name?: string;
    /**
     * URL slug of the marketplace listing. Slug cannot be changed after
     * it has been set. Its' value needs to be in the right format and it
     * has to be unique per marketplace. Slug value must start with  a
     * lowercase letter, followed by zero or more lowercase letters or
     * hyphens, and must end with a lowercase letter. For example, a valid
     * slug value might be 'my-automation', but an invalid value might be
     * 'MyAutomation' or 'my-automation-1'.
     */
    slug?: string;
    snap_in_package?: SnapInPackageSummary;
    snap_in_version?: SnapInVersionSummary;
    source_marketplace_item?: MarketplaceItemSummary;
    /**
     * The state represents the life cycle of the marketplace submission. When
     * a new marketplace submission is created it is put in the state 'draft'.
     * Once publisher (member of an organization who created the submission)
     * finishes editing it he will transition it into the state
     * 'waiting_for_review'. Marketplace owner (member of an organization that
     * owns the marketplace) will be able to do a review of the submission
     * (when he starts reviewing the submission will be  transitioned to
     * 'in_review') and he can either transition it  into state 'rejected' (if
     * changes are required) or in state 'approved'  (if submission met the
     * required standards). Once the submission is published, the submission
     * will be transitioned to 'published' state (only approved submissions
     * can be published).
     */
    state?: MarketplaceSubmissionState;
    /**
     * Stock keeping units relevant to the marketplace listing. Coming
     * soon marketplace listings and free marketplace listings are allowed
     * to have no references to the SKUs.
     */
    stock_keeping_units?: SkuSummary[];
    /** Summary is a short description of the marketplace listing. */
    summary?: string;
    /**
     * Tagline is a one-liner description of the marketplace listing. It
     * is used when presenting a marketplace listing on the home page.
     */
    tagline?: string;
    /**
     * Template refers to the semver formatted version of a flow and its
     * source code. Once a new version of a flow is released (i.e. marketplace
     * item is updated and  transitioned to state 'published') all the
     * installations of such items will be updated to the new flow.
     */
    template?: Template;
};
/** marketplace-submission-artifact-list-update */
export interface MarketplaceSubmissionArtifactListUpdate {
    /**
     * Artifact IDs to be added to the marketplace submission.
     * @example ["ARTIFACT-12345"]
     */
    add?: string[];
    /**
     * Artifact IDs to be removed from the marketplace submission.
     * @example ["ARTIFACT-12345"]
     */
    remove?: string[];
    /**
     * Artifact IDs to be set to the marketplace submission.
     * @example ["ARTIFACT-12345"]
     */
    set?: string[];
}
/** marketplace-submission-category-list-update */
export interface MarketplaceSubmissionCategoryListUpdate {
    /** Categories to be added to the marketplace submission. */
    add?: string[];
    /** Categories to be removed from the marketplace submission. */
    remove?: string[];
    /** Categories to be set to the marketplace submission. */
    set?: string[];
}
/**
 * Marketplace listing type defines what backing service will be used when
 * validating a create marketplace submission request, installing
 * marketplace items in some organizations, etc. It is important to note
 * that marketplace listings of type app are not backed by any service and
 * are only placeholders for existing functionality in the DevRev platform
 * (e.g. Jira Airdrop). Note: 'flow' type is deprecated, use 'snapin'
 * instead.
 */
export declare enum MarketplaceSubmissionItemType {
    App = "app",
    Flow = "flow",
    Snapin = "snapin"
}
/** marketplace-submission-sku-list-update */
export interface MarketplaceSubmissionSkuListUpdate {
    /** SKUs to be added to the marketplace submission. */
    add?: string[];
    /** SKUs to be removed from the marketplace submission. */
    remove?: string[];
    /** SKUs to be set to the marketplace submission. */
    set?: string[];
}
/**
 * The state represents the life cycle of the marketplace submission. When
 * a new marketplace submission is created it is put in the state 'draft'.
 * Once publisher (member of an organization who created the submission)
 * finishes editing it he will transition it into the state
 * 'waiting_for_review'. Marketplace owner (member of an organization that
 * owns the marketplace) will be able to do a review of the submission
 * (when he starts reviewing the submission will be  transitioned to
 * 'in_review') and he can either transition it  into state 'rejected' (if
 * changes are required) or in state 'approved'  (if submission met the
 * required standards). Once the submission is published, the submission
 * will be transitioned to 'published' state (only approved submissions
 * can be published).
 */
export declare enum MarketplaceSubmissionState {
    Approved = "approved",
    Draft = "draft",
    InReview = "in_review",
    Published = "published",
    Rejected = "rejected",
    WaitingForReview = "waiting_for_review"
}
/** marketplace-submission-summary */
export type MarketplaceSubmissionSummary = AtomBaseSummary & {
    access_level?: AccessLevel;
    /**
     * Marketplace listing type defines what backing service will be used when
     * validating a create marketplace submission request, installing
     * marketplace items in some organizations, etc. It is important to note
     * that marketplace listings of type app are not backed by any service and
     * are only placeholders for existing functionality in the DevRev platform
     * (e.g. Jira Airdrop). Note: 'flow' type is deprecated, use 'snapin'
     * instead.
     */
    item_type?: MarketplaceSubmissionItemType;
    /**
     * Name of the marketplace listing. The value for a name can be any
     * string with a minimum length of 3 and a maximum length of 128.
     */
    name?: string;
};
/** marketplace-submission-update */
export interface MarketplaceSubmissionUpdate {
    access_level?: AccessLevel;
    artifacts?: MarketplaceSubmissionArtifactListUpdate;
    categories?: MarketplaceSubmissionCategoryListUpdate;
    /**
     * Flag indicating whether marketplace submission will be soon
     * available to purchase.
     */
    coming_soon?: boolean | null;
    /**
     * Description of the marketplace submission (Markdown formatted
     * text).
     */
    description?: string;
    /**
     * Artifact ID relevant to the marketplace submission icon.
     * @example "ARTIFACT-12345"
     */
    icon_artifact?: string;
    /**
     * Marketplace listing type defines what backing service will be used when
     * validating a create marketplace submission request, installing
     * marketplace items in some organizations, etc. It is important to note
     * that marketplace listings of type app are not backed by any service and
     * are only placeholders for existing functionality in the DevRev platform
     * (e.g. Jira Airdrop). Note: 'flow' type is deprecated, use 'snapin'
     * instead.
     */
    item_type?: MarketplaceSubmissionItemType;
    /** Keywords of the marketplace submission. */
    keywords?: string;
    /** The name of the marketplace submission. */
    name?: string;
    /** SnapIn Version ID relevant to the marketplace submission. */
    snap_in_version?: string | null;
    stock_keeping_units?: MarketplaceSubmissionSkuListUpdate;
    /** Summary of the marketplace submission. */
    summary?: string;
    /** Tagline of the marketplace submission. */
    tagline?: string;
    template?: MarketplaceSubmissionUpsertTemplate;
}
/** marketplace-submission-upsert-template */
export interface MarketplaceSubmissionUpsertTemplate {
    /**
     * Artifact ID relevant to the marketplace submission template.
     * @example "ARTIFACT-12345"
     */
    artifact_id: string;
    /** Version of the latest marketplace submission template. */
    version: string;
}
/** marketplace-submissions-create-request */
export interface MarketplaceSubmissionsCreateRequest {
    draft_submission?: DraftMarketplaceSubmission;
    /** A request to create a new marketplace submission. */
    initial_submission?: InitialSubmission;
    /** The marketplace items's ID. */
    marketplace_item?: string;
}
/** marketplace-submissions-create-response */
export interface MarketplaceSubmissionsCreateResponse {
    marketplace_submission: MarketplaceSubmission;
}
/** marketplace-submissions-delete-request */
export interface MarketplaceSubmissionsDeleteRequest {
    /** The marketplace submission's ID. */
    id: string;
}
/** marketplace-submissions-delete-response */
export type MarketplaceSubmissionsDeleteResponse = object;
/** marketplace-submissions-get-request */
export interface MarketplaceSubmissionsGetRequest {
    /** The marketplace submissions's ID. */
    id: string;
}
/** marketplace-submissions-get-response */
export interface MarketplaceSubmissionsGetResponse {
    marketplace_submission: MarketplaceSubmission;
}
/** marketplace-submissions-list-request */
export interface MarketplaceSubmissionsListRequest {
    /**
     * Filters for marketplace submissions created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: ListMarketplaceSubmissionsFilterCreatedByOperatorType;
    created_date?: DateTimeFilter;
    /**
     * To start listing marketplace submissions cursor field should not be
     * provided. Set cursor to value returned by the previous call to list
     * submissions in the next page.
     */
    cursor?: string;
    /**
     * Flag indicating to list only submissions in review and is
     * applicable only to the members of the organization owning the
     * marketplace.
     */
    in_review_only?: boolean;
    /**
     * Limit for how many submissions to be retrieved per page. Default is
     * 50.
     * @format int32
     */
    limit?: number;
    /** Markteplace ID where to list marketplace submissions. */
    marketplace?: string;
    modified_date?: DateTimeFilter;
    /** Filters on slugs for marketplace submissions. */
    slugs?: string[];
    /** Filters on snap-in packages for marketplace submissions. */
    snap_in_package?: string[];
    /** Filters on snap-in versions for marketplace submissions. */
    snap_in_version?: string[];
    /**
     * List of fields to sort the marketplace submission object, by and
     * how to sort them. Default is to sort by created_date in descending
     * order.
     */
    sort_by?: string[];
    /** Filters on state for marketplace submissions. */
    state?: MarketplaceSubmissionState[];
}
/** marketplace-submissions-list-response */
export interface MarketplaceSubmissionsListResponse {
    /**
     * Next cursor to continue listing marketplace submissions. If cursor
     * is not set you have reached the last page of submissions.
     */
    cursor?: string;
    /** The list of marketplace submissions. */
    marketplace_submissions: MarketplaceSubmission[];
}
/** marketplace-submissions-transition-request */
export interface MarketplaceSubmissionsTransitionRequest {
    /** The marketplace submission's ID. */
    id: string;
    /**
     * The state represents the life cycle of the marketplace submission. When
     * a new marketplace submission is created it is put in the state 'draft'.
     * Once publisher (member of an organization who created the submission)
     * finishes editing it he will transition it into the state
     * 'waiting_for_review'. Marketplace owner (member of an organization that
     * owns the marketplace) will be able to do a review of the submission
     * (when he starts reviewing the submission will be  transitioned to
     * 'in_review') and he can either transition it  into state 'rejected' (if
     * changes are required) or in state 'approved'  (if submission met the
     * required standards). Once the submission is published, the submission
     * will be transitioned to 'published' state (only approved submissions
     * can be published).
     */
    state: MarketplaceSubmissionState;
}
/** marketplace-submissions-transition-response */
export interface MarketplaceSubmissionsTransitionResponse {
    marketplace_submission: MarketplaceSubmission;
}
/** marketplace-submissions-update-request */
export interface MarketplaceSubmissionsUpdateRequest {
    /** The marketplace submission's ID. */
    id: string;
    submission: MarketplaceSubmissionUpdate;
}
/** marketplace-submissions-update-response */
export interface MarketplaceSubmissionsUpdateResponse {
    marketplace_submission: MarketplaceSubmission;
}
/** marketplace-summary */
export type MarketplaceSummary = AtomBaseSummary & {
    /**
     * A marketplace can be either of two types universal or organizational. A
     * universal marketplace is publicly available (all the users on the
     * internet can access it). While an organizational marketplace can be
     * accessed only by the members of the organization. Also, only
     * organization members can install its marketplace items. Once the
     * marketplace type value is set it can't be changed.
     */
    marketplace_type?: MarketplaceType;
    /**
     * Name of the marketplace. It must be longer than 3 characters and no
     * longer than 128 characters.
     */
    name?: string;
    /**
     * URL slug of the marketplace. The slug cannot be changed after it
     * has been set. Its' value needs to be in the right format and it has
     * to be globally unique. Slug value must start with  one or more
     * lowercase letters or digits, optionally followed  by zero or more
     * hyphen-separated groups of lowercase letters or digits. For
     * example, a valid slug value might be 'my-marketplace-123', but an
     * invalid value might be 'MyMarketplace' or '123456'.
     */
    slug?: string;
};
/**
 * A marketplace can be either of two types universal or organizational. A
 * universal marketplace is publicly available (all the users on the
 * internet can access it). While an organizational marketplace can be
 * accessed only by the members of the organization. Also, only
 * organization members can install its marketplace items. Once the
 * marketplace type value is set it can't be changed.
 */
export declare enum MarketplaceType {
    Organization = "organization",
    Universal = "universal"
}
/** marketplaces-get-request */
export interface MarketplacesGetRequest {
    /** The marketplace DON. */
    id: string;
}
/** marketplaces-get-response */
export interface MarketplacesGetResponse {
    marketplace: Marketplace;
}
/** marketplaces-list-request */
export type MarketplacesListRequest = object;
/** marketplaces-list-response */
export interface MarketplacesListResponse {
    /** The list of marketplaces. */
    marketplaces: Marketplace[];
}
/**
 * media
 * Media object details.
 */
export interface Media {
    artifact?: ArtifactSummary;
    /** Source of the media. */
    source: string;
    /** URL to an external media. */
    url?: string;
}
/**
 * meerkat-widget-column-function
 * A meerkat specific column function.
 */
export interface MeerkatWidgetColumnFunction {
    /** The type of the function. */
    type: MeerkatWidgetColumnFunctionType;
}
/** The type of the function. */
export declare enum MeerkatWidgetColumnFunctionType {
    Avg = "avg",
    Count = "count",
    CountDistinct = "count_distinct",
    Max = "max",
    Median = "median",
    Min = "min",
    Sum = "sum"
}
/**
 * meerkat-widget-column-projection
 * A meerkat specific column projection.
 */
export interface MeerkatWidgetColumnProjection {
    /** A meerkat specific column function. */
    function?: MeerkatWidgetColumnFunction;
    /**
     * The SQL expression used to extract or transform the column from the
     * data source.
     */
    sql_expression: string;
    /** The data type of the column generated by the SQL expression. */
    type: MeerkatWidgetColumnProjectionType;
}
/** The data type of the column generated by the SQL expression. */
export declare enum MeerkatWidgetColumnProjectionType {
    Boolean = "boolean",
    Number = "number",
    NumberArray = "number_array",
    String = "string",
    StringArray = "string_array",
    Time = "time"
}
/** meeting */
export type Meeting = AtomBase & {
    /** The artifacts attached to the meeting. */
    artifacts?: ArtifactSummary[];
    /** The channel of meeting. */
    channel?: MeetingChannel;
    /** Custom fields. */
    custom_fields?: object;
    /**
     * Custom schema fragments.
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    custom_schema_fragments?: string[];
    /** Description of the meeting. */
    description?: string;
    /**
     * Time at which meeting ended.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    ended_date?: string;
    /** Reference ID associated with the new engagement. */
    engagement_new_ref?: string;
    /** External reference associated with the meeting. */
    external_ref?: string;
    /** External URL associated with the meeting. */
    external_url?: string;
    /** The users in the meeting. */
    members: UserSummary[];
    parent?: AtomSummary;
    /** Recording URL of the meeting. */
    recording_url?: string;
    /**
     * Time at which meeting was scheduled.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    scheduled_date?: string;
    /**
     * Combination of stock and custom schema fragment IDs.
     * @deprecated
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    schema_fragment_ids?: string[];
    /** The state of meeting. */
    state?: MeetingState;
    /**
     * Stock schema fragment.
     * @example "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"
     */
    stock_schema_fragment?: string;
    /** Subtype corresponding to the custom type fragment. */
    subtype?: string;
    /** Tags associated with the meeting. */
    tags?: TagWithValue[];
    /** Title of the meeting object. */
    title?: string;
};
/** The channel of meeting. */
export declare enum MeetingChannel {
    Devrev = "devrev",
    GoogleMeet = "google_meet",
    Offline = "offline",
    Other = "other",
    Teams = "teams",
    Zoom = "zoom"
}
/**
 * meeting-engagement-summary
 * meeting engagement summary object.
 */
export interface MeetingEngagementSummary {
    /** The channel of meeting. */
    channel?: MeetingEngagementSummaryChannel;
    /**
     * Time at which meeting ended.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    ended_date?: string;
    /** Recording URL of the meeting. */
    recording_url?: string;
    /** The state of meeting. */
    state?: MeetingEngagementSummaryState;
}
/** The channel of meeting. */
export declare enum MeetingEngagementSummaryChannel {
    Devrev = "devrev",
    GoogleMeet = "google_meet",
    Offline = "offline",
    Other = "other",
    Teams = "teams",
    Zoom = "zoom"
}
/** The state of meeting. */
export declare enum MeetingEngagementSummaryState {
    Canceled = "canceled",
    Completed = "completed",
    Scheduled = "scheduled"
}
/**
 * meeting-members
 * Members in a meeting.
 */
export interface MeetingMembers {
    member_id?: UserSummary;
    /** State of the member. */
    member_state?: string;
}
/** meeting-new */
export type MeetingNew = EngagementNewBase & {
    /** The channel of meeting. */
    channel?: string;
    /** Members in the meeting. */
    members?: MeetingMembers[];
};
/** meeting-new-summary */
export type MeetingNewSummary = EngagementNewBaseSummary;
/** The state of meeting. */
export declare enum MeetingState {
    Canceled = "canceled",
    Completed = "completed",
    Scheduled = "scheduled"
}
/** meeting-summary */
export type MeetingSummary = AtomBaseSummary;
/** meetings-count-request */
export interface MeetingsCountRequest {
    /** Filters for meetings with the provided external_ref. */
    external_ref?: string[];
    /**
     * Filters for meetings with the provided parent.
     * @example ["ACC-12345"]
     */
    parent?: string[];
}
/** meetings-count-response */
export interface MeetingsCountResponse {
    /**
     * The number of meetings matching the filter.
     * @format int64
     */
    count: number;
}
/** meetings-create-request */
export interface MeetingsCreateRequest {
    /**
     * The IDs of the artifacts to associate with the meeting.
     * @example ["ARTIFACT-12345"]
     */
    artifacts?: string[];
    /** The channel of meeting. */
    channel: MeetingChannel;
    /** Application-defined custom fields. */
    custom_fields?: object;
    /** The description of the meeting. */
    description?: string;
    /**
     * Time at which meeting ended.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    ended_date: string;
    /** External reference for the meeting. */
    external_ref?: string;
    /** External URL for the meeting. */
    external_url?: string;
    /**
     * IDs of the users that were part of the meeting.
     * @minItems 1
     * @example ["DEVU-12345"]
     */
    members: string[];
    /**
     * The parent object ID in which the meeting was created.
     * @example "ACC-12345"
     */
    parent: string;
    /** The recording URL of the meeting. */
    recording_url?: string;
    /**
     * The date and time when the meeting was scheduled.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    scheduled_date: string;
    /**
     * Schema fragment IDs associated with this meeting SOR.
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    schema_fragment_ids?: string[];
    /** The state of meeting. */
    state: MeetingState;
    /** Tags associated with the meeting. */
    tags?: SetTagWithValue[];
    /** The title of the meeting. */
    title: string;
}
/** meetings-create-response */
export interface MeetingsCreateResponse {
    meeting: Meeting;
}
/** meetings-delete-request */
export interface MeetingsDeleteRequest {
    /** The meeting's ID. */
    id: string;
}
/** meetings-delete-response */
export type MeetingsDeleteResponse = object;
/** meetings-get-request */
export interface MeetingsGetRequest {
    /** The meeting's ID. */
    id: string;
}
/** meetings-get-response */
export interface MeetingsGetResponse {
    meeting: Meeting;
}
/** meetings-join-request */
export interface MeetingsJoinRequest {
    /** The ID of the meeting to join. */
    id: string;
}
/** meetings-join-response */
export interface MeetingsJoinResponse {
    /** Whether the user's audio should be enabled upon joining. */
    audio_enabled?: boolean;
    /** The user's display name. */
    display_name?: string;
    metadata?: MeetingsPeerMetadata;
    /** The token to use to join the meeting. */
    token: string;
    /** Whether the user's video should be enabled upon joining. */
    video_enabled?: boolean;
}
/** meetings-list-request */
export interface MeetingsListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** Filters for meetings with the provided external_ref. */
    external_ref?: string[];
    /**
     * The maximum number of meetings to return.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /**
     * Filters for meetings with the provided parent.
     * @example ["ACC-12345"]
     */
    parent?: string[];
    /** Fields to sort the meetings by and the direction to sort them. */
    sort_by?: string[];
}
/** meetings-list-response */
export interface MeetingsListResponse {
    /** The list of meetings. */
    meetings: Meeting[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/** meetings-peer-metadata */
export interface MeetingsPeerMetadata {
    /**
     * The ID of the user's display picture.
     * @example "ARTIFACT-12345"
     */
    display_picture?: string;
}
/** meetings-update-request */
export interface MeetingsUpdateRequest {
    artifacts?: MeetingsUpdateRequestArtifactIds;
    /** The channel of meeting. */
    channel?: MeetingChannel;
    /** Application-defined custom fields. */
    custom_fields?: object;
    /** The description of the meeting. */
    description?: string;
    /**
     * Updates the date and time when the meeting ended.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    ended_date?: string | null;
    /** External Reference for the meeting. */
    external_ref?: string;
    /** External URL for the meeting. */
    external_url?: string;
    /** The meetings ID. */
    id: string;
    members?: MeetingsUpdateRequestMembers;
    /** The recording URL of the meeting. */
    recording_url?: string;
    /**
     * Updates the date and time when the meeting was scheduled.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    scheduled_date?: string | null;
    /**
     * Schema fragment IDs associated with this meeting SOR.
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    schema_fragment_ids?: string[];
    /** The state of meeting. */
    state?: MeetingState;
    tags?: MeetingsUpdateRequestTags;
    /** The title of the meeting. */
    title?: string;
}
/** meetings-update-request-artifact-ids */
export interface MeetingsUpdateRequestArtifactIds {
    /**
     * Sets the IDs to the provided artifact IDs.
     * @example ["ARTIFACT-12345"]
     */
    set?: string[];
}
/** meetings-update-request-members */
export interface MeetingsUpdateRequestMembers {
    /**
     * Sets the members to the provided user IDs. This must not be empty.
     * @example ["DEVU-12345"]
     */
    set?: string[];
}
/** meetings-update-request-tags */
export interface MeetingsUpdateRequestTags {
    /** Sets the provided tags on the meeting item. */
    set?: SetTagWithValue[];
}
/** meetings-update-response */
export interface MeetingsUpdateResponse {
    meeting: Meeting;
}
/**
 * member-detail
 * Member details with document signing status.
 */
export interface MemberDetail {
    /** The user's email. */
    email: string;
    /** The user's name. */
    full_name: string;
    /** Users document sign status. */
    status: MemberDetailStatus;
    /** The user's title. */
    title?: string;
    user: UserSummary;
}
/** Users document sign status. */
export declare enum MemberDetailStatus {
    Declined = "declined",
    Pending = "pending",
    Signed = "signed",
    Viewed = "viewed"
}
/** member-info */
export interface MemberInfo {
    /** The user's email. */
    email?: string;
    /** The user's full name. */
    full_name?: string;
    /** The user's title. */
    title?: string;
    /** The user id. */
    user_id: string;
}
/** member-summary */
export type MemberSummary = (DevUserSummary | GroupSummary | RevUserSummary | SysUserSummary) & {
    type: MemberType;
};
export declare enum MemberType {
    DevUser = "dev_user",
    Group = "group",
    RevUser = "rev_user",
    SysUser = "sys_user"
}
/** menu */
export type Menu = AtomBase & {
    /** Description of the menu object. */
    description?: string;
    /** Icon of the menu. */
    icon?: MenuIcon;
    /** The name of the menu. */
    name?: string;
    /** Sections of the menu sorted in display order. */
    sections?: MenuSection[];
    /**
     * The type of the menu object. - global: It is visible to all users and
     * is a part of the DevRev defaults. - app: It will be shown in the app
     * menu switcher. - explore: This type is used for rendering the explore
     * tab.
     */
    type?: MenuType;
    /** Views of the menu. */
    views?: MenuView[];
};
/** menu-get-request */
export interface MenuGetRequest {
    /** The menu object's ID. */
    id: string;
}
/** menu-get-response */
export interface MenuGetResponse {
    menu: Menu;
}
/** Icon of the menu. */
export declare enum MenuIcon {
    BuildApp = "build_app",
    GrowApp = "grow_app",
    Home = "home",
    SupportApp = "support_app"
}
/** menu-list-request */
export interface MenuListRequest {
    /** Job title of the Dev User. */
    persona: DevUserJobTitle;
}
/** menu-list-response */
export interface MenuListResponse {
    /** The menu object's ID. */
    default_menu: string;
    /** The list of requested menus. */
    menus: Menu[];
}
/**
 * menu-section
 * A section object.
 */
export interface MenuSection {
    /** The display name of the section. */
    display_name: string;
    /** Icon of the section. */
    icon?: string;
    /** The unique ID of the section. */
    id: string;
    /** Boolean to specify whether it's a default section or not. */
    is_default?: boolean;
}
/** menu-summary */
export type MenuSummary = AtomBaseSummary;
/**
 * The type of the menu object. - global: It is visible to all users and
 * is a part of the DevRev defaults. - app: It will be shown in the app
 * menu switcher. - explore: This type is used for rendering the explore
 * tab.
 */
export declare enum MenuType {
    App = "app",
    Explore = "explore",
    Global = "global"
}
/**
 * menu-view
 * A view object.
 */
export interface MenuView {
    /** Description of the view. */
    description?: string;
    /** The display name of the view. */
    display_name?: string;
    /** Icon of the view. */
    icon?: string;
    /** The ID of the view. */
    id: string;
    /** Boolean to specify whether it's a default view or not. */
    is_default?: boolean;
    /**
     * Boolean to specify whether it's hidden or not (applies for stock
     * views).
     */
    is_hidden?: boolean;
    /** The identifier for the view. Used when view type is page. */
    page_type?: MenuViewPageType;
    reference?: AtomSummary;
    /** The unique ID of the section under which the view is grouped. */
    section_id?: string;
    /** The type of the view. */
    type?: MenuViewType;
}
/** The identifier for the view. Used when view type is page. */
export declare enum MenuViewPageType {
    ArticleCollections = "article_collections",
    Contacts = "contacts",
    Datasets = "datasets",
    Developer360Analytics = "developer360_analytics",
    Explore = "explore",
    GrowAnalytics = "grow_analytics",
    GrowTeamActivity = "grow_team_activity",
    KnowledgeBase = "knowledge_base",
    Lobby = "lobby",
    MyTasks = "my_tasks",
    Notebook = "notebook",
    PeopleInsights = "people_insights",
    PlugGettingStarted = "plug_getting_started",
    PlugNudges = "plug_nudges",
    RevopsDashboard = "revops_dashboard",
    Search = "search",
    SprintBoards = "sprint_boards",
    SupportDashboard = "support_dashboard",
    Trails = "trails",
    Updates = "updates"
}
/** The type of the view. */
export declare enum MenuViewType {
    Dashboard = "dashboard",
    Page = "page",
    Vista = "vista"
}
/** menu-view-update-request */
export interface MenuViewUpdateRequest {
    /** The menu object's ID. */
    menu_id: string;
    /**
     * The reference object's ID.
     * @example "VISTA-12345"
     */
    reference_id?: string;
    section_id: string;
    view_id?: string;
}
/** menu-view-update-response */
export type MenuViewUpdateResponse = object;
/** metric */
export type Metric = AtomBase & {
    /** Description of the metric. */
    description?: string;
    /** Whether this is a system metric. */
    is_system?: boolean;
    /** Name of the metric. */
    name?: string;
    /** Type of the metric value. */
    value_type?: MetricValueType;
};
/** metric-action-execute-request */
export interface MetricActionExecuteRequest {
    action: MetricActionExecuteRequestAction;
    /**
     * Timestamp of the event.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    event_date: string;
    /** The metric's ID for which the metric action is to be executed. */
    metric: string;
    /**
     * The underlying object's ID on which the metric action is to be
     * executed.
     */
    object: string;
}
export declare enum MetricActionExecuteRequestAction {
    Complete = "complete",
    Pause = "pause",
    Restart = "restart",
    Resume = "resume",
    Start = "start"
}
/** metric-action-execute-response */
export type MetricActionExecuteResponse = object;
/**
 * metric-action-rule
 * Rule for a single action (start | pause | resume | complete | restart).
 */
export interface MetricActionRule {
    /** Action to be taken. */
    action?: string;
    /** Boolean condition on object events driving metric tracker state. */
    condition?: MetricCondition;
}
/**
 * metric-condition
 * Boolean condition on object events driving metric tracker state.
 */
export interface MetricCondition {
    /** Trigger for the condition. */
    condition_trigger?: string;
    /** Condition for object created. */
    object_created?: object;
    /** Condition for object updated. */
    object_updated?: object;
}
/** metric-data-point */
export interface MetricDataPoint {
    /**
     * Key-value pairs for specifying additional attributes.
     * @maxItems 12
     */
    dimensions?: MetricDataPointDimension[];
    /**
     * An ID that uniquely identifies the metric data point. This ID will
     * be used for deduplication. Clients can generate its own ID and send
     * it in the request. If not provided, DevRev will perform
     * content-based deduplication.
     */
    id?: string;
    /**
     * Timestamp when metric value is captured.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    timestamp: string;
    /**
     * The value corresponding to the metric. For simply recording
     * occurrence of an event, this value should be 1.0.
     * @format double
     */
    value: number;
}
/** metric-data-point-dimension */
export interface MetricDataPointDimension {
    /**
     * The key for the dimension. The keys must be unique and it is not
     * allowed to have more than one value with the same key. Key must be
     * at least one character long and cannot be longer than 64
     * characters.Key can only contain alphanumeric characters (A-Z, a-z,
     * and 0-9) and underscores (_). Key cannot start with a number and is
     * case-insensitive.
     */
    key: string;
    /**
     * The value for the dimension. Value could be any string and cannot
     * be longer than 256 characters.
     */
    value: string;
}
/** metric-definition */
export type MetricDefinition = AtomBase & {
    /** The list of item types on which the metric might be applied. */
    applies_to: MetricDefinitionAppliesTo[];
    /** Description of the purpose and operation of the metric. */
    description?: string;
    /** The rule which drives the metric stage transitions. */
    metric_rule?: MetricActionRule[];
    /**
     * The type of the metric. 'time' metrics track the time spent in some
     * state, supporting operations like 'start', 'stop', 'pause', 'resume'.
     * 'value' metrics track a value, supporting operations like 'set',
     * 'increment', 'decrement'.
     */
    metric_type?: MetricDefinitionMetricType;
    /** Human readable name of the metric. */
    name?: string;
    /**
     * The status of the metric. 'active' metrics can be used to create new
     * SLAs, while 'inactive' metrics can not be used in new SLAs. Metrics can
     * be updated between 'active' and 'inactive' states.
     */
    status?: MetricDefinitionStatus;
};
/** The list of item types on which the metric might be applied. */
export declare enum MetricDefinitionAppliesTo {
    Conversation = "conversation",
    Issue = "issue",
    Ticket = "ticket"
}
/**
 * The type of the metric. 'time' metrics track the time spent in some
 * state, supporting operations like 'start', 'stop', 'pause', 'resume'.
 * 'value' metrics track a value, supporting operations like 'set',
 * 'increment', 'decrement'.
 */
export declare enum MetricDefinitionMetricType {
    Time = "time",
    Value = "value"
}
/**
 * The status of the metric. 'active' metrics can be used to create new
 * SLAs, while 'inactive' metrics can not be used in new SLAs. Metrics can
 * be updated between 'active' and 'inactive' states.
 */
export declare enum MetricDefinitionStatus {
    Active = "active",
    Inactive = "inactive"
}
/** metric-definition-summary */
export type MetricDefinitionSummary = AtomBaseSummary & {
    /**
     * The type of the metric. 'time' metrics track the time spent in some
     * state, supporting operations like 'start', 'stop', 'pause', 'resume'.
     * 'value' metrics track a value, supporting operations like 'set',
     * 'increment', 'decrement'.
     */
    metric_type?: MetricDefinitionMetricType;
    /** Human readable name of the metric. */
    name?: string;
    /**
     * The status of the metric. 'active' metrics can be used to create new
     * SLAs, while 'inactive' metrics can not be used in new SLAs. Metrics can
     * be updated between 'active' and 'inactive' states.
     */
    status?: MetricDefinitionStatus;
};
/** metric-definitions-create-request */
export interface MetricDefinitionsCreateRequest {
    /** The list of object types on which the metric can be applied. */
    applies_to: MetricDefinitionAppliesTo[];
    /**
     * Description of the purpose and operation of the metric.
     * @maxLength 1024
     */
    description?: string;
    /**
     * A unique human readable name of the metric.
     * @minLength 1
     * @maxLength 64
     */
    name: string;
}
/** metric-definitions-create-response */
export interface MetricDefinitionsCreateResponse {
    metric_definition: MetricDefinition;
}
/** metric-definitions-delete-request */
export interface MetricDefinitionsDeleteRequest {
    /** The ID of the metric definition to be deleted. */
    id: string;
}
/**
 * metric-definitions-delete-response
 * The response to deleting a metric definition.
 */
export type MetricDefinitionsDeleteResponse = object;
/** metric-definitions-get-request */
export interface MetricDefinitionsGetRequest {
    /** The ID of the metric definition to get. */
    id: string;
}
/** metric-definitions-get-response */
export interface MetricDefinitionsGetResponse {
    metric_definition: MetricDefinition;
}
/** metric-definitions-list-request */
export interface MetricDefinitionsListRequest {
    /** The type of objects the metric definition applies to. */
    applies_to_type?: MetricDefinitionAppliesTo[];
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * Whether to include custom metrics in the response. If not set, then
     * custom metrics are excluded.
     */
    include_custom_metrics?: boolean;
    /**
     * The maximum number of records to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Fields to sort the records by and the direction to sort them. */
    sort_by?: string[];
    /** The status of the metric definition. */
    status?: MetricDefinitionStatus[];
    /** The type of metric definitions sought. */
    type?: MetricDefinitionMetricType[];
}
/** metric-definitions-list-response */
export interface MetricDefinitionsListResponse {
    /** The list of metric definitions. */
    metric_definitions: MetricDefinition[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/** metric-definitions-update-request */
export interface MetricDefinitionsUpdateRequest {
    /**
     * The updated description of the purpose and operation of the metric.
     * @maxLength 1024
     */
    description?: string;
    /** The ID of the metric definition to update. */
    id: string;
    /**
     * The updated unique human readable name of the metric.
     * @minLength 1
     * @maxLength 64
     */
    name?: string;
    /**
     * The status of the metric. 'active' metrics can be used to create new
     * SLAs, while 'inactive' metrics can not be used in new SLAs. Metrics can
     * be updated between 'active' and 'inactive' states.
     */
    status?: MetricDefinitionStatus;
}
/** metric-definitions-update-response */
export interface MetricDefinitionsUpdateResponse {
    metric_definition: MetricDefinition;
}
/**
 * metric-details
 * Details on how a metric attributes to a score.
 */
export interface MetricDetails {
    /**
     * Whether the metric is positively or negatively correlated  with the
     * metric_set.
     */
    correlation?: MetricDetailsCorrelation;
    /** Linear normalization inputs. */
    linear_normalization?: LinearNormalization;
    metric?: AtomSummary;
    /** Normalization method for the metric. */
    normalization?: MetricDetailsNormalization;
    /**
     * Weight of the metric, this will be used to decide attribution of
     * this metric in the metric set.
     * @format double
     */
    weight?: number;
}
/**
 * Whether the metric is positively or negatively correlated  with the
 * metric_set.
 */
export declare enum MetricDetailsCorrelation {
    Negative = "negative",
    Positive = "positive"
}
/** Normalization method for the metric. */
export declare enum MetricDetailsNormalization {
    Linear = "linear"
}
/** metric-set */
export type MetricSet = AtomBase & {
    /** Description of the metric set. */
    description?: string;
    /** Whether this is a default metric set. */
    is_default?: boolean;
    /** Metrics in the metric set. */
    metrics?: MetricDetails[];
    /** Name of the metric set. */
    name?: string;
};
/** metric-set-summary */
export type MetricSetSummary = AtomBaseSummary;
/** metric-sets-create-request */
export interface MetricSetsCreateRequest {
    /** The description of the metric set. */
    description?: string;
    /** The list of metrics in the metric set. */
    metrics: MetricSetsCreateRequestMetricDetails[];
    /** The name of the metric set. */
    name: string;
}
/** metric-sets-create-request-metric-details */
export interface MetricSetsCreateRequestMetricDetails {
    /**
     * Whether the metric is positively or negatively correlated  with the
     * metric_set.
     */
    correlation: MetricDetailsCorrelation;
    /** Linear normalization inputs. */
    linear_normalization?: LinearNormalization;
    /** ID of the backing metric. */
    metric: string;
    /** Normalization method for the metric. */
    normalization: MetricDetailsNormalization;
    /**
     * Weight of the metric, this will be used to decide attribution of
     * this metric in the metric set.
     * @format double
     */
    weight: number;
}
/** metric-sets-create-response */
export interface MetricSetsCreateResponse {
    metric_set: MetricSet;
}
/** metric-sets-delete-request */
export interface MetricSetsDeleteRequest {
    /** ID of the metric set to delete. */
    id: string;
}
/**
 * metric-sets-delete-response
 * The response to deleting a metric set.
 */
export type MetricSetsDeleteResponse = object;
/** metric-sets-get-request */
export interface MetricSetsGetRequest {
    /** ID of the metric set to get. */
    id: string;
}
/** metric-sets-get-response */
export interface MetricSetsGetResponse {
    metric_set: MetricSet;
}
/**
 * metric-sets-list-request
 * A request to get information about a list of metric sets.
 */
export type MetricSetsListRequest = object;
/**
 * metric-sets-list-response
 * The response to listing metric sets.
 */
export interface MetricSetsListResponse {
    /** The list of metric sets. */
    metric_sets: MetricSet[];
}
/** metric-sets-update-request */
export interface MetricSetsUpdateRequest {
    /** The updated metric set's description. */
    description?: string;
    /** ID of the metric set to update. */
    id: string;
    metrics?: MetricSetsUpdateRequestMetricDetails;
    /** The updated metric set's name. */
    name?: string;
}
/** metric-sets-update-request-metric-detail */
export interface MetricSetsUpdateRequestMetricDetail {
    /**
     * Whether the metric is positively or negatively correlated  with the
     * metric_set.
     */
    correlation: MetricDetailsCorrelation;
    /** Linear normalization inputs. */
    linear_normalization?: LinearNormalization;
    /** ID of the backing metric. */
    metric: string;
    /** Normalization method for the metric. */
    normalization: MetricDetailsNormalization;
    /**
     * Weight of the metric, this will be used to decide attribution of
     * this metric in the metric set.
     * @format double
     */
    weight: number;
}
/** metric-sets-update-request-metric-details */
export interface MetricSetsUpdateRequestMetricDetails {
    /** Sets the metric details to the provided value. */
    set: MetricSetsUpdateRequestMetricDetail[];
}
/** metric-sets-update-response */
export interface MetricSetsUpdateResponse {
    metric_set: MetricSet;
}
/** metric-summary */
export type MetricSummary = AtomBaseSummary;
/** Type of the metric value. */
export declare enum MetricValueType {
    Double = "double",
    Duration = "duration"
}
/**
 * metric-visualization-y-axis
 * The y axis for a metric visualization.
 */
export interface MetricVisualizationYAxis {
    /** The color for an axis. This can be a single color or a gradient. */
    color?: VisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: VisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name: string;
}
/**
 * metric-widget-visualization
 * A metric visualization configuration. Includes metadata specific to
 * metrics.
 */
export interface MetricWidgetVisualization {
    /** The configuration for the Y-axis. */
    y: MetricVisualizationYAxis[];
}
/** metrics-data */
export interface MetricsData {
    /**
     * One or more data points collected for a given metric such as object
     * usage, object state etc.
     * @minItems 1
     */
    data_points: MetricDataPoint[];
    /**
     * Name of the metric which is being measured. For example,
     * num_api_calls, num_active_users, etc.
     */
    name: string;
    /**
     * Rev Org ID or external_ref for which metric is being published.Rev
     * Org ID is DevRev DON ID. For example,
     * don:identity:dvrv-us-1:devo/0:revo/156. External_ref is the
     * identification of DevRev customer's customers and maintained by
     * DevRev's customers. Devrev will internally resolve external_ref to
     * Rev Org ID and use it for further processing. For example,
     * external_ref=org_customer_1 may resolve to
     * don:identity:dvrv-us-1:devo/0:revo/155.
     */
    org_ref: string;
    /** Rev User ID or user ref for which metric is being published. */
    user_ref?: string;
}
/** metrics-data-ingest-request */
export interface MetricsDataIngestRequest {
    /**
     * Metrics data received from Dev orgs.
     * @minItems 1
     */
    metrics: MetricsData[];
}
/** metrics-get-request */
export interface MetricsGetRequest {
    /** ID of the metric to get. */
    id: string;
}
/** metrics-get-response */
export interface MetricsGetResponse {
    metric: Metric;
}
/**
 * metrics-list-request
 * A request to get information about a list of metrics.
 */
export type MetricsListRequest = object;
/**
 * metrics-list-response
 * The response to listing metrics.
 */
export interface MetricsListResponse {
    /** The list of metrics. */
    metrics: Metric[];
}
/**
 * mfz-defaults-seed-request
 * A request to seed default groups, conditional roles and group members
 * for the authenticated user's dev organization.
 */
export interface MfzDefaultsSeedRequest {
    /**
     * Whether to fill the existing users into default groups for the
     * authenticated dev organization.
     */
    backfill: boolean;
}
/**
 * mfz-defaults-seed-response
 * Response object for seeding mfz defaults request.
 */
export type MfzDefaultsSeedResponse = object;
/**
 * mfz-preferences-group
 * Preferences group for MFZ.
 */
export interface MfzPreferencesGroup {
    /** Default group to add devUser to if not defined. */
    default_group_display_id?: string;
}
/**
 * microflow-action-event
 * Microflow action external annotated event.
 */
export interface MicroflowActionEvent {
    /** The name of source app. */
    app?: string;
    /** The display ID of user in source app. */
    app_user_display_id?: string;
    /** The user display ID of user in source app. */
    app_user_id?: string;
    /** The user identifier in the source app. */
    app_user_identifier?: string;
    /** The ID of the event. */
    event_id?: string;
    /** The metadata of the event. */
    event_metadata?: KeyValuePair[];
    /** The summary of the event. */
    event_summary?: string;
    /** The type of the event. */
    event_type?: string;
    /** The URL of the event. */
    event_url?: string;
    /** The message in the event. */
    message?: string;
}
/** microservice */
export type Microservice = PartBase & {
    development_owner?: UserSummary;
    pm_owner?: UserSummary;
    qa_owner?: UserSummary;
};
/** microservice-summary */
export type MicroserviceSummary = PartBaseSummary;
/** migrate-recurring-line-item */
export interface MigrateRecurringLineItem {
    from: MigrateRecurringLineItemFromRecurringLineItemType;
    to: MigrateRecurringLineItemToRecurringLineItemType;
}
/** migrate-recurring-line-item-from-recurring-line-item-type */
export interface MigrateRecurringLineItemFromRecurringLineItemType {
    /** Recurring line item to be migrated from one SKU to another. */
    recurring_line_item_id: string;
}
/** migrate-recurring-line-item-to-recurring-line-item-type */
export interface MigrateRecurringLineItemToRecurringLineItemType {
    /** Pricing at which the target SKU is to be added in the service plan. */
    pricing_id: string;
    /**
     * Target SKU to which the recurring line item will be migrated. All
     * assignments for the recurring line item will be moved to this SKU.
     */
    sku_id: string;
}
/**
 * money
 * Money.
 */
export interface Money {
    /** Amount of the money. */
    amount?: string;
    /** Currency of the money. */
    currency?: string;
}
/**
 * mutation-info-field
 * Mutation purpose and related metadata.
 */
export interface MutationInfoField {
    merged_to_part?: PartSummary;
    /** Parent Ids of the part before mutation. */
    old_parent_parts: PartSummary[];
    promoted_part?: PartSummary;
    /** Purpose of mutation. */
    purpose?: string;
}
/** native-banner-nudge-widget */
export type NativeBannerNudgeWidget = BannerNudgeWidgetBase & {
    /** The title of the banner nudge widget. */
    title: string;
};
/** native-banner-nudge-widget-summary */
export type NativeBannerNudgeWidgetSummary = BannerNudgeWidgetBaseSummary;
/** native-link-preview-widget */
export type NativeLinkPreviewWidget = LinkPreviewWidgetBase & {
    target?: AtomSummary;
};
/** native-link-preview-widget-summary */
export type NativeLinkPreviewWidgetSummary = LinkPreviewWidgetBaseSummary & {
    target?: AtomSummary;
};
/** native-post-nudge-widget */
export type NativePostNudgeWidget = PostNudgeWidgetBase & {
    /** The body of the post nudge widget. */
    body?: string;
    cover_image?: ArtifactSummary;
    /** The title of the post nudge widget. */
    title: string;
};
/** native-post-nudge-widget-summary */
export type NativePostNudgeWidgetSummary = PostNudgeWidgetBaseSummary;
/** native-spotlight-nudge-widget */
export type NativeSpotlightNudgeWidget = SpotlightNudgeWidgetBase & {
    cover_image?: ArtifactSummary;
    /** The description of the spotlight nudge widget. */
    description?: string;
    /** The title of the spotlight nudge widget. */
    title: string;
};
/** native-spotlight-nudge-widget-summary */
export type NativeSpotlightNudgeWidgetSummary = SpotlightNudgeWidgetBaseSummary;
/** news */
export type News = AtomBase & {
    access_level?: AccessLevel;
    /** Content format and text for the news. */
    content: Content;
    /** Media that is shown on the cover of the news. */
    cover_media?: Media[];
    /** Keywords associated with the object. */
    keywords?: string[];
    /**
     * Timestamp from when this news will be visible in the feed.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    scheduled_from?: string;
    /**
     * Timestamp until when this news will be visible in the feed.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    scheduled_until?: string;
    /** Status of the news post. */
    status?: string;
    /** Title of the news. */
    title: string;
};
/**
 * news-create-request
 * The request to create a news item.
 */
export interface NewsCreateRequest {
    content: NewsCreateRequestNewsContent;
    /** Cover media for the news item. */
    cover_media: NewsCreateRequestNewsMedia[];
    /** Keywords that describe the news item. */
    keywords: string[];
    /**
     * The time at which the news item is scheduled.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    scheduled_from?: string;
    /**
     * The time until when the news item is scheduled.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    scheduled_until?: string;
    status?: NewsCreateRequestStatusValue;
    /** Title of the news item. */
    title: string;
}
/** news-create-request-news-content */
export interface NewsCreateRequestNewsContent {
    /** Body of the news item. */
    body: string;
    /** Format of the content in the new item. */
    format: string;
}
/** news-create-request-news-media */
export interface NewsCreateRequestNewsMedia {
    /**
     * ID of the artifact, otherwise not set if the source type isn't
     * 'artifact'.
     * @example "ARTIFACT-12345"
     */
    artifact?: string;
    source?: 'artifact' | 'url';
    /**
     * URL of the external media, otherwise not set if the source type
     * isn't 'url'.
     */
    url?: string;
}
export declare enum NewsCreateRequestStatusValue {
    Archived = "archived",
    Draft = "draft",
    Published = "published"
}
/**
 * news-create-response
 * The response for the create news item request.
 */
export interface NewsCreateResponse {
    news: News;
}
/**
 * news-delete-request
 * The request to delete a news item.
 */
export interface NewsDeleteRequest {
    /** The ID of the news item. */
    id: string;
}
/**
 * news-get-request
 * The request to get a news item.
 */
export interface NewsGetRequest {
    /** The ID of the requested news item. */
    id: string;
}
/**
 * news-get-response
 * The response for the get news item request.
 */
export interface NewsGetResponse {
    news: News;
}
/**
 * news-list-request
 * The request to list news items.
 */
export interface NewsListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of news items to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
}
/**
 * news-list-response
 * The response for the list news request.
 */
export interface NewsListResponse {
    /** The news entries matching the request. */
    news: News[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/** news-summary */
export type NewsSummary = AtomBaseSummary;
/** notification */
export type Notification = (ConversationCreatedNotification | ConversationInactivityReminder | DevrevReminder | GenericNotification | ObjectAssignmentNotification | PrReviewReminder | UserMentionedNotification | UserParticipationNotification | VistaSharedNotification) & {
    type: NotificationType;
};
/**
 * notification-action
 * Notification Action.
 */
export interface NotificationAction {
    /** Action type of the notification. */
    action_type?: NotificationActionActionType;
    /** Clickable action to redirect notification to specific target. */
    clickable_action?: ClickableNotificationAction;
    /** Commentable action to reply directly on notification with comments. */
    commentable_action?: CommentableNotificationAction;
    /** Executable action to execute directly through notification. */
    executable_action?: ExecutableNotificationAction;
}
/** Action type of the notification. */
export declare enum NotificationActionActionType {
    Clickable = "clickable",
    Commentable = "commentable",
    Executable = "executable"
}
/**
 * notification-actor-section
 * Actor level settings.
 */
export interface NotificationActorSection {
    /** Id(s) specific section for actor. */
    id_list?: object;
    /** Preferences based on type. */
    type?: object;
}
/** notification-base */
export type NotificationBase = AtomBase & {
    actor?: UserSummary;
    /** The cluster to which the notification belongs. */
    cluster_id?: string;
    group_id?: GroupSummary;
    /**
     * Level of the notification.
     * @format int32
     */
    level?: number;
    /** Origin of the notification. */
    origin?: string;
    parent?: AtomSummary;
    /** The object type of parent associated with the notification. */
    parent_type?: string;
    /** Priority of the notification. */
    priority?: NotificationPriority;
    /** The state of the notification. */
    state?: NotificationState;
    /**
     * Timestamp of the event that triggered the notification.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    timestamp?: string;
    user?: UserSummary;
};
/** notification-base-summary */
export type NotificationBaseSummary = AtomBaseSummary & {
    actor?: UserSummary;
    parent?: AtomSummary;
    /** The state of the notification. */
    state?: NotificationState;
};
/**
 * notification-channel-settings
 * Channel level settings.
 */
export interface NotificationChannelSettings {
    /** Category for the channel. */
    category?: string;
    /** Description for the channel. */
    description?: string;
    /** Allow settings to revoke. */
    disable?: boolean;
    /** Icon for the channel. */
    icon?: string;
    /** User overrideable access. */
    non_overrideable?: boolean;
    /** Enum Value defines the structure for an enum. */
    priority?: EnumValue;
}
/**
 * notification-channels-section
 * Notification Channels.
 */
export interface NotificationChannelsSection {
    /** Channel level settings. */
    desktop?: NotificationChannelSettings;
    /** Channel level settings. */
    email?: NotificationChannelSettings;
    /** Channel level settings. */
    in_app?: NotificationChannelSettings;
    /** Channel level settings. */
    mobile?: NotificationChannelSettings;
}
/** notification-content-template */
export type NotificationContentTemplate = ContentTemplateBase & {
    /** Default content templates of notification per language. */
    defaults: DefaultNotificationContentTemplate[];
};
/** notification-content-template-summary */
export type NotificationContentTemplateSummary = ContentTemplateBaseSummary;
/**
 * notification-general-channel-settings
 * Channel level general settings.
 */
export interface NotificationGeneralChannelSettings {
    /**
     * Category of channel. This will be used if id of specific channel is
     * missing.
     */
    category?: string;
    /** Allow settings to revoke. */
    disable?: boolean;
    /** Channel ID. */
    id?: string;
    /** Channel is supported or not. */
    unsupported?: boolean;
}
/**
 * notification-general-section
 * General section related to notification types.
 */
export interface NotificationGeneralSection {
    /** General settings for each condition. */
    devrev_reminder?: NotificationGeneralSettings;
    /** General settings for each condition. */
    object_assignment?: NotificationGeneralSettings;
    /** General settings for each condition. */
    object_assignment_group?: NotificationGeneralSettings;
    /** General settings for each condition. */
    user_mentioned?: NotificationGeneralSettings;
    /** General settings for each condition. */
    user_mentioned_group?: NotificationGeneralSettings;
    /** General settings for each condition. */
    user_participation_comment?: NotificationGeneralSettings;
    /** General settings for each condition. */
    user_participation_event?: NotificationGeneralSettings;
    /** General settings for each condition. */
    user_participation_reply_comment?: NotificationGeneralSettings;
}
/**
 * notification-general-settings
 * General settings for each condition.
 */
export interface NotificationGeneralSettings {
    /** Channels that user is subscribed to for a particular setting. */
    channels?: NotificationGeneralChannelSettings[];
    /** Allow settings to revoke. */
    disable?: boolean;
    /** User overrideable access. */
    non_overrideable?: boolean;
    /** Enum Value defines the structure for an enum. */
    priority?: EnumValue;
}
/**
 * notification-metadata
 * Notification Metadata.
 */
export interface NotificationMetadata {
    /** Notification Action. */
    action?: NotificationAction;
    /** Body of the notification. */
    body?: string;
    content_template?: AtomSummary;
    /**
     * Time at which event occurred.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    event_timestamp?: string;
    /** Inputs required for the template. */
    inputs?: object;
    /** The objects referenced in the title/body. */
    references?: AtomSummary[];
    /** The state of the notification. */
    state?: NotificationMetadataState;
    /** Title of notification. */
    title?: string;
}
/** The state of the notification. */
export declare enum NotificationMetadataState {
    Archived = "archived",
    Read = "read",
    Unread = "unread"
}
/** Notification parent types. */
export declare enum NotificationParentType {
    Account = "account",
    Conversation = "conversation",
    Issue = "issue",
    Opportunity = "opportunity",
    Part = "part",
    RevOrg = "rev_org",
    RevUser = "rev_user",
    Ticket = "ticket"
}
/** notification-preferences */
export type NotificationPreferences = PreferencesBase & {
    /** Actor level settings. */
    actor?: NotificationActorSection;
    /** Notification Channels. */
    channels?: NotificationChannelsSection;
    /** General section related to notification types. */
    general?: NotificationGeneralSection;
    /**
     * Subscription Rules. These will impact the generation of some system
     * defined notifications.
     */
    subscriber?: NotificationSubscriberSection;
};
/**
 * notification-preferences-group
 * Preferences group for Notifications.
 */
export interface NotificationPreferencesGroup {
    /** Email notifications. */
    email_notifications?: NotificationPreferencesGroupEmailNotifications;
}
/** Email notifications. */
export declare enum NotificationPreferencesGroupEmailNotifications {
    All = "all",
    Important = "important",
    Nothing = "nothing"
}
/** notification-preferences-summary */
export type NotificationPreferencesSummary = PreferencesBaseSummary;
/** Priority of the notification. */
export declare enum NotificationPriority {
    High = "high",
    Low = "low",
    Medium = "medium"
}
/** The state of the notification. */
export declare enum NotificationState {
    Archived = "archived",
    Read = "read",
    Unread = "unread"
}
/**
 * notification-subscriber-section
 * Subscription Rules. These will impact the generation of some system
 * defined notifications.
 */
export interface NotificationSubscriberSection {
    /** User based subscriber settings. */
    user?: NotificationSubscriberUserSettings;
}
/**
 * notification-subscriber-user-level-settings
 * User level general subscription settings.
 */
export interface NotificationSubscriberUserLevelSettings {
    /** Events. */
    events?: EnumValue[];
}
/**
 * notification-subscriber-user-settings
 * User based subscriber settings.
 */
export interface NotificationSubscriberUserSettings {
    /** User level general subscription settings. */
    commenter?: NotificationSubscriberUserLevelSettings;
    /** User level general subscription settings. */
    creator?: NotificationSubscriberUserLevelSettings;
    /** User level general subscription settings. */
    mentioned?: NotificationSubscriberUserLevelSettings;
    /** User level general subscription settings. */
    owner?: NotificationSubscriberUserLevelSettings;
}
export declare enum NotificationType {
    ConversationCreatedNotification = "conversation_created_notification",
    ConversationInactivityReminder = "conversation_inactivity_reminder",
    DevrevReminder = "devrev_reminder",
    GenericNotification = "generic_notification",
    ObjectAssignmentNotification = "object_assignment_notification",
    PrReviewReminder = "pr_review_reminder",
    UserMentionedNotification = "user_mentioned_notification",
    UserParticipationNotification = "user_participation_notification",
    VistaSharedNotification = "vista_shared_notification"
}
/** notifications-channel */
export interface NotificationsChannel {
    /** ID of the channel. */
    channel_id: string;
    /** Description of the channel. */
    description?: string;
    /** Name of the channel. */
    name: string;
}
/** notifications-channel-content-request */
export type NotificationsChannelContentRequest = NotificationsChannelContentRequestEmail & {
    channel: NotificationsChannelContentRequestChannel;
    /** The ID of the notification. */
    id: string;
};
export declare enum NotificationsChannelContentRequestChannel {
    Email = "email"
}
/** notifications-channel-content-request-email */
export interface NotificationsChannelContentRequestEmail {
    /** Whether the email can be replied to. */
    is_reply_enabled?: boolean;
    /** URL of the organization logo. to be displayed in the email. */
    org_logo_url?: string;
}
/** notifications-channel-content-response */
export interface NotificationsChannelContentResponse {
    channel?: 'email';
    email?: NotificationsChannelContentResponseEmail;
}
/** notifications-channel-content-response-email */
export interface NotificationsChannelContentResponseEmail {
    /** HTML body of the notification email. */
    html_body: string;
    /** Email address of the recipient. */
    recipient_email: string;
    /** Name of the sender. */
    sender_name: string;
    /** Subject of the email. */
    subject: string;
}
/** notifications-channels-request */
export interface NotificationsChannelsRequest {
    /** The type of mobile device. */
    device_type?: string;
}
/** notifications-channels-response */
export interface NotificationsChannelsResponse {
    /** The list of notification channels. */
    channels: NotificationsChannel[];
}
/** notifications-filter */
export interface NotificationsFilter {
    /**
     * Actor user IDs by which to filter the response.
     * @example ["DEVU-12345"]
     */
    actor_ids?: string[];
    /** Notification IDs by which to filter the response. */
    ids?: string[];
    /** Parent IDs by which to filter the response. */
    parent_ids?: string[];
    /** Parent object types by which to filter the response. */
    parent_types?: NotificationParentType[];
    /** Priorities by which to filter the response. */
    priorities?: NotificationPriority[];
    /** Notification states by which to filter the response. */
    states?: NotificationState[];
    /** Notification types by which to filter the response. */
    types?: NotificationType[];
}
/** notifications-group */
export interface NotificationsGroup {
    /** Grouping key. */
    key: string;
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /** List of notifications as grouped by the grouping key. */
    notifications: Notification[];
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/** notifications-group-request */
export interface NotificationsGroupRequest {
    /**
     * Actor user IDs by which to filter the response.
     * @example ["DEVU-12345"]
     */
    actor_ids?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** The field to group the notifications by. */
    group_by: string;
    /** Notification IDs by which to filter the response. */
    ids?: string[];
    /**
     * The maximum number of groups to return. If not set, then the
     * default is '10'.
     * @format int32
     */
    limit?: number;
    /**
     * The maximum number of notifications to return for an individual
     * group. Default is '50'.
     * @format int32
     */
    limit_per_group?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Parent IDs by which to filter the response. */
    parent_ids?: string[];
    /** Parent object types by which to filter the response. */
    parent_types?: NotificationParentType[];
    /** Priorities by which to filter the response. */
    priorities?: NotificationPriority[];
    /** Comma-separated fields to sort the notifications by. */
    sort_by?: string[];
    /** Notification states by which to filter the response. */
    states?: NotificationState[];
    /** Notification types by which to filter the response. */
    types?: NotificationType[];
}
/** notifications-group-response */
export interface NotificationsGroupResponse {
    /** The list of groups. */
    groups: NotificationsGroup[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /**
     * The total number of notifications available.
     * @format int32
     */
    total: number;
    /**
     * The total number of groups of notifications available.
     * @format int32
     */
    total_groups: number;
}
/**
 * notifications-list-request
 * Notifications list request.
 */
export interface NotificationsListRequest {
    /**
     * Actor user IDs by which to filter the response.
     * @example ["DEVU-12345"]
     */
    actor_ids?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** Notification IDs by which to filter the response. */
    ids?: string[];
    /**
     * The maximum number of notifications to return. Default is 50.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Parent IDs by which to filter the response. */
    parent_ids?: string[];
    /** Parent object types by which to filter the response. */
    parent_types?: NotificationParentType[];
    /** Priorities by which to filter the response. */
    priorities?: NotificationPriority[];
    /** Comma-separated fields to sort the notifications by. */
    sort_by?: string[];
    /** Notification states by which to filter the response. */
    states?: NotificationState[];
    /** Notification types by which to filter the response. */
    types?: NotificationType[];
}
/**
 * notifications-list-response
 * Notifications list response.
 */
export interface NotificationsListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /** The list of the notifications. */
    notifications: Notification[];
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /**
     * The total number of notifications available.
     * @format int32
     */
    total: number;
}
/** notifications-mark-request */
export interface NotificationsMarkRequest {
    filter?: NotificationsFilter;
    /** The state of the notification. */
    state?: NotificationState;
}
/** notifications-send-request */
export interface NotificationsSendRequest {
    /** The list of notifications to send. */
    notifications: SendNotification[];
}
/** notifications-send-response */
export type NotificationsSendResponse = object;
/** oasis-client-message */
export interface OasisClientMessage {
    download_dataset?: OasisDownloadDatasetRequest;
    query_dataset?: OasisQueryDatasetRequest;
    /** The request ID associated with the request. */
    request_id?: string;
    type?: 'download_dataset' | 'query_dataset';
}
/**
 * oasis-column
 * A representation of a column in a dataset.
 */
export interface OasisColumn {
    /** DevRev schema for a column in a dataset. */
    devrev?: OasisColumnDevrevSchema;
    /** Whether the column is disabled. */
    is_disabled?: boolean;
    /** The name of the column. */
    name: string;
    /** SQL schema for a column in a dataset. */
    sql?: OasisColumnSqlSchema;
    /** The data type of the column. */
    type?: string;
}
/**
 * oasis-column-devrev-schema
 * DevRev schema for a column in a dataset.
 */
export interface OasisColumnDevrevSchema {
    /** Allowed enum values of the column, in case its an enum type column. */
    enum_values?: string[];
    /** Allowed ID types for the column, in case its an ID type column. */
    id_types?: string[];
    /** DevRev data type of the column. */
    type: string;
}
/**
 * oasis-column-partition-schema
 * Partitioning schema for a column in a dataset.
 */
export interface OasisColumnPartitionSchema {
    /** Granularity of the timestamp, in case its a timestamp type column. */
    timestamp_granularity?: OasisColumnPartitionSchemaTimestampGranularity;
    /** Partitioning type of the column (as per the field type). */
    type: OasisColumnPartitionSchemaType;
}
/** Granularity of the timestamp, in case its a timestamp type column. */
export declare enum OasisColumnPartitionSchemaTimestampGranularity {
    Day = "day",
    Month = "month",
    Year = "year"
}
/** Partitioning type of the column (as per the field type). */
export declare enum OasisColumnPartitionSchemaType {
    RevOrg = "rev_org",
    Timestamp = "timestamp"
}
/**
 * oasis-column-sql-schema
 * SQL schema for a column in a dataset.
 */
export interface OasisColumnSqlSchema {
    /** SQL data type of the column. */
    type: string;
}
/**
 * oasis-compaction
 * Oasis compaction status object.
 */
export interface OasisCompaction {
    /**
     * Last time the partition was compacted at; null if not compacted
     * yet.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    compacted_at?: string;
    /** Version of the current compaction configuration. */
    compaction_version?: string;
}
/** oasis-data */
export type OasisData = AtomBase & {
    /** Oasis compaction status object. */
    compaction_status?: OasisCompaction;
    dataset: AtomSummary;
    /**
     * Timestamp representing the latest time data in this entry was
     * ingested.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    last_ingestion_time: string;
    /** The oasis data sources' metadata file. */
    metadata_file?: string;
    /** An object representing the partition information for a data source. */
    partition?: OasisPartition;
    /**
     * Describes where the data file paths can be found. Defaults to
     * mongo.
     */
    source_lookup?: string;
    /** Data for the dataset. */
    sources: OasisSource[];
};
/**
 * oasis-data-chunk
 * Chunk of oasis data.
 */
export interface OasisDataChunk {
    /** Base64 encoded string which identifies chunk. */
    chunk?: string;
    /**
     * Size of chunk in bytes.
     * @format int32
     */
    size?: number;
}
/**
 * oasis-data-copy-request
 * The request to copy data to a oasis dataset.
 */
export interface OasisDataCopyRequest {
    /**
     * The artifact that has to be copied.
     * @example "ARTIFACT-12345"
     */
    artifact_id: string;
    /** The dataset to which the data has to be copied. */
    dataset_id: string;
    /**
     * The oasis data partition where data has to be copied in the
     * dataset.
     */
    partition_values?: string[];
}
/**
 * oasis-data-copy-response
 * The response to copying data to a oasis dataset.
 */
export interface OasisDataCopyResponse {
    data: OasisData;
    dataset: Dataset;
}
/**
 * oasis-data-create-request
 * The request to create the data for a dataset.
 */
export interface OasisDataCreateRequest {
    data: OasisDataCreateRequestData;
    /** The ID of the dataset. */
    dataset: string;
    /** The partition values of the dataset. */
    partition_values: string[];
}
/** oasis-data-create-request-data */
export interface OasisDataCreateRequestData {
    /** Adds the provided sources to the data. */
    add?: OasisDataCreateRequestDataSource[];
    /** Removes the provided URIs from the data. */
    remove?: string[];
    /** Sets the data to the provided sources. */
    set?: OasisDataCreateRequestDataSource[];
}
/** oasis-data-create-request-data-source */
export interface OasisDataCreateRequestDataSource {
    /**
     * Binary data, otherwise not set if the source type isn't 'buffer'.
     * @format byte
     */
    buffer?: string;
    /** A time range object. */
    data_window?: OasisDataCreateRequestTimeRange;
    /** The etag of the data. */
    etag?: string;
    /**
     * The size of the data in bytes.
     * @format int64
     */
    size?: number;
    source?: 'buffer' | 'uri';
    /** URI of the file, otherwise not set if the source type isn't 'uri'. */
    uri?: string;
}
/**
 * oasis-data-create-request-time-range
 * A time range object.
 */
export interface OasisDataCreateRequestTimeRange {
    /**
     * Timestamp when the object was last modified.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    end_time?: string;
    /**
     * Timestamp when the object was created.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    start_time?: string;
}
/**
 * oasis-data-create-response
 * The response to creating the oasis data.
 */
export interface OasisDataCreateResponse {
    data: OasisData;
}
/**
 * oasis-data-delete-request
 * The request to delete a data item.
 */
export interface OasisDataDeleteRequest {
    /** The oasis data's ID to delete. */
    id: string;
}
/**
 * oasis-data-fetch-request
 * The request to get information related to the data for a table.
 */
export interface OasisDataFetchRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** The dataset id for which the data is requested. */
    dataset_id?: string;
    /**
     * The dataset name for which the data is requested.
     * @deprecated
     */
    dataset_name?: string;
    date_range?: DateTimeFilter;
    /**
     * The maximum number of data items to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
}
/**
 * oasis-data-fetch-response
 * The response to fetching the oasis data.
 */
export interface OasisDataFetchResponse {
    /** The list of data items. */
    data: OasisData[];
    dataset: Dataset;
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/** oasis-data-prepare-request */
export interface OasisDataPrepareRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** The dataset id for which the data is requested. */
    dataset_id?: string;
    /**
     * The dataset name for which the data is requested.
     * @deprecated
     */
    dataset_name?: string;
    date_range?: DateTimeFilter;
    /**
     * The maximum number of data items to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
}
/**
 * oasis-data-prepare-response
 * The response to fetching the oasis data.
 */
export interface OasisDataPrepareResponse {
    /** The list of data items. */
    data: OasisData[];
    dataset: Dataset;
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/**
 * oasis-data-prepare-status
 * Prepare status for oasis data.
 */
export interface OasisDataPrepareStatus {
    /** Checksum to validate CRC of the data. */
    checksum?: string;
    /** Chunks of data. */
    chunks?: OasisDataChunk[];
    /**
     * Size of the data represented by the token in bytes.
     * @format int32
     */
    size?: number;
    /** Prepare status of the oasis data. */
    status?: OasisDataPrepareStatusStatus;
    /** Prepare status of the oasis data. */
    token?: string;
}
/** Prepare status of the oasis data. */
export declare enum OasisDataPrepareStatusStatus {
    Completed = "completed",
    Failed = "failed",
    InProgress = "in_progress"
}
/**
 * oasis-data-query-request
 * The request to query the data for a table.
 */
export interface OasisDataQueryRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** The dataset id for which the data is requested. */
    dataset_id?: string;
    /**
     * The dataset name for which the data is requested.
     * @deprecated
     */
    dataset_name?: string;
    date_range?: DateTimeFilter;
    /**
     * The maximum number of query results to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Query to be executed on the table table. */
    query: string;
}
/**
 * oasis-data-query-response
 * The response to querying the oasis data.
 */
export interface OasisDataQueryResponse {
    /** The result set of the query. */
    metadata: object | null;
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/**
 * oasis-data-stream-column
 * The oasis data stream column.
 */
export interface OasisDataStreamColumn {
    custom_field?: OasisDataStreamColumnCustomField;
    /** The name of the field. */
    name: string;
}
/** oasis-data-stream-column-custom-field */
export interface OasisDataStreamColumnCustomField {
    /** Set of field attributes. */
    field_descriptor: SchemaFieldDescriptor;
    /** The leaf type of the custom field. */
    leaf_type: string;
    /** The subtype of the custom field. */
    subtype?: string;
}
/**
 * oasis-data-stream-request
 * The request to get the data stream for an oasis dataset.
 */
export interface OasisDataStreamRequest {
    /** The columns to be projected in the streamed dataset. */
    columns?: OasisDataStreamColumn[];
    /**
     * The masked token that contains the details of the dataset id and
     * partition.
     */
    token: string;
}
/**
 * oasis-data-stream-response
 * The response to getting the data stream for an oasis dataset.
 */
export type OasisDataStreamResponse = object;
/** oasis-data-summary */
export type OasisDataSummary = AtomBaseSummary;
/**
 * oasis-data-sync-request
 * The request to sync the data from s3
 */
export interface OasisDataSyncRequest {
    /** The dataset that needs to be synced. */
    dataset_name: string;
    /** The list of partitions that need to be synced. */
    partition_keys?: string[];
}
/**
 * oasis-data-sync-response
 * The response to syncing the oasis dataset.
 */
export interface OasisDataSyncResponse {
    /** The synced data items. */
    data: OasisData[];
    dataset: Dataset;
}
/**
 * oasis-dataset-access-and-version-control-request
 * The request to update a dataset's information.
 */
export interface OasisDatasetAccessAndVersionControlRequest {
    access_level?: AccessLevel;
    /** The dataset's ID to update. */
    id: string;
    /** Whether to increase dataset version. */
    increment_version?: boolean;
}
/**
 * oasis-dataset-access-and-version-control-response
 * The response to updating a dataset's information.
 */
export interface OasisDatasetAccessAndVersionControlResponse {
    dataset: Dataset;
}
/**
 * oasis-dataset-create-request
 * The request to create a oasis dataset.
 */
export interface OasisDatasetCreateRequest {
    access_level?: AccessLevel;
    /** The columns of the dataset. */
    columns: OasisColumn[];
    /** The format of the dataset. */
    data_format?: DatasetFormatValue;
    /** The description for the dataset. */
    description?: string;
    /** The name of the dataset. This is unique for a dev org. */
    name: string;
    /** The partition columns of the dataset. */
    partition_columns: OasisPartitionColumn[];
    /** Whether to create a system dataset. */
    system?: boolean;
    /** Table format of the dataset. */
    table_format?: TableFormatValue;
    /** Tags associated with the dataset. */
    tags?: SetTagWithValue[];
    /** The title of the dataset. */
    title?: string;
    /** The type of the dataset. */
    type?: DatasetTypeValue;
}
/**
 * oasis-dataset-create-response
 * The response to creating the oasis dataset.
 */
export interface OasisDatasetCreateResponse {
    dataset?: Dataset;
}
/**
 * oasis-dataset-delete-request
 * The request to delete a dataset.
 */
export interface OasisDatasetDeleteRequest {
    /** The dataset's ID to delete. */
    id: string;
}
/**
 * oasis-dataset-get-request
 * The request to get a dataset's information.
 */
export interface OasisDatasetGetRequest {
    /**
     * The dataset ID of the dataset. If ID and dataset_id are both
     * present ID will be preferred.
     */
    dataset_id?: string;
    /** The requested dataset's ID. */
    id?: string;
    /**
     * The name of the dataset. If ID and name are both present ID will be
     * preferred.
     * @deprecated
     */
    name?: string;
}
/**
 * oasis-dataset-get-response
 * The response to getting a dataset's information.
 */
export interface OasisDatasetGetResponse {
    dataset: Dataset;
}
export declare enum OasisDatasetListFilterScopeValue {
    Org = "org",
    System = "system"
}
/**
 * oasis-dataset-list-request
 * The request to get a list of datasets.
 */
export interface OasisDatasetListRequest {
    /**
     * Filters for datasets created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** Filters for datasets with any of the provided data formats. */
    data_format?: string[];
    /** Filters for datasets with any of the provided dataset names. */
    dataset_name?: string[];
    /**
     * The maximum number of datasets to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    scope?: OasisDatasetListFilterScopeValue;
    /** Fields to sort the datasets by and the direction to sort them. */
    sort_by?: string[];
    /**
     * Filters for datasets with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for datasets with any of the provided types. */
    type?: string[];
}
/**
 * oasis-dataset-list-response
 * The response to the list query to get datasets.
 */
export interface OasisDatasetListResponse {
    /** The list of datasets. */
    dataset: Dataset[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/**
 * oasis-dataset-update-request
 * The request to update a dataset's information.
 */
export interface OasisDatasetUpdateRequest {
    columns?: OasisDatasetUpdateRequestColumns;
    /** The format of the dataset. */
    data_format?: DatasetFormatValue;
    /**
     * Updated description of the dataset object, or unchanged if not
     * provided.
     */
    description?: string;
    /** The dataset's ID to update. */
    id: string;
    tags?: OasisDatasetUpdateRequestTags;
    /** Updated title of the dataset object, or unchanged if not provided. */
    title?: string;
    /** The type of the dataset. */
    type?: DatasetTypeValue;
}
/** oasis-dataset-update-request-columns */
export interface OasisDatasetUpdateRequestColumns {
    /** Adds the given columns to the dataset. */
    add?: OasisColumn[];
    /** Updates the given columns from the dataset. */
    update?: OasisDatasetUpdateRequestColumnsUpdateColumn[];
}
/** oasis-dataset-update-request-columns-update-column */
export interface OasisDatasetUpdateRequestColumnsUpdateColumn {
    is_disabled: boolean;
    name: string;
}
/** oasis-dataset-update-request-tags */
export interface OasisDatasetUpdateRequestTags {
    /** Sets the provided tags on the dataset. */
    set?: SetTagWithValue[];
}
/**
 * oasis-dataset-update-response
 * The response to updating a dataset's information.
 */
export interface OasisDatasetUpdateResponse {
    dataset: Dataset;
}
/** oasis-download-dataset-request */
export interface OasisDownloadDatasetRequest {
    /** The reference to the dataset to download. */
    dataset_id: string;
}
/** oasis-download-dataset-response */
export interface OasisDownloadDatasetResponse {
    error?: OasisError;
    response?: 'error' | 'result';
    result?: OasisDownloadDatasetResult;
}
/** oasis-download-dataset-result */
export interface OasisDownloadDatasetResult {
    /** The reference to the dataset that was downloaded. */
    dataset_id: string;
    /** A list of the sizes of the files that were downloaded in bytes. */
    file_sizes: number[];
    /**
     * The total number of files that were downloaded.
     * @format int32
     */
    total_files_downloaded: number;
}
/** oasis-error */
export interface OasisError {
    /** The readable description of the error. */
    message: string;
    /** The reason for the error. */
    reason: string;
}
/** oasis-job */
export type OasisJob = AtomBase & {
    /** Description of the job. */
    description?: string;
    /** Name of the job. This name would be unique per dev org. */
    name: string;
    /** List of all publishers in the job. */
    publishers?: OasisJobPublisher[];
    /** Oasis job schedule holds information about the schedule for the job. */
    schedule?: OasisJobSchedule;
};
/**
 * oasis-job-ad-hoc
 * Oasis job ad hoc holds information about the ad hoc job.
 */
export interface OasisJobAdHoc {
    /** Description of the ad hoc job. */
    description?: string;
}
/** oasis-job-create-request */
export interface OasisJobCreateRequest {
    /** Oasis job description. */
    description?: string;
    /** Oasis job name. */
    name: string;
    /** Oasis job publishers. */
    publishers: OasisJobPublisher[];
}
/** oasis-job-create-response */
export interface OasisJobCreateResponse {
    job: OasisJob;
}
/**
 * oasis-job-cron
 * Oasis job cron schedule holds information about the cron schedule for
 * the job.
 */
export interface OasisJobCron {
    /** Description of the cron schedule. */
    description?: string;
    /** Cron expression for the job. */
    expression: string;
}
/** oasis-job-execute-request */
export interface OasisJobExecuteRequest {
    /** The ID of the oasis job to execute. */
    id: string;
}
/** oasis-job-execute-response */
export type OasisJobExecuteResponse = object;
/** oasis-job-get-request */
export interface OasisJobGetRequest {
    /** The ID of the oasis job to get. */
    id: string;
}
/** oasis-job-get-response */
export interface OasisJobGetResponse {
    job: OasisJob;
}
/**
 * oasis-job-oasis-publisher
 * Oasis job oasis publisher holds information about the publisher for the
 * job.
 */
export interface OasisJobOasisPublisher {
    /**
     * Oasis dataset name to which the data will be published from the
     * query result of the job query.
     */
    dataset_name: string;
    /**
     * Oasis job query holds information about the query in the job which can
     * be executed. This query can have any sql query console supported form.
     */
    query: OasisJobQuery;
}
/**
 * oasis-job-publisher
 * Oasis job publisher holds information about the publisher for the job.
 */
export interface OasisJobPublisher {
    /**
     * Oasis job oasis publisher holds information about the publisher for the
     * job.
     */
    oasis_publisher?: OasisJobOasisPublisher;
    /** Type of the publisher. */
    type: OasisJobPublisherType;
}
/** Type of the publisher. */
export declare enum OasisJobPublisherType {
    DataWarehouse = "data_warehouse",
    Oasis = "oasis"
}
/**
 * oasis-job-query
 * Oasis job query holds information about the query in the job which can
 * be executed. This query can have any sql query console supported form.
 */
export interface OasisJobQuery {
    /** Description of the query. */
    description?: string;
    /** Unique query id for the query. */
    id: string;
    /** SQL query to be executed. */
    sql: string;
}
/**
 * oasis-job-schedule
 * Oasis job schedule holds information about the schedule for the job.
 */
export interface OasisJobSchedule {
    /** Oasis job ad hoc holds information about the ad hoc job. */
    ad_hoc?: OasisJobAdHoc;
    /**
     * Oasis job cron schedule holds information about the cron schedule for
     * the job.
     */
    cron?: OasisJobCron;
    /** Type of the schedule. */
    type: OasisJobScheduleType;
}
/** Type of the schedule. */
export declare enum OasisJobScheduleType {
    AdHoc = "ad_hoc",
    Cron = "cron"
}
/** oasis-job-summary */
export type OasisJobSummary = AtomBaseSummary;
/** oasis-job-update-request */
export interface OasisJobUpdateRequest {
    /** Oasis job description to update. */
    description?: string;
    /** The ID of the oasis job to update. */
    id: string;
    /** Oasis job name to update. */
    name?: string;
    /** Oasis job publishers to update. */
    publishers?: OasisJobPublisher[];
}
/** oasis-job-update-response */
export interface OasisJobUpdateResponse {
    job: OasisJob;
}
/**
 * oasis-metadata
 * Oasis metadata object.
 */
export interface OasisMetadata {
    /**
     * The last time the data was ingested for this dataset.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    last_updated_at?: string;
    /** Whether to skip validation of oasis data. */
    skip_validation?: boolean;
    /**
     * The interval at which data is updated for this dataset, in minutes.
     * @format int32
     */
    update_interval?: number;
}
/**
 * oasis-partition
 * An object representing the partition information for a data source.
 */
export interface OasisPartition {
    /**
     * The column names used to partition the data. These must match the
     * partition_columns field in the dataset object.
     */
    partition_by?: string[];
    /**
     * The key used for range queries. This is constructed from the
     * partition_by and partition_values fields.
     */
    partition_key?: string;
    /** The values used to partition the data. */
    partition_values?: string[];
}
/**
 * oasis-partition-column
 * A representation of a partition column in a dataset.
 */
export interface OasisPartitionColumn {
    /** DevRev schema for a column in a dataset. */
    devrev?: OasisColumnDevrevSchema;
    /** The format of the field where applicable. */
    devrev_field_format?: string;
    /** DevRev field type of the column. */
    devrev_field_type?: string;
    /** The name of the column. */
    name: string;
    /** Partitioning schema for a column in a dataset. */
    partition?: OasisColumnPartitionSchema;
    /** SQL schema for a column in a dataset. */
    sql?: OasisColumnSqlSchema;
    /** Granularity on a timestamp partition column. */
    timestamp_granularity?: string;
    /** The data type of the column. */
    type?: string;
}
/**
 * oasis-partition-filter-request
 * The request for filtering a partition.
 */
export interface OasisPartitionFilterRequest {
    /**
     * The encoded metadata received in response of prepare data for data
     * chunk.
     */
    chunk?: string;
    /**
     * The masked token that contains the details of the partition and
     * filter query.
     */
    token: string;
}
/**
 * oasis-partition-filter-response
 * The response to filtering a partition.
 */
export interface OasisPartitionFilterResponse {
    /**
     * The filtered bytes.
     * @format byte
     */
    data?: string;
}
/** oasis-query-dataset-request */
export interface OasisQueryDatasetRequest {
    /**
     * The limit on response desired on the query.
     * @format int32
     */
    limit?: number;
    mode?: OasisQueryModeType;
    /**
     * The offset desired on the query.
     * @format int32
     */
    offset?: number;
    /** The query being attempted to be executed. */
    sql_query: string;
}
/** oasis-query-dataset-response */
export interface OasisQueryDatasetResponse {
    error?: OasisError;
    response?: 'error' | 'result';
    result?: OasisQueryDatasetResult;
}
/** oasis-query-dataset-result */
export interface OasisQueryDatasetResult {
    /**
     * The bytes response in whatever type was specified.
     * @format byte
     */
    data: string;
    metadata?: OasisQueryDatasetResultOasisQueryDatasetResponseMetadata;
    /**
     * The offset necessary to get the next response on the same query.
     * @format int32
     */
    next_offset?: number;
    /**
     * The offset necessary to get the previous response on the same
     * query.
     * @format int32
     */
    prev_offset?: number;
}
/** oasis-query-dataset-result-oasis-query-dataset-response-metadata */
export interface OasisQueryDatasetResultOasisQueryDatasetResponseMetadata {
    /**
     * The time taken to execute the query in seconds.
     * @format float
     */
    query_time_sec: number;
}
export declare enum OasisQueryModeType {
    Arrow = "arrow",
    Json = "json"
}
/** oasis-server-message */
export interface OasisServerMessage {
    download_dataset?: OasisDownloadDatasetResponse;
    query_dataset?: OasisQueryDatasetResponse;
    /** The request ID that is associated with response. */
    request_id?: string;
    type?: 'download_dataset' | 'query_dataset';
}
/**
 * oasis-source
 * The data source.
 */
export interface OasisSource {
    /** Data chunks for the source. */
    chunks?: OasisDataChunk[];
    /** Column metadata for the source. */
    column_metadata?: OasisSourceColumnMetadata[];
    /** A time range object. */
    data_window?: TimeRange;
    /** The etag of the source. */
    etag?: string;
    /**
     * The last time this source was updated.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    last_modified_time?: string;
    /**
     * Size of the file containing the dataset data (bytes).
     * @format int32
     */
    size?: number;
    /** Prepare status for oasis data. */
    status?: OasisDataPrepareStatus;
    /** The s3 file path for the data. */
    uri?: string;
}
/**
 * oasis-source-column-metadata
 * Metadata for a oasis source column.
 */
export interface OasisSourceColumnMetadata {
    /** Bloom filter for the column. */
    bloom_filter?: string;
    /** Name of the column. */
    name?: string;
    /** A partition range object for a oasis source. */
    range?: OasisSourceColumnMetadataRange;
}
/**
 * oasis-source-column-metadata-range
 * A partition range object for a oasis source.
 */
export interface OasisSourceColumnMetadataRange {
    /** Max value of the partition. */
    max?: string;
    /** Min value of the partition. */
    min?: string;
}
/** object-assignment-notification */
export type ObjectAssignmentNotification = NotificationBase & {
    group?: GroupSummary;
    source?: AtomSummary;
};
/** object-assignment-notification-summary */
export type ObjectAssignmentNotificationSummary = NotificationBaseSummary;
/** object-frame */
export interface ObjectFrame {
    object_id?: string;
    view_type: ObjectFrameViewType;
}
export declare enum ObjectFrameViewType {
    Default = "default",
    Expanded = "expanded",
    Single = "single"
}
/** object-member */
export type ObjectMember = AtomBase & {
    member?: AtomSummary;
    member_rev_org?: OrgSummary;
    object?: AtomSummary;
    /** Type of target object. */
    target_object_type?: string;
    /**
     * Timestamp when this membership is valid.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    valid_from_date?: string;
    /**
     * Timestamp when this membership expires.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    valid_to_date?: string;
};
/** object-member-search-summary */
export type ObjectMemberSearchSummary = SearchSummaryBase & {
    object_member: ObjectMemberSummary;
};
/** object-member-summary */
export type ObjectMemberSummary = AtomBaseSummary;
/**
 * object-member-v1
 * Object member.
 */
export interface ObjectMemberV1 {
    /** Conditional roles the membership includes. */
    conditional_roles: ConditionalRoleV1[];
    member_id?: AtomSummary;
    /** Type of this member. */
    member_type?: ObjectMemberV1MemberType;
    /**
     * Timestamp when this membership is valid.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    valid_from_date?: string;
    /**
     * Timestamp when this membership expires.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    valid_to_date?: string;
}
/** Type of this member. */
export declare enum ObjectMemberV1MemberType {
    Group = "group",
    User = "user"
}
/**
 * object-members-count-request
 * A request to count object members.
 */
export interface ObjectMembersCountRequest {
    /**
     * The ID of the users or groups that must be a member of one of the
     * specified objects. If empty, then the result sums the total number
     * of members for each object.
     */
    member_ids?: string[];
    /**
     * The ID of the objects to count the members for. If empty, then the
     * result sums the total number of objects that each member is a part
     * of.
     */
    object_ids?: string[];
}
/** object-members-count-response */
export interface ObjectMembersCountResponse {
    /**
     * Count of object members satisfying the request parameters.
     * @format int32
     */
    count: number;
}
/**
 * object-members-create-request
 * A request to create a new object member.
 */
export interface ObjectMembersCreateRequest {
    /** ID of the user or group. */
    member_id?: string;
    member_identifier?: 'member_id' | 'rev_user_external_reference';
    /**
     * Globally unique DevRev Object Name (DON) for the object where the
     * member is being added.
     */
    object_id: string;
    /** Unique Identifier for the rev user. */
    rev_user_external_reference?: RevUserExternalReference;
    /**
     * Timestamp when this membership is valid.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    valid_from_date?: string;
    /**
     * Timestamp when this membership expires.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    valid_to_date?: string;
}
/** object-members-create-response */
export interface ObjectMembersCreateResponse {
    object_member: ObjectMember;
}
/**
 * object-members-get-request
 * A request to get an object member by its DON.
 */
export interface ObjectMembersGetRequest {
    /** Globally unique DevRev Object Name (DON) for the Object Member. */
    object_member_id: string;
}
/** object-members-get-response */
export interface ObjectMembersGetResponse {
    object_member: ObjectMember;
}
/**
 * object-members-list-request
 * A request to list object members.
 */
export interface ObjectMembersListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of object members to return. If not set, then
     * the default is '50'.
     * @format int32
     */
    limit?: number;
    /** ID of the user or group. */
    member_ids?: string[];
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /**
     * Globally unique DevRev Object Name (DON) for the object where the
     * member is being added.
     */
    object_ids?: string[];
}
/**
 * object-members-list-response
 * List of filtered object members.
 */
export interface ObjectMembersListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /** List of filtered object members. */
    object_members: ObjectMember[];
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/**
 * object-members-remove-request
 * A request to create a new object member.
 */
export interface ObjectMembersRemoveRequest {
    /** ID of the user or group. */
    member_id?: string;
    member_identifier?: 'member_id' | 'rev_user_external_reference';
    /**
     * Globally unique DevRev Object Name (DON) for the object where the
     * member is being added.
     */
    object_id: string;
    /** Unique Identifier for the rev user. */
    rev_user_external_reference?: RevUserExternalReference;
}
/** object-members-remove-response */
export type ObjectMembersRemoveResponse = object;
/**
 * object-reaction
 * Reaction.
 */
export interface ObjectReaction {
    /** ID of the timeline reaction. */
    emoji_id?: string;
    /**
     * Count of reactions.
     * @format int32
     */
    reaction_count?: number;
}
export declare enum ObjectTypeProto {
    AccessControlEntry = "access_control_entry",
    Account = "account",
    AccountCommerceDetails = "account_commerce_details",
    Action = "action",
    AddonRule = "addon_rule",
    AiAgent = "ai_agent",
    AiAgentSession = "ai_agent_session",
    Alert = "alert",
    ApiOperation = "api_operation",
    ApiParameter = "api_parameter",
    AppFragment = "app_fragment",
    Article = "article",
    Artifact = "artifact",
    Auth0User = "auth0_user",
    Automation = "automation",
    Bot = "bot",
    BotSnapshot = "bot_snapshot",
    Bug = "bug",
    Call = "call",
    Capability = "capability",
    ChangeEvent = "change_event",
    Channel = "channel",
    ClusterLabel = "cluster_label",
    ClusterLink = "cluster_link",
    ClusteringRun = "clustering_run",
    Code = "code",
    CodeChange = "code_change",
    Collection = "collection",
    Command = "command",
    Comment = "comment",
    Communication = "communication",
    Component = "component",
    ConditionalRole = "conditional_role",
    Connection = "connection",
    Conversation = "conversation",
    ConversationCreated = "conversation_created",
    ConversationInactivityReminder = "conversation_inactivity_reminder",
    Credit = "credit",
    CreditCoupon = "credit_coupon",
    CustomEngagement = "custom_engagement",
    CustomLinkType = "custom_link_type",
    CustomObject = "custom_object",
    CustomPart = "custom_part",
    CustomSchemaFragment = "custom_schema_fragment",
    CustomStage = "custom_stage",
    CustomState = "custom_state",
    CustomType = "custom_type",
    CustomTypeFragment = "custom_type_fragment",
    CustomWork = "custom_work",
    Dashboard = "dashboard",
    DataSource = "data_source",
    Dataset = "dataset",
    DevOrg = "dev_org",
    DevOrgCommerceDetails = "dev_org_commerce_details",
    DevSpace = "dev_space",
    DevUser = "dev_user",
    DevrevProfile = "devrev_profile",
    DevrevReminder = "devrev_reminder",
    DevuInvite = "devu_invite",
    Directory = "directory",
    DiscoveryGitCommit = "discovery_git_commit",
    DiscoveryGitEvent = "discovery_git_event",
    DiscoveryProfile = "discovery_profile",
    DiscoveryRun = "discovery_run",
    DiscoverySettings = "discovery_settings",
    Emoji = "emoji",
    Engagement = "engagement",
    Enhancement = "enhancement",
    Entity = "entity",
    EventSource = "event_source",
    ExternalImport = "external_import",
    ExternalSyncUnit = "external_sync_unit",
    ExternalSystem = "external_system",
    ExternalSystemType = "external_system_type",
    Feature = "feature",
    FeaturePin = "feature_pin",
    Flow = "flow",
    Form = "form",
    FunctionDefinition = "function_definition",
    GenericNotification = "generic_notification",
    Group = "group",
    Incident = "incident",
    Intent = "intent",
    Interaction = "interaction",
    Invalid = "invalid",
    Invoice = "invoice",
    InvoiceLineItem = "invoice_line_item",
    Issue = "issue",
    Job = "job",
    Journey = "journey",
    Keyring = "keyring",
    KeyringType = "keyring_type",
    KnowledgeNode = "knowledge_node",
    LicenseAssignment = "license_assignment",
    Link = "link",
    Linkable = "linkable",
    LinkablePin = "linkable_pin",
    Marketplace = "marketplace",
    MarketplaceCategory = "marketplace_category",
    MarketplaceItem = "marketplace_item",
    MarketplaceSection = "marketplace_section",
    MarketplaceSubmission = "marketplace_submission",
    Meeting = "meeting",
    MeetingNew = "meeting_new",
    Menu = "menu",
    Metric = "metric",
    MetricDefinition = "metric_definition",
    MetricSet = "metric_set",
    MetricTracker = "metric_tracker",
    MicroflowDefinition = "microflow_definition",
    Microservice = "microservice",
    Namespace = "namespace",
    News = "news",
    NotificationContentTemplate = "notification_content_template",
    NotificationPreferences = "notification_preferences",
    OasisData = "oasis_data",
    OasisJob = "oasis_job",
    OasisView = "oasis_view",
    ObjectAssignment = "object_assignment",
    ObjectMember = "object_member",
    OneTimeLineItem = "one_time_line_item",
    Operation = "operation",
    Opportunity = "opportunity",
    OrgPreferences = "org_preferences",
    OrgSchedule = "org_schedule",
    OrgScheduleFragment = "org_schedule_fragment",
    PartPin = "part_pin",
    PaymentMethodBankAccount = "payment_method_bank_account",
    PaymentMethodCard = "payment_method_card",
    Playbook = "playbook",
    PlugPreferences = "plug_preferences",
    PlugSetting = "plug_setting",
    PortalPreferences = "portal_preferences",
    PrReviewReminder = "pr_review_reminder",
    PriceBook = "price_book",
    Pricing = "pricing",
    Problem = "problem",
    Product = "product",
    Project = "project",
    PushDevice = "push_device",
    QuestionAnswer = "question_answer",
    Quote = "quote",
    QuoteLineItem = "quote_line_item",
    QuoteTerm = "quote_term",
    QuoteTermTemplate = "quote_term_template",
    RealTimeInsight = "real_time_insight",
    RealTimeInsightValue = "real_time_insight_value",
    RecordTemplate = "record_template",
    RecurringLineItem = "recurring_line_item",
    Request = "request",
    RevOrg = "rev_org",
    RevOrgCommerceDetails = "rev_org_commerce_details",
    RevUser = "rev_user",
    Reward = "reward",
    RewardTransaction = "reward_transaction",
    Role = "role",
    Room = "room",
    Rule = "rule",
    Runnable = "runnable",
    RunnablePin = "runnable_pin",
    Scenario = "scenario",
    Schedule = "schedule",
    ScheduleFragment = "schedule_fragment",
    Schema = "schema",
    Score = "score",
    ServicePlan = "service_plan",
    Settings = "settings",
    Sku = "sku",
    SkuRule = "sku_rule",
    Sla = "sla",
    SlaAssignmentRule = "sla_assignment_rule",
    SlaPolicy = "sla_policy",
    SlaTracker = "sla_tracker",
    Slot = "slot",
    SlugRegistration = "slug_registration",
    SnapComponent = "snap_component",
    SnapIn = "snap_in",
    SnapInFunction = "snap_in_function",
    SnapInPackage = "snap_in_package",
    SnapInPreferences = "snap_in_preferences",
    SnapInVersion = "snap_in_version",
    SnapKitAction = "snap_kit_action",
    SnapKitExecution = "snap_kit_execution",
    SnapWidget = "snap_widget",
    StageDiagram = "stage_diagram",
    Step = "step",
    StockSchemaFragment = "stock_schema_fragment",
    SupportSettings = "support_settings",
    Survey = "survey",
    SurveyResponse = "survey_response",
    SvcAcc = "svc_acc",
    SyncHistory = "sync_history",
    SyncMapperRecord = "sync_mapper_record",
    SyncModificationRecord = "sync_modification_record",
    SyncPrecedenceConfig = "sync_precedence_config",
    SyncRecipeBlueprint = "sync_recipe_blueprint",
    SyncRecipeBlueprintShard = "sync_recipe_blueprint_shard",
    SyncRecipeFilter = "sync_recipe_filter",
    SyncSnapIn = "sync_snap_in",
    SyncUnit = "sync_unit",
    SysUser = "sys_user",
    Tag = "tag",
    Task = "task",
    TenantFragment = "tenant_fragment",
    TestObject = "test_object",
    Ticket = "ticket",
    TimeMetricTracker = "time_metric_tracker",
    TimelineEvent = "timeline_event",
    Token = "token",
    Uom = "uom",
    UserMention = "user_mention",
    UserParticipation = "user_participation",
    UserPreferences = "user_preferences",
    UserSession = "user_session",
    Vista = "vista",
    VistaGroupItem = "vista_group_item",
    VistaShared = "vista_shared",
    WatcherEntry = "watcher_entry",
    WebCrawlerJob = "web_crawler_job",
    Webhook = "webhook",
    WebhookEvent = "webhook_event",
    Webpage = "webpage",
    Widget = "widget",
    WindowBasedInsight = "window_based_insight",
    WindowBasedInsightValue = "window_based_insight_value",
    Workflow = "workflow",
    WorkflowRun = "workflow_run",
    WorkflowStep = "workflow_step"
}
/** onboarding-task */
export interface OnboardingTask {
    /** Whether the task has been closed. */
    closed: boolean;
    /** The metadata for the task. */
    metadata: object | null;
    /** The name of the task. */
    name: string;
}
/** onboarding-tasks-apply-request */
export interface OnboardingTasksApplyRequest {
    /** The namespace to apply the tasks to. */
    namespace?: string;
    /** Set the provided tasks. The tasks' prior data will be overwritten. */
    tasks?: OnboardingTask[];
}
/** onboarding-tasks-apply-response */
export interface OnboardingTasksApplyResponse {
    /** The tasks available to the user. */
    tasks: OnboardingTask[];
}
/** one-time-items-list-request */
export interface OneTimeItemsListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** The list of one time line item DONs which are to be aggregated. */
    ids?: string[];
    /** Filter, invoiced vs un-invoiced service plan objects. */
    is_invoiced?: boolean;
    /**
     * The maximum number of one time items to return. The default is
     * '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /**
     * The list of rev org DONs which are to be aggregated.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org_ids?: string[];
    /** The list of service plan DONs which are to be aggregated. */
    service_plan_ids?: string[];
    /**
     * List of fields to sort the one time line item object, by and how to
     * sort them. Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
}
/** one-time-items-list-response */
export interface OneTimeItemsListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /** The list of one time line item objects. */
    one_time_line_items: OneTimeLineItem[];
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/** one-time-line-item */
export type OneTimeLineItem = LineItemBase & {
    /** Tells if the item is part of any invoice. */
    is_invoiced: boolean;
};
/** one-time-line-item-summary */
export type OneTimeLineItemSummary = LineItemBaseSummary;
/** operation */
export type Operation = AtomBase & {
    /** Description of the operation. */
    description?: string;
    /** Schema of the inputs port of this operation. */
    input_ports?: OperationInputPort[];
    /** Name of the operation. */
    name?: string;
    /** Namespace of the operation. */
    namespace?: string;
    /** Schema of the outputs port of this operation. */
    output_ports?: OperationOutputPort[];
    /** Unique slug of operation (within namespace). */
    slug?: string;
    /** Operation type. */
    type?: OperationTypeEnum;
};
/**
 * operation-input-port
 * Schema of an input port.
 */
export interface OperationInputPort {
    /** Whether schema for this input port is defined during runtime. */
    has_dynamic_schema?: boolean;
    /** Input port name. */
    name?: string;
    /** Schema used to define fields of an input/output port. */
    schema?: OperationIoPortFieldsSchema;
    /** Port type. */
    type?: OperationInputPortType;
}
/**
 * operation-input-port-summary
 * Schema of an input port.
 */
export interface OperationInputPortSummary {
    /** Input port name. */
    name?: string;
    /** Port type. */
    type?: OperationInputPortType;
}
/** Port type. */
export declare enum OperationInputPortType {
    Default = "default",
    UserDefined = "user_defined"
}
/**
 * operation-io-port-fields-schema
 * Schema used to define fields of an input/output port.
 */
export interface OperationIoPortFieldsSchema {
    /** List of composite schemas. */
    composite_schemas?: CompositeSchema[];
    /** The conditions associated with the fields. */
    conditions?: CustomSchemaFragmentCondition[];
    /** Schema used to describe fields using field descriptors. */
    field_descriptors?: SchemaFieldDescriptor[];
    /** Schema type used to describe fields. */
    type?: IoPortFieldsSchemaType;
}
/**
 * operation-output-port
 * Schema of an output port.
 */
export interface OperationOutputPort {
    /**
     * Whether this output port can emit a stream of values rather than
     * one time single value.
     */
    emits_multiple?: boolean;
    /** Whether schema for this output port is defined during runtime. */
    has_dynamic_schema?: boolean;
    /** Output port name. */
    name?: string;
    /** Schema used to define fields of an input/output port. */
    schema?: OperationIoPortFieldsSchema;
    /** Port type. */
    type?: OperationOutputPortType;
}
/**
 * operation-output-port-summary
 * Schema of an output port.
 */
export interface OperationOutputPortSummary {
    /** Output port name. */
    name?: string;
    /** Port type. */
    type?: OperationOutputPortType;
}
/** Port type. */
export declare enum OperationOutputPortType {
    Default = "default",
    Error = "error",
    UserDefined = "user_defined"
}
/**
 * operation-port-io-schema
 * Describes the schema for a step's port, detailing the expected data
 * structure and types for either input or output data.
 */
export interface OperationPortIoSchema {
    /** The name of the port. */
    name?: string;
    /** Schema used to define fields of an input/output port. */
    schema?: OperationIoPortFieldsSchema;
}
/** operation-summary */
export type OperationSummary = AtomBaseSummary & {
    /** Schema of the inputs port of this operation. */
    input_ports?: OperationInputPortSummary[];
    /** Namespace of the operation. */
    namespace?: string;
    /** Schema of the outputs port of this operation. */
    output_ports?: OperationOutputPortSummary[];
    /** Unique slug of operation (within namespace). */
    slug?: string;
    /** Operation type. */
    type?: OperationTypeEnum;
};
export declare enum OperationType {
    Create = "create",
    Delete = "delete",
    Execute = "execute",
    List = "list",
    Read = "read",
    Update = "update"
}
/** Operation type. */
export declare enum OperationTypeEnum {
    Action = "action",
    Control = "control",
    Trigger = "trigger"
}
/** opportunity */
export type Opportunity = WorkBase & {
    account?: AccountSummary;
    /**
     * Total opportunity amount.
     * @format double
     */
    amount?: number;
    /** Money. */
    annual_contract_value?: Money;
    /**
     * Annual recurring revenue of the opportunity.
     * @format double
     */
    annual_recurring_revenue?: number;
    /** Money. */
    budget?: Money;
    /** Contacts involved in the opportunity. */
    contacts?: UserSummary[];
    /**
     * Budget of the customer.
     * @format double
     */
    customer_budget?: number;
    /** Forecast category of the opportunity. */
    forecast_category?: OpportunityForecastCategory;
    /** Priority of the opportunity. */
    priority?: OpportunityPriority;
    /**
     * Probability of winning the deal, value lies between 0.0% and
     * 100.0%.
     * @format double
     */
    probability?: number;
    /** Money. */
    value?: Money;
};
/** Forecast category of the opportunity. */
export declare enum OpportunityForecastCategory {
    Commit = "commit",
    Omitted = "omitted",
    Pipeline = "pipeline",
    StrongUpside = "strong_upside",
    Upside = "upside",
    Won = "won"
}
/** Priority of the opportunity. */
export declare enum OpportunityPriority {
    P0 = "p0",
    P1 = "p1",
    P2 = "p2",
    P3 = "p3"
}
/** opportunity-summary */
export type OpportunitySummary = WorkBaseSummary & {
    account?: AccountSummary;
};
/** org-base */
export type OrgBase = AtomBase & {
    /** A representation of a postal address. */
    address?: PostalAddress;
    /** Name of the Organization. */
    display_name?: string;
    /** The environment of the Org. Defaults to 'production' if not specified. */
    environment?: OrgEnvironment;
    logo_id?: ArtifactSummary;
    /** Phone numbers of the Organization. */
    phone_number?: PhoneNumber[];
    /** Phone numbers of the Organization. */
    phone_numbers?: string[];
    /** State of the Organization. */
    state?: OrgState;
    /** The display picture of the org. */
    thumbnail?: string;
};
/** org-base-summary */
export type OrgBaseSummary = AtomBaseSummary & {
    /** Name of the Organization. */
    display_name?: string;
    logo_id?: ArtifactSummary;
    /** The display picture of the org. */
    thumbnail?: string;
};
/** The environment of the Org. Defaults to 'production' if not specified. */
export declare enum OrgEnvironment {
    Production = "production",
    Staging = "staging",
    Test = "test"
}
/** org-preferences */
export type OrgPreferences = PreferencesBase & {
    /** Preferences group for Analytics. */
    analytics?: AnalyticsGroup;
    /** Automated initial response message. */
    autoresponse_initial_message?: string;
    /** Preferences group for Contacts. */
    contacts_preferences?: ContactsPreferencesGroup;
    /** Preferences for setting currency. */
    currency?: CurrencyGroup;
    /** Preferences group for MFZ. */
    mfz?: MfzPreferencesGroup;
    /** Users who are notified when a new conversation is created. */
    new_conversation_notified_to?: UserSummary[];
    /** Preferences group for people insights. */
    people_insights?: PeopleInsightsGroup;
    /** Preferences group for Rev-Portal. */
    rev_portal?: RevPortalGroup;
    /** Preferences group for SLA. */
    sla?: SlaPreferencesGroup;
    /** Preferences group for Support. */
    support?: SupportPreferencesGroup;
    /** Preferences group for Turing Answers. */
    turing_answers?: TuringAnswersGroup;
    /** Preferences for setting user traits. */
    user_traits?: UserTraitsPreferencesGroup;
    /**
     * Groups or users to send the analytics report to. If not specified,
     * send to all users in the organization.
     */
    weekly_analytics_report_recipients?: AtomSummary[];
};
/** org-preferences-summary */
export type OrgPreferencesSummary = PreferencesBaseSummary;
/**
 * org-reference
 * Denormalized organization reference.
 */
export interface OrgReference {
    /** Organization display id. */
    display_id?: string;
    /** Organization display name. */
    display_name?: string;
    /** Organization id. */
    id?: string;
}
/** org-schedule */
export type OrgSchedule = AtomBase & {
    /** The schedule for each week. */
    default_weekly_org_schedule?: WeeklyOrgSchedule;
    /**
     * The schedule must be valid and well-defined for at least this many
     * days in the future, otherwise a warning notification is generated.
     * Default is 0 if not specified.
     * @format int32
     */
    min_valid_days?: number;
    /** Human-readable name. */
    name?: string;
    /**
     * The list of schedule fragments. It must be an ordered list of
     * contiguous fragments (the next starting when the previous one
     * ends), updates in a published schedule are only allowed to add new
     * ones to the future.
     */
    org_schedule_fragments?: OrgScheduleFragmentOverview[];
    /**
     * Status determines how an item can be used. In 'draft' status an item
     * can be edited but can't be used. When 'published' the item can longer
     * be edited but can be used. 'Archived' is read-only.
     */
    status: OrgScheduleStatus;
    /**
     * Timezone in which this is defined. Only organization schedules in
     * the same timezone can be directly combined.
     */
    timezone?: string;
    /**
     * Derived field indicating when a valid organization schedule will
     * become invalid. If omitted, the schedule is already invalid. A
     * schedule is valid if it has a weekly schedule for all named periods
     * for all its schedule fragments, and if it has a schedule fragment
     * for the time period in question.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    valid_until?: string;
    /**
     * If the organization schedule fragment specifies that the given day
     * belongs to a named period, a weekly schedule from this list with
     * the matching name will be selected.
     */
    weekly_org_schedules?: WeeklyOrgSchedule[];
};
/** org-schedule-fragment */
export type OrgScheduleFragment = AtomBase & {
    /**
     * The date (inclusive) on which the organization schedule fragment
     * begins.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    from?: string;
    /**
     * Periods during which the schedule is considered to be 'off' or to
     * be in some specific named period.
     */
    intervals?: OrgScheduleInterval[];
    /** Human-readable name, indicating the purpose of the schedule. */
    name?: string;
    /**
     * CLDR region code of the countries/regions it is meant to be valid
     * for. Does not drive logic, serves only for easier filtering and
     * organization.
     */
    region_codes?: string[];
    /**
     * Status determines how an item can be used. In 'draft' status an item
     * can be edited but can't be used. When 'published' the item can longer
     * be edited but can be used. 'Archived' is read-only.
     */
    status: OrgScheduleFragmentStatus;
    /**
     * The date (exclusive) on which the organization schedule fragment's
     * validity ends.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    to?: string;
};
/**
 * org-schedule-fragment-overview
 * The representation of the organization schedule fragment embedded
 * inside a organization schedule, used to quickly look up the schedule
 * fragment for the right period.
 */
export interface OrgScheduleFragmentOverview {
    /**
     * The date (inclusive) on which the organization schedule fragment
     * begins.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    from?: string;
    /** The organization schedule fragment referenced. */
    id?: string;
    /**
     * The date (exclusive) on which the organization schedule fragment's
     * validity ends.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    to?: string;
}
/**
 * Status determines how an item can be used. In 'draft' status an item
 * can be edited but can't be used. When 'published' the item can longer
 * be edited but can be used. 'Archived' is read-only.
 */
export declare enum OrgScheduleFragmentStatus {
    Archived = "archived",
    Draft = "draft",
    Published = "published"
}
/** org-schedule-fragment-summary */
export type OrgScheduleFragmentSummary = AtomBaseSummary & {
    /**
     * The date (inclusive) on which the organization schedule fragment
     * begins.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    from?: string;
    /** Human-readable name, indicating the purpose of the schedule. */
    name?: string;
    /**
     * Status determines how an item can be used. In 'draft' status an item
     * can be edited but can't be used. When 'published' the item can longer
     * be edited but can be used. 'Archived' is read-only.
     */
    status: OrgScheduleFragmentStatus;
    /**
     * The date (exclusive) on which the organization schedule fragment's
     * validity ends.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    to?: string;
};
/** org-schedule-fragments-create-request */
export interface OrgScheduleFragmentsCreateRequest {
    /**
     * Date (inclusive) on which the organization schedule fragment
     * begins.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    from: string;
    /** The intervals that comprise the schedule fragment. */
    intervals: CreateOrgScheduleInterval[];
    /** Name of the organization schedule fragment. */
    name: string;
    /**
     * CLDR region code of the countries/regions it is meant to be valid
     * for. Does not drive logic, serves only for easier filtering and
     * organization.
     */
    region_codes?: string[];
    /**
     * Date (exclusive) on which the organization schedule fragment's
     * validity ends.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    to: string;
}
/** org-schedule-fragments-create-response */
export interface OrgScheduleFragmentsCreateResponse {
    org_schedule_fragment: OrgScheduleFragment;
}
/** org-schedule-fragments-get-request */
export interface OrgScheduleFragmentsGetRequest {
    /** Organization schedule Fragment ID. */
    id: string;
}
/** org-schedule-fragments-get-response */
export interface OrgScheduleFragmentsGetResponse {
    org_schedule_fragment: OrgScheduleFragment;
}
/** org-schedule-fragments-transition-request */
export interface OrgScheduleFragmentsTransitionRequest {
    /** Organization schedule Fragment ID. */
    id: string;
    /**
     * Status determines how an item can be used. In 'draft' status an item
     * can be edited but can't be used. When 'published' the item can longer
     * be edited but can be used. 'Archived' is read-only.
     */
    status: OrgScheduleFragmentStatus;
}
/** org-schedule-fragments-transition-response */
export interface OrgScheduleFragmentsTransitionResponse {
    org_schedule_fragment: OrgScheduleFragment;
}
/**
 * org-schedule-interval
 * An optionally named period on day granularity.
 */
export interface OrgScheduleInterval {
    /**
     * The date (inclusive) on which the interval begins.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    from?: string;
    /**
     * If true, no schedule is looked up for these days, instead it is a
     * fully off day.
     */
    is_excluded?: boolean;
    /**
     * The name of the period, for example the event or holiday it
     * represents. Used to connect it to a specific weekly schedule.
     */
    name?: string;
    /**
     * The date (exclusive) on which the interval ends. If omitted, it is
     * a single day interval.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    to?: string;
}
/**
 * Status determines how an item can be used. In 'draft' status an item
 * can be edited but can't be used. When 'published' the item can longer
 * be edited but can be used. 'Archived' is read-only.
 */
export declare enum OrgScheduleStatus {
    Archived = "archived",
    Draft = "draft",
    Published = "published"
}
/** org-schedule-summary */
export type OrgScheduleSummary = AtomBaseSummary & {
    /** Human-readable name. */
    name?: string;
    /**
     * Status determines how an item can be used. In 'draft' status an item
     * can be edited but can't be used. When 'published' the item can longer
     * be edited but can be used. 'Archived' is read-only.
     */
    status: OrgScheduleStatus;
    /**
     * Timezone in which this is defined. Only organization schedules in
     * the same timezone can be directly combined.
     */
    timezone?: string;
    /**
     * Derived field indicating when a valid organization schedule will
     * become invalid. If omitted, the schedule is already invalid. A
     * schedule is valid if it has a weekly schedule for all named periods
     * for all its schedule fragments, and if it has a schedule fragment
     * for the time period in question.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    valid_until?: string;
};
/** org-schedules-create-request */
export interface OrgSchedulesCreateRequest {
    default_weekly_org_schedule?: SetWeeklyOrgSchedule;
    /**
     * Organization schedule must be valid for at least this many days in
     * the future. Meaning organization schedule fragments must cover this
     * period. 0 if omitted.
     * @format int64
     */
    min_valid_days?: number;
    /** Human-readable name. */
    name: string;
    /** List of organization schedule fragments with no overlaps or gaps. */
    org_schedule_fragments?: SetOrgScheduleFragmentSummary[];
    /**
     * Timezone in which the organization schedule applies. Expected to be
     * a valid IANA time zone name such as America/New_York.
     */
    timezone: string;
    /**
     * If this day belongs to a named period according to the currently
     * active organization schedule fragment, a weekly organization
     * schedule from this list with the corresponding name will apply.
     */
    weekly_org_schedules?: SetWeeklyOrgSchedule[];
}
/** org-schedules-create-response */
export interface OrgSchedulesCreateResponse {
    org_schedule: OrgSchedule;
}
/** org-schedules-get-request */
export interface OrgSchedulesGetRequest {
    /** Organization schedule ID. */
    id: string;
}
/** org-schedules-get-response */
export interface OrgSchedulesGetResponse {
    org_schedule: OrgSchedule;
}
/** org-schedules-list-request */
export interface OrgSchedulesListRequest {
    /** Creator ID the filter matches. */
    created_by_id?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * Max number of organization schedules returned in a page. Default is
     * 50.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /**
     * Fields to sort the organization schedules by and the direction to
     * sort them.
     */
    sort_by?: string[];
    /** The organization schedule statuses the filter matches. */
    status?: OrgScheduleStatus[];
    /** Provides ways to specify date ranges on objects. */
    valid_until?: DateFilter;
}
/** org-schedules-list-response */
export interface OrgSchedulesListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /** The list of organization schedules. */
    org_schedules: OrgSchedule[];
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/** org-schedules-set-future-request */
export interface OrgSchedulesSetFutureRequest {
    /** Organization schedule ID. */
    id: string;
    /** Organization schedule Fragment ID. */
    org_schedule_fragment_id: string;
}
/** org-schedules-set-future-response */
export interface OrgSchedulesSetFutureResponse {
    org_schedule: OrgSchedule;
}
/** org-schedules-transition-request */
export interface OrgSchedulesTransitionRequest {
    /** Organization schedule ID. */
    id: string;
    /**
     * Status determines how an item can be used. In 'draft' status an item
     * can be edited but can't be used. When 'published' the item can longer
     * be edited but can be used. 'Archived' is read-only.
     */
    status: OrgScheduleStatus;
}
/** org-schedules-transition-response */
export interface OrgSchedulesTransitionResponse {
    org_schedule: OrgSchedule;
}
/** org-schedules-update-request */
export interface OrgSchedulesUpdateRequest {
    default_weekly_org_schedule?: SetWeeklyOrgSchedule;
    /** Organization schedule ID. */
    id: string;
    /**
     * Organization schedule must be valid for at least this many days in
     * the future. Meaning organization schedule fragments must cover this
     * period. 0 if omitted.
     * @format int64
     */
    min_valid_days?: number;
    /** Human-readable name. */
    name?: string;
    /** List of organization schedule fragments with no overlaps or gaps. */
    org_schedule_fragments?: SetOrgScheduleFragmentSummary[];
    /**
     * Timezone in which the organization schedule applies. Expected to be
     * a valid IANA time zone name such as America/New_York.
     */
    timezone?: string;
    /**
     * If this day belongs to a named period according to the currently
     * active organization schedule fragment, a weekly organization
     * schedule from this list with the corresponding name will apply.
     */
    weekly_org_schedules?: SetWeeklyOrgSchedule[];
}
/** org-schedules-update-response */
export interface OrgSchedulesUpdateResponse {
    org_schedule: OrgSchedule;
}
/** org-search-summary */
export type OrgSearchSummary = SearchSummaryBase & {
    org: OrgSummary;
};
/** State of the Organization. */
export declare enum OrgState {
    Active = "active",
    Deactivated = "deactivated",
    Deleted = "deleted",
    Inactive = "inactive",
    Locked = "locked"
}
/** org-summary */
export type OrgSummary = (AccountSummary | DevOrgSummary | RevOrgSummary) & {
    type: OrgType;
};
export declare enum OrgType {
    Account = "account",
    DevOrg = "dev_org",
    RevOrg = "rev_org"
}
/**
 * parent-part-filter
 * The filter for specifying parent part.
 */
export interface ParentPartFilter {
    /**
     * Number of levels to fetch the part hierarchy up to.
     * @format int32
     * @min 1
     */
    level?: number;
    /**
     * Part IDs to fetch the hierarchy for.
     * @minItems 1
     * @example ["PROD-12345"]
     */
    parts: string[];
}
/**
 * parent-reference
 * Composite type for general parent details.
 */
export interface ParentReference {
    parent?: AtomSummary;
}
/** part */
export type Part = (Capability | Component | CustomPart | Enhancement | Feature | Linkable | Microservice | Product | Runnable) & {
    type: PartType;
};
/** part-base */
export type PartBase = AtomBase & {
    /** Annotations associated with part object. */
    annotations?: Annotation[];
    /** The attached artifacts. */
    artifacts?: ArtifactSummary[];
    /** IDs of the items attached to a part object. */
    attachments?: ArtifactSummary[];
    /** Designated category of the part. */
    category?: PartCategory;
    /**
     * This field holds a concatenated string of all key fields relevant
     * to a particular part.
     */
    concat_keys?: string;
    /** Custom fields. */
    custom_fields?: object;
    /**
     * Custom schema fragments.
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    custom_schema_fragments?: string[];
    /** Methods the product can be delivered as. */
    delivered_as?: PartDeliveredAs[];
    /** Description of the part. */
    description?: string;
    /** Docs associated with the part. */
    docs?: DocField[];
    /** Links associated with the object. */
    links?: ArchetypeLinkSummary[];
    /** Name of the part. */
    name: string;
    /** The users that own the part. */
    owned_by: UserSummary[];
    /** URL to the part details (git url, website, etc.). */
    ref_url?: string;
    /** The object IDs referenced in the body. */
    references?: AtomSummary[];
    /**
     * Combination of stock and custom schema fragment IDs.
     * @deprecated
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    schema_fragment_ids?: string[];
    /** Stage details. */
    stage?: PartStage;
    /** State of the part based upon the stage. */
    state?: string;
    /**
     * Stock schema fragment.
     * @example "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"
     */
    stock_schema_fragment?: string;
    /** Subtype corresponding to the custom type fragment. */
    subtype?: string;
    /** Tags associated with the object. */
    tags?: TagWithValue[];
};
/** part-base-summary */
export type PartBaseSummary = AtomBaseSummary & {
    /** Name of the part. */
    name: string;
};
/** Designated category of the part. */
export declare enum PartCategory {
    DevPart = "dev_part",
    General = "general",
    RevPart = "rev_part"
}
/** Methods the product can be delivered as. */
export declare enum PartDeliveredAs {
    Goods = "goods",
    Service = "service",
    Software = "software"
}
/**
 * part-merge-event
 * Event for part merging.
 */
export interface PartMergeEvent {
    merged_to_part?: PartSummary;
    part?: PartSummary;
}
/** part-pin-base */
export type PartPinBase = AtomBase & {
    /**
     * This field holds a pinned entry for concatenated string of all key
     * fields relevant to a particular part.
     */
    concat_keys?: string;
    /**
     * This field contains pinned entry of description field in part
     * object.
     */
    description?: string;
    /** Whether or not the part has been marked as deleted. */
    is_part_deleted?: boolean;
    /** This field contains pinned entry of name field in part object. */
    name?: string;
    /**
     * This field contains exclusion list for pinned entry of owned_by_ids
     * field in part object.
     */
    owned_by_ids_exclusion_list?: UserSummary[];
    /**
     * This field contains inclusion list for pinned entry of owned_by_ids
     * field in part object.
     */
    owned_by_ids_inclusion_list?: UserSummary[];
    part?: PartSummary;
    /** Type of part pin object. */
    type?: PartPinType;
};
/** part-pin-base-summary */
export type PartPinBaseSummary = AtomBaseSummary;
/** Type of part pin object. */
export declare enum PartPinType {
    ApiEndpointPin = "api_endpoint_pin",
    FeaturePin = "feature_pin",
    LinkablePin = "linkable_pin",
    RunnablePin = "runnable_pin"
}
/**
 * part-promote-event
 * Event for part promotion.
 */
export interface PartPromoteEvent {
    part?: PartSummary;
    promoted_to_part?: PartSummary;
}
/** part-search-summary */
export type PartSearchSummary = SearchSummaryBase & {
    part: PartSummary;
};
/**
 * part-stage
 * Stage details.
 */
export interface PartStage {
    /** Current stage name of the part. */
    name: string;
    /** Notes relevant to the stage. */
    notes?: string;
    /**
     * Current stage number.
     * @format int32
     */
    ordinal?: number;
}
/** part-summary */
export type PartSummary = (CapabilitySummary | ComponentSummary | CustomPartSummary | EnhancementSummary | FeatureSummary | LinkableSummary | MicroserviceSummary | ProductSummary | RunnableSummary) & {
    type: PartType;
};
export declare enum PartType {
    Capability = "capability",
    Component = "component",
    CustomPart = "custom_part",
    Enhancement = "enhancement",
    Feature = "feature",
    Linkable = "linkable",
    Microservice = "microservice",
    Product = "product",
    Runnable = "runnable"
}
/** parts-contributors-list-request */
export interface PartsContributorsListRequest {
    /**
     * The part's ID.
     * @example "PROD-12345"
     */
    id: string;
    /**
     * The maximum number of contributors to return. If not set, then the
     * default is '10'.
     * @format int32
     */
    limit?: number;
}
/** parts-contributors-list-response */
export interface PartsContributorsListResponse {
    /** The users that contribute on the part. */
    contributors: UserSummary[];
    /**
     * Total number of contributors on the part.
     * @format int32
     */
    total: number;
}
/** parts-count-request */
export interface PartsCountRequest {
    /** Filters for parts of the provided categories. */
    categories?: PartCategory[];
    /**
     * Filters for parts created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: PartsFilterCreatedByOpOperatorType;
    created_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    created_date_v2?: DateFilter;
    /** Filters for custom fields. */
    custom_fields?: object;
    enhancement?: PartsFilterEnhancement;
    modified_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    modified_date_v2?: DateFilter;
    /** Filters for parts of the provided name(s). */
    name?: string[];
    /**
     * Filters for parts owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for parts owned by any of the provided users.
     * @deprecated
     * @example ["DEVU-12345"]
     */
    owned_by_ids?: string[];
    owned_by_op?: PartsFilterOwnedByOpOperatorType;
    /** The filter for specifying parent part. */
    parent_part?: ParentPartFilter;
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for part with any of the provided states. */
    state?: string[];
    /** Filters for subtypes. */
    subtype?: string[];
    /**
     * Filters for parts with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tag_ids?: string[];
    /**
     * Filters for part with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    tags_op?: PartsFilterTagsOpOperatorType;
    /** Filters for parts of the provided type(s). */
    type?: PartType[];
    /**
     * Filters for parts of the provided type(s).
     * @deprecated
     */
    types?: PartType[];
    /**
     * Filters for parts belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
/** parts-count-response */
export interface PartsCountResponse {
    /**
     * Count of parts matching the filter.
     * @format int32
     */
    count: number;
}
/** parts-create-request */
export type PartsCreateRequest = (PartsCreateRequestCapability | PartsCreateRequestCustomPart | PartsCreateRequestEnhancement | PartsCreateRequestFeature | PartsCreateRequestLinkable | PartsCreateRequestProduct | PartsCreateRequestRunnable) & {
    /**
     * The IDs of the artifacts.
     * @deprecated
     * @example ["ARTIFACT-12345"]
     */
    artifact_ids?: string[];
    /**
     * The IDs of the artifacts.
     * @example ["ARTIFACT-12345"]
     */
    artifacts?: string[];
    /** Custom fields. */
    custom_fields?: object;
    /**
     * The custom schema fragments to use.
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    custom_schema_fragments?: string[];
    /** Description of the part. */
    description?: string;
    /** Docs associated with the part. */
    docs?: DocField[];
    /** Links associated with the part. */
    links?: EmbedLinksCreateRequest[];
    /** Name of the part. */
    name: string;
    /**
     * The users that own the part.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * The users that own the part. This is replaced by owned_by
     * @deprecated
     * @example ["DEVU-12345"]
     */
    owned_by_ids?: string[];
    /** Sets an object's initial stage. */
    stage?: StageInit;
    /** Tags associated with the part. */
    tags?: SetTagWithValue[];
    type: PartType;
    /**
     * Ids of work items which will be assigned to newly created part
     * @example ["ISS-12345"]
     */
    work_ids?: string[];
};
/** parts-create-request-capability */
export interface PartsCreateRequestCapability {
    /**
     * IDs of the runnables that fulfill this capability.
     * @example ["PROD-12345"]
     */
    fulfilled_by_ids?: string[];
    /**
     * ID of the parent product for the capability.
     * @maxItems 1
     * @example ["PROD-12345"]
     */
    parent_part?: string[];
    /**
     * Product ID of this capability.
     * @deprecated
     * @example "PROD-12345"
     */
    part_of_part_id?: string;
    /**
     * User ID of the PM owner of the part.
     * @example "DEVU-12345"
     */
    pm_owner_id?: string;
}
/** parts-create-request-custom-part */
export type PartsCreateRequestCustomPart = object;
/** parts-create-request-enhancement */
export interface PartsCreateRequestEnhancement {
    /**
     * ID of the parent part on which the enhancement is to be created.
     * @maxItems 1
     * @example ["PROD-12345"]
     */
    parent_part?: string[];
    /** Custom stage ID which will be used for creating the enhancement. */
    stage_v2?: string;
    /**
     * Target close date by which enhancement is expected to be closed.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    target_close_date?: string;
    /**
     * Target start date by which enhancement is expected to be started.
     * Example Date Format: 2000-11-01T01:01:01Z
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    target_start_date?: string;
}
/** parts-create-request-feature */
export interface PartsCreateRequestFeature {
    /**
     * User ID of the development owner of the part.
     * @example "DEVU-12345"
     */
    development_owner_id?: string;
    /**
     * IDs of the runnables that fulfill the feature.
     * @example ["PROD-12345"]
     */
    fulfilled_by_ids?: string[];
    /**
     * ID of the parent capability/feature for the feature.
     * @maxItems 1
     * @example ["PROD-12345"]
     */
    parent_part?: string[];
    /**
     * Capability or feature ID of the feature.
     * @deprecated
     * @example "PROD-12345"
     */
    part_of_part_id?: string;
    /**
     * User ID of the PM owner of the part.
     * @example "DEVU-12345"
     */
    pm_owner_id?: string;
    /**
     * User ID of the QA owner of the part.
     * @example "DEVU-12345"
     */
    qa_owner_id?: string;
}
/** parts-create-request-linkable */
export interface PartsCreateRequestLinkable {
    /** Code Inferred surface area of the linkable. */
    code_inferred_surface_area?: string[];
    /** Repo Path of the linkable. */
    code_repo_paths?: string;
    /** Repo url of the linkable. */
    code_repo_url?: string;
}
/** parts-create-request-product */
export interface PartsCreateRequestProduct {
    /**
     * IDs of the runnables that fulfill the product.
     * @example ["PROD-12345"]
     */
    fulfilled_by_ids?: string[];
    /**
     * User ID of the PM owner of the part.
     * @example "DEVU-12345"
     */
    pm_owner_id?: string;
    /**
     * User ID of the QA owner of the part.
     * @example "DEVU-12345"
     */
    qa_owner_id?: string;
}
/** parts-create-request-runnable */
export interface PartsCreateRequestRunnable {
    /** Code Inferred surface area of the runnable. */
    code_inferred_surface_area?: string[];
    /** Repo Path of the runnable. */
    code_repo_paths?: string;
    /** Repo url of the runnable. */
    code_repo_url?: string;
}
/** parts-create-response */
export interface PartsCreateResponse {
    part: Part;
}
/** parts-customers-list-request */
export interface PartsCustomersListRequest {
    /**
     * The part's ID.
     * @example "PROD-12345"
     */
    id: string;
    /**
     * The maximum number of customers to return. If not set, then the
     * default is '10'.
     * @format int32
     */
    limit?: number;
}
/** parts-customers-list-response */
export interface PartsCustomersListResponse {
    /** Customers who have tickets associated with this part. */
    customers: RevOrgSummary[];
    /**
     * Total number of customers for the part.
     * @format int32
     */
    total: number;
}
/** parts-delete-hierarchy-params */
export interface PartsDeleteHierarchyParams {
    /**
     * If not set, then all work items are deleted.
     * @example "PROD-12345"
     */
    reassign_work_to_part_id?: string;
}
/** parts-delete-request */
export interface PartsDeleteRequest {
    delete_hierarchy_params?: PartsDeleteHierarchyParams;
    /**
     * The ID of the part to delete.
     * @example "PROD-12345"
     */
    id: string;
}
/** parts-delete-response */
export type PartsDeleteResponse = object;
/** parts-descendant-links-traverse-request */
export interface PartsDescendantLinksTraverseRequest {
    /**
     * Cursor to begin iteration from. If empty, iteration will begin from
     * the beginning of the result set
     */
    cursor?: string;
    /**
     * Maximum number of link items to return. Default is 50.
     * @format int32
     */
    limit?: number;
    /**
     * If > 0, the maximum depth of the tree to traverse links from the
     * root.
     * @format int32
     */
    max_depth?: number;
    /**
     * ID of the part tree root to traverse links to descendant nodes
     * from.
     * @example "PROD-12345"
     */
    root: string;
}
/** parts-descendant-links-traverse-response */
export interface PartsDescendantLinksTraverseResponse {
    /**
     * List of link objects as part of the descendants link traversal.
     * Link objects at one level are exhausted first before moving to the
     * next level.
     */
    links: Link[];
    /** Cursor to continue iteration */
    next_cursor: string;
}
/** Name of the source used for parts discovery. */
export declare enum PartsDiscoverySourceName {
    AwsApiGw = "aws_api_gw",
    CustomRoutes = "custom_routes",
    DataDog = "data_dog",
    Git = "git",
    Kubernetes = "kubernetes"
}
/** parts-export-request */
export interface PartsExportRequest {
    /** Filters for parts of the provided categories. */
    categories?: PartCategory[];
    /**
     * Filters for parts created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: PartsFilterCreatedByOpOperatorType;
    created_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    created_date_v2?: DateFilter;
    /** Filters for custom fields. */
    custom_fields?: object;
    enhancement?: PartsFilterEnhancement;
    /**
     * The number of parts to return. The default is '50', the maximum is
     * '1000'.
     * @format int32
     */
    first?: number;
    modified_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    modified_date_v2?: DateFilter;
    /** Filters for parts of the provided name(s). */
    name?: string[];
    /**
     * Filters for parts owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for parts owned by any of the provided users.
     * @deprecated
     * @example ["DEVU-12345"]
     */
    owned_by_ids?: string[];
    owned_by_op?: PartsFilterOwnedByOpOperatorType;
    /** The filter for specifying parent part. */
    parent_part?: ParentPartFilter;
    /** Fields to sort the parts by and the direction to sort them. */
    sort_by?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for part with any of the provided states. */
    state?: string[];
    /** Filters for subtypes. */
    subtype?: string[];
    /**
     * Filters for parts with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tag_ids?: string[];
    /**
     * Filters for part with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    tags_op?: PartsFilterTagsOpOperatorType;
    /** Filters for parts of the provided type(s). */
    type?: PartType[];
    /**
     * Filters for parts of the provided type(s).
     * @deprecated
     */
    types?: PartType[];
    /**
     * Filters for parts belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
/** parts-export-response */
export interface PartsExportResponse {
    /** The resulting list of parts. */
    parts: Part[];
}
/** parts-features-api-endpoints-delete-request */
export interface PartsFeaturesApiEndpointsDeleteRequest {
    /** The identifiers specifying the API endpoints to be deleted. */
    api_endpoint_identifiers: ApiEndpointIdentifier[];
    /** Whether or not to not update the resulting feature in the database. */
    dry_run?: boolean;
    /** The feature ID from which the API endpoints are deleted. */
    feature: string;
}
/** parts-features-api-endpoints-delete-response */
export interface PartsFeaturesApiEndpointsDeleteResponse {
    part: Part;
    /**
     * The identifiers of the api enpoints skipped by the delete
     * operation.
     */
    skipped_api_endpoint_identifiers: ApiEndpointIdentifier[];
}
/** parts-features-api-endpoints-merge-request */
export interface PartsFeaturesApiEndpointsMergeRequest {
    /** The identifiers specifying the API endpoints to be merged. */
    api_endpoint_identifiers: ApiEndpointIdentifier[];
    /**
     * Whether or not to delete the merged API endpoints from the
     * from-feature.
     */
    delete_merged_api_endpoints?: boolean;
    /** Whether or not to not update the resulting part in the database. */
    dry_run?: boolean;
    /** The feature ID from which the API endpoints are merged. */
    from_feature: string;
    /** The feature ID into which the API endpoints are merged. */
    to_feature: string;
}
/** parts-features-api-endpoints-merge-response */
export interface PartsFeaturesApiEndpointsMergeResponse {
    from_part: Part;
    merged_part: Part;
    /**
     * The identifiers of the API endpoints skipped by the delete
     * operation.
     */
    skipped_api_endpoint_identifiers: ApiEndpointIdentifier[];
}
/** parts-features-api-operations-delete-request */
export interface PartsFeaturesApiOperationsDeleteRequest {
    api_endpoint_identifier: ApiEndpointIdentifier;
    /** Whether or not to not update the resulting part in the database. */
    dry_run?: boolean;
    /** The feature ID from which the api operations are deleted. */
    feature: string;
    /**
     * The HTTP operations specifying the API operations to be deleted. To
     * specify an empty HTTP operation, use the keyword UNKNOWN.
     */
    http_operations: FeatureApiOperationHttpOperation[];
}
/** parts-features-api-operations-delete-response */
export interface PartsFeaturesApiOperationsDeleteResponse {
    part: Part;
    /**
     * The HTTP operations skipped by the delete operation. The UNKNOWN
     * keyword denotes an empty HTTP operation.
     */
    skipped_http_operations: FeatureApiOperationHttpOperation[];
}
/** parts-features-api-operations-merge-request */
export interface PartsFeaturesApiOperationsMergeRequest {
    api_endpoint_identifier: ApiEndpointIdentifier;
    /**
     * Whether or not to delete the merged API operations from the
     * from-feature.
     */
    delete_merged_api_endpoints?: boolean;
    /** Whether or not to not update the resulting part in the database. */
    dry_run?: boolean;
    /** The feature ID from which the API operations are merged. */
    from_feature: string;
    /**
     * The HTTP operations specifying the API operations to be merged. To
     * specify an empty HTTP operation, use the keyword UNKNOWN.
     */
    http_operations: FeatureApiOperationHttpOperation[];
    /** The feature ID into which the API operations are merged. */
    to_feature: string;
}
/** parts-features-api-operations-merge-response */
export interface PartsFeaturesApiOperationsMergeResponse {
    from_part: Part;
    merged_part: Part;
    /**
     * The HTTP operations skipped by the delete operation. The UNKNOWN
     * keyword denotes an empty HTTP operation.
     */
    skipped_http_operations: FeatureApiOperationHttpOperation[];
}
export declare enum PartsFilterCreatedByOpOperatorType {
    Any = "any",
    NotAny = "not_any"
}
/** parts-filter-enhancement */
export interface PartsFilterEnhancement {
    /**
     * Filters for enhancement by its accounts.
     * @example ["ACC-12345"]
     */
    accounts?: string[];
    accounts_op?: PartsFilterEnhancementAccountsOpOperatorType;
    actual_close_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    actual_close_date_v2?: DateFilter;
    actual_start_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    actual_start_date_v2?: DateFilter;
    /**
     * Filters for enhancement by its opportunities.
     * @example ["OPP-12345"]
     */
    opportunities?: string[];
    opportunities_op?: PartsFilterEnhancementOpportunitiesOpOperatorType;
    /** Filters for enhancement by its rev score tier. */
    rev_score_tier?: EnhancementRevScoreTier[];
    rev_score_tier_op?: PartsFilterEnhancementRevScoreTierOpOperatorType;
    /** List of IDs of the custom stages which will be used for filtering. */
    stage_v2?: string[];
    /** Filters for part with any of the provided custom states. */
    state_v2?: string[];
    target_close_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    target_close_date_v2?: DateFilter;
    target_start_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    target_start_date_v2?: DateFilter;
    /** Filters for enhancement by its tickets. */
    tickets?: string[];
    tickets_op?: PartsFilterEnhancementTicketsOpOperatorType;
}
export declare enum PartsFilterEnhancementAccountsOpOperatorType {
    All = "all",
    Any = "any",
    Empty = "empty",
    NotAny = "not_any",
    NotEmpty = "not_empty"
}
export declare enum PartsFilterEnhancementOpportunitiesOpOperatorType {
    All = "all",
    Any = "any",
    Empty = "empty",
    NotAny = "not_any",
    NotEmpty = "not_empty"
}
export declare enum PartsFilterEnhancementRevScoreTierOpOperatorType {
    Any = "any",
    Empty = "empty",
    NotAny = "not_any",
    NotEmpty = "not_empty"
}
export declare enum PartsFilterEnhancementTicketsOpOperatorType {
    All = "all",
    Any = "any",
    Empty = "empty",
    NotAny = "not_any",
    NotEmpty = "not_empty"
}
export declare enum PartsFilterOwnedByOpOperatorType {
    All = "all",
    Any = "any",
    NotAny = "not_any"
}
export declare enum PartsFilterTagsOpOperatorType {
    All = "all",
    Any = "any",
    Empty = "empty",
    NotAny = "not_any",
    NotEmpty = "not_empty"
}
/** parts-get-request */
export interface PartsGetRequest {
    /**
     * The ID of the part to retrieve.
     * @example "PROD-12345"
     */
    id: string;
}
/** parts-get-response */
export interface PartsGetResponse {
    part: Part;
}
/** parts-group */
export interface PartsGroup {
    /** Unique key according to which the items are grouped. */
    key: string;
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /** The group of parts. */
    parts: Part[];
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/** parts-group-request */
export interface PartsGroupRequest {
    /** Filters for parts of the provided categories. */
    categories?: PartCategory[];
    /**
     * Filters for parts created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: PartsFilterCreatedByOpOperatorType;
    created_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    created_date_v2?: DateFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** Filters for custom fields. */
    custom_fields?: object;
    enhancement?: PartsFilterEnhancement;
    /** The field to group the parts by. */
    group_by: string;
    /**
     * The maximum number of groups to return. If not set, then the
     * default is '10'.
     * @format int32
     */
    limit?: number;
    /**
     * The maximum number of parts to return for an individual group. If
     * not set, then the default is '50'.
     * @format int32
     */
    limit_per_group?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    modified_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    modified_date_v2?: DateFilter;
    /** Filters for parts of the provided name(s). */
    name?: string[];
    /**
     * Filters for parts owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for parts owned by any of the provided users.
     * @deprecated
     * @example ["DEVU-12345"]
     */
    owned_by_ids?: string[];
    owned_by_op?: PartsFilterOwnedByOpOperatorType;
    /** The filter for specifying parent part. */
    parent_part?: ParentPartFilter;
    /** Comma-separated fields to sort the parts by. */
    sort_by?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for part with any of the provided states. */
    state?: string[];
    /** Filters for subtypes. */
    subtype?: string[];
    /**
     * Filters for parts with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tag_ids?: string[];
    /**
     * Filters for part with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    tags_op?: PartsFilterTagsOpOperatorType;
    /** Filters for parts of the provided type(s). */
    type?: PartType[];
    /**
     * Filters for parts of the provided type(s).
     * @deprecated
     */
    types?: PartType[];
    /**
     * Filters for parts belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
/** parts-group-response */
export interface PartsGroupResponse {
    /** The list of groups. */
    groups: PartsGroup[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/** parts-list-request */
export interface PartsListRequest {
    /** Filters for parts of the provided categories. */
    categories?: PartCategory[];
    /**
     * Filters for parts created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: PartsFilterCreatedByOpOperatorType;
    created_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    created_date_v2?: DateFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** Filters for custom fields. */
    custom_fields?: object;
    enhancement?: PartsFilterEnhancement;
    /**
     * The maximum number of parts to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    modified_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    modified_date_v2?: DateFilter;
    /** Filters for parts of the provided name(s). */
    name?: string[];
    /**
     * Filters for parts owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for parts owned by any of the provided users.
     * @deprecated
     * @example ["DEVU-12345"]
     */
    owned_by_ids?: string[];
    owned_by_op?: PartsFilterOwnedByOpOperatorType;
    /** The filter for specifying parent part. */
    parent_part?: ParentPartFilter;
    /** Fields to sort the parts by and the direction to sort them. */
    sort_by?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for part with any of the provided states. */
    state?: string[];
    /** Filters for subtypes. */
    subtype?: string[];
    /**
     * Filters for parts with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tag_ids?: string[];
    /**
     * Filters for part with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    tags_op?: PartsFilterTagsOpOperatorType;
    /** Filters for parts of the provided type(s). */
    type?: PartType[];
    /**
     * Filters for parts of the provided type(s).
     * @deprecated
     */
    types?: PartType[];
    /**
     * Filters for parts belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
/** parts-list-response */
export interface PartsListResponse {
    /**
     * The cursor that should be used to resume iteration, otherwise if
     * not provided, then iteration has completed.
     * @deprecated
     */
    cursor?: string;
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /** The list of parts. */
    parts: Part[];
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/** parts-mutate-request */
export type PartsMutateRequest = (PartsMutateRequestMerge | PartsMutateRequestPromote) & {
    /**
     * ID of the part to be mutated.
     * @example "PROD-12345"
     */
    id: string;
    type: PartsMutateRequestType;
};
/** parts-mutate-request-merge */
export type PartsMutateRequestMerge = object;
/** parts-mutate-request-promote */
export interface PartsMutateRequestPromote {
    change_type_to: PartType;
    /**
     * Parent ID of new part.
     * @example "PROD-12345"
     */
    parent_id?: string | null;
}
export declare enum PartsMutateRequestType {
    Merge = "merge",
    Promote = "promote"
}
/** parts-mutate-response */
export interface PartsMutateResponse {
    part: Part;
}
/**
 * parts-suggest-request
 * Parts Suggest request.
 */
export interface PartsSuggestRequest {
    /**
     * Maximum number of required suggestions.
     * @format int32
     */
    limit?: number;
    /**
     * Minimum similarity score, Range (0, 1).
     * @format float
     */
    min_score?: number;
    /** The ID of the object to suggest parts for. */
    object: string;
}
/**
 * parts-suggest-response
 * Parts Suggest Response.
 */
export interface PartsSuggestResponse {
    /** The suggested parts. */
    parts: PartSummary[];
}
/** parts-supporters-list-request */
export interface PartsSupportersListRequest {
    /**
     * The part's ID.
     * @example "PROD-12345"
     */
    id: string;
    /**
     * The maximum number of supporters to return. If not set, then the
     * default is '10'.
     * @format int32
     */
    limit?: number;
}
/** parts-supporters-list-response */
export interface PartsSupportersListResponse {
    /** The users that provide support on the part. */
    supporters: UserSummary[];
    /**
     * Total number of supporters on the part.
     * @format int32
     */
    total: number;
}
/** parts-update-request */
export type PartsUpdateRequest = (Empty | PartsUpdateRequestCapability | PartsUpdateRequestCustomPart | PartsUpdateRequestEnhancement | PartsUpdateRequestFeature | PartsUpdateRequestLinkable | PartsUpdateRequestProduct | PartsUpdateRequestRunnable) & {
    artifact_ids?: PartsUpdateRequestArtifactIds;
    artifacts?: PartsUpdateRequestArtifacts;
    /** Custom fields. */
    custom_fields?: object;
    /**
     * The custom schema fragments to use.
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    custom_schema_fragments?: string[];
    /** The updated description of the part. */
    description?: string;
    docs?: PartsUpdateRequestUpdateDocs;
    /**
     * The ID of the part to update.
     * @example "PROD-12345"
     */
    id: string;
    /** The updated name of the part. */
    name?: string;
    owned_by?: PartsUpdateRequestOwnedBy;
    owned_by_ids?: PartsUpdateRequestOwnedByIds;
    /** Updates an object's stage. */
    stage?: StageUpdate;
    tags?: PartsUpdateRequestTags;
    type?: PartType;
};
/** parts-update-request-artifact-ids */
export interface PartsUpdateRequestArtifactIds {
    /**
     * Sets the artifacts to the provided IDs.
     * @example ["ARTIFACT-12345"]
     */
    set?: string[];
}
/** parts-update-request-artifacts */
export interface PartsUpdateRequestArtifacts {
    /**
     * Sets the artifacts to the provided IDs.
     * @example ["ARTIFACT-12345"]
     */
    set?: string[];
}
/** parts-update-request-capability */
export type PartsUpdateRequestCapability = object;
/** parts-update-request-custom-part */
export type PartsUpdateRequestCustomPart = object;
/** parts-update-request-enhancement */
export interface PartsUpdateRequestEnhancement {
    /**
     * Updates the release notes of the enhancement.
     * @maxLength 32768
     */
    release_notes?: string;
    /** Custom stage ID which will be used for updating the enhancement. */
    stage_v2?: string;
    /**
     * Updates the target close date of the enhancement.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    target_close_date?: string;
    /**
     * Updates the target start date of the enhancement. Example Date
     * Format: 2000-11-01T01:01:01Z
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    target_start_date?: string;
}
/** parts-update-request-feature */
export type PartsUpdateRequestFeature = object;
/** parts-update-request-linkable */
export interface PartsUpdateRequestLinkable {
    /** Code Inferred surface area of the linkable. */
    code_inferred_surface_area?: string[];
    /** Repo Path of the linkable. */
    code_repo_paths?: string;
    /** Repo url of the linkable. */
    code_repo_url?: string;
}
/** parts-update-request-owned-by */
export interface PartsUpdateRequestOwnedBy {
    /**
     * Sets the owner IDs to the provided user IDs. This must not be
     * empty.
     * @example ["DEVU-12345"]
     */
    set?: string[];
}
/** parts-update-request-owned-by-ids */
export interface PartsUpdateRequestOwnedByIds {
    /**
     * Sets the owner IDs to the provided user IDs. This must not be
     * empty.
     * @example ["DEVU-12345"]
     */
    set?: string[];
}
/** parts-update-request-product */
export type PartsUpdateRequestProduct = object;
/** parts-update-request-runnable */
export interface PartsUpdateRequestRunnable {
    /** Code Inferred surface area of the runnable. */
    code_inferred_surface_area?: string[];
    /** Repo Path of the runnable. */
    code_repo_paths?: string;
    /** Repo url of the runnable. */
    code_repo_url?: string;
}
/** parts-update-request-tags */
export interface PartsUpdateRequestTags {
    /** Sets the tags to the provided tags. */
    set?: SetTagWithValue[];
}
/** parts-update-request-update-docs */
export interface PartsUpdateRequestUpdateDocs {
    /** Sets the docs to the provided docs. */
    set?: DocField[];
}
/** parts-update-response */
export interface PartsUpdateResponse {
    part: Part;
}
/**
 * parts-vista-group-item
 * Represents a nested parts vista group object.
 */
export type PartsVistaGroupItem = VistaGroupBase & (PartsVistaGroupItemCuratedGroup | PartsVistaGroupItemDynamicGroup) & {
    /** Type of parts vista group item. */
    type: PartsVistaGroupItemType;
};
/** parts-vista-group-item-curated-group */
export interface PartsVistaGroupItemCuratedGroup {
    /** Static list of part items. */
    items?: PartSummary[];
}
/** parts-vista-group-item-dynamic-group */
export interface PartsVistaGroupItemDynamicGroup {
    filter: PartsVistaGroupItemDynamicGroupFilter;
    /** Static list of part items. */
    items?: PartSummary[];
}
/** parts-vista-group-item-dynamic-group-filter */
export interface PartsVistaGroupItemDynamicGroupFilter {
    /** Filters for parts of the provided categories. */
    categories?: PartCategory[];
    /**
     * Filters for parts created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: PartsFilterCreatedByOpOperatorType;
    created_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    created_date_v2?: DateFilter;
    /** Filters for custom fields. */
    custom_fields?: object;
    enhancement?: PartsFilterEnhancement;
    /** The field to group the collection by. */
    group_by?: string;
    modified_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    modified_date_v2?: DateFilter;
    /** Filters for parts of the provided name(s). */
    name?: string[];
    /**
     * Filters for parts owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for parts owned by any of the provided users.
     * @deprecated
     * @example ["DEVU-12345"]
     */
    owned_by_ids?: string[];
    owned_by_op?: PartsFilterOwnedByOpOperatorType;
    /** The filter for specifying parent part. */
    parent_part?: ParentPartFilter;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for part with any of the provided states. */
    state?: string[];
    /** Filters for subtypes. */
    subtype?: string[];
    /**
     * Filters for parts with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tag_ids?: string[];
    /**
     * Filters for part with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    tags_op?: PartsFilterTagsOpOperatorType;
    /** Filters for parts of the provided type(s). */
    type?: PartType[];
    /**
     * Filters for parts of the provided type(s).
     * @deprecated
     */
    types?: PartType[];
    /**
     * Filters for parts belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
/** Type of parts vista group item. */
export declare enum PartsVistaGroupItemType {
    Curated = "curated",
    Dynamic = "dynamic"
}
/** payment-intents-update-request */
export interface PaymentIntentsUpdateRequest {
    /** The payment intent id. */
    payment_intent_id: string;
    /**
     * Flag to determine whether to save the methodon successful payment
     * on this payment intent.
     */
    setup_future_usage: boolean;
}
/** payment-method */
export type PaymentMethod = (PaymentMethodBankAccount | PaymentMethodCard) & {
    type: PaymentMethodType;
};
/** payment-method-bank-account */
export type PaymentMethodBankAccount = PaymentMethodBase & {
    /** Account holder type. */
    account_holder_type: PaymentMethodBankAccountAccountHolderType;
    /** Account type. */
    account_type: PaymentMethodBankAccountAccountType;
    /** Bank name. */
    bank_name: string;
    /** Routing number of the bank account. */
    routing_number: string;
};
/** Account holder type. */
export declare enum PaymentMethodBankAccountAccountHolderType {
    Company = "company",
    Individual = "individual"
}
/** Account type. */
export declare enum PaymentMethodBankAccountAccountType {
    Checking = "checking",
    Savings = "savings"
}
/** payment-method-bank-account-summary */
export type PaymentMethodBankAccountSummary = PaymentMethodBaseSummary;
/** payment-method-base */
export type PaymentMethodBase = AtomBase & {
    account: AccountSummary;
    /** Display number. */
    display_number: string;
    /**
     * Set to true if it is a default payment method for the customer,
     * else false.
     */
    is_default: boolean;
};
/** payment-method-base-summary */
export type PaymentMethodBaseSummary = AtomBaseSummary;
/** payment-method-card */
export type PaymentMethodCard = PaymentMethodBase & {
    /** Brand name the card belongs to. */
    brand: string;
    /**
     * Month on which the card expires.
     * @format int32
     */
    exp_month: number;
    /**
     * Year on which card expires.
     * @format int32
     */
    exp_year: number;
    /** Fund type of the card. */
    fund_type: PaymentMethodCardFundType;
};
/** Fund type of the card. */
export declare enum PaymentMethodCardFundType {
    Credit = "credit",
    Debit = "debit",
    Prepaid = "prepaid"
}
/** payment-method-card-summary */
export type PaymentMethodCardSummary = PaymentMethodBaseSummary;
export declare enum PaymentMethodType {
    PaymentMethodBankAccount = "payment_method_bank_account",
    PaymentMethodCard = "payment_method_card"
}
/** payment-methods-delete-request */
export interface PaymentMethodsDeleteRequest {
    /** The payment method ID which is to be deleted from customer config. */
    id: string;
}
/** payment-methods-get-request */
export interface PaymentMethodsGetRequest {
    /** The payment method's DON */
    id: string;
}
/** payment-methods-get-response */
export interface PaymentMethodsGetResponse {
    payment_method: PaymentMethod;
}
/** payment-methods-list-request */
export interface PaymentMethodsListRequest {
    /**
     * Filter payment methods for account.
     * @example "ACC-12345"
     */
    account_id?: string;
}
/** payment-methods-list-response */
export interface PaymentMethodsListResponse {
    /** List of payment methods. */
    payment_methods: PaymentMethod[];
}
/** payment-methods-set-default-request */
export interface PaymentMethodsSetDefaultRequest {
    /**
     * The payment method ID which is to be set as default for the
     * customer.
     */
    id: string;
}
/** payment-methods-setup-intent-create-request */
export type PaymentMethodsSetupIntentCreateRequest = object;
/** payment-methods-setup-intent-create-response */
export interface PaymentMethodsSetupIntentCreateResponse {
    /** The client key to be used to save the payment method details. */
    client_key: string;
}
/**
 * pdf-generation-template
 * PDF generation templates defined for the DevOrg.
 */
export interface PdfGenerationTemplate {
    artifact_id?: ArtifactSummary;
    /** Name of the PDF generation template. */
    name?: string;
    /** The type of the PDF generation template. */
    type?: PdfGenerationTemplateType;
}
/** The type of the PDF generation template. */
export declare enum PdfGenerationTemplateType {
    Quote = "quote"
}
/**
 * people-insights-group
 * Preferences group for people insights.
 */
export interface PeopleInsightsGroup {
    /** Units of work for the organization. */
    uow?: PeopleInsightsUow[];
}
/**
 * people-insights-uow
 * Preferences for contribution types and their weights (units of work).
 */
export interface PeopleInsightsUow {
    /** Category of the contribution type. */
    category?: PeopleInsightsUowCategory;
    /** Type of contribution. */
    type?: string;
    /**
     * Weight for the contribution type.
     * @format int32
     */
    weight?: number;
}
/** Category of the contribution type. */
export declare enum PeopleInsightsUowCategory {
    Code = "code",
    Communication = "communication",
    Management = "management",
    Miscellaneous = "miscellaneous",
    Review = "review"
}
/** personalized-item */
export interface PersonalizedItem {
    work: WorkSummary;
}
/** personalized-list-request */
export type PersonalizedListRequest = object;
/**
 * personalized-list-response
 * Personalized list response.
 */
export interface PersonalizedListResponse {
    /** List of recently accessesed items by the user. */
    recent_items: PersonalizedItem[];
    /** List of recommended items for the user. */
    recommended_items: PersonalizedItem[];
}
/**
 * phone-number
 * A phone number.
 */
export interface PhoneNumber {
    /** The phone number in e164 format. */
    e164_number?: string;
    /** An optional extension. */
    extension?: string;
}
/**
 * pie-visualization-x-axis
 * The X-axis for a pie visualization.
 */
export interface PieVisualizationXAxis {
    /** The color for an axis. This can be a single color or a gradient. */
    color?: VisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: VisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name: string;
}
/**
 * pie-visualization-y-axis
 * The Y-axis for a pie visualization.
 */
export interface PieVisualizationYAxis {
    /** The color for an axis. This can be a single color or a gradient. */
    color?: VisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: VisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name: string;
}
/**
 * pie-widget-visualization
 * A pie chart visualization configuration. Includes metadata specific to
 * pie charts.
 */
export interface PieWidgetVisualization {
    /** The configuration for the X-axis. */
    x: PieVisualizationXAxis[];
    /** The Y-axis for a pie visualization. */
    y: PieVisualizationYAxis;
}
/**
 * plug-attribute-display-rule
 * An attribute display type object meant to be used by the UI.
 */
export interface PlugAttributeDisplayRule {
    /** Caveats for the role. */
    caveat: Caveat;
    /** The result of the rule as evaluated by the backend. */
    evaluation_result?: boolean;
    /** Target object of the attribute display rule. */
    target: PlugAttributeDisplayRuleTarget;
}
/** Target object of the attribute display rule. */
export declare enum PlugAttributeDisplayRuleTarget {
    Account = "account",
    RevOrg = "rev_org",
    RevUser = "rev_user"
}
/**
 * plug-audience-display-rule
 * An audience display type object meant to be used by the UI.
 */
export interface PlugAudienceDisplayRule {
    /** The result of the rule as evaluated by the backend. */
    evaluation_result?: boolean;
    members: AtomSummary;
}
/**
 * plug-banner-component
 * A plug widget banner component.
 */
export interface PlugBannerComponent {
    cover_image?: ArtifactSummary;
    /** Description to show under the title of the banner. */
    description?: string;
    /** Link to open on clicking the banner. */
    link?: string;
    /** Title of the banner. */
    title: string;
}
/**
 * plug-create-conversation-component
 * A plug widget create conversation component.
 */
export interface PlugCreateConversationComponent {
    /** Description to be shown under the create conversation button. */
    description?: string;
    /** Message to be shown on the top, inside the chat window. */
    greeting_message?: string;
    /** Text to be shown on create conversation button. */
    text: string;
}
/**
 * plug-create-ticket-component
 * A plug widget create ticket component.
 */
export interface PlugCreateTicketComponent {
    /** Text to be shown on create ticket button. */
    text: string;
}
/**
 * plug-display-rule
 * A display rule object meant to be used by the UI.
 */
export interface PlugDisplayRule {
    /** An attribute display type object meant to be used by the UI. */
    attribute?: PlugAttributeDisplayRule;
    /** An audience display type object meant to be used by the UI. */
    audience?: PlugAudienceDisplayRule;
    /** A path url display rule object meant to be used by the UI. */
    path?: PlugPathDisplayRule;
    /** Type of the display rule. */
    type: PlugDisplayRuleType;
    /** A user type display rule object meant to be used by the UI. */
    user_type?: PlugUserTypeDisplayRule;
}
/**
 * plug-display-rule-expression
 * A display rule object meant to be used by the UI.
 */
export interface PlugDisplayRuleExpression {
    /** Value for this display rule. */
    expressions?: PlugDisplayRuleExpression[];
    /** Logical operator to use. */
    operator: PlugDisplayRuleExpressionOperator;
    /** Value for this display rule. */
    rules?: PlugDisplayRule[];
    /** Logical operator to use. */
    type: PlugDisplayRuleExpressionType;
}
/** Logical operator to use. */
export declare enum PlugDisplayRuleExpressionOperator {
    And = "and",
    Or = "or"
}
/** Logical operator to use. */
export declare enum PlugDisplayRuleExpressionType {
    Expression = "expression",
    Rule = "rule"
}
/** Type of the display rule. */
export declare enum PlugDisplayRuleType {
    Attribute = "attribute",
    Audience = "audience",
    Path = "path",
    UserType = "user_type"
}
/**
 * plug-integration-key
 * Integration key for shared_auth between PLuG widget and UserExperior.
 */
export interface PlugIntegrationKey {
    /** Whether the integration key is revoked or not. */
    is_revoked?: boolean;
    /**
     * Integration key for shared auth between PLuG widget and
     * UserExperior.
     */
    key?: string;
    /** Name of the integration key. */
    name?: string;
}
/**
 * plug-observability
 * Plug's observability feature settings.
 */
export interface PlugObservability {
    /** Application ID for starting observability feature in SDK. */
    app_id?: string;
    /** Whether the observability feature is enabled or not. */
    enabled: boolean;
}
/**
 * plug-path-display-rule
 * A path url display rule object meant to be used by the UI.
 */
export interface PlugPathDisplayRule {
    /** Comparison operator for this display rule. */
    operator: PlugPathDisplayRuleOperator;
    /** Value which will be used for comparison for the display rule. */
    value: string;
}
/** Comparison operator for this display rule. */
export declare enum PlugPathDisplayRuleOperator {
    Contains = "contains",
    Eq = "eq",
    Neq = "neq",
    NotContains = "not_contains"
}
/**
 * plug-recent-conversations-component
 * A plug widget recent conversations component.
 */
export interface PlugRecentConversationsComponent {
    /**
     * Number of conversations to show.
     * @format int32
     */
    num_conversations?: number;
}
/**
 * plug-recent-tickets-component
 * A plug widget recent tickets component.
 */
export interface PlugRecentTicketsComponent {
    /**
     * Number of tickets to show.
     * @format int32
     */
    num_tickets?: number;
}
/**
 * plug-search-component
 * A plug widget search component.
 */
export interface PlugSearchComponent {
    /** Plug's articles feature settings. */
    articles?: PlugSettingsSearchComponentArticles;
    /** Placeholder text to show in the search bar. */
    placeholder: string;
    /** Plug's turing feature settings. */
    turing?: PlugSettingsSearchComponentTuring;
}
/**
 * plug-session-recording
 * Plug's session recording feature settings.
 */
export interface PlugSessionRecording {
    /** Whether the masking in session recording is enabled or not. */
    enable_masking: boolean;
    /** Whether the session recording feature is enabled or not. */
    enabled: boolean;
    /** A display rule object meant to be used by the UI. */
    enabling_expression?: PlugDisplayRuleExpression;
}
/** plug-setting */
export type PlugSetting = AtomBase & {
    aat_keyring_id?: KeyringSummary;
    /** If set to true client will not load the plug chat window. */
    disable_plug_chat_window?: boolean;
    /** If set to true, the `powered by devrev` footer will be visible. */
    enable_powered_by_devrev?: boolean;
    home_logo?: ArtifactSummary;
    /** Holds a list of all integration keys. */
    integration_keys?: PlugIntegrationKey[];
    /** Alignment of the launcher. */
    launcher_alignment: PlugSettingLauncherAlignment;
    launcher_logo?: ArtifactSummary;
    /** Spacing between the launcher and the bottom edge of the screen. */
    launcher_spacing_bottom: string;
    /**
     * Spacing between the launcher and the side (as per alignment) edge
     * of the screen.
     */
    launcher_spacing_side: string;
    /** Language used in the Plug UI. */
    locale?: PlugSettingLocale;
    /** An identifying name for the plug setting object. */
    name: string;
    /** Indicates whether sound is enabled when a new message is received. */
    new_message_sound_enabled?: boolean;
    /** Plug's observability feature settings. */
    observability?: PlugObservability;
    /** Proxy domain name to use for the Plug UI server. */
    proxy_domain?: string;
    /** Plug's session recording feature settings. */
    session_recording?: PlugSessionRecording;
    /** Current status of the plug setting object. */
    status: PlugSettingStatus;
    /** Holds a list of all plug widget components. */
    web_components?: PlugWebComponent[];
    /** Holds a list of all plug widget tabs. */
    web_tabs?: PlugWebTab[];
    /** Holds a list of all plug widget themes. */
    web_themes?: PlugWebTheme[];
    /** A display rule object meant to be used by the UI. */
    widget_display_expression?: PlugDisplayRuleExpression;
};
/**
 * plug-setting-display-rule
 * A display rule object meant to be used by the UI rule engine.
 */
export type PlugSettingDisplayRule = (PlugAttributeDisplayRule | PlugAudienceDisplayRule | PlugPathDisplayRule | PlugUserTypeDisplayRule) & {
    type: PlugSettingDisplayRuleType;
};
/** plug-setting-display-rule-expression */
export type PlugSettingDisplayRuleExpression = (PlugSettingDisplayRuleExpressionRepeatedPlugSettingDisplayRule | PlugSettingDisplayRuleExpressionRepeatedPlugSettingDisplayRuleExpression) & {
    /** Logical operator to use. */
    operator: PlugDisplayRuleExpressionOperator;
    type: PlugSettingDisplayRuleExpressionType;
};
/** plug-setting-display-rule-expression-repeated-plug-setting-display-rule */
export interface PlugSettingDisplayRuleExpressionRepeatedPlugSettingDisplayRule {
    /** Display rules. */
    rules: PlugSettingDisplayRule[];
}
/** plug-setting-display-rule-expression-repeated-plug-setting-display-rule-expression */
export interface PlugSettingDisplayRuleExpressionRepeatedPlugSettingDisplayRuleExpression {
    /** Display rule expressions. */
    expressions: PlugSettingDisplayRuleExpression[];
}
export declare enum PlugSettingDisplayRuleExpressionType {
    Expressions = "expressions",
    Rules = "rules"
}
export declare enum PlugSettingDisplayRuleType {
    Attribute = "attribute",
    Audience = "audience",
    Path = "path",
    UserType = "user_type"
}
/** plug-setting-g-w */
export interface PlugSettingGW {
    /** Indicates if the chat window for plug is disabled */
    disable_plug_chat_window?: boolean;
    /** Indicates if the 'powered by devrev' footer is enabled */
    enable_powered_by_devrev?: boolean;
    /** Globally unique object ID. */
    id: string;
    /** Language used in the Plug UI. */
    locale?: PlugSettingLocale;
    /** An identifying name for the plug setting object. */
    name: string;
    /** Plug's observability feature settings. */
    observability?: PlugObservability;
    /** Proxy domain name to use for the Plug server. */
    proxy_domain?: string;
    /** Current status of the plug setting object. */
    status: PlugSettingStatus;
    web: PlugSettingGWWeb;
    widget_display_expression?: PlugSettingDisplayRuleExpression;
}
/** plug-setting-g-w-web */
export interface PlugSettingGWWeb {
    /** Plug widget web components. */
    components: PlugSettingGWWebPlugSettingWebComponent[];
    /** Session recording settings */
    session_recording?: PlugSettingSessionRecording;
    styling: PlugSettingGWWebStyling;
    /** Plug widget web tabs. */
    tabs: PlugSettingGWWebPlugSettingWebTab[];
}
/** plug-setting-g-w-web-plug-setting-web-component */
export type PlugSettingGWWebPlugSettingWebComponent = (PlugBannerComponent | PlugCreateConversationComponent | PlugCreateTicketComponent | PlugRecentConversationsComponent | PlugRecentTicketsComponent | PlugSearchComponent | PlugSnapComponent | PlugWelcomeComponent) & {
    display_expression?: PlugSettingDisplayRuleExpression;
    /** Whether the component is enabled or not. */
    enabled: boolean;
    /** An identifying UUID for the component. */
    id: string;
    /**
     * Order of the component.
     * @format int64
     */
    order: number;
    /** Type of the component. */
    type: PlugWebComponentType;
};
/** plug-setting-g-w-web-plug-setting-web-tab */
export interface PlugSettingGWWebPlugSettingWebTab {
    display_expression?: PlugSettingDisplayRuleExpression;
    /** Whether the tab is enabled or not. */
    enabled: boolean;
    /** An identifying UUID for the tab. */
    id: string;
    /**
     * Order of the tab.
     * @format int64
     */
    order: number;
    type: PlugSettingGWWebPlugSettingWebTabTypeValue;
}
export declare enum PlugSettingGWWebPlugSettingWebTabTypeValue {
    Conversations = "conversations",
    Help = "help",
    Home = "home",
    News = "news",
    Tasks = "tasks",
    Tickets = "tickets"
}
/** plug-setting-g-w-web-styling */
export interface PlugSettingGWWebStyling {
    home: PlugSettingGWWebStylingHome;
    launcher: PlugSettingGWWebStylingLauncher;
    /** Indicates if sound is enabled when a new message is received */
    new_message_sound_enabled?: boolean;
    /** Plug widget web themes. */
    themes: PlugSettingGWWebStylingPlugSettingWebTheme[];
}
/** plug-setting-g-w-web-styling-home */
export interface PlugSettingGWWebStylingHome {
    logo?: ArtifactSummary;
}
/** plug-setting-g-w-web-styling-launcher */
export interface PlugSettingGWWebStylingLauncher {
    /** Alignment of the launcher. */
    alignment: PlugSettingLauncherAlignment;
    logo?: ArtifactSummary;
    spacing: PlugSettingGWWebStylingLauncherSpacing;
}
/** plug-setting-g-w-web-styling-launcher-spacing */
export interface PlugSettingGWWebStylingLauncherSpacing {
    /** Spacing between the launcher and the bottom edge of the screen. */
    bottom: string;
    /**
     * Spacing between the launcher and the side (as per alignment) edge
     * of the screen.
     */
    side: string;
}
/**
 * plug-setting-g-w-web-styling-plug-setting-web-theme
 * A plug widget theme.
 */
export type PlugSettingGWWebStylingPlugSettingWebTheme = (PlugSettingGWWebStylingPlugSettingWebThemeCustomTheme | PlugSettingGWWebStylingPlugSettingWebThemeNativeTheme) & {
    /** Accent color of the plug widget. */
    accent_color?: string;
    /** Whether the theme is enabled or not. */
    enabled: boolean;
    /** A UUID to identify the theme. */
    id: string;
    type: PlugSettingGWWebStylingPlugSettingWebThemeType;
};
/** plug-setting-g-w-web-styling-plug-setting-web-theme-custom-theme */
export interface PlugSettingGWWebStylingPlugSettingWebThemeCustomTheme {
    /** Custom theme value. */
    value: object;
}
/** plug-setting-g-w-web-styling-plug-setting-web-theme-native-theme */
export interface PlugSettingGWWebStylingPlugSettingWebThemeNativeTheme {
    /** Native theme, only meant to be set if 'type' is 'native'. */
    value: PlugWebThemeNativeTheme;
}
export declare enum PlugSettingGWWebStylingPlugSettingWebThemeType {
    CustomTheme = "custom_theme",
    NativeTheme = "native_theme"
}
/** Alignment of the launcher. */
export declare enum PlugSettingLauncherAlignment {
    Left = "left",
    Right = "right"
}
/** Language used in the Plug UI. */
export declare enum PlugSettingLocale {
    EnUs = "en_us",
    EsAr = "es_ar",
    FrFr = "fr_fr",
    PlPl = "pl_pl"
}
/**
 * plug-setting-session-recording
 * Session recording settings
 */
export interface PlugSettingSessionRecording {
    condition?: PlugSettingDisplayRuleExpression;
    /** Whether the masking in session recording is enabled or not. */
    enable_masking?: boolean;
    /** Whether the session recording is enabled or not. */
    enabled: boolean;
}
/** Current status of the plug setting object. */
export declare enum PlugSettingStatus {
    Draft = "draft",
    Published = "published"
}
/** plug-setting-summary */
export type PlugSettingSummary = AtomBaseSummary;
/** plug-settings-create-request */
export interface PlugSettingsCreateRequest {
    /** Indicates if the chat window for plug is disabled */
    disable_plug_chat_window?: boolean;
    /** Indicates if the 'powered by devrev' footer is enabled */
    enable_powered_by_devrev?: boolean;
    /** Language used in the Plug UI. */
    locale?: PlugSettingLocale;
    /** An identifying name for the plug setting object. */
    name: string;
    /** Plug's observability feature settings. */
    observability?: PlugObservability;
    /** Proxy domain name to use for the Plug server. */
    proxy_domain?: string;
    /** Current status of the plug setting object. */
    status: PlugSettingStatus;
    web: PlugSettingsCreateRequestWeb;
    widget_display_expression?: PlugSettingDisplayRuleExpression;
}
/** plug-settings-create-request-web */
export interface PlugSettingsCreateRequestWeb {
    /** Plug widget web components. */
    components: PlugSettingsCreateRequestWebCreatePlugSettingWebComponent[];
    /** Session recording settings */
    session_recording?: PlugSettingSessionRecording;
    styling: PlugSettingsCreateRequestWebStyling;
    /** Plug widget web tabs. */
    tabs: PlugSettingsCreateRequestWebCreatePlugSettingWebTab[];
}
/** plug-settings-create-request-web-create-plug-setting-web-component */
export type PlugSettingsCreateRequestWebCreatePlugSettingWebComponent = (PlugSettingsCreateRequestWebCreatePlugSettingWebComponentCreatePlugBannerComponent | PlugSettingsCreateRequestWebCreatePlugSettingWebComponentCreatePlugCreateConversationComponent | PlugSettingsCreateRequestWebCreatePlugSettingWebComponentCreatePlugCreateTicketComponent | PlugSettingsCreateRequestWebCreatePlugSettingWebComponentCreatePlugRecentConversationsComponent | PlugSettingsCreateRequestWebCreatePlugSettingWebComponentCreatePlugRecentTicketsComponent | PlugSettingsCreateRequestWebCreatePlugSettingWebComponentCreatePlugSearchComponent | PlugSettingsCreateRequestWebCreatePlugSettingWebComponentCreatePlugSnapComponent | PlugSettingsCreateRequestWebCreatePlugSettingWebComponentCreatePlugWelcomeComponent) & {
    display_expression?: PlugSettingDisplayRuleExpression;
    /** Whether the component is enabled or not. */
    enabled: boolean;
    /**
     * Order of the component.
     * @format int64
     */
    order: number;
    /** Type of the component. */
    type: PlugWebComponentType;
};
/**
 * plug-settings-create-request-web-create-plug-setting-web-component-create-plug-banner-component
 * A plug widget banner component.
 */
export interface PlugSettingsCreateRequestWebCreatePlugSettingWebComponentCreatePlugBannerComponent {
    /**
     * Image to be shown on the banner.
     * @example "ARTIFACT-12345"
     */
    cover_image?: string;
    /** Description to show under the title of the banner. */
    description?: string;
    /** Link to open on clicking the banner. */
    link?: string;
    /** Title of the banner. */
    title: string;
}
/**
 * plug-settings-create-request-web-create-plug-setting-web-component-create-plug-create-conversation-component
 * A plug widget create conversation component.
 */
export interface PlugSettingsCreateRequestWebCreatePlugSettingWebComponentCreatePlugCreateConversationComponent {
    /** Description to be shown under the create conversation button. */
    description: string;
    /** Greeting text to be shown inside the chat window. */
    greeting_message?: string;
    /** Text to be shown on create conversation button. */
    text: string;
}
/**
 * plug-settings-create-request-web-create-plug-setting-web-component-create-plug-create-ticket-component
 * A plug widget create ticket component.
 */
export interface PlugSettingsCreateRequestWebCreatePlugSettingWebComponentCreatePlugCreateTicketComponent {
    /** Text to be shown on create ticket button. */
    text: string;
}
/**
 * plug-settings-create-request-web-create-plug-setting-web-component-create-plug-recent-conversations-component
 * A plug widget recent conversations component.
 */
export interface PlugSettingsCreateRequestWebCreatePlugSettingWebComponentCreatePlugRecentConversationsComponent {
    /**
     * Number of conversations to show.
     * @format int32
     */
    num_conversations?: number;
}
/**
 * plug-settings-create-request-web-create-plug-setting-web-component-create-plug-recent-tickets-component
 * A plug widget recent tickets component.
 */
export interface PlugSettingsCreateRequestWebCreatePlugSettingWebComponentCreatePlugRecentTicketsComponent {
    /**
     * Number of tickets to show.
     * @format int32
     */
    num_tickets?: number;
}
/**
 * plug-settings-create-request-web-create-plug-setting-web-component-create-plug-search-component
 * A plug widget search component.
 */
export interface PlugSettingsCreateRequestWebCreatePlugSettingWebComponentCreatePlugSearchComponent {
    /** Plug's articles feature settings. */
    articles: PlugSettingsSearchComponentArticles;
    /** Placeholder text to show in the search bar. */
    placeholder: string;
    /** Plug's turing feature settings. */
    turing: PlugSettingsSearchComponentTuring;
}
/**
 * plug-settings-create-request-web-create-plug-setting-web-component-create-plug-snap-component
 * A plug widget snap component.
 */
export interface PlugSettingsCreateRequestWebCreatePlugSettingWebComponentCreatePlugSnapComponent {
    /** DON of the installed snap component. */
    snap_component_id: string;
}
/**
 * plug-settings-create-request-web-create-plug-setting-web-component-create-plug-welcome-component
 * A plug widget welcome component.
 */
export interface PlugSettingsCreateRequestWebCreatePlugSettingWebComponentCreatePlugWelcomeComponent {
    /** Placeholder greeting text to show. */
    greeting: string;
}
/** plug-settings-create-request-web-create-plug-setting-web-tab */
export interface PlugSettingsCreateRequestWebCreatePlugSettingWebTab {
    display_expression?: PlugSettingDisplayRuleExpression;
    /** Whether the tab is enabled or not. */
    enabled: boolean;
    /**
     * Order of the tab.
     * @format int64
     */
    order: number;
    type: PlugSettingGWWebPlugSettingWebTabTypeValue;
}
/** plug-settings-create-request-web-styling */
export interface PlugSettingsCreateRequestWebStyling {
    home: PlugSettingsCreateRequestWebStylingHome;
    launcher: PlugSettingsCreateRequestWebStylingLauncher;
    /** Indicates if sound is enabled when a new message is received */
    new_message_sound_enabled?: boolean;
    /** Plug widget web themes. */
    themes: PlugSettingsCreateRequestWebStylingPlugSettingWebTheme[];
}
/** plug-settings-create-request-web-styling-home */
export interface PlugSettingsCreateRequestWebStylingHome {
    /**
     * Image to be shown on the top of the home page.
     * @example "ARTIFACT-12345"
     */
    logo?: string;
}
/** plug-settings-create-request-web-styling-launcher */
export interface PlugSettingsCreateRequestWebStylingLauncher {
    /** Alignment of the launcher. */
    alignment: PlugSettingLauncherAlignment;
    /**
     * Plug widget's launcher icon.
     * @example "ARTIFACT-12345"
     */
    logo?: string;
    spacing: PlugSettingsCreateRequestWebStylingLauncherSpacing;
}
/** plug-settings-create-request-web-styling-launcher-spacing */
export interface PlugSettingsCreateRequestWebStylingLauncherSpacing {
    /** Spacing between the launcher and the bottom edge of the screen. */
    bottom: string;
    /**
     * Spacing between the launcher and the side (as per alignment) edge
     * of the screen.
     */
    side: string;
}
/**
 * plug-settings-create-request-web-styling-plug-setting-web-theme
 * A plug widget theme.
 */
export type PlugSettingsCreateRequestWebStylingPlugSettingWebTheme = (PlugSettingsCreateRequestWebStylingPlugSettingWebThemeCustomTheme | PlugSettingsCreateRequestWebStylingPlugSettingWebThemeNativeTheme) & {
    /** Accent color of the plug widget. */
    accent_color?: string;
    /** Whether the theme is enabled or not. */
    enabled: boolean;
    type: PlugSettingsCreateRequestWebStylingPlugSettingWebThemeType;
};
/** plug-settings-create-request-web-styling-plug-setting-web-theme-custom-theme */
export interface PlugSettingsCreateRequestWebStylingPlugSettingWebThemeCustomTheme {
    /** Custom theme value. */
    value: object;
}
/** plug-settings-create-request-web-styling-plug-setting-web-theme-native-theme */
export interface PlugSettingsCreateRequestWebStylingPlugSettingWebThemeNativeTheme {
    /** Native theme, only meant to be set if 'type' is 'native'. */
    value: PlugWebThemeNativeTheme;
}
export declare enum PlugSettingsCreateRequestWebStylingPlugSettingWebThemeType {
    CustomTheme = "custom_theme",
    NativeTheme = "native_theme"
}
/** plug-settings-create-response */
export interface PlugSettingsCreateResponse {
    setting: PlugSettingGW;
}
/** plug-settings-default-create-request */
export type PlugSettingsDefaultCreateRequest = object;
/** plug-settings-default-create-response */
export interface PlugSettingsDefaultCreateResponse {
    setting: PlugSettingGW;
}
/** plug-settings-delete-request */
export interface PlugSettingsDeleteRequest {
    /** ID of the plug setting object which is to be deleted. */
    id: string;
}
/** plug-settings-delete-response */
export type PlugSettingsDeleteResponse = object;
/** plug-settings-get-request */
export interface PlugSettingsGetRequest {
    /** The plug settings object ID. */
    id: string;
}
/** plug-settings-get-response */
export interface PlugSettingsGetResponse {
    setting: PlugSettingGW;
}
/** plug-settings-list-request */
export interface PlugSettingsListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of plug setting objects to return. The default
     * is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /**
     * Fields to sort the plug settings object by and the direction to
     * sort them.
     */
    sort_by?: string[];
}
/** plug-settings-list-response */
export interface PlugSettingsListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The list of requested plug setting objects. */
    settings: PlugSettingGW[];
}
/**
 * plug-settings-search-component-articles
 * Plug's articles feature settings.
 */
export interface PlugSettingsSearchComponentArticles {
    /** Whether the articles are shown in an iframe or not. */
    view_in_iframe?: boolean;
}
/**
 * plug-settings-search-component-turing
 * Plug's turing feature settings.
 */
export interface PlugSettingsSearchComponentTuring {
    /** Whether the turing answers feature is enabled or not. */
    turing_answers_enabled?: boolean;
}
/** plug-settings-update-request */
export interface PlugSettingsUpdateRequest {
    /** Indicates if the chat window for plug is disabled */
    disable_plug_chat_window?: boolean;
    /** Indicates if the 'powered by devrev' footer is enabled */
    enable_powered_by_devrev?: boolean;
    /** The plug setting object's ID. */
    id: string;
    /** Language used in the Plug UI. */
    locale?: PlugSettingLocale;
    /** An identifying name for the plug setting object. */
    name?: string;
    /** Plug's observability feature settings. */
    observability?: PlugObservability;
    /** Proxy domain name to use for the Plug server. */
    proxy_domain?: string;
    /** Current status of the plug setting object. */
    status?: PlugSettingStatus;
    web?: PlugSettingsUpdateRequestWeb;
    widget_display_expression?: PlugSettingDisplayRuleExpression;
}
/** plug-settings-update-request-web */
export interface PlugSettingsUpdateRequestWeb {
    components?: PlugSettingsUpdateRequestWebUpdatePlugSettingWebComponents;
    /** Session recording settings */
    session_recording?: PlugSettingSessionRecording;
    styling?: PlugSettingsUpdateRequestWebStyling;
    tabs?: PlugSettingsUpdateRequestWebUpdatePlugSettingWebTabs;
}
/** plug-settings-update-request-web-styling */
export interface PlugSettingsUpdateRequestWebStyling {
    home?: PlugSettingsUpdateRequestWebStylingHome;
    launcher?: PlugSettingsUpdateRequestWebStylingLauncher;
    /** Indicates if sound is enabled when a new message is received */
    new_message_sound_enabled?: boolean;
    themes?: PlugSettingsUpdateRequestWebStylingUpdatePlugSettingWebThemes;
}
/** plug-settings-update-request-web-styling-home */
export interface PlugSettingsUpdateRequestWebStylingHome {
    /**
     * Image to be shown on the top of the home page.
     * @example "ARTIFACT-12345"
     */
    logo?: string;
}
/** plug-settings-update-request-web-styling-launcher */
export interface PlugSettingsUpdateRequestWebStylingLauncher {
    /** Alignment of the launcher. */
    alignment?: PlugSettingLauncherAlignment;
    /**
     * Plug widget's launcher icon.
     * @example "ARTIFACT-12345"
     */
    logo?: string;
    spacing?: PlugSettingsUpdateRequestWebStylingLauncherSpacing;
}
/** plug-settings-update-request-web-styling-launcher-spacing */
export interface PlugSettingsUpdateRequestWebStylingLauncherSpacing {
    /** Spacing between the launcher and the bottom edge of the screen. */
    bottom?: string;
    /**
     * Spacing between the launcher and the side (as per alignment) edge
     * of the screen.
     */
    side?: string;
}
/**
 * plug-settings-update-request-web-styling-update-plug-setting-web-theme
 * A plug widget theme.
 */
export type PlugSettingsUpdateRequestWebStylingUpdatePlugSettingWebTheme = (PlugSettingsUpdateRequestWebStylingUpdatePlugSettingWebThemeCustomTheme | PlugSettingsUpdateRequestWebStylingUpdatePlugSettingWebThemeNativeTheme) & {
    /** Accent color of the plug widget. */
    accent_color?: string;
    /** Whether the theme is enabled or not. */
    enabled?: boolean;
    /** Identifying ID for the theme. */
    id: string;
    type: PlugSettingsUpdateRequestWebStylingUpdatePlugSettingWebThemeType;
};
/** plug-settings-update-request-web-styling-update-plug-setting-web-theme-custom-theme */
export interface PlugSettingsUpdateRequestWebStylingUpdatePlugSettingWebThemeCustomTheme {
    /** Custom theme value. */
    value?: object;
}
/** plug-settings-update-request-web-styling-update-plug-setting-web-theme-native-theme */
export interface PlugSettingsUpdateRequestWebStylingUpdatePlugSettingWebThemeNativeTheme {
    /** Native theme, only meant to be set if 'type' is 'native'. */
    value?: PlugWebThemeNativeTheme;
}
export declare enum PlugSettingsUpdateRequestWebStylingUpdatePlugSettingWebThemeType {
    CustomTheme = "custom_theme",
    NativeTheme = "native_theme"
}
/** plug-settings-update-request-web-styling-update-plug-setting-web-themes */
export interface PlugSettingsUpdateRequestWebStylingUpdatePlugSettingWebThemes {
    /**
     * Adds the provided themes to the existing list of themes.This is
     * mutually exclusive with `set`.
     */
    add?: PlugSettingsCreateRequestWebStylingPlugSettingWebTheme[];
    /**
     * Removes the provided theme ids from the list of themes.This is
     * mututally exclusive with `set`.
     */
    remove?: string[];
    /** Sets the field to the provided themes. */
    set?: PlugSettingsCreateRequestWebStylingPlugSettingWebTheme[];
    /**
     * Updates the provided themes with their updated values.This is
     * mutually exclusive with `set`.
     */
    update?: PlugSettingsUpdateRequestWebStylingUpdatePlugSettingWebTheme[];
}
/** plug-settings-update-request-web-update-plug-setting-web-component */
export type PlugSettingsUpdateRequestWebUpdatePlugSettingWebComponent = (PlugSettingsUpdateRequestWebUpdatePlugSettingWebComponentUpdatePlugBannerComponent | PlugSettingsUpdateRequestWebUpdatePlugSettingWebComponentUpdatePlugCreateConversationComponent | PlugSettingsUpdateRequestWebUpdatePlugSettingWebComponentUpdatePlugCreateTicketComponent | PlugSettingsUpdateRequestWebUpdatePlugSettingWebComponentUpdatePlugRecentConversationsComponent | PlugSettingsUpdateRequestWebUpdatePlugSettingWebComponentUpdatePlugRecentTicketsComponent | PlugSettingsUpdateRequestWebUpdatePlugSettingWebComponentUpdatePlugSearchComponent | PlugSettingsUpdateRequestWebUpdatePlugSettingWebComponentUpdatePlugSnapComponent | PlugSettingsUpdateRequestWebUpdatePlugSettingWebComponentUpdatePlugWelcomeComponent) & {
    display_expression?: PlugSettingDisplayRuleExpression;
    /** Whether the component is enabled or not. */
    enabled?: boolean;
    /** Identifying ID for the component. */
    id: string;
    /**
     * Order of the component.
     * @format int64
     */
    order?: number;
    /** Type of the component. */
    type: PlugWebComponentType;
};
/**
 * plug-settings-update-request-web-update-plug-setting-web-component-update-plug-banner-component
 * A plug widget banner component.
 */
export interface PlugSettingsUpdateRequestWebUpdatePlugSettingWebComponentUpdatePlugBannerComponent {
    /**
     * Image to be shown on the banner.
     * @example "ARTIFACT-12345"
     */
    cover_image?: string;
    /** Description to show under the title of the banner. */
    description?: string;
    /** Link to open on clicking the banner. */
    link?: string;
    /** Title of the banner. */
    title?: string;
}
/**
 * plug-settings-update-request-web-update-plug-setting-web-component-update-plug-create-conversation-component
 * A plug widget create conversation component.
 */
export interface PlugSettingsUpdateRequestWebUpdatePlugSettingWebComponentUpdatePlugCreateConversationComponent {
    /** Description to be shown under the create conversation button. */
    description?: string;
    /** Greeting text to be shown inside the chat window. */
    greeting_message?: string;
    /** Text to be shown on create conversation button. */
    text?: string;
}
/**
 * plug-settings-update-request-web-update-plug-setting-web-component-update-plug-create-ticket-component
 * A plug widget create ticket component.
 */
export interface PlugSettingsUpdateRequestWebUpdatePlugSettingWebComponentUpdatePlugCreateTicketComponent {
    /** Text to be shown on create ticket button. */
    text?: string;
}
/**
 * plug-settings-update-request-web-update-plug-setting-web-component-update-plug-recent-conversations-component
 * A plug widget recent conversations component.
 */
export interface PlugSettingsUpdateRequestWebUpdatePlugSettingWebComponentUpdatePlugRecentConversationsComponent {
    /**
     * Number of conversations to show.
     * @format int32
     */
    num_conversations?: number;
}
/**
 * plug-settings-update-request-web-update-plug-setting-web-component-update-plug-recent-tickets-component
 * A plug widget recent tickets component.
 */
export interface PlugSettingsUpdateRequestWebUpdatePlugSettingWebComponentUpdatePlugRecentTicketsComponent {
    /**
     * Number of tickets to show.
     * @format int32
     */
    num_tickets?: number;
}
/**
 * plug-settings-update-request-web-update-plug-setting-web-component-update-plug-search-component
 * A plug widget search component.
 */
export interface PlugSettingsUpdateRequestWebUpdatePlugSettingWebComponentUpdatePlugSearchComponent {
    /** Plug's articles feature settings. */
    articles?: PlugSettingsSearchComponentArticles;
    /** Placeholder text to show in the search bar. */
    placeholder?: string;
    /** Plug's turing feature settings. */
    turing?: PlugSettingsSearchComponentTuring;
}
/**
 * plug-settings-update-request-web-update-plug-setting-web-component-update-plug-snap-component
 * A plug widget snap component.
 */
export interface PlugSettingsUpdateRequestWebUpdatePlugSettingWebComponentUpdatePlugSnapComponent {
    /** DON of the installed snap component. */
    snap_component_id?: string;
}
/**
 * plug-settings-update-request-web-update-plug-setting-web-component-update-plug-welcome-component
 * A plug widget welcome component.
 */
export interface PlugSettingsUpdateRequestWebUpdatePlugSettingWebComponentUpdatePlugWelcomeComponent {
    /** Placeholder greeting text to show. */
    greeting?: string;
}
/** plug-settings-update-request-web-update-plug-setting-web-components */
export interface PlugSettingsUpdateRequestWebUpdatePlugSettingWebComponents {
    /**
     * Adds the provided components to the existing list of components.
     * This is mutually exclusive with `set`.
     */
    add?: PlugSettingsCreateRequestWebCreatePlugSettingWebComponent[];
    /**
     * Removes the provided component ids from the list of
     * components.Mututally exclusive with `set`.
     */
    remove?: string[];
    /** Sets the field to the provided components. */
    set?: PlugSettingsCreateRequestWebCreatePlugSettingWebComponent[];
    /**
     * Updates the provided components with their updated values.This is
     * mutually exclusive with `set`.
     */
    update?: PlugSettingsUpdateRequestWebUpdatePlugSettingWebComponent[];
}
/** plug-settings-update-request-web-update-plug-setting-web-tab */
export interface PlugSettingsUpdateRequestWebUpdatePlugSettingWebTab {
    display_expression?: PlugSettingDisplayRuleExpression;
    /** Whether the tab is enabled or not. */
    enabled?: boolean;
    /** Identifying ID for the tab. */
    id: string;
    /**
     * Order of the tab.
     * @format int64
     */
    order?: number;
    type?: PlugSettingGWWebPlugSettingWebTabTypeValue;
}
/** plug-settings-update-request-web-update-plug-setting-web-tabs */
export interface PlugSettingsUpdateRequestWebUpdatePlugSettingWebTabs {
    /**
     * Adds the provided tabs to the existing list of tabs. This is
     * mutually exclusive with `set`.
     */
    add?: PlugSettingsCreateRequestWebCreatePlugSettingWebTab[];
    /**
     * Removes the provided tab ids from the list of tabs.Mututally
     * exclusive with `set`.
     */
    remove?: string[];
    /** Sets the field to the provided tabs. */
    set?: PlugSettingsCreateRequestWebCreatePlugSettingWebTab[];
    /**
     * Updates the provided tabs with their updated values.This is
     * mutually exclusive with `set`.
     */
    update?: PlugSettingsUpdateRequestWebUpdatePlugSettingWebTab[];
}
/** plug-settings-update-response */
export interface PlugSettingsUpdateResponse {
    setting: PlugSettingGW;
}
/**
 * plug-snap-component
 * A plug widget snap component.
 */
export interface PlugSnapComponent {
    snap_component_id: SnapComponentSummary;
}
/**
 * plug-user-type-display-rule
 * A user type display rule object meant to be used by the UI.
 */
export interface PlugUserTypeDisplayRule {
    /** Comparison operator for this display rule. */
    operator: PlugUserTypeDisplayRuleOperator;
    /** Value which will be used for comparison for the display rule. */
    value: PlugUserTypeDisplayRuleValue;
}
/** Comparison operator for this display rule. */
export declare enum PlugUserTypeDisplayRuleOperator {
    Eq = "eq",
    Neq = "neq"
}
/** Value which will be used for comparison for the display rule. */
export declare enum PlugUserTypeDisplayRuleValue {
    Anonymous = "anonymous",
    Identified = "identified"
}
/**
 * plug-web-component
 * A plug widget web component.
 */
export interface PlugWebComponent {
    /** A plug widget banner component. */
    banner?: PlugBannerComponent;
    /** A plug widget create conversation component. */
    create_conversation?: PlugCreateConversationComponent;
    /** A plug widget create ticket component. */
    create_ticket?: PlugCreateTicketComponent;
    /** A display rule object meant to be used by the UI. */
    display_expression?: PlugDisplayRuleExpression;
    /** Whether the target component is enabled or not. */
    enabled: boolean;
    /**
     * Order of the component.
     * @format int32
     */
    order: number;
    /** A plug widget recent conversations component. */
    recent_conversations?: PlugRecentConversationsComponent;
    /** A plug widget recent tickets component. */
    recent_tickets?: PlugRecentTicketsComponent;
    /** A plug widget search component. */
    search?: PlugSearchComponent;
    /** A plug widget snap component. */
    snap_component?: PlugSnapComponent;
    /** Type of the component. */
    type: PlugWebComponentType;
    /** A UUID to identify the component/tab. */
    uuid?: string;
    /** A plug widget welcome component. */
    welcome?: PlugWelcomeComponent;
}
/** Type of the component. */
export declare enum PlugWebComponentType {
    Banner = "banner",
    CreateConversation = "create_conversation",
    CreateTicket = "create_ticket",
    RecentConversations = "recent_conversations",
    RecentTickets = "recent_tickets",
    Search = "search",
    SnapComponent = "snap_component",
    Welcome = "welcome"
}
/**
 * plug-web-tab
 * A plug widget web tab.
 */
export interface PlugWebTab {
    /** A display rule object meant to be used by the UI. */
    display_expression?: PlugDisplayRuleExpression;
    /** Whether the target component is enabled or not. */
    enabled: boolean;
    /**
     * Order of the component.
     * @format int32
     */
    order: number;
    /** Type of the tab. */
    type: PlugWebTabType;
    /** A UUID to identify the component/tab. */
    uuid?: string;
}
/** Type of the tab. */
export declare enum PlugWebTabType {
    Conversations = "conversations",
    Help = "help",
    Home = "home",
    News = "news",
    Tasks = "tasks",
    Tickets = "tickets"
}
/**
 * plug-web-theme
 * A plug widget theme.
 */
export interface PlugWebTheme {
    /** Optional accent color in Hex or HSL format. */
    accent_color?: string;
    /** Custom theme, only meant to be set if 'type' is 'custom'. */
    custom_theme?: object;
    /** Whether the theme is enabled or not. */
    enabled: boolean;
    /** Native theme, only meant to be set if 'type' is 'native'. */
    native_theme?: PlugWebThemeNativeTheme;
    /** Type of the theme. */
    type: PlugWebThemeType;
    /** A UUID to identify the theme. */
    uuid?: string;
}
/** Native theme, only meant to be set if 'type' is 'native'. */
export declare enum PlugWebThemeNativeTheme {
    Dark = "dark",
    Light = "light"
}
/** Type of the theme. */
export declare enum PlugWebThemeType {
    Custom = "custom",
    Native = "native"
}
/**
 * plug-welcome-component
 * A plug widget welcome component.
 */
export interface PlugWelcomeComponent {
    /** Placeholder greeting text to show. */
    greeting: string;
}
/**
 * policy-instance
 * Policy instance enables to use a policy defined in the source code.
 */
export interface PolicyInstance {
    /** Name assigned to this policy instance by user. */
    name?: string;
    /**
     * Json string storing values for each templated variable, go as
     * `input.parameters` when evaluating policies.
     */
    parameters?: string;
    /**
     * Holds the contents of the policy. Each policy would consist a rule
     * named main/allow which would be the entry point for the policy. The
     * policy would be templated, i.e. there would be some variables which
     * would be filled during creating a policy instance, those would be
     * referenced under `input.parameters` and stored in parameters
     * variable below.
     */
    policy?: string;
    /**
     * Indicates if the policy could be parsed into constituent pieces
     * that can be displayed on UI as individual drop boxes.
     */
    system_parseable?: boolean;
}
/**
 * portal-banner
 * Banner preferences.
 */
export interface PortalBanner {
    /** Banner tile color. */
    color?: string;
    /** Banner description. */
    description?: string;
    /** If banner is enabled. */
    enabled?: boolean;
    /** Banner title. */
    title?: string;
}
/**
 * portal-configuration
 * Portal configuration.
 */
export interface PortalConfiguration {
    aat_keyring_id?: KeyringSummary;
    /** Preferences for footer in portal. */
    footer_group?: PortalFooterGroup;
    /** Google Analytics ID to be used on the portal. */
    google_analytics_id?: string;
    org_favicon?: ArtifactSummary;
    org_logo?: ArtifactSummary;
    /** Organization name which will appear on the Portal. */
    org_name?: string;
    /**
     * Organization URL which will be used to redirect to the company's
     * product or marketing website.
     */
    org_url?: string;
    /** App id of the plug widget to be used on portal. */
    plug_widget_app_id?: string;
    /** If Plug Widget is enabled on the portal. */
    plug_widget_enabled?: boolean;
    /** If the portal will have a Powered by DevRev footer. */
    powered_by_devrev?: boolean;
    /** If support portal is enabled for anonymous users. */
    public_portal_enabled?: boolean;
    /** If ticket creation is enabled on the portal. */
    ticket_creation_enabled?: boolean;
    /** If Turing response is enabled on portal search. */
    turing_response_enabled?: boolean;
}
/**
 * portal-footer-group
 * Preferences for footer in portal.
 */
export interface PortalFooterGroup {
    /** If footer is enabled. */
    enabled?: boolean;
    /** Social media links. */
    social_media_links?: SocialMediaLink[];
    /** Text links. */
    text_links?: TextLink[];
}
/** portal-preferences */
export type PortalPreferences = PreferencesBase & {
    /** Customer authentication and authorization preferences. */
    auth?: AuthPreferences;
    /** Portal configuration. */
    configuration?: PortalConfiguration;
    /** Domain for the portal. */
    domain?: string;
    /** Portal Help Center. */
    help_center?: HelpCenter;
    /** Status of the portal. */
    status?: PortalPreferencesStatus;
    /** Portal styling. */
    styling?: PortalStyling;
    /** Preferences for tabs in portal. */
    tabs?: PortalTab;
};
/** Status of the portal. */
export declare enum PortalPreferencesStatus {
    Disabled = "disabled",
    Enabled = "enabled",
    Enabling = "enabling"
}
/** portal-preferences-summary */
export type PortalPreferencesSummary = PreferencesBaseSummary;
/**
 * portal-styling
 * Portal styling.
 */
export interface PortalStyling {
    /** Button color. */
    accent_color?: string;
    /**
     * Contains information regarding the global theming and layout of the
     * portal for customization purposes.
     */
    customization_configuration?: CustomizationConfiguration;
    header_image?: ArtifactSummary;
    /** If header image is enabled on the portal. */
    header_image_enabled?: boolean;
    /** Portal appearance theme. */
    theme?: PortalStylingTheme;
}
/** Portal appearance theme. */
export declare enum PortalStylingTheme {
    Dark = "dark",
    Light = "light"
}
/**
 * portal-tab
 * Preferences for tabs in portal.
 */
export interface PortalTab {
    /** Banner preferences. */
    banner?: PortalBanner;
    /** Custom Tabs. */
    custom_tabs?: CustomTab[];
    /** If ticket creation is enabled on the portal. */
    ticket_creation_enabled?: boolean;
}
/** post-nudge-widget */
export type PostNudgeWidget = (NativePostNudgeWidget | SnapKitPostNudgeWidget) & {
    post_nudge_type: PostNudgeWidgetPostNudgeType;
};
/** post-nudge-widget-base */
export type PostNudgeWidgetBase = SnapWidgetBase;
/** post-nudge-widget-base-summary */
export type PostNudgeWidgetBaseSummary = SnapWidgetBaseSummary;
export declare enum PostNudgeWidgetPostNudgeType {
    Native = "native",
    SnapKit = "snap_kit"
}
/** post-nudge-widget-summary */
export type PostNudgeWidgetSummary = (NativePostNudgeWidgetSummary | SnapKitPostNudgeWidgetSummary) & {
    post_nudge_type: PostNudgeWidgetPostNudgeType;
};
/**
 * postal-address
 * A representation of a postal address.
 */
export interface PostalAddress {
    /** Country name component. */
    country?: string;
    /**
     * Full mailing address, formatted for display or use on a mailing
     * label.
     */
    formatted?: string;
    /** Town, city. */
    locality?: string;
    /** Zip code of the address. */
    postal_code?: string;
    /** State, province, prefecture, or region component. */
    region?: string;
    /** Full street address component. */
    street_address?: string;
}
/** pr-review-reminder */
export type PrReviewReminder = NotificationBase & {
    /**
     * Time at which review request was created.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_at?: string;
    /** A Pull Request object. */
    pull_request?: PullRequest;
};
/** pr-review-reminder-summary */
export type PrReviewReminderSummary = NotificationBaseSummary;
/** preferences */
export type Preferences = (NotificationPreferences | OrgPreferences | PortalPreferences | UserPreferences) & {
    type: PreferencesType;
};
/** preferences-base */
export type PreferencesBase = AtomBase;
/** preferences-base-summary */
export type PreferencesBaseSummary = AtomBaseSummary;
/** preferences-get-request */
export interface PreferencesGetRequest {
    /**
     * The ID of the target object for which preferences object is to be
     * fetched.
     * @example "DEV-AbCdEfGh"
     */
    object: string;
    type: PreferencesType;
}
/** preferences-get-response */
export interface PreferencesGetResponse {
    preference: Preferences;
}
/** preferences-list-request */
export interface PreferencesListRequest {
    /**
     * The ID of the object for which the preferences are to be listed.
     * @example "DEV-AbCdEfGh"
     */
    object: string;
}
/** preferences-list-response */
export interface PreferencesListResponse {
    preferences: Preferences;
}
/** preferences-snap-kit-list-request */
export interface PreferencesSnapKitListRequest {
    /**
     * The ID of the object for which the preferences snap kit is to be
     * fetched.
     * @example "DEV-AbCdEfGh"
     */
    object: string;
}
/** preferences-snap-kit-list-response */
export interface PreferencesSnapKitListResponse {
    /** The SnapKit body of the preferences object requested. */
    snap_kit_body: object;
}
export declare enum PreferencesType {
    NotificationPreferences = "notification_preferences",
    OrgPreferences = "org_preferences",
    PortalPreferences = "portal_preferences",
    UserPreferences = "user_preferences"
}
/** preferences-update-request */
export type PreferencesUpdateRequest = (UpdateNotificationPreferences | UpdateOrgPreferences | UpdatePortalPreferences | UpdateUserPreferences) & {
    /**
     * The ID of the object for which the preferences are to be updated.
     * @example "DEV-AbCdEfGh"
     */
    object: string;
    type: PreferencesType;
};
/** preferences-update-response */
export interface PreferencesUpdateResponse {
    preferences: Preferences;
}
/** price-book */
export type PriceBook = AtomBase & {
    /** Description of the price book. */
    description?: string;
    /**
     * It controls the ability to make new purchases using pricings within
     * this price book. If true, the price book object is eligible for new
     * purchases; however, if false, no new purchases can be initiated
     * with the pricings contained in this price book.
     */
    is_active?: boolean;
    /**
     * Depending on its truth value, this price book object serves a
     * distinct purpose. If true, it functions as the default price book,
     * encompassing default prices for all sellable SKUs. Conversely, if
     * false, it operates as a custom price book tailored for a particular
     * customer segment or individual customer.
     */
    is_default?: boolean;
    /** Name of the price book. */
    name?: string;
};
/** price-book-summary */
export type PriceBookSummary = AtomBaseSummary & {
    /**
     * It controls the ability to make new purchases using pricings within
     * this price book. If true, the price book object is eligible for new
     * purchases; however, if false, no new purchases can be initiated
     * with the pricings contained in this price book.
     */
    is_active?: boolean;
    /**
     * Depending on its truth value, this price book object serves a
     * distinct purpose. If true, it functions as the default price book,
     * encompassing default prices for all sellable SKUs. Conversely, if
     * false, it operates as a custom price book tailored for a particular
     * customer segment or individual customer.
     */
    is_default?: boolean;
    /** Name of the price book. */
    name?: string;
};
/** price-books-count-request */
export interface PriceBooksCountRequest {
    /** The list of price book DONs which are to be aggregated. */
    ids?: string[];
    /** Filter, active vs inactive price book objects. */
    is_active?: boolean;
    /** Filter, default vs non-default price book objects. */
    is_default?: boolean;
}
/** price-books-count-response */
export interface PriceBooksCountResponse {
    /**
     * The count of price book objects matching the filter.
     * @format int32
     */
    count: number;
}
/** price-books-create-request */
export interface PriceBooksCreateRequest {
    /** Description of the price book. */
    description?: string;
    /**
     * It controls the ability to make new purchases using pricings within
     * this price book. If true, the price book object is eligible for new
     * purchases; however, if false, no new purchases can be initiated
     * with the pricings contained in this price book.
     */
    is_active?: boolean;
    /** Name of the price book. */
    name: string;
}
/** price-books-create-response */
export interface PriceBooksCreateResponse {
    price_book: PriceBook;
}
/** price-books-delete-request */
export interface PriceBooksDeleteRequest {
    /** The price book object's DON. */
    id: string;
}
/** price-books-get-request */
export interface PriceBooksGetRequest {
    /** The price book object's DON. */
    id: string;
}
/** price-books-get-response */
export interface PriceBooksGetResponse {
    price_book: PriceBook;
}
/** price-books-list-request */
export interface PriceBooksListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** The list of price book DONs which are to be aggregated. */
    ids?: string[];
    /** Filter, active vs inactive price book objects. */
    is_active?: boolean;
    /** Filter, default vs non-default price book objects. */
    is_default?: boolean;
    /**
     * The maximum number of price books to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /**
     * List of fields to sort the Price book object, by and how to sort
     * them. Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
}
/** price-books-list-response */
export interface PriceBooksListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The list of price book objects. */
    price_books: PriceBook[];
}
/** price-books-update-request */
export interface PriceBooksUpdateRequest {
    /** Description of the price book. */
    description?: string;
    /** The price book object's DON. */
    id: string;
    /**
     * It controls the ability to make new purchases using pricings within
     * this price book. If true, the price book object is eligible for new
     * purchases; however, if false, no new purchases can be initiated
     * with the pricings contained in this price book.
     */
    is_active?: boolean;
    /** Name of the price book. */
    name?: string;
}
/** price-books-update-response */
export interface PriceBooksUpdateResponse {
    price_book: PriceBook;
}
/**
 * price-slab
 * Helps in defining the range pricing for cases such as tiered pricing,
 * volume pricing etc. For Example, if the pricing for first 100 api calls
 * per calls is $X and after that its $Y till infinity.
 */
export interface PriceSlab {
    /**
     * The flat price for the complete slab, irrespective of qunatity one
     * uses in this price slab. This can be set only if unit price is set.
     * @format double
     */
    flat_price?: number;
    /**
     * The price for each unit.
     * @format double
     */
    unit_price?: number;
    /**
     * the quantity upto which this price is applicable. You can set this
     * value only if up to infinity is not set to true.
     * @format int32
     */
    up_to?: number;
    /**
     * If true, this price slab is applicable for all the remaining
     * quantities till infinity.
     */
    up_to_inf?: boolean;
}
/**
 * price-slab-summary
 * Helps in defining the range pricing for cases such as tiered pricing,
 * volume pricing etc. For Example, if the pricing for first 100 api calls
 * per calls is $X and after that its $Y till infinity.
 */
export interface PriceSlabSummary {
    /**
     * The flat price for the complete slab, irrespective of qunatity one
     * uses in this price slab. This can be set only if unit price is set.
     * @format double
     */
    flat_price?: number;
    /**
     * The price for each unit.
     * @format double
     */
    unit_price?: number;
    /**
     * the quantity upto which this price is applicable. You can set this
     * value only if up to infinity is not set to true.
     * @format int32
     */
    up_to?: number;
    /**
     * If true, this price slab is applicable for all the remaining
     * quantities till infinity.
     */
    up_to_inf?: boolean;
}
/** pricing */
export type Pricing = AtomBase & {
    /** The custom pricing defined for accounts. */
    accounts?: AccountSummary[];
    /** Billing frequency of the SKU. */
    billing_cycle: PricingBillingCycle;
    /**
     * Number of units in each block. For example, If the metered units is
     * 540 and the block size is 100. Then the quantity will be 5.4. The
     * default value is 1.
     * @format int32
     */
    block_size?: number;
    /**
     * Currency used for the pricing. For example, USD, INR etc. Defaults
     * to USD.
     */
    currency: string;
    /** Description of the pricing. */
    description?: string;
    /**
     * if true then this pricing object can be used for new purchases. If
     * false then no new purchases can be made with this pricing object
     * but existing purchases can still use this pricing object. Defaults
     * to true.
     */
    is_active?: boolean;
    /**
     * Whether the slabs should be priced tiered or flat. The default
     * value is false.
     */
    is_tiered?: boolean;
    price_book?: PriceBookSummary;
    /** List of price slabs for the given currency. */
    price_slabs: PriceSlab[];
    sku: SkuSummary;
};
/** Billing frequency of the SKU. */
export declare enum PricingBillingCycle {
    Monthly = "monthly",
    OneTime = "one_time",
    Yearly = "yearly"
}
/**
 * pricing-detail
 * Captures how the list price was calculated on the basis of sku quantity
 * in quote and sku price slabs.
 */
export interface PricingDetail {
    /**
     * The end limit of the slab.
     * @format int32
     */
    end_quantity?: number;
    /**
     * The flat price for the complete slab, irrespective of quantity one
     * uses in this price slab.
     * @format double
     */
    flat_price?: number;
    /**
     * The start limit of the slab.
     * @format int32
     */
    start_quantity?: number;
    /**
     * The total amount for the given quantity against the unit price.
     * @format double
     */
    total_amount?: number;
    /**
     * The price for each unit.
     * @format double
     */
    unit_price?: number;
}
/** pricing-summary */
export type PricingSummary = AtomBaseSummary & {
    /** Billing frequency of the SKU. */
    billing_cycle: PricingBillingCycle;
    /**
     * Number of units in each block. For example, If the metered units is
     * 540 and the block size is 100. Then the quantity will be 5.4. The
     * default value is 1.
     * @format int32
     */
    block_size?: number;
    /**
     * Currency used for the pricing. For example, USD, INR etc. Defaults
     * to USD.
     */
    currency: string;
    /**
     * if true then this pricing object can be used for new purchases. If
     * false then no new purchases can be made with this pricing object
     * but existing purchases can still use this pricing object. Defaults
     * to true.
     */
    is_active?: boolean;
    /**
     * Whether the slabs should be priced tiered or flat. The default
     * value is false.
     */
    is_tiered?: boolean;
    /** List of price slabs for the given currency. */
    price_slabs: PriceSlabSummary[];
};
/** pricings-count-request */
export interface PricingsCountRequest {
    /**
     * Filter custom pricings defined for accounts.
     * @example ["ACC-12345"]
     */
    accounts?: string[];
    /** Filter pricings on currency. */
    currency?: string[];
    /** The list of pricing DONs which are to be aggregated. */
    ids?: string[];
    /** Filter, active vs inactive pricing objects. */
    is_active?: boolean;
    /** Filter pricings defined under price books. */
    price_book_ids?: string[];
    /** The list of sku DONs which are to be aggregated. */
    sku_ids?: string[];
}
/** pricings-count-response */
export interface PricingsCountResponse {
    /**
     * Count of Pricings matching the filter.
     * @format int32
     */
    count: number;
}
/** pricings-create-request */
export interface PricingsCreateRequest {
    /** Billing frequency of the SKU. */
    billing_cycle: PricingBillingCycle;
    /**
     * Number of units in each block. For example, If the metered units is
     * 540 and the block size is 100. Then the quantity will be 5.4. The
     * default value is 1.
     * @format int32
     */
    block_size?: number;
    /**
     * Currency used for the pricing object. For example: USD, INR etc.
     * Defaults to USD.
     */
    currency: string;
    /** Description of the pricing object. */
    description?: string;
    /**
     * Whether the slabs should be priced tiered or flat. The default
     * value is false.
     */
    is_tiered?: boolean;
    /** The PriceBook under which the pricing object is created. */
    price_book_id: string;
    /** List of price slabs for the given currency. */
    price_slabs: PriceSlab[];
    /** The sku ID for which the pricing object is defined. */
    sku_id: string;
}
/** pricings-create-response */
export interface PricingsCreateResponse {
    pricing: Pricing;
}
/** pricings-delete-request */
export interface PricingsDeleteRequest {
    /** The pricing object's DON. */
    id: string;
}
/** pricings-get-request */
export interface PricingsGetRequest {
    /** The pricing object's DON. */
    id: string;
}
/** pricings-get-response */
export interface PricingsGetResponse {
    pricing: Pricing;
}
/** pricings-list-request */
export interface PricingsListRequest {
    /**
     * Filter custom pricings defined for accounts.
     * @example ["ACC-12345"]
     */
    accounts?: string[];
    /** Filter pricings on currency. */
    currency?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** The list of pricing DONs which are to be aggregated. */
    ids?: string[];
    /** Filter, active vs inactive pricing objects. */
    is_active?: boolean;
    /**
     * The maximum number of pricings to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Filter pricings defined under price books. */
    price_book_ids?: string[];
    /** The list of sku DONs which are to be aggregated. */
    sku_ids?: string[];
    /**
     * List of fields to sort the pricing object, by and how to sort them.
     * Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
}
/** pricings-list-response */
export interface PricingsListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The list of pricing objects. */
    pricings: Pricing[];
}
/** pricings-update-request */
export interface PricingsUpdateRequest {
    /**
     * Number of units in each block. For example, If the metered units is
     * 540 and the block size is 100. Then the quantity will be 5.4. The
     * default value is 1.
     * @format int32
     */
    block_size?: number;
    /** The pricing object's DON. */
    id: string;
    /** Whether the slabs represent graduated or volume based pricing. */
    is_tiered?: boolean;
    /** List of new updated price slabs. */
    price_slabs: PriceSlab[];
}
/** pricings-update-response */
export interface PricingsUpdateResponse {
    pricing: Pricing;
}
/**
 * primitive-value
 * Primitive Value.
 */
export interface PrimitiveValue {
    /** Selector. */
    attribute_value?: Selector;
    /** Boolean value. */
    bool_value?: boolean;
    /** List of ID values. */
    id_list_value?: AtomSummary[];
    id_value?: AtomSummary;
    /** List of integer values. */
    int_list_value?: number[];
    /**
     * Integer value.
     * @format int32
     */
    int_value?: number;
    /** List of overridable enum values. */
    overridable_enum_list_value?: string[];
    /** Overridable enum value. */
    overridable_enum_value?: string;
    /** List of string values. */
    string_list_value?: string[];
    /** String value. */
    string_value?: string;
    /** Type of the value. */
    type: PrimitiveValueType;
}
/** Type of the value. */
export declare enum PrimitiveValueType {
    Attribute = "attribute",
    Bool = "bool",
    Id = "id",
    IdList = "id_list",
    Int = "int",
    IntList = "int_list",
    OverridableEnum = "overridable_enum",
    OverridableEnumList = "overridable_enum_list",
    String = "string",
    StringList = "string_list"
}
/** principals-list-filter */
export interface PrincipalsListFilter {
    principal_types: PrincipalsListFilterPrinicipalTypeEnum[];
}
export declare enum PrincipalsListFilterPrinicipalTypeEnum {
    DevOrg = "dev_org",
    Group = "group",
    Unknown = "unknown"
}
/** principals-list-request */
export interface PrincipalsListRequest {
    filter?: PrincipalsListFilter;
    role_id: string;
}
/** principals-list-response */
export interface PrincipalsListResponse {
    principals: PrincipalsListResponsePrincipal[];
}
/** principals-list-response-principal */
export interface PrincipalsListResponsePrincipal {
    principal: AtomSummary;
}
/** product */
export type Product = PartBase & {
    /** IDs of the runnables that fulfill this product. */
    fulfilled_by?: PartSummary[];
    pm_owner?: UserSummary;
    /** Product Delivered as. */
    product_delivered_as?: ProductDeliveredAs;
    /** Versions of the product. */
    versions?: string[];
};
/** Product Delivered as. */
export declare enum ProductDeliveredAs {
    Goods = "goods",
    Service = "service"
}
/** product-summary */
export type ProductSummary = PartBaseSummary;
/**
 * profile-summary
 * Discovery profile summary.
 */
export interface ProfileSummary {
    /** Configuration knobs for extractors. */
    extractors?: Extractors;
    /** Configuration knobs for partitioners and partition mergers. */
    mergers?: DevRevPartitionerMerger;
    /**
     * Optionally allow to specify a different devorg's data as source. If
     * missing current devorg is used.
     */
    other_data_source_devorg?: string;
    /** Configuration knobs for partitioners and partition mergers. */
    partitioners?: DevRevPartitionerMerger;
    /** Specify discovery profile Id associated. */
    profile_id?: string;
    /** Name of the Discovery profile. */
    profile_name?: string;
}
/**
 * profiles-create-request
 * Request to create a new profile.
 */
export interface ProfilesCreateRequest {
    /** Professional biography of the user. */
    bio?: string;
    /** Display handles are used to uniquely identify the users. */
    display_handle?: string;
    /** The user's display name. The name is non-unique and mutable. */
    display_name: string;
    /**
     * Artifact ID of the user's display picture
     * @example "ARTIFACT-12345"
     */
    display_picture?: string;
    /** Full name of the user. */
    full_name?: string;
    /**
     * Brief description of the user's professional experience or
     * interests.
     */
    headline?: string;
    /** Phone numbers of the user. */
    phone_numbers?: string[];
    /** State of the user. */
    state?: UserState;
    /** Visibility of the profile to other users. */
    visibility?: DevrevProfileVisibility;
}
/**
 * profiles-create-response
 * The response for the request to create a new profile.
 */
export interface ProfilesCreateResponse {
    profile: DevrevProfile;
}
/**
 * profiles-get-by-handle-request
 * A request to get the public information of a profile.
 */
export interface ProfilesGetByHandleRequest {
    /** The display handle of the profile to get. */
    display_handle: string;
}
/**
 * profiles-get-by-handle-response
 * The response for the request to get the public information of a user's
 * profile.
 */
export interface ProfilesGetByHandleResponse {
    /** Professional biography of the user. */
    bio?: string;
    /** Full name of the user. */
    full_name?: string;
    /**
     * Brief description of the user's professional experience or
     * interests.
     */
    headline?: string;
    /** URL of the user's profile picture. */
    profile_picture?: string;
}
/**
 * profiles-is-display-handle-available-request
 * A request to check the availability of the display handle at the time
 * of invocation.
 */
export interface ProfilesIsDisplayHandleAvailableRequest {
    /** Display handles are used to uniquely identify the users. */
    display_handle: string;
}
/**
 * profiles-is-display-handle-available-response
 * The response for the request to check the availability of the display
 * handle.
 */
export interface ProfilesIsDisplayHandleAvailableResponse {
    /** Whether the requested display handle is available or not. */
    is_available: boolean;
}
/** profiles-self-delete-request */
export type ProfilesSelfDeleteRequest = object;
/** profiles-self-delete-response */
export type ProfilesSelfDeleteResponse = object;
/**
 * profiles-self-request
 * The response for the request to get a user's profile information.
 */
export type ProfilesSelfRequest = object;
/**
 * profiles-self-response
 * The response to get a profile's information.
 */
export interface ProfilesSelfResponse {
    profile: DevrevProfile;
}
/**
 * profiles-self-update-request
 * Request to update a user's profile information.
 */
export interface ProfilesSelfUpdateRequest {
    /** Professional biography of the user. */
    bio?: string;
    /** Display handles are used to uniquely identify the users. */
    display_handle?: string;
    /** The user's display name. The name is non-unique and mutable. */
    display_name?: string;
    /**
     * Artifact ID of the user's display picture
     * @example "ARTIFACT-12345"
     */
    display_picture?: string;
    /** Full name of the user. */
    full_name?: string;
    /**
     * Brief description of the user's professional experience or
     * interests.
     */
    headline?: string;
    /** Phone numbers of the user. */
    phone_numbers?: string[];
    /** State of the user. */
    state?: UserState;
    /** Visibility of the profile to other users. */
    visibility?: DevrevProfileVisibility;
}
/**
 * profiles-self-update-response
 * The response for the request to update a user's profile information.
 */
export interface ProfilesSelfUpdateResponse {
    profile: DevrevProfile;
}
/** project */
export type Project = WorkBase & {
    /** Part versions relevant to the work. */
    applies_to_versions?: string[];
    /** Priority of the work based upon impact and criticality. */
    priority?: ProjectPriority;
    /** Type of project. */
    project_type?: ProjectType;
    /**
     * Timestamp when the project started.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    start_date?: string;
};
/** Priority of the work based upon impact and criticality. */
export declare enum ProjectPriority {
    P0 = "p0",
    P1 = "p1",
    P2 = "p2",
    P3 = "p3"
}
/** project-summary */
export type ProjectSummary = WorkBaseSummary;
/** Type of project. */
export declare enum ProjectType {
    DeliverableBased = "deliverable_based",
    TimeBased = "time_based"
}
/**
 * prorated-line-item
 * The SKU level prorated value on top of the usage considering the SKU
 * active time.
 */
export interface ProratedLineItem {
    pricing: PricingSummary;
    sku: SkuSummary;
    /**
     * Name of SKU for which line item is generated (Used as name of
     * invoice line items for better readability. It is against this name,
     * pricing fields such as quantity, unit_amount, amount, etc are
     * shown).
     */
    sku_name: string;
}
/**
 * pull-request
 * A Pull Request object.
 */
export interface PullRequest {
    /** PR Description. */
    description?: string;
    /** PR ID. Example - PR-503. */
    id?: string;
    /** PR Title. */
    title?: string;
    /** URL. */
    url?: string;
}
/** push-device */
export type PushDevice = AtomBase & {
    /** The unique identifier associated with the device. */
    device_id?: string;
    /**
     * The last time the device token was updated.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    timestamp?: string;
    /** The token associated with the device. */
    token?: string;
    /** The type of the push device. */
    type?: PushDeviceType;
};
/** push-device-summary */
export type PushDeviceSummary = AtomBaseSummary;
/** The type of the push device. */
export declare enum PushDeviceType {
    Android = "android",
    Chrome = "chrome",
    Ios = "ios",
    IosSandbox = "ios_sandbox"
}
/**
 * push-devices-register-request
 * The request to register a push device.
 */
export interface PushDevicesRegisterRequest {
    /** The unique identifier of the device. */
    device_id: string;
    /** The token to associate with the push device. */
    token: string;
    /** The type of the push device. */
    type: PushDeviceType;
}
/**
 * push-devices-register-response
 * The response to registering a push device.
 */
export interface PushDevicesRegisterResponse {
    device: PushDevice;
}
/**
 * push-devices-unregister-request
 * The request to unregister a push device.
 */
export interface PushDevicesUnregisterRequest {
    /** The unique identifier of the device. */
    device_id: string;
    /** The token associated with the push device. */
    token?: string;
}
/**
 * push-devices-update-request
 * The request to update the timestamp on a push device.
 */
export interface PushDevicesUpdateRequest {
    /** The unique identifier of the device. */
    device_id: string;
    /** The token associated with the push device. */
    token?: string;
}
/**
 * push-devices-update-response
 * The response to updating the timestamp on a push device.
 */
export interface PushDevicesUpdateResponse {
    device: PushDevice;
}
/** push-notification */
export interface PushNotification {
    actor: UserSummary;
    /** The body of the notification being displayed. */
    body: string;
    device?: PushNotificationDeviceSummary;
    /** A hash that uniquely identifies a notification. */
    id: string;
    item?: PushNotificationParentSummary;
    /**
     * A unique ID for the underlying notification related to the push
     * event.
     */
    notification_id: string;
    parent?: AtomSummary;
    /** The ID of the source object. */
    source_id?: string;
    /** State of delivery of the notification. */
    state: PushNotificationState;
    /** The subtitle of the notification being displayed. */
    subtitle?: string;
    /** The title of the notification being displayed. */
    title: string;
    /** The type of the underlying notification. */
    type: PushNotificationType;
    /**
     * A URL link that points to the devrev web that should be opened when
     * clicking on this notification.
     */
    url?: string;
}
/** The matching channel control settings for android in settings. */
export declare enum PushNotificationAndroidChannel {
    Alerts = "alerts",
    Discussions = "discussions",
    StatusUpdates = "status_updates"
}
/** The matching channel control settings for android in settings. */
export declare enum PushNotificationAndroidChannelLegacy {
    NotificationChannelIdAlerts = "notification_channel_id_alerts",
    NotificationChannelIdDiscussions = "notification_channel_id_discussions",
    NotificationChannelIdStatusUpdates = "notification_channel_id_status_updates"
}
/** push-notification-android-device */
export interface PushNotificationAndroidDevice {
    /** The matching channel control settings for android in settings. */
    channel?: PushNotificationAndroidChannel;
    /** The matching channel control settings for android in settings. */
    channel_id?: PushNotificationAndroidChannelLegacy;
}
/** The device name for the notification. */
export declare enum PushNotificationDevice {
    Android = "android",
    Chrome = "chrome",
    Ios = "ios",
    IosSandbox = "ios_sandbox"
}
/** push-notification-device-summary */
export interface PushNotificationDeviceSummary {
    android?: PushNotificationAndroidDevice;
    /** The device name for the notification. */
    device_type: PushNotificationDevice;
}
/** push-notification-parent-summary */
export interface PushNotificationParentSummary {
    /** The display ID for the parent object. */
    display_id?: string;
    /** The ID of the parent object. */
    id: string;
    /** The tab to be opened when the notification is clicked. */
    target?: PushNotificationTarget;
    /** The title of the parent object if present. */
    title?: string;
}
/** State of delivery of the notification. */
export declare enum PushNotificationState {
    Deleted = "deleted",
    Read = "read",
    Unread = "unread"
}
/** The tab to be opened when the notification is clicked. */
export declare enum PushNotificationTarget {
    Details = "details",
    Discussion = "discussion",
    Event = "event",
    Updates = "updates"
}
/** The type of the underlying notification. */
export declare enum PushNotificationType {
    ConversationCreated = "conversation_created",
    ConversationInactivityReminder = "conversation_inactivity_reminder",
    DevrevReminder = "devrev_reminder",
    GenericNotification = "generic_notification",
    ObjectAssigned = "object_assigned",
    PrReviewReminder = "pr_review_reminder",
    UserMentioned = "user_mentioned",
    UserParticipation = "user_participation",
    VistaShared = "vista_shared"
}
/**
 * qa-generation
 * Preference for QA generation.
 */
export interface QaGeneration {
    /** Allow QA generation from conversations. */
    conversations?: boolean;
}
/** query-result */
export interface QueryResult {
    /** Vector's unique ID. */
    id: string;
    /**
     * This is a measure of similarity between this vector and the query
     * vector. The higher the score, the more they are similar. The scores
     * are sorted in descending order.
     * @format float
     */
    score: number;
}
/** question-answer */
export type QuestionAnswer = AtomBase & {
    access_level?: AccessLevel;
    /** The Answer. */
    answer?: string;
    /** Details of the articles relevant to the question_answer. */
    applies_to_articles?: ArticleSummary[];
    /** Details of the parts relevant to the question_answer. */
    applies_to_parts?: PartSummary[];
    /** The users that own the question_answer. */
    owned_by: UserSummary[];
    /** The Question. */
    question?: string;
    /**
     * The list of Rev user, groups and dynamic groups with whom the
     * question answer is shared and the corresponding roles.
     */
    shared_with?: SharedWithMembership[];
    /**
     * Details of the sources from which the question answer was
     * generated.
     */
    sources?: AtomSummary[];
    /** Status of the question answer. */
    status?: QuestionAnswerStatus;
    /** An alternative answer suggested by the Q/A generation algorithm. */
    suggested_answer?: string;
    /**
     * Whether the Q/A was marked for deletion by the Q/A generation
     * algorithm.
     */
    suggested_for_deletion?: boolean;
    /** Tags associated with the question_answer. */
    tags?: TagWithValue[];
    /** The topic to which the QA belongs. */
    topic?: string;
    /** Whether the Q/A was verified. */
    verified?: boolean;
};
/** question-answer-search-summary */
export type QuestionAnswerSearchSummary = SearchSummaryBase & {
    question_answer: QuestionAnswerSummary;
};
/** Status of the question answer. */
export declare enum QuestionAnswerStatus {
    Archived = "archived",
    Discarded = "discarded",
    Draft = "draft",
    Published = "published",
    ReviewNeeded = "review_needed"
}
/** question-answer-summary */
export type QuestionAnswerSummary = AtomBaseSummary & {
    /** The Question. */
    question?: string;
};
/**
 * question-answers-create-request
 * The request to create a question-answer.
 */
export interface QuestionAnswersCreateRequest {
    access_level?: AccessLevel;
    /** Answer of the question-answer. */
    answer: string;
    /**
     * The articles that the question-answer applies to.
     * @example ["ARTICLE-12345"]
     */
    applies_to_articles?: string[];
    /**
     * The parts that the question-answer applies to.
     * @minItems 1
     * @example ["PROD-12345"]
     */
    applies_to_parts: string[];
    /**
     * The users that own the question-answer.
     * @example ["DEVU-12345"]
     */
    owned_by: string[];
    /**
     * The users that own the question-answer.
     * @deprecated
     * @example ["DEVU-12345"]
     */
    owned_by_ids?: string[];
    /** Question of the question-answer. */
    question: string;
    /** Information about the role the member receives due to the share. */
    shared_with?: SetSharedWithMembership[];
    /**
     * The source of the question-answer.
     * @example ["ARTICLE-12345"]
     */
    sources?: string[];
    /** Status of the question answer. */
    status: QuestionAnswerStatus;
    /**
     * Alternative answer for the question-answer sugested by Q/A
     * Discovery.
     */
    suggested_answer?: string;
    /**
     * Whether the question-answer was suggeste to be deleted by Q/A
     * Discovery.
     */
    suggested_for_deletion?: boolean;
    /** Tags associated with the question-answer. */
    tags?: SetTagWithValue[];
    /** Topic of the question-answer. */
    topic?: string;
    /** Whether the question-answer was verified by a user or not. */
    verified?: boolean;
}
/**
 * question-answers-create-response
 * Create question-answer response.
 */
export interface QuestionAnswersCreateResponse {
    question_answer: QuestionAnswer;
}
/**
 * question-answers-delete-request
 * The request to delete a question-answer.
 */
export interface QuestionAnswersDeleteRequest {
    /** The ID of the question-answer. */
    id?: string;
    /**
     * The ID of the question-answer.
     * @deprecated
     */
    question_answer_id?: string;
}
/**
 * question-answers-get-request
 * The request to get a question-answer.
 */
export interface QuestionAnswersGetRequest {
    /** The ID of the required question-answer. */
    id?: string;
    /**
     * The ID of the required question-answer.
     * @deprecated
     */
    question_answer_id?: string;
}
/**
 * question-answers-get-response
 * Get question-answer response.
 */
export interface QuestionAnswersGetResponse {
    question_answer: QuestionAnswer;
}
/**
 * question-answers-list-request
 * The request to list question-answers.
 */
export interface QuestionAnswersListRequest {
    /**
     * Filters for question-answer belonging to any of the provided
     * articles.
     * @example ["ARTICLE-12345"]
     */
    applies_to_articles?: string[];
    /**
     * Filters for question-answer belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_parts?: string[];
    /**
     * Filters for question-answers created after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_after_date?: string;
    /**
     * Filters for question-answers created before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_before_date?: string;
    /**
     * Filters for question-answers created by any of the provided users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of question-answers to return. The default is
     * '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /**
     * Filters for question-answers owned by any of the provided users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /** Filters for status of the question-answers. */
    status?: QuestionAnswerStatus[];
    /**
     * Filters for question-answer with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filter for verified (or unverified) question-answers. */
    verified?: boolean;
}
/**
 * question-answers-list-response
 * List question-answers response.
 */
export interface QuestionAnswersListResponse {
    /**
     * The cursor that should be used to resume iteration, otherwise if
     * not provided, then iteration has completed.
     * @deprecated
     */
    cursor?: string;
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The question-answers entries matching the request. */
    question_answers: QuestionAnswer[];
    /**
     * Total number of question-answer items for the request.
     * @format int32
     */
    total: number;
}
/**
 * question-answers-update-request
 * The request to update a question-answer.
 */
export interface QuestionAnswersUpdateRequest {
    access_level?: AccessLevel;
    /**
     * Updated answer of the question-answer object, or unchanged if not
     * provided.
     */
    answer?: string;
    applies_to_articles?: QuestionAnswersUpdateRequestAppliesToArticles;
    applies_to_parts?: QuestionAnswersUpdateRequestAppliesToParts;
    /** The question-answer's ID. */
    id: string;
    owned_by?: QuestionAnswersUpdateRequestOwnedBy;
    /**
     * Updated question of the question-answer object, or unchanged if not
     * provided.
     */
    question?: string;
    shared_with?: QuestionAnswersUpdateRequestSharedWith;
    sources?: QuestionAnswersUpdateRequestSources;
    /** Status of the question answer. */
    status?: QuestionAnswerStatus;
    /**
     * Updated suggested_answer of the question-answer object, or
     * unchanged if not provided.
     */
    suggested_answer?: string;
    /**
     * Updated suggested_for_deletion of the question-answer object, or
     * unchanged if not provided.
     */
    suggested_for_deletion?: boolean;
    tags?: QuestionAnswersUpdateRequestTags;
    /**
     * Updated topic of the question-answer object, or unchanged if not
     * provided.
     */
    topic?: string;
    /** Updates whether the question-answer was verified by a user or not. */
    verified?: boolean;
}
/** question-answers-update-request-applies-to-articles */
export interface QuestionAnswersUpdateRequestAppliesToArticles {
    /**
     * Updates the article that the question-answer applies to.
     * @example ["ARTICLE-12345"]
     */
    set?: string[];
}
/** question-answers-update-request-applies-to-parts */
export interface QuestionAnswersUpdateRequestAppliesToParts {
    /**
     * Updates the parts that the question-answer applies to.
     * @example ["PROD-12345"]
     */
    set?: string[];
}
/** question-answers-update-request-owned-by */
export interface QuestionAnswersUpdateRequestOwnedBy {
    /**
     * Sets the owner IDs to the provided user IDs. This must not be
     * empty.
     * @example ["DEVU-12345"]
     */
    set?: string[];
}
/** question-answers-update-request-shared-with */
export interface QuestionAnswersUpdateRequestSharedWith {
    /** Sets the field to the provided membership list. */
    set?: SetSharedWithMembership[];
}
/** question-answers-update-request-sources */
export interface QuestionAnswersUpdateRequestSources {
    /**
     * Sets the sources that generated the question-answer.
     * @example ["ARTICLE-12345"]
     */
    set?: string[];
}
/** question-answers-update-request-tags */
export interface QuestionAnswersUpdateRequestTags {
    /** Sets the provided tags on the question-answer. */
    set?: SetTagWithValue[];
}
/** question-answers-update-response */
export interface QuestionAnswersUpdateResponse {
    question_answer: QuestionAnswer;
}
/** quote */
export type Quote = AtomBase & {
    account: AccountSummary;
    /** Stores the approvers associated with the quote. */
    approvers?: ApproverDetail[];
    /** Details of a contact including email. */
    buyer_company_details?: ContactDetailWithEmail;
    /** The ID of the quote from which data is to be cloned (if any). */
    clone_from_id?: string;
    /**
     * Effective end date of the contract.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    contract_end_date: string;
    /**
     * Effective start date of the contract once the quote is accepted.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    contract_start_date: string;
    /**
     * It represents a specific time period for an associated amount. It
     * encapsulates information about the start date, end date, and the
     * corresponding monetary value. It is designed to facilitate calculations
     * and operations involving time-based amounts.
     */
    credits_offered?: AmountDetail;
    /** Description of the quote. */
    description?: string;
    /** It stores the discount details applicable to the quote. */
    discount?: DiscountDetail[];
    /** It stores the details of the documents related to the quote. */
    documents?: ArtifactDetail[];
    /**
     * It indicates the timestamp till when the quote is valid. It serves
     * as a mechanism to enforce time-bound validity for quotes, allowing
     * users to set a specific deadline for customers to review and
     * respond to the quote. After the expiration date has passed, the
     * quote is considered expired/invalid. Defaults to one month from the
     * date of creation.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    expiration_date?: string;
    /** List of quote line items. */
    line_items?: QuoteLineItem[];
    /**
     * It represents a specific time period for an associated amount. It
     * encapsulates information about the start date, end date, and the
     * corresponding monetary value. It is designed to facilitate calculations
     * and operations involving time-based amounts.
     */
    max_commit?: AmountDetail;
    /**
     * It represents a specific time period for an associated amount. It
     * encapsulates information about the start date, end date, and the
     * corresponding monetary value. It is designed to facilitate calculations
     * and operations involving time-based amounts.
     */
    min_commit?: AmountDetail;
    /** Name of the quote. */
    name: string;
    opportunity: WorkSummary;
    /**
     * It captures any extra discount applicable in addition to the
     * contract-level direct discount in the overall price by applying
     * discount to overage. This discount is specifically applicable when
     * generating invoices in each billing cycle, allowing for further
     * reduction in the overall price.
     */
    overage_discount?: DiscountDetail[];
    owner_id?: UserSummary;
    price_book?: PriceBookSummary;
    /** Details of a contact including email. */
    seller_company_details?: ContactDetailWithEmail;
    /** Quote signing config. */
    sign_config?: SignConfig;
    /** Describes the current stage of a object. */
    stage?: Stage;
    /** State of the object based upon the stage. */
    state?: string;
    /**
     * It represents the subtotal amount by just including the quote line
     * items amount.
     * @format double
     */
    subtotal: number;
    /**
     * It stores the tax amount applicable to the quote.
     * @format double
     */
    tax: number;
    /**
     * It represents a collection of terms and conditions associated with
     * the quote. Each element in the array represents a specific term
     * within the quote, capturing important details such as the term's
     * name, description, duration, and any other relevant contractual
     * information.
     */
    terms?: QuoteTerm[];
    /**
     * It represents the total amount for the quote, including line item
     * costs, discounts, taxes, and any additional charges.
     * @format double
     */
    total: number;
    /**
     * Unique url to access the quote. It is a combination of org's domain
     * and content slug.
     */
    url: string;
};
/**
 * quote-line-item
 * It represents an individual line item within a quote. It encapsulates
 * information about a specific SKU (Stock Keeping Unit) being proposed,
 * including details such as the SKU code, description, unit price,
 * quantity, and any associated discounts or additional charges.
 */
export interface QuoteLineItem {
    /**
     * Adjusted Unit price for the SKU in the line item. Pricing
     * associated with the SKU is ignored if this is set.
     * @format double
     */
    adjusted_unit_price?: number;
    /** Description of the quote line item. */
    description?: string;
    /**
     * Amount discount for the SKU associated with the line item.
     * @format double
     */
    discount_amount?: number;
    /**
     * Percentage Discount for the SKU associated with the line item.
     * @format double
     */
    discount_percentage?: number;
    /**
     * It represents the time when a specific line item's effectiveness or
     * applicability within the quote comes to an end.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    end_date?: string;
    /** The unique identifier of the quote line item within quote. */
    id: string;
    /**
     * It indicates the active status of a line item within a quote. When
     * set to true, it signifies that the line item is active and included
     * in the quote's calculations and pricing.
     */
    is_active: boolean;
    /**
     * List price is a product of Unit Price and Quantity.
     * @format double
     */
    list_price: number;
    /** Name of the quote line item. */
    name: string;
    /**
     * Net price of the SKU, after considering the discount.
     * @format double
     */
    net_price: number;
    /**
     * It captures any extra amount discount applicable to any overage
     * charges associated with a specific SKU. It represents a reduction
     * in the standard price or rate for additional usage or quantity
     * beyond the predefined limits.
     * @format double
     */
    overage_discount_amount?: number;
    /**
     * It captures any extra percent discount applicable to any overage
     * charges associated with a specific SKU. It represents a reduction
     * in the standard price or rate for additional usage or quantity
     * beyond the predefined limits.
     * @format double
     */
    overage_discount_percentage?: number;
    pricing: PricingSummary;
    /**
     * This captures how the aggregated price was calculated based on
     * price slabs and quantity. It provides a comprehensive overview of
     * the pricing structure, outlining the specific price slabs,
     * corresponding quantities, and their associated prices.
     */
    pricing_details?: PricingDetail[];
    /**
     * It is the List price for the SKU prorated over the line item
     * period.
     * @format double
     */
    prorated_list_price: number;
    /**
     * Quantity of the SKU.
     * @format int32
     */
    quantity: number;
    sku: SkuSummary;
    /**
     * It represents the time when a specific line item becomes effective
     * or applicable within the quote.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    start_date?: string;
    /**
     * Unit price of the SKU associated with the line item. It is
     * auto-populated from the pricing associated with the SKU. If the
     * pricing is tiered, then the unit price is calculated based on the
     * quantity of the SKU.
     * @format double
     */
    unit_price: number;
}
/** quote-summary */
export type QuoteSummary = AtomBaseSummary & {
    account: AccountSummary;
    opportunity: WorkSummary;
    owner_id?: UserSummary;
};
/**
 * quote-term
 * It represents a specific term within the quote, capturing important
 * details such as the term's name, description, duration, and any other
 * relevant contractual information.
 */
export interface QuoteTerm {
    /**
     * Captures quote's term related fields such as name, input, input type,
     * etc.
     */
    details: TermDetail;
    /** It stores the unique identifier of the term within quote. */
    id: string;
}
/** quote-term-template */
export type QuoteTermTemplate = AtomBase & {
    /**
     * Captures quote's term related fields such as name, input, input type,
     * etc.
     */
    details: TermDetail;
    /**
     * It indicates the active status of a term template. When set to
     * true, it signifies that the term template is active and can be used
     * in quotes. Defaults to true.
     */
    is_active: boolean;
};
/** quote-term-template-summary */
export type QuoteTermTemplateSummary = AtomBaseSummary;
/** quote-term-templates-list-request */
export interface QuoteTermTemplatesListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** The list of Quote term template DONs which are to be aggregated. */
    ids?: string[];
    /**
     * The maximum number of quote term templates to return. The default
     * is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Filter items which are in provided section types. */
    section_types?: TermDetailSectionType[];
    /**
     * List of fields to sort the Quote term template object, by and how
     * to sort them. Default is to sort by created_date in descending
     * order.
     */
    sort_by?: string[];
}
/** quote-term-templates-list-response */
export interface QuoteTermTemplatesListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The list of quote term template objects. */
    quote_term_templates: QuoteTermTemplate[];
}
/** quotes-clone-request */
export interface QuotesCloneRequest {
    /** The quote object's DON, from which quote is to be cloned. */
    id: string;
}
/** quotes-clone-response */
export interface QuotesCloneResponse {
    quote: Quote;
}
/** quotes-count-request */
export interface QuotesCountRequest {
    /**
     * The list of Account DONs for which quote objects are to be
     * aggregated.
     * @example ["ACC-12345"]
     */
    account_ids?: string[];
    /** Provides ways to specify date ranges on objects. */
    expiration_date?: DateFilter;
    /** The list of Quote DONs which are to be aggregated. */
    ids?: string[];
    /**
     * The list of Opportunity DONs for which quote objects are to be
     * aggregated.
     * @example ["OPP-12345"]
     */
    opportunity_ids?: string[];
    /** Filter items which are owned by provided owner IDs. */
    owner_ids?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for quote with any of the provided states. */
    state?: string[];
}
/** quotes-count-response */
export interface QuotesCountResponse {
    /**
     * The count of quote objects matching the filter.
     * @format int32
     */
    count: number;
}
/** quotes-create-request */
export interface QuotesCreateRequest {
    /**
     * Account ID of the customer for whom quote is being created.
     * @example "ACC-12345"
     */
    account_id: string;
    /** List of approvers. */
    approvers?: ApproverInfo[];
    /**
     * Effective end date of the contract.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    contract_end_date: string;
    /**
     * Effective start date of the contract once the quote is accepted.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    contract_start_date: string;
    /**
     * It represents a specific time period for an associated amount. It
     * encapsulates information about the start date, end date, and the
     * corresponding monetary value. It is designed to facilitate calculations
     * and operations involving time-based amounts.
     */
    credits_offered?: AmountDetail;
    /** It stores the discount details applicable to the quote. */
    discount?: CreateDiscountDetail[];
    /** Documents to be associated with the quote. */
    documents?: CreateDocument[];
    /**
     * Expiration date of the quote. It indicates the timestamp till when
     * the quote is valid.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    expiration_date?: string;
    /** It represents a collection of line items associated with the quote. */
    line_items?: CreateQuoteLineItem[];
    /**
     * It represents a specific time period for an associated amount. It
     * encapsulates information about the start date, end date, and the
     * corresponding monetary value. It is designed to facilitate calculations
     * and operations involving time-based amounts.
     */
    max_commit?: AmountDetail;
    /**
     * It represents a specific time period for an associated amount. It
     * encapsulates information about the start date, end date, and the
     * corresponding monetary value. It is designed to facilitate calculations
     * and operations involving time-based amounts.
     */
    min_commit?: AmountDetail;
    /** Name of the quote. */
    name: string;
    /**
     * Opportunity ID to which the quote is linked to.
     * @example "OPP-12345"
     */
    opportunity_id: string;
    /**
     * It captures any extra discount applicable in addition to the
     * contract-level direct discount in the overall price by applying
     * discount to overage. This discount is specifically applicable when
     * generating invoices in each billing cycle, allowing for further
     * reduction in the overall price.
     */
    overage_discount?: CreateDiscountDetail[];
    /**
     * It stores the sales representative's ID who owns the quote from the
     * seller side. Defaults to the creator of the quote, if not
     * explicitly set.
     */
    owner_id?: string;
    /**
     * The price book associated with this quote. Only prices listed in
     * the specified price book are eligible to be added to this quote.
     */
    price_book_id?: string;
    sign_config?: CreateSignConfig;
    /**
     * It represents a collection of terms and conditions associated with
     * the quote.
     */
    terms?: TermDetail[];
}
/** quotes-create-response */
export interface QuotesCreateResponse {
    quote: Quote;
}
/** quotes-delete-request */
export interface QuotesDeleteRequest {
    /** The quote object's DON. */
    id: string;
}
/** quotes-generate-pdf-request */
export interface QuotesGeneratePdfRequest {
    /** The quote object's DON. */
    id: string;
    /** Template to be used to generate the pdf. */
    template_name: string;
}
/** quotes-generate-pdf-response */
export interface QuotesGeneratePdfResponse {
    /**
     * The quote pdf generated bytes.
     * @format byte
     */
    data?: string;
}
/** quotes-get-request */
export interface QuotesGetRequest {
    /** The quote object's DON. */
    id: string;
}
/** quotes-get-response */
export interface QuotesGetResponse {
    quote: Quote;
}
/** quotes-list-request */
export interface QuotesListRequest {
    /**
     * The list of Account DONs for which quote objects are to be
     * aggregated.
     * @example ["ACC-12345"]
     */
    account_ids?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** Provides ways to specify date ranges on objects. */
    expiration_date?: DateFilter;
    /** The list of Quote DONs which are to be aggregated. */
    ids?: string[];
    /**
     * The maximum number of quotes to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /**
     * The list of Opportunity DONs for which quote objects are to be
     * aggregated.
     * @example ["OPP-12345"]
     */
    opportunity_ids?: string[];
    /** Filter items which are owned by provided owner IDs. */
    owner_ids?: string[];
    /**
     * List of fields to sort the Quote object, by and how to sort them.
     * Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for quote with any of the provided states. */
    state?: string[];
}
/** quotes-list-response */
export interface QuotesListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The list of quote objects. */
    quotes: Quote[];
}
/** quotes-update-request */
export interface QuotesUpdateRequest {
    /** List of approvers. */
    approvers?: ApproverInfo[];
    /** Details of a contact including email. */
    buyer_company_details?: ContactDetailWithEmail;
    /**
     * Effective end date of the contract.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    contract_end_date?: string;
    /**
     * Effective start date of the contract once the quote is accepted.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    contract_start_date?: string;
    /**
     * It represents a specific time period for an associated amount. It
     * encapsulates information about the start date, end date, and the
     * corresponding monetary value. It is designed to facilitate calculations
     * and operations involving time-based amounts.
     */
    credits_offered?: AmountDetail;
    /** Description of the quote. */
    description?: string;
    discount?: UpdateDiscountDetails;
    documents?: UpdateDocuments;
    /**
     * Expiration date of the quote. It indicates the timestamp till when
     * the quote is valid.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    expiration_date?: string;
    /** The quote object's DON. */
    id: string;
    line_items?: UpdateQuoteLineItems;
    /**
     * It represents a specific time period for an associated amount. It
     * encapsulates information about the start date, end date, and the
     * corresponding monetary value. It is designed to facilitate calculations
     * and operations involving time-based amounts.
     */
    max_commit?: AmountDetail;
    /**
     * It represents a specific time period for an associated amount. It
     * encapsulates information about the start date, end date, and the
     * corresponding monetary value. It is designed to facilitate calculations
     * and operations involving time-based amounts.
     */
    min_commit?: AmountDetail;
    /** Name of the quote. */
    name?: string;
    /**
     * Opportunity ID to which the quote is linked to.
     * @example "OPP-12345"
     */
    opportunity_id?: string;
    overage_discount?: UpdateDiscountDetails;
    /**
     * It stores the sales representative's ID who owns the quote from the
     * seller side. Defaults to the creator of the quote, if not
     * explicitly set.
     */
    owner_id?: string;
    /** Details of a contact including email. */
    seller_company_details?: ContactDetailWithEmail;
    sign_config?: UpdateSignConfig;
    /** Updates an object's stage. */
    stage?: StageUpdate;
    terms?: UpdateTerms;
}
/** quotes-update-response */
export interface QuotesUpdateResponse {
    quote: Quote;
}
/** reactions-list-request */
export interface ReactionsListRequest {
    /**
     * The cursor to resume iteration from, otherwise if not provided,
     * then iteration starts from the beginning.
     */
    cursor?: string;
    /** The name of the emoji to list reactions for. */
    emoji: string;
    /**
     * The maximum number of reactors to return.
     * @format int32
     */
    limit?: number;
    /**
     * The ID of the object to list reactions to.
     * @example "don:core:<partition>:devo/<dev-org-id>:ticket/123:timeline_event/<timeline-event-id>"
     */
    object: string;
}
/** reactions-list-response */
export interface ReactionsListResponse {
    /**
     * The cursor that should be used to iterate the next sequence of
     * results, otherwise if not set, then no elements exist after.
     */
    next_cursor?: string;
    /** The reactors that have reacted. */
    reactors: UserSummary[];
}
/** reactions-update-request */
export interface ReactionsUpdateRequest {
    action: ReactionsUpdateRequestAction;
    /** The name of the emoji for the reaction. */
    emoji: string;
    /**
     * The object to update the reaction to.
     * @example "don:core:<partition>:devo/<dev-org-id>:ticket/123:timeline_event/<timeline-event-id>"
     */
    object: string;
}
export declare enum ReactionsUpdateRequestAction {
    Add = "add",
    Remove = "remove"
}
/** reactions-update-response */
export type ReactionsUpdateResponse = object;
/** real-time-insight */
export type RealTimeInsight = InsightBase;
/** real-time-insight-summary */
export type RealTimeInsightSummary = InsightBaseSummary;
/** real-time-insight-value */
export type RealTimeInsightValue = InsightValueBase & {
    /** Current value of the real time insight. */
    value?: object;
};
/** real-time-insight-value-summary */
export type RealTimeInsightValueSummary = InsightValueBaseSummary;
/**
 * recipe-input-item
 * Describes single item type input of the recipe transformation.
 */
export interface RecipeInputItem {
    /** Identifies source item type. */
    item_type?: string;
    /** Describes if a single input item maps to multiple output items. */
    one_to_many?: boolean;
    /** Names under which this input item can be displayed in UI. */
    report_names?: string[];
}
/**
 * recipe-output-item
 * Describes single item type output of the recipe transformation.
 */
export interface RecipeOutputItem {
    /** A list of input item types. */
    inputs?: RecipeInputItem[];
    /** Identifies destination item type. */
    item_type?: string;
    /** Names under which it can be displayed in UIs. */
    report_names?: string[];
}
/**
 * recipe-report
 * Describes the high level overview of mappings between inputs and
 * outputs.
 */
export interface RecipeReport {
    /** Output items. */
    recipe_output_items?: RecipeOutputItem[];
}
/**
 * recipient-detail
 * Recipient detail is the signer information.
 */
export interface RecipientDetail {
    /** Member List with signing details. */
    member_details: MemberDetail[];
    /**
     * The sign order of the recipient.
     * @format int32
     */
    order: number;
}
/** recipient-info */
export interface RecipientInfo {
    /** Member List with signing details. */
    member_details: MemberInfo[];
    /**
     * The sign order of the recipient.
     * @format int64
     */
    order: number;
}
/**
 * recommendation
 * Autosuggest recommendation for given required fields.
 */
export interface Recommendation {
    /** List of recommended parts. */
    applies_to_part?: RecommendationItem[];
    /** List of recommended owners. */
    owned_by?: RecommendationItem[];
    /** List of recommended tags. */
    tag?: RecommendationItem[];
}
/**
 * recommendation-item
 * An autosuggest suggestion item.
 */
export interface RecommendationItem {
    applies_to_part?: PartSummary;
    /**
     * Confidence score of the recommendation.
     * @format float
     */
    confidence: number;
    /** Explanation for the recommendation. */
    explanation?: string;
    owned_by?: UserSummary;
    tag?: TagSummary;
    value?: 'applies_to_part' | 'owned_by' | 'tag';
}
/** record-template */
export type RecordTemplate = AtomBase & {
    /**
     * Custom Fields of the object that the record template is associated
     * with.
     */
    custom_fields?: FieldValues[];
    /** Description of the record template. */
    description?: string;
    /** Type of object that the record template is associated with. */
    leaf_type?: string;
    /** Name of the record template. */
    name?: string;
    /** Shared with membership. */
    shared_with?: SharedWithMembership[];
    /** State of the record template. */
    state?: RecordTemplateState;
    /**
     * Stock Fields of the object that the record template is associated
     * with.
     */
    stock_fields?: FieldValues[];
    subtype?: CustomTypeFragmentSummary;
};
/** record-template-create-request */
export interface RecordTemplateCreateRequest {
    /**
     * Custom Fields of the object that the record template is associated
     * with
     */
    custom_fields?: CreateFieldValues[];
    /** Description of the record template */
    description?: string;
    /** Type of object that the record template is associated with */
    leaf_type: string;
    /** Name of the record template */
    name: string;
    /** Shared with membership */
    shared_with?: SetSharedWithMembership[];
    /** State of the record template. */
    state?: RecordTemplateState;
    /**
     * Stock Fields of the object that the record template is associated
     * with
     */
    stock_fields?: CreateFieldValues[];
    /** Subtype of the object that the record template is associated with */
    subtype?: string;
}
/** record-template-create-response */
export interface RecordTemplateCreateResponse {
    record_template: RecordTemplate;
}
/** record-template-delete-request */
export interface RecordTemplateDeleteRequest {
    /** The id of the record template. */
    id: string;
}
/** record-template-delete-response */
export type RecordTemplateDeleteResponse = object;
/** record-template-get-request */
export interface RecordTemplateGetRequest {
    /** The id of the record template. */
    id: string;
}
/** record-template-get-response */
export interface RecordTemplateGetResponse {
    record_template_info: RecordTemplateInfo;
}
/** record-template-info */
export interface RecordTemplateInfo {
    record_template: RecordTemplate;
    /** List of fields that have been corrupted (do not follow the schema). */
    stale_fields?: FieldValues[];
}
/** record-template-list-request */
export interface RecordTemplateListRequest {
    /**
     * The creator of the record template.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** The leaf type of the record template. */
    leaf_type?: string[];
    /**
     * The limit of record templates to return.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** The name of the record template. */
    name?: string[];
    /** Fields to sort the record templates by. */
    sort_by?: string[];
    /** The state of the record template. */
    state?: RecordTemplateState[];
    /**
     * The custom schema fragment id of the subtype of the record
     * template.
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    subtype?: string[];
}
/** record-template-list-response */
export interface RecordTemplateListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The list of record templates. */
    record_templates_info: RecordTemplateInfo[];
}
/** State of the record template. */
export declare enum RecordTemplateState {
    Active = "active",
    Draft = "draft",
    Inactive = "inactive",
    NeedsAttention = "needs_attention"
}
/** record-template-summary */
export type RecordTemplateSummary = AtomBaseSummary;
/** record-template-update-request */
export interface RecordTemplateUpdateRequest {
    /**
     * Custom Fields of the object that the record template is associated
     * with
     */
    custom_fields?: UpdateFieldValues[];
    /** Description of the record template */
    description?: string;
    /** The id of the record template. */
    id: string;
    /** Type of object that the record template is associated with */
    leaf_type?: string;
    /** Name of the record template */
    name?: string;
    /** Shared with membership */
    shared_with?: SetSharedWithMembership[];
    /** State of the record template. */
    state?: RecordTemplateState;
    /**
     * Stock Fields of the object that the record template is associated
     * with
     */
    stock_fields?: UpdateFieldValues[];
    /** Subtype of the object that the record template is associated with */
    subtype?: string;
}
/** record-template-update-response */
export interface RecordTemplateUpdateResponse {
    record_template: RecordTemplate;
}
/** recurring-line-item */
export type RecurringLineItem = LineItemBase;
/** recurring-line-item-summary */
export type RecurringLineItemSummary = LineItemBaseSummary;
/** regional-dev-user */
export interface RegionalDevUser {
    /** The email of the Dev user created for the dev org. */
    email: string;
    /**
     * Globally unique DevRev Object Name (DON) of the Dev User created
     * for the dev org.
     */
    id: string;
}
/**
 * regular-line-item
 * The regular metered item for each SKU on which the utilization is
 * recorded.
 */
export interface RegularLineItem {
    pricing: PricingSummary;
    sku: SkuSummary;
    /**
     * Name of SKU for which line item is generated (Used as name of
     * invoice line items for better readability. It is against this name,
     * pricing fields such as quantity, unit_amount, amount, etc are
     * shown).
     */
    sku_name: string;
}
/**
 * relevant-context-request
 * Request for relevant context.
 */
export interface RelevantContextRequest {
    /**
     * Maximum number of results to return. The default value is 5.
     * @format int32
     * @min 1
     * @max 20
     */
    limit?: number;
    /** The query for which relevant context is requested. */
    query: string;
    /**
     * List of source types for which relevant context is requested.
     * @maxItems 2
     * @minItems 1
     */
    source_types: RelevantContextRequestRelevantContextSourceType[];
}
/** Source of the relevant context. */
export declare enum RelevantContextRequestRelevantContextSourceType {
    Article = "article",
    Question = "question"
}
/**
 * relevant-context-response
 * Response for relevant context.
 */
export interface RelevantContextResponse {
    /** A list of all the relevant articles. */
    articles: RelevantContextResponseRelevantContext[];
    /** A list of all the relevant questions. */
    qas: RelevantContextResponseRelevantContext[];
}
/**
 * relevant-context-response-relevant-context
 * Contains the relevant context and the corresponding object.
 */
export interface RelevantContextResponseRelevantContext {
    object: AtomSummary;
    /** The relevant context. */
    text: string;
}
/**
 * resolve-entities-request
 * Request for resolving entities to objects from a string.
 */
export interface ResolveEntitiesRequest {
    /**
     * Maximum number of resolved entities to return. The default value is
     * 5.
     * @format int32
     * @min 1
     */
    limit?: number;
    /**
     * The allowed object types to resolve the entities into.
     * @maxItems 3
     * @minItems 1
     */
    object_types: ResolveEntitiesRequestObjectType[];
    /**
     * Maximum number of possible objects to return per resolved entity.
     * The default value is 3.
     * @format int32
     * @min 1
     * @max 10
     */
    objects_per_entity?: number;
    /**
     * The text for which entities need to be resolved into objects.
     * @minLength 1
     * @maxLength 4096
     */
    text: string;
}
export declare enum ResolveEntitiesRequestObjectType {
    Part = "part",
    User = "user",
    Work = "work"
}
/**
 * resolve-entities-response
 * Response for resolving entities to objects from a string.
 */
export interface ResolveEntitiesResponse {
    /** A list of all the resolved entities. */
    resolved_entities: ResolveEntitiesResponseResolvedEntity[];
}
/**
 * resolve-entities-response-object-summary
 * Contains the object don and related fields for the object corresponding
 * to the resolved entity.
 */
export type ResolveEntitiesResponseObjectSummary = (PartSummary | UserSummary | WorkSummary) & {
    /** The object summary corresponding to the resolved entity. */
    object: ResolveEntitiesResponseObjectSummaryObject;
};
/** The object summary corresponding to the resolved entity. */
export declare enum ResolveEntitiesResponseObjectSummaryObject {
    Part = "part",
    User = "user",
    Work = "work"
}
/**
 * resolve-entities-response-resolved-entity
 * Contains the resolved entity string and the corresponding object.
 */
export interface ResolveEntitiesResponseResolvedEntity {
    /**
     * The resolved entity string. It will be a substring of the input
     * text. For example, 'John Doe' if input text is 'Please assign this
     * to John Doe'. One entity only corresponds to one substring match in
     * the text.
     */
    entity: string;
    /**
     * The list of possible objects corresponding to the resolved entity.
     * @maxItems 10
     * @minItems 1
     */
    objects: ResolveEntitiesResponseObjectSummary[];
}
/**
 * resource
 * Resource details.
 */
export interface Resource {
    /** Ids of the artifacts. */
    artifact_ids?: ArtifactSummary[];
    /** Ids of the artifacts. */
    artifacts?: ArtifactSummary[];
    /** The latest published version. */
    published_version?: string;
    /** Type of the article resource. */
    type?: ResourceType;
    /** URL of the external article. */
    url?: string;
}
/**
 * resource-summary
 * Resource details.
 */
export interface ResourceSummary {
    /** Ids of the artifacts. */
    artifact_ids?: ArtifactSummary[];
    /** Ids of the artifacts. */
    artifacts?: ArtifactSummary[];
    /** Type of the article resource. */
    type?: ResourceType;
    /** URL of the external article. */
    url?: string;
}
/** Type of the article resource. */
export declare enum ResourceType {
    Artifact = "artifact",
    Url = "url"
}
/**
 * rev-location-summary
 * Rev Part location details.
 */
export interface RevLocationSummary {
    /**
     * The detailed path inside an OpenAPI file where information about
     * this API object and its version were found.
     */
    param_paths?: string[];
    /**
     * The name of the repo where information about this API object and
     * its version were found.
     */
    repo_name?: string;
    /**
     * The repo path where information about this API object and its
     * version were found.
     */
    repo_path?: string;
    /**
     * The source where information about this API object and its version
     * were found.
     */
    source?: string;
}
export declare enum RevObjectTagsOperatorType {
    All = "all",
    Any = "any",
    Empty = "empty",
    NotAny = "not_any",
    NotEmpty = "not_empty"
}
/** rev-org */
export type RevOrg = OrgBase & {
    account?: AccountSummary;
    /** The artifacts attached to the Rev organization. */
    artifacts?: ArtifactSummary[];
    /** Custom fields. */
    custom_fields?: object;
    /**
     * Custom schema fragments.
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    custom_schema_fragments?: string[];
    /** Description of the Rev organization. */
    description?: string;
    /** Company's domain name. Example - 'devrev.ai'. */
    domain?: string;
    /**
     * External ref is a unique identifier for the Rev (customer)
     * organization from your primary customer system of records. If none
     * is specified, a system-generated identifier will be assigned to the
     * organization.
     */
    external_ref?: string;
    /**
     * External ref issuer is the external system of records from which
     * this Rev organization's data is imported. If external_ref is
     * provided during create and external_ref_issuer isn't, then issuer's
     * value is set to 'devrev:default'.
     */
    external_ref_issuer?: string;
    /** Whether the object is archived or not. */
    is_archived?: boolean;
    /** List of Dev user IDs' owning this Rev organization. */
    owned_by: UserSummary[];
    primary_rev_oid?: OrgSummary;
    /**
     * Combination of stock and custom schema fragment IDs.
     * @deprecated
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    schema_fragment_ids?: string[];
    sla?: SlaSummary;
    /**
     * Stock schema fragment.
     * @example "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"
     */
    stock_schema_fragment?: string;
    /** Subtype corresponding to the custom type fragment. */
    subtype?: string;
    /** Tags associated with an object. */
    tags?: TagWithValue[];
    /** The Tier of the corresponding RevOrg. */
    tier?: string;
    /** The type of the Rev organization. */
    type?: RevOrgType;
};
/**
 * rev-org-commerce-details
 * RevOrg commerce details contains commerce related data for a RevOrg.
 * Stores commerce configurations, billing details, shipping details, etc.
 */
export interface RevOrgCommerceDetails {
    /** The account ID of the dev_org. */
    account_id?: string;
    billing_admin_group_id: GroupSummary;
    /** Contact Details of the customer. */
    billing_details?: ContactDetails;
    /** The billing contact's email. */
    billing_email: string;
    /**
     * Settings related to payment, proration, etc. Configurations may or may
     * not be defined by a DevO. 1. If DevO defines configurations then same
     * configurations are copied to RevO also to sub pack (for now, later RevO
     * can also set) 2. If DevO doesn't set anything then these configurations
     * would be set to default by application for which they were being
     * defined (for eg. if DevO doesn't set payment method for it's RevOs then
     * stripe would set it to 'charge_automatically' by default).
     */
    configurations: Configuration;
    rev_org?: OrgSummary;
    /** Contact Details of the customer. */
    shipping_details?: ContactDetails;
}
/**
 * rev-org-membership
 * Rev Org the user belongs to.
 */
export interface RevOrgMembership {
    rev_org_id?: OrgSummary;
}
/** rev-org-summary */
export type RevOrgSummary = OrgBaseSummary;
/** The type of the Rev organization. */
export declare enum RevOrgType {
    B2B = "b2b",
    B2C = "b2c"
}
/**
 * rev-orgs-bulk-create-request
 * Request object to bulk create Rev organizations.
 */
export interface RevOrgsBulkCreateRequest {
    bulk_import_request_type?: BulkImportRequestTypeEnum;
    /**
     * Input file bytes of uploaded CSV file.
     * @format binary
     */
    data: File;
    rev_orgs_create_bulk_request_type?: BulkImportRequestTypeEnum;
}
/**
 * rev-orgs-bulk-create-response
 * Response object to create bulk Rev organizations under the given Dev
 * organization.
 */
export interface RevOrgsBulkCreateResponse {
    /** Error found in the file. */
    file_error?: string;
    /**
     * List of all CSV headers which were invalid with stock and custom
     * fields.
     */
    invalid_csv_headers?: string[];
    /** List of all the Rev organization details. */
    rev_orgs: RevOrg[];
    /** List of all the errors occurred in the rows. */
    row_errors?: RowError[];
}
/** rev-orgs-commerce-details-get-request */
export interface RevOrgsCommerceDetailsGetRequest {
    /**
     * The rev org's DON.
     * @example "REV-AbCdEfGh"
     */
    id?: string;
}
/** rev-orgs-commerce-details-get-response */
export interface RevOrgsCommerceDetailsGetResponse {
    /**
     * RevOrg commerce details contains commerce related data for a RevOrg.
     * Stores commerce configurations, billing details, shipping details, etc.
     */
    commerce_details: RevOrgCommerceDetails;
}
/** rev-orgs-commerce-details-list-request */
export interface RevOrgsCommerceDetailsListRequest {
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * Filter items which have created date after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_date_after?: string;
    /**
     * Filter items which have created date before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_date_before?: string;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of items to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Filter items with pin code. */
    pin_code?: string;
    /**
     * The list of rev org DONs which are to be aggregated.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org_ids?: string[];
    /**
     * List of fields to sort the items, by and how to sort them. Default
     * is to sort by created_date in descending order.
     */
    sort_by?: string[];
}
/** rev-orgs-commerce-details-list-response */
export interface RevOrgsCommerceDetailsListResponse {
    /** The list of rev_org commerce details object. */
    commerce_details: RevOrgCommerceDetails[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/** rev-orgs-commerce-details-update-request */
export interface RevOrgsCommerceDetailsUpdateRequest {
    /** Contact Details of the customer. */
    billing_details?: ContactDetails;
    /** Billing email of the rev_org. */
    billing_email?: string;
    /**
     * Settings related to payment, proration, etc. Configurations may or may
     * not be defined by a DevO. 1. If DevO defines configurations then same
     * configurations are copied to RevO also to sub pack (for now, later RevO
     * can also set) 2. If DevO doesn't set anything then these configurations
     * would be set to default by application for which they were being
     * defined (for eg. if DevO doesn't set payment method for it's RevOs then
     * stripe would set it to 'charge_automatically' by default).
     */
    configuration?: Configuration;
    /**
     * The rev org's DON.
     * @example "REV-AbCdEfGh"
     */
    id?: string;
    /** Contact Details of the customer. */
    shipping_details?: ContactDetails;
}
/** rev-orgs-commerce-details-update-response */
export interface RevOrgsCommerceDetailsUpdateResponse {
    /**
     * RevOrg commerce details contains commerce related data for a RevOrg.
     * Stores commerce configurations, billing details, shipping details, etc.
     */
    commerce_details: RevOrgCommerceDetails;
}
/** rev-orgs-count-request */
export interface RevOrgsCountRequest {
    /**
     * Filters by account.
     * @example ["ACC-12345"]
     */
    account?: string[];
    account_op?: RevOrgsFiltersAccountOperatorType;
    /** Filters by creator. */
    created_by?: string[];
    created_by_op?: RevObjectTagsOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** Array of display names of Rev orgs to be filtered. */
    display_name?: string[];
    /** Array of domain for Rev organizations to be filtered. */
    domain?: string[];
    /** Environment values to be filtered. */
    environment?: OrgEnvironment[];
    /** List of external refs to filter Rev organizations for. */
    external_ref?: string[];
    /** Array of external ref issuers for Rev organizations to be filtered. */
    external_ref_issuer?: string[];
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** Filters by owners. */
    owned_by?: string[];
    /**
     * Filters by owners.
     * @deprecated
     */
    owned_by_ids?: string[];
    owned_by_op?: RevObjectTagsOperatorType;
    /** Filter by SLA */
    sla?: string[];
    /** State values to be filtered. */
    state?: OrgState[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    subtype_op?: SubtypeOpOperatorType;
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    tags_op?: RevObjectTagsOperatorType;
    /** Array of tier for Rev organizations to be filtered. */
    tier?: string[];
    /** Types of Rev organizations to be filtered. */
    type?: RevOrgType[];
}
/** rev-orgs-count-response */
export interface RevOrgsCountResponse {
    /**
     * Count of Rev organizations matching the filter.
     * @format int32
     */
    count: number;
    /** Whether there are more Rev orgs than the count value. */
    has_more: boolean;
}
/**
 * rev-orgs-create-request
 * Request object to create a new Rev organization in the Dev
 * organization.
 */
export interface RevOrgsCreateRequest {
    /**
     * Account Id to associate with this Rev organization.
     * @example "ACC-12345"
     */
    account?: string;
    /** Create object for postal_address. */
    address?: CreatePostalAddress;
    /**
     * The IDs of the artifacts to associate with the Rev organization.
     * @example ["ARTIFACT-12345"]
     */
    artifacts?: string[];
    /** Application-defined custom fields. */
    custom_fields?: object;
    /**
     * Schema fragment IDs associated with this Rev organization.
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    custom_schema_fragments?: string[];
    /**
     * Requested custom schemas described abstractly. Every provided schema's
     * custom field must be specified, otherwise a bad request error is
     * returned. If a new custom schema specifier is provided, then it will be
     * added to the work, otherwise if a custom schema is omitted from the
     * specifier, it remains unmodified.
     */
    custom_schema_spec?: CustomSchemaSpec;
    /** Description of the Rev organization. */
    description?: string;
    /** Name of the Rev organization. */
    display_name: string;
    /** Company's domain name. Example - 'devrev.ai'. */
    domain?: string;
    /** The environment of the Org. Defaults to 'production' if not specified. */
    environment?: OrgEnvironment;
    /**
     * External ref is a custom unique identifier which is a reference to
     * an unique id for this organization's data in some system of
     * records.
     */
    external_ref?: string;
    /**
     * Artifact ID of the Rev organization's logo.
     * @example "ARTIFACT-12345"
     */
    logo_id?: string;
    /** List of Dev users owning this Rev organization. */
    owned_by?: string[];
    /**
     * List of Dev users owning this Rev organization.
     * @deprecated
     */
    owned_by_ids?: string[];
    /** Phone numbers for the Rev organization. */
    phone_number?: CreatePhoneNumber[];
    /** Phone numbers for the Rev organization. */
    phone_numbers?: string[];
    /**
     * Schema fragment IDs associated with this Rev organization.
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    schema_fragment_ids?: string[];
    /** State of the Organization. */
    state?: OrgState;
    /** Tags associated with the Rev organization. */
    tags?: SetTagWithValue[];
    /** The tier of the RevOrg. */
    tier?: string;
    /** The type of the Rev organization. */
    type?: RevOrgType;
}
/**
 * rev-orgs-create-response
 * Response object for request to create a new Rev organization.
 */
export interface RevOrgsCreateResponse {
    rev_org: RevOrg;
}
/**
 * rev-orgs-delete-request
 * Request object to delete a Rev organization.
 */
export interface RevOrgsDeleteRequest {
    /**
     * The ID of Rev organization to delete.
     * @example "REV-AbCdEfGh"
     */
    id: string;
}
/**
 * rev-orgs-delete-response
 * The response to deleting a Rev organization.
 */
export type RevOrgsDeleteResponse = object;
/**
 * rev-orgs-delete-validate-request
 * Request object to check if an Rev organization can be deleted.
 */
export interface RevOrgsDeleteValidateRequest {
    /**
     * The ID of Rev organization to be checked for deletion.
     * @example "REV-AbCdEfGh"
     */
    id: string;
}
/**
 * rev-orgs-delete-validate-response
 * Response object containing infomation if a Rev organization can be
 * deleted.
 */
export interface RevOrgsDeleteValidateResponse {
    /** Bool value denoting if deletion of a Rev organization is supported. */
    is_supported: boolean;
    /** Optional string to denote why a Rev organization cannot be deleted. */
    reason?: string;
}
/** rev-orgs-export-request */
export interface RevOrgsExportRequest {
    /**
     * Filters by account.
     * @example ["ACC-12345"]
     */
    account?: string[];
    account_op?: RevOrgsFiltersAccountOperatorType;
    /** Filters by creator. */
    created_by?: string[];
    created_by_op?: RevObjectTagsOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** Array of display names of Rev orgs to be filtered. */
    display_name?: string[];
    /** Array of domain for Rev organizations to be filtered. */
    domain?: string[];
    /** Environment values to be filtered. */
    environment?: OrgEnvironment[];
    /** List of external refs to filter Rev organizations for. */
    external_ref?: string[];
    /** Array of external ref issuers for Rev organizations to be filtered. */
    external_ref_issuer?: string[];
    /**
     * The number of Rev Organisations to return. The default is '50', the
     * maximum is '5000'.
     * @format int32
     */
    first?: number;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** Filters by owners. */
    owned_by?: string[];
    /**
     * Filters by owners.
     * @deprecated
     */
    owned_by_ids?: string[];
    owned_by_op?: RevObjectTagsOperatorType;
    /** Filter by SLA */
    sla?: string[];
    /**
     * Fields to sort the Rev Organisations by and the direction to sort
     * them.
     */
    sort_by?: string[];
    /** State values to be filtered. */
    state?: OrgState[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    subtype_op?: SubtypeOpOperatorType;
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    tags_op?: RevObjectTagsOperatorType;
    /** Array of tier for Rev organizations to be filtered. */
    tier?: string[];
    /** Types of Rev organizations to be filtered. */
    type?: RevOrgType[];
}
/** rev-orgs-export-response */
export interface RevOrgsExportResponse {
    /** The resulting list of Rev Organisations. */
    rev_orgs: RevOrg[];
}
export declare enum RevOrgsFiltersAccountOperatorType {
    Any = "any",
    NotAny = "not_any"
}
/**
 * rev-orgs-get-request
 * Request object to get Rev organization's information.
 */
export interface RevOrgsGetRequest {
    /**
     * The ID of account for which default Rev organization is to be
     * fetched.
     * @example "ACC-12345"
     */
    account?: string;
    /**
     * The ID of the required Rev organization.
     * @example "REV-AbCdEfGh"
     */
    id?: string;
}
/**
 * rev-orgs-get-response
 * The response to getting a Rev organization's information.
 */
export interface RevOrgsGetResponse {
    rev_org: RevOrg;
}
/**
 * rev-orgs-group
 * Group object for Rev organizations group request.
 */
export interface RevOrgsGroup {
    /**
     * The cursor that should be used to resume iteration, otherwise if
     * not provided, then iteration has completed.
     * @deprecated
     */
    cursor?: string;
    /** Unique key according to which the items are grouped. */
    key: string;
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The group of Rev organizations. */
    rev_orgs: RevOrg[];
}
/**
 * rev-orgs-group-request
 * A request to get group list of Rev organizations for the authenticated
 * user's Dev organization.
 */
export interface RevOrgsGroupRequest {
    /**
     * Filters by account.
     * @example ["ACC-12345"]
     */
    account?: string[];
    account_op?: RevOrgsFiltersAccountOperatorType;
    /** Filters by creator. */
    created_by?: string[];
    created_by_op?: RevObjectTagsOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** Array of display names of Rev orgs to be filtered. */
    display_name?: string[];
    /** Array of domain for Rev organizations to be filtered. */
    domain?: string[];
    /** Environment values to be filtered. */
    environment?: OrgEnvironment[];
    /** List of external refs to filter Rev organizations for. */
    external_ref?: string[];
    /** Array of external ref issuers for Rev organizations to be filtered. */
    external_ref_issuer?: string[];
    /** The field to group the rev orgs by. */
    group_by: string;
    /**
     * The maximum number of groups to return. If not set, then the
     * default is '10'.
     * @format int32
     */
    limit?: number;
    /**
     * The maximum number of rev orgs to return for an individual group.
     * If not set, then the default is '50'.
     * @format int32
     */
    limit_per_group?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** Filters by owners. */
    owned_by?: string[];
    /**
     * Filters by owners.
     * @deprecated
     */
    owned_by_ids?: string[];
    owned_by_op?: RevObjectTagsOperatorType;
    /** Filter by SLA */
    sla?: string[];
    /** Fields to sort the rev orgs by. */
    sort_by?: string[];
    /** State values to be filtered. */
    state?: OrgState[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    subtype_op?: SubtypeOpOperatorType;
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    tags_op?: RevObjectTagsOperatorType;
    /** Array of tier for Rev organizations to be filtered. */
    tier?: string[];
    /** Types of Rev organizations to be filtered. */
    type?: RevOrgType[];
}
/**
 * rev-orgs-group-response
 * Response object for Rev organizations group request.
 */
export interface RevOrgsGroupResponse {
    /**
     * The cursor that should be used to resume iteration, otherwise if
     * not provided, then iteration has completed.
     * @deprecated
     */
    cursor?: string;
    /** The list of groups. */
    groups: RevOrgsGroup[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/**
 * rev-orgs-list-request
 * A request to get the list of Rev organizations for the authenticated
 * user's Dev organization.
 */
export interface RevOrgsListRequest {
    /**
     * Filters by account.
     * @example ["ACC-12345"]
     */
    account?: string[];
    account_op?: RevOrgsFiltersAccountOperatorType;
    /** Filters by creator. */
    created_by?: string[];
    created_by_op?: RevObjectTagsOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** Array of display names of Rev orgs to be filtered. */
    display_name?: string[];
    /** Array of domain for Rev organizations to be filtered. */
    domain?: string[];
    /** Environment values to be filtered. */
    environment?: OrgEnvironment[];
    /** List of external refs to filter Rev organizations for. */
    external_ref?: string[];
    /** Array of external ref issuers for Rev organizations to be filtered. */
    external_ref_issuer?: string[];
    /**
     * The maximum number of Rev organizations to be retrieved per page.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** Filters by owners. */
    owned_by?: string[];
    /**
     * Filters by owners.
     * @deprecated
     */
    owned_by_ids?: string[];
    owned_by_op?: RevObjectTagsOperatorType;
    /** Filter by SLA */
    sla?: string[];
    /**
     * Fields to sort the Rev organizations by and the direction to sort
     * them.
     */
    sort_by?: string[];
    /** State values to be filtered. */
    state?: OrgState[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    subtype_op?: SubtypeOpOperatorType;
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    tags_op?: RevObjectTagsOperatorType;
    /** Array of tier for Rev organizations to be filtered. */
    tier?: string[];
    /** Types of Rev organizations to be filtered. */
    type?: RevOrgType[];
}
/**
 * rev-orgs-list-response
 * The response to getting a list of Rev organizations' information.
 */
export interface RevOrgsListResponse {
    /**
     * The cursor that should be used to resume iteration. If not
     * provided, then iteration has completed.
     * @deprecated
     */
    cursor?: string;
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** List with all of the Rev organizations' information. */
    rev_orgs: RevOrg[];
}
/**
 * rev-orgs-merge-request
 * Request object for RevOrgsMerge call.
 */
export interface RevOrgsMergeRequest {
    /**
     * Whether to merge the timeline of the secondary Rev organization
     * into the primary Rev organization.
     */
    merge_timeline?: boolean;
    /**
     * The unique ID of the primary org.
     * @example "REV-AbCdEfGh"
     */
    primary_org: string;
    /**
     * The unique ID of the secondary org.
     * @example "REV-AbCdEfGh"
     */
    secondary_org: string;
}
/**
 * rev-orgs-merge-response
 * The response to RevOrgsMerge call.
 */
export type RevOrgsMergeResponse = object;
/**
 * rev-orgs-update-request
 * Request object to update information of the Rev organization.
 */
export interface RevOrgsUpdateRequest {
    /**
     * New account ID to associate with this Rev organization.
     * @example "ACC-12345"
     */
    account?: string;
    /** Update object for PostalAddress. */
    address?: UpdatePostalAddress;
    artifacts?: RevOrgsUpdateRequestArtifacts;
    /** Application-defined custom fields. */
    custom_fields?: object;
    /**
     * Schema fragment IDs associated with this Rev organization.
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    custom_schema_fragments?: string[];
    /**
     * Requested custom schemas described abstractly. Every provided schema's
     * custom field must be specified, otherwise a bad request error is
     * returned. If a new custom schema specifier is provided, then it will be
     * added to the work, otherwise if a custom schema is omitted from the
     * specifier, it remains unmodified.
     */
    custom_schema_spec?: CustomSchemaSpec;
    /** Description of the Rev organization. */
    description?: string;
    /** Customer chosen name for the Rev organization. */
    display_name?: string;
    /** Company's domain name. Example - 'devrev.ai'. */
    domain?: string;
    /** The environment of the Org. Defaults to 'production' if not specified. */
    environment?: OrgEnvironment;
    /**
     * External ref is a custom unique identifier which is a reference to
     * an unique id for this organization's data in some system of
     * records.
     */
    external_ref?: string;
    /**
     * The ID of Rev organization to update.
     * @example "REV-AbCdEfGh"
     */
    id: string;
    /**
     * Artifact ID of the Rev organization's logo.
     * @example "ARTIFACT-12345"
     */
    logo_id?: string | null;
    /** List of Dev users owning this Rev organization. */
    owned_by?: string[];
    /**
     * List of Dev user IDs owning the Rev organization.
     * @deprecated
     */
    owned_by_ids?: string[];
    /** Phone numbers of the Rev organization. */
    phone_number?: UpdatePhoneNumber[];
    /** Phone numbers of the Rev org. */
    phone_numbers?: string[];
    /**
     * Schema fragment IDs associated with this Rev organization.
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    schema_fragment_ids?: string[];
    /** State of the Organization. */
    state?: OrgState;
    /** Tags associated with the Rev organization. */
    tags?: SetTagWithValue[];
    /** The tier of the RevOrg. */
    tier?: string;
    /** The type of the Rev organization. */
    type?: RevOrgType;
}
/** rev-orgs-update-request-artifacts */
export interface RevOrgsUpdateRequestArtifacts {
    /**
     * Sets the IDs to the provided artifact IDs.
     * @example ["ARTIFACT-12345"]
     */
    set?: string[];
}
/**
 * rev-orgs-update-response
 * Response object to updating Rev organization's information.
 */
export interface RevOrgsUpdateResponse {
    rev_org: RevOrg;
}
/**
 * rev-orgs-upgrade-request
 * Response object containing infomation of RevOrgs to be upgraded.
 */
export interface RevOrgsUpgradeRequest {
    /** Dev Organization id of Devorg to be upgraded. */
    dev_oid: string;
}
/**
 * rev-orgs-upgrade-response
 * Response object containing infomation around upgrade.
 */
export type RevOrgsUpgradeResponse = object;
/**
 * rev-portal-group
 * Preferences group for Rev-Portal.
 */
export interface RevPortalGroup {
    /** Preferences group for Ticket creation. */
    ticket_creation_preferences?: TicketCreationGroup;
}
/** rev-user */
export type RevUser = UserBase & {
    /** The artifacts attached to the Rev user. */
    artifacts?: ArtifactSummary[];
    /** Browser name and version of the user. */
    browser?: string;
    /** Language of browser of the user. */
    browser_language?: string;
    /** Custom fields. */
    custom_fields?: object;
    /**
     * Custom schema fragments.
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    custom_schema_fragments?: string[];
    /** Description of the Rev user. */
    description?: string;
    /**
     * External ref is a mutable unique identifier for a user within the
     * Rev organization from your primary customer record. If none is
     * available, a good alternative is the email address/phone number
     * which could uniquely identify the user. If none is specified, a
     * system-generated identifier will be assigned to the user.
     */
    external_ref?: string;
    /**
     * External ref issuer is the external system of records from which
     * this Rev user's data is imported. If external_ref is provided
     * during create and external_ref_issuer isn't, then issuer's value is
     * set to 'devrev:default'.
     */
    external_ref_issuer?: string;
    /**
     * External ref is a unique identifier for a user within the
     * organization from your primary customer record. If none is
     * available, a good alternative is the email address/phone number
     * which could uniquely identify the user. If none is specified, a
     * system-generated identifier will be assigned to the user.
     */
    external_uid?: string;
    /**
     * External ref issuer is the external system of records from which
     * this Rev user's data is imported. If external_ref is provided
     * during create and external_ref_issuer isn't, then issuer's value is
     * set to 'devrev:default'.
     */
    external_uid_issuer?: string;
    /** Channel from which the rev identity is ingested. */
    ingestion_channel?: RevUserIngestionChannel;
    /** Whether the Rev user is verified or not. */
    is_verified?: boolean;
    /** Status of the user on the PLuG. */
    plug_availability?: RevUserPlugAvailability;
    /** The display id of the corresponding Rev Organization. */
    rev_oid?: string;
    rev_org?: OrgSummary;
    /** Rev Orgs the user is associated with. */
    rev_orgs?: RevOrgMembership[];
    /**
     * Combination of stock and custom schema fragment IDs.
     * @deprecated
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    schema_fragment_ids?: string[];
    /**
     * Stock schema fragment.
     * @example "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"
     */
    stock_schema_fragment?: string;
    /** Subtype corresponding to the custom type fragment. */
    subtype?: string;
    /** Tags associated with the object. */
    tags?: TagWithValue[];
    /** Type of the user. */
    user_type?: RevUserUserType;
};
/**
 * rev-user-external-reference
 * Unique Identifier for the rev user.
 */
export interface RevUserExternalReference {
    /**
     * Unique external identifier for a user within the organization from
     * your primary customer record.
     */
    external_ref: string;
    /**
     * Reference to an external system of records from which this
     * organization's data is imported.
     */
    external_ref_issuer: string;
}
/** Channel from which the rev identity is ingested. */
export declare enum RevUserIngestionChannel {
    Airdrop = "airdrop",
    Csv = "csv"
}
/** Status of the user on the PLuG. */
export declare enum RevUserPlugAvailability {
    Offline = "offline",
    Online = "online"
}
/** rev-user-summary */
export type RevUserSummary = UserBaseSummary & {
    /**
     * External ref is a mutable unique identifier for a user within the
     * Rev organization from your primary customer record. If none is
     * available, a good alternative is the email address/phone number
     * which could uniquely identify the user. If none is specified, a
     * system-generated identifier will be assigned to the user.
     */
    external_ref?: string;
    rev_org?: OrgSummary;
};
/** Type of the user. */
export declare enum RevUserUserType {
    Anonymous = "anonymous",
    Identified = "identified"
}
/**
 * rev-users-account-traits
 * Carries account info.
 */
export interface RevUsersAccountTraits {
    /** Application-defined custom fields of the account. */
    custom_fields?: object;
    /** The description of the account. */
    description?: string;
    /** The display name of the account. */
    display_name?: string;
    /** The domains of the account. */
    domains?: string[];
    /** The phone numbers of the account. */
    phone_numbers?: string[];
    /** The tier of the account. */
    tier?: string;
    /** The websites of the account. */
    websites?: string[];
}
/**
 * rev-users-bulk-create-request
 * Request object to bulk create Rev Users.
 */
export interface RevUsersBulkCreateRequest {
    bulk_import_request_type?: BulkImportRequestTypeEnum;
    /**
     * Input file bytes of uploaded CSV file.
     * @format binary
     */
    data: File;
    /** Tags to be associated with the imported rev-users. */
    import_tags?: string[];
    rev_users_create_bulk_request_type?: BulkImportRequestTypeEnum;
    /** Flag to update the rev-user if it already exists. */
    update_if_exists?: boolean;
}
/**
 * rev-users-bulk-create-response
 * Response object to create bulk Rev users.
 */
export interface RevUsersBulkCreateResponse {
    /** Error found in the file. */
    file_error?: string;
    /**
     * List of all CSV headers which were invalid with stock or custom
     * fields.
     */
    invalid_csv_headers?: string[];
    /** List of all the Rev users details. */
    rev_users: RevUser[];
    /** List of all the errors present in the rows. */
    row_errors?: RowError[];
}
/** rev-users-count-request */
export interface RevUsersCountRequest {
    /**
     * Filters for Rev users belonging to the provided account IDs.
     * @maxItems 1
     * @example ["ACC-12345"]
     */
    account?: string[];
    /** Filters for Rev users that were created by the specified user(s). */
    created_by?: string[];
    created_by_op?: RevObjectTagsOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2)
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** List of emails of Rev users to be filtered. */
    email?: string[];
    email_op?: RevObjectTagsOperatorType;
    /** List of external refs to filter Rev users for. */
    external_ref?: string[];
    /** List of external ref issuers for Rev users to be filtered. */
    external_ref_issuer?: string[];
    external_ref_op?: RevObjectTagsOperatorType;
    /** Value of is_verified field to filter the Rev users. */
    is_verified?: boolean;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** List of phone numbers, in E.164 format, to filter Rev users on. */
    phone_numbers?: string[];
    /** Filters for PLuG availability. */
    plug_availability?: RevUserPlugAvailability[];
    /**
     * List of IDs of Rev organizations to be filtered.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org?: string[];
    rev_org_op?: RevUsersFiltersRevOrgOperatorType;
    /** List of state of Rev users to be filtered. */
    state?: UserState[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    subtype_op?: SubtypeOpOperatorType;
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    tags_op?: RevObjectTagsOperatorType;
}
/** rev-users-count-response */
export interface RevUsersCountResponse {
    /**
     * Count of Rev users matching the filter.
     * @format int32
     */
    count: number;
    /** Whether there are more Rev users than the count value. */
    has_more: boolean;
}
/**
 * rev-users-create-request
 * Request object to create a new Rev user for a Rev organization.
 */
export interface RevUsersCreateRequest {
    /**
     * The ID of the account to which the created Rev user is associated.
     * @example "ACC-12345"
     */
    account?: string;
    /**
     * The IDs of the artifacts to associate with the Rev user.
     * @example ["ARTIFACT-12345"]
     */
    artifacts?: string[];
    /** The browser of the Rev user. */
    browser?: string;
    /** The browser language of the Rev user. */
    browser_language?: string;
    /** Application-defined custom fields. */
    custom_fields?: object;
    /**
     * The schema fragment IDs associated with the Rev user.
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    custom_schema_fragments?: string[];
    /**
     * Requested custom schemas described abstractly. Every provided schema's
     * custom field must be specified, otherwise a bad request error is
     * returned. If a new custom schema specifier is provided, then it will be
     * added to the work, otherwise if a custom schema is omitted from the
     * specifier, it remains unmodified.
     */
    custom_schema_spec?: CustomSchemaSpec;
    /** Description of the Rev user. */
    description?: string;
    /**
     * Display handle of the user. This handle will be used for
     * referencing a Rev user. Eg. in conversations.
     * @deprecated
     */
    display_handle?: string;
    /** The user's display name. The name is non-unique and mutable. */
    display_name?: string;
    /**
     * Artifact ID of a Rev user's display picture.
     * @example "ARTIFACT-12345"
     */
    display_picture_id?: string;
    /** Email address of the Rev user. */
    email?: string;
    /**
     * External ref is a mutable unique identifier for a user within the
     * Dev organization from your primary customer record. If none is
     * available, a good alternative is the email address/phone number
     * which could uniquely identify the user. If none is specified, a
     * system-generated identifier will be assigned to the user.
     */
    external_ref?: string;
    /**
     * External ref issuer is the external system of records from which
     * this Rev user's data is imported. If external_ref is provided
     * during create and external_ref_issuer isn't, then issuer's value is
     * set to 'devrev:default'.
     */
    external_ref_issuer?: string;
    /**
     * External user id is a custom unique identifier which is a reference
     * to an unique id for this user's data in some system of records.
     * @deprecated
     */
    external_uid?: string;
    /**
     * External user id issuer is a reference to an external system of
     * records from which this user's data is imported. If
     * external_user_id is provided during create and
     * external_user_id_issuer isn't, then its value is set to
     * 'devrev:default'.
     * @deprecated
     */
    external_uid_issuer?: string;
    /**
     * The ID of Rev organization for which a Rev user is to be created.
     * This field is deprecated now. User rev_org field instead.
     * @deprecated
     * @example "REV-AbCdEfGh"
     */
    org_id?: string;
    /** Phone numbers, in E.164 format, of the Rev user. */
    phone_numbers?: string[];
    /** Status of the user on the PLuG. */
    plug_availability?: RevUserPlugAvailability;
    /**
     * The ID of the Rev organization to which the created Rev user is
     * associated.
     * @example "REV-AbCdEfGh"
     */
    rev_org?: string;
    /**
     * Schema fragment IDs.
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    schema_fragment_ids?: string[];
    /** State of the user. */
    state?: UserState;
    /** Tags associated with the Rev user. */
    tags?: SetTagWithValue[];
}
/**
 * rev-users-create-response
 * Response object for creating a new Rev user for Rev organization.
 */
export interface RevUsersCreateResponse {
    rev_user: RevUser;
}
/**
 * rev-users-delete-request
 * Request object to delete a Rev user.
 */
export interface RevUsersDeleteRequest {
    /** The ID of Rev user to delete. */
    id: string;
}
/**
 * rev-users-delete-response
 * The response to deleting a Rev user of a Rev organization.
 */
export type RevUsersDeleteResponse = object;
/** rev-users-export-request */
export interface RevUsersExportRequest {
    /**
     * Filters for Rev users belonging to the provided account IDs.
     * @maxItems 1
     * @example ["ACC-12345"]
     */
    account?: string[];
    /** Filters for Rev users that were created by the specified user(s). */
    created_by?: string[];
    created_by_op?: RevObjectTagsOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2)
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** List of emails of Rev users to be filtered. */
    email?: string[];
    email_op?: RevObjectTagsOperatorType;
    /** List of external refs to filter Rev users for. */
    external_ref?: string[];
    /** List of external ref issuers for Rev users to be filtered. */
    external_ref_issuer?: string[];
    external_ref_op?: RevObjectTagsOperatorType;
    /**
     * The number of Rev Users to return. The default is '50', the maximum
     * is '5000'.
     * @format int32
     */
    first?: number;
    /** Value of is_verified field to filter the Rev users. */
    is_verified?: boolean;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** List of phone numbers, in E.164 format, to filter Rev users on. */
    phone_numbers?: string[];
    /** Filters for PLuG availability. */
    plug_availability?: RevUserPlugAvailability[];
    /**
     * List of IDs of Rev organizations to be filtered.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org?: string[];
    rev_org_op?: RevUsersFiltersRevOrgOperatorType;
    /** Fields to sort the Rev Users by and the direction to sort them. */
    sort_by?: string[];
    /** List of state of Rev users to be filtered. */
    state?: UserState[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    subtype_op?: SubtypeOpOperatorType;
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    tags_op?: RevObjectTagsOperatorType;
}
/** rev-users-export-response */
export interface RevUsersExportResponse {
    /** The resulting list of Rev Users. */
    rev_users: RevUser[];
}
export declare enum RevUsersFiltersRevOrgOperatorType {
    Any = "any",
    Empty = "empty",
    NotAny = "not_any",
    NotEmpty = "not_empty"
}
/**
 * rev-users-get-request
 * Request object to get a Rev user.
 */
export interface RevUsersGetRequest {
    /** The ID of Rev user to be retrieved. */
    id: string;
}
/**
 * rev-users-get-response
 * The returned Rev user.
 */
export interface RevUsersGetResponse {
    rev_user: RevUser;
}
/**
 * rev-users-group
 * Group object for RevUsers Group request.
 */
export interface RevUsersGroup {
    /**
     * The cursor that should be used to resume iteration, otherwise if
     * not provided, then iteration has completed.
     * @deprecated
     */
    cursor?: string;
    /** Unique key according to which the items are grouped. */
    key: string;
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The group of Rev users. */
    rev_users: RevUser[];
}
/**
 * rev-users-group-request
 * A request to get group list of Rev users for the authenticated user's
 * Dev Organization.
 */
export interface RevUsersGroupRequest {
    /**
     * Filters for Rev users belonging to the provided account IDs.
     * @maxItems 1
     * @example ["ACC-12345"]
     */
    account?: string[];
    /** Filters for Rev users that were created by the specified user(s). */
    created_by?: string[];
    created_by_op?: RevObjectTagsOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2)
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** List of emails of Rev users to be filtered. */
    email?: string[];
    email_op?: RevObjectTagsOperatorType;
    /** List of external refs to filter Rev users for. */
    external_ref?: string[];
    /** List of external ref issuers for Rev users to be filtered. */
    external_ref_issuer?: string[];
    external_ref_op?: RevObjectTagsOperatorType;
    /** The field to group the rev users by. */
    group_by: string;
    /** Value of is_verified field to filter the Rev users. */
    is_verified?: boolean;
    /**
     * The maximum number of groups to return. If not set, then the
     * default is '10'.
     * @format int32
     */
    limit?: number;
    /**
     * The maximum number of rev users to return for an individual group.
     * If not set, then the default is '50'.
     * @format int32
     */
    limit_per_group?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** List of phone numbers, in E.164 format, to filter Rev users on. */
    phone_numbers?: string[];
    /** Filters for PLuG availability. */
    plug_availability?: RevUserPlugAvailability[];
    /** Array of display id's of Rev organizations to be filtered. */
    rev_oid?: string[];
    /**
     * List of IDs of Rev organizations to be filtered.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org?: string[];
    rev_org_op?: RevUsersFiltersRevOrgOperatorType;
    /** Fields to sort the Rev users by. */
    sort_by?: string[];
    /** List of state of Rev users to be filtered. */
    state?: UserState[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    subtype_op?: SubtypeOpOperatorType;
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    tags_op?: RevObjectTagsOperatorType;
}
/**
 * rev-users-group-response
 * Response object for RevUsers Group request.
 */
export interface RevUsersGroupResponse {
    /**
     * The cursor that should be used to resume iteration, otherwise if
     * not provided, then iteration has completed.
     * @deprecated
     */
    cursor?: string;
    /** The list of groups. */
    groups: RevUsersGroup[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/**
 * rev-users-identify-request
 * A request to identify a Rev user(a lead).
 */
export interface RevUsersIdentifyRequest {
    /** An identifier which uniquely identifies an Account. */
    account_ref?: string;
    /** Carries account info. */
    account_traits?: RevUsersAccountTraits;
    /** An identifier which uniquely identifies a Rev org. */
    org_ref?: string;
    /** Carries Rev Organization info. */
    org_traits?: RevUsersOrgTraits;
    /** The PLuG setting/Portal preferences identifier of the Dev org. */
    setting_id: string;
    /** An identifier which uniquely identifies a Rev user. */
    user_ref: string;
    /** Rev user info. */
    user_traits?: RevUsersTraits;
    /** An identifier which uniquely identifies a Rev organization. */
    workspace_ref?: string;
    /** Carries Rev Organization info. */
    workspace_traits?: RevUsersOrgTraits;
}
/**
 * rev-users-identify-response
 * The response with the Rev user session token.
 */
export interface RevUsersIdentifyResponse {
    /**
     * The validity lifetime of the token specified in seconds since Unix
     * epoch.
     * @format int64
     */
    expires_in: number;
    /** A Rev user session token. */
    token: string;
}
/**
 * rev-users-list-all-request
 * A request to list all Rev users' information in a Dev organization.
 */
export interface RevUsersListAllRequest {
    /**
     * Filters for Rev users belonging to the provided account IDs.
     * @maxItems 1
     * @example ["ACC-12345"]
     */
    account?: string[];
    /** Filters for Rev users that were created by the specified user(s). */
    created_by?: string[];
    created_by_op?: RevObjectTagsOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2)
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** List of emails of Rev users to be filtered. */
    email?: string[];
    email_op?: RevObjectTagsOperatorType;
    /** List of external refs to filter Rev users for. */
    external_ref?: string[];
    /** List of external ref issuers for Rev users to be filtered. */
    external_ref_issuer?: string[];
    external_ref_op?: RevObjectTagsOperatorType;
    /** Value of is_verified field to filter the Rev users. */
    is_verified?: boolean;
    /**
     * The maximum number of Rev users to return per page. The default is
     * '50', the maximum is '100'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** List of phone numbers, in E.164 format, to filter Rev users on. */
    phone_numbers?: string[];
    /** Filters for PLuG availability. */
    plug_availability?: RevUserPlugAvailability[];
    /**
     * Array of display id's of Rev orgs to be filtered.
     * @deprecated
     * @example ["REV-AbCdEfGh"]
     */
    rev_oid?: string[];
    /**
     * List of IDs of Rev organizations to be filtered.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org?: string[];
    rev_org_op?: RevUsersFiltersRevOrgOperatorType;
    /** Fields to sort the Rev users by and the direction to sort them. */
    sort_by?: string[];
    /** List of state of Rev users to be filtered. */
    state?: UserState[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    subtype_op?: SubtypeOpOperatorType;
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    tags_op?: RevObjectTagsOperatorType;
}
/**
 * rev-users-list-all-response
 * The response to list all of the Rev users in a Dev organization.
 */
export interface RevUsersListAllResponse {
    /**
     * The cursor that should be used to resume iteration. If not
     * provided, then iteration has completed.
     * @deprecated
     */
    cursor?: string;
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** List with all of the Rev users' information. */
    rev_users: RevUser[];
}
/**
 * rev-users-list-request
 * Gets the list of Rev users belonging to the authenticated user's Dev
 * Organization which the user is also authorized to access.
 */
export interface RevUsersListRequest {
    /**
     * Filters for Rev users belonging to the provided account IDs.
     * @maxItems 1
     * @example ["ACC-12345"]
     */
    account?: string[];
    /** Filters for Rev users that were created by the specified user(s). */
    created_by?: string[];
    created_by_op?: RevObjectTagsOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2)
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** List of emails of Rev users to be filtered. */
    email?: string[];
    email_op?: RevObjectTagsOperatorType;
    /** List of external refs to filter Rev users for. */
    external_ref?: string[];
    /** List of external ref issuers for Rev users to be filtered. */
    external_ref_issuer?: string[];
    external_ref_op?: RevObjectTagsOperatorType;
    /** Value of is_verified field to filter the Rev users. */
    is_verified?: boolean;
    /**
     * The maximum number of Rev users to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /**
     * The ID of Rev organization to list all Rev users of.
     * @deprecated
     * @example "REV-AbCdEfGh"
     */
    org_id?: string;
    /** List of phone numbers, in E.164 format, to filter Rev users on. */
    phone_numbers?: string[];
    /** Filters for PLuG availability. */
    plug_availability?: RevUserPlugAvailability[];
    /**
     * List of IDs of Rev organizations to be filtered.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org?: string[];
    rev_org_op?: RevUsersFiltersRevOrgOperatorType;
    /** Fields to sort the Rev users by and the direction to sort them. */
    sort_by?: string[];
    /** List of state of Rev users to be filtered. */
    state?: UserState[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    subtype_op?: SubtypeOpOperatorType;
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    tags_op?: RevObjectTagsOperatorType;
}
/**
 * rev-users-list-response
 * The response to listing all Rev users matching the filter criteria.
 */
export interface RevUsersListResponse {
    /**
     * The cursor that should be used to resume iteration. If not
     * provided, then iteration has completed.
     * @deprecated
     */
    cursor?: string;
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** List containing all the Rev users. */
    rev_users: RevUser[];
}
/**
 * rev-users-merge-request
 * Request object for RevUsersMerge call.
 */
export interface RevUsersMergeRequest {
    /** The unique ID of the primary user. */
    primary_user: string;
    /** The unique ID of the secondary user. */
    secondary_user: string;
}
/**
 * rev-users-merge-response
 * The response to RevUsersMerge call.
 */
export type RevUsersMergeResponse = object;
/**
 * rev-users-move-request
 * A request to move a Rev User to the target Rev organization under a Dev
 * organization.
 */
export interface RevUsersMoveRequest {
    /** The don of the Rev User to move. */
    rev_user_id: string;
    /**
     * The don of the Rev organization to move the Rev User to.
     * @example "REV-AbCdEfGh"
     */
    target_rev_org_id: string;
}
/**
 * rev-users-move-response
 * The response to move a Rev User to the target Rev organization under a
 * Dev organization.
 */
export interface RevUsersMoveResponse {
    rev_user: RevUser;
}
/**
 * rev-users-move-validate-request
 * A request to validate Rev Users Move to the target Rev organization
 * under a Dev organization.
 */
export interface RevUsersMoveValidateRequest {
    /** The don of the Rev User to move. */
    rev_user_id: string;
    /**
     * The don of the Rev organization to move the Rev User into.
     * @example "REV-AbCdEfGh"
     */
    target_rev_org_id: string;
}
/**
 * rev-users-move-validate-response
 * A response object containing infomation if a Rev User can be moved.
 */
export interface RevUsersMoveValidateResponse {
    /** Bool value denoting if move of a Rev User is supported. */
    is_supported: boolean;
    /** Optional string to denote why a Rev User cannot be moved. */
    reason?: string;
}
/**
 * rev-users-org-traits
 * Carries Rev Organization info.
 */
export interface RevUsersOrgTraits {
    /** Application-defined custom fields of the Rev Organization. */
    custom_fields?: object;
    /** The description of the Rev Organization. */
    description?: string;
    /** The display name of the Rev Organization. */
    display_name?: string;
    /** The domain of the Rev Organization. */
    domain?: string;
    /** Phone numbers of the Rev Organization. */
    phone_numbers?: string[];
    /** The tier of the Rev Organization. */
    tier?: string;
}
/**
 * rev-users-self-request
 * A request to get the authenticated user's information.
 */
export type RevUsersSelfRequest = object;
/**
 * rev-users-self-response
 * The response to getting the information for the authenticated user.
 */
export interface RevUsersSelfResponse {
    rev_user: RevUser;
}
/**
 * rev-users-self-update-request
 * A request to update the user's information for the authenticated Rev
 * user.
 */
export interface RevUsersSelfUpdateRequest {
    /** The browser of the Rev user. */
    browser?: string;
    /** The browser language of the Rev user. */
    browser_language?: string;
    /** Application-defined custom fields. */
    custom_fields?: object;
    /**
     * The updated display handle of the Rev user.
     * @deprecated
     */
    display_handle?: string;
    /** The updated display name of the Rev user. */
    display_name?: string;
    /** The email address of the Rev user. */
    email?: string;
    /** The updated full name of the Rev user. */
    full_name?: string;
    /** Status of the user on the PLuG. */
    plug_availability?: RevUserPlugAvailability;
}
/**
 * rev-users-self-update-response
 * The response to update the authenticated Rev user.
 */
export interface RevUsersSelfUpdateResponse {
    rev_user: RevUser;
}
/**
 * rev-users-traits
 * Rev user info.
 */
export interface RevUsersTraits {
    /** Application-defined custom fields. */
    custom_fields?: object;
    /** The description of the Rev user. */
    description?: string;
    /** The display name of the Rev user. */
    display_name?: string;
    /** The email address of the Rev user. */
    email?: string;
    /** The full name of the Rev user. */
    full_name?: string;
    /** The phone numbers, in E.164 format, of the Rev user. */
    phone_numbers?: string[];
}
/**
 * rev-users-update-request
 * Request to update details of a Rev user.
 */
export interface RevUsersUpdateRequest {
    artifacts?: RevUsersUpdateRequestArtifacts;
    /** The browser of the Rev user. */
    browser?: string;
    /** The browser language of the Rev user. */
    browser_language?: string;
    /** Application-defined custom fields. */
    custom_fields?: object;
    custom_schema_fragments?: RevUsersUpdateRequestCustomSchemaFragments;
    /**
     * Requested custom schemas described abstractly. Every provided schema's
     * custom field must be specified, otherwise a bad request error is
     * returned. If a new custom schema specifier is provided, then it will be
     * added to the work, otherwise if a custom schema is omitted from the
     * specifier, it remains unmodified.
     */
    custom_schema_spec?: CustomSchemaSpec;
    /** Updated description of the Rev user. */
    description?: string;
    /**
     * Updated display handle of the Rev user.
     * @deprecated
     */
    display_handle?: string;
    /** Updated display name of the Rev user. */
    display_name?: string;
    /**
     * Artifact ID of a Rev user's updated display picture.
     * @example "ARTIFACT-12345"
     */
    display_picture_id?: string | null;
    /** Updated email address of the Rev user. */
    email?: string;
    /** Updated external ref value of the Rev user. */
    external_ref?: string;
    /**
     * External ref issuer is the external system of records from which
     * this Rev user's data is imported. If external_ref is provided
     * during create and external_ref_issuer isn't, then issuer's value is
     * set to 'devrev:default'.
     */
    external_ref_issuer?: string;
    /**
     * External uid is a mutable unique identifier for a user within the
     * Rev organization from your primary customer record. If none is
     * available, a good alternative is the email address/phone number
     * which could uniquely identify the user. If none is specified, a
     * system-generated identifier will be assigned to the user.
     * @deprecated
     */
    external_uid?: string;
    /**
     * External uid issuer is the external system of records from which
     * this Rev user's data is imported. If external_uid is provided
     * during create and external_uid_issuer isn't, then issuer's value is
     * set to 'devrev:default'.
     * @deprecated
     */
    external_uid_issuer?: string;
    /** The ID of Rev user to update. */
    id: string;
    /** The phone numbers, in E.164 format, of the Rev user. */
    phone_numbers?: string[];
    /** The plug availability of the Rev user. */
    plug_availability?: string | null;
    /**
     * Schema fragment IDs.
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    schema_fragment_ids?: string[];
    /** State of the user. */
    state?: UserState;
    /** Tags associated with the Rev user. */
    tags?: SetTagWithValue[];
}
/** rev-users-update-request-artifacts */
export interface RevUsersUpdateRequestArtifacts {
    /**
     * Sets the IDs to the provided artifact IDs.
     * @example ["ARTIFACT-12345"]
     */
    set?: string[];
}
/** rev-users-update-request-custom-schema-fragments */
export interface RevUsersUpdateRequestCustomSchemaFragments {
    /**
     * Sets the IDs to the provided schema fragment IDs.
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    set?: string[];
}
/**
 * rev-users-update-response
 * Updated Rev user object.
 */
export interface RevUsersUpdateResponse {
    rev_user: RevUser;
}
/**
 * rev-users-upgrade-request
 * Response object containing infomation of RevUsers to be upgraded.
 */
export interface RevUsersUpgradeRequest {
    /** Dev Organization id of Devorg to be upgraded. */
    dev_oid: string;
}
/**
 * rev-users-upgrade-response
 * Response object containing infomation around upgrade.
 */
export type RevUsersUpgradeResponse = object;
/** reward */
export type Reward = AtomBase & {
    /**
     * The reward points awarded.
     * @format int32
     */
    amount: number;
    /**
     * The reward amount expired.
     * @format int32
     */
    amount_expired: number;
    /**
     * The reward amount used.
     * @format int32
     */
    amount_used: number;
    /** Description for the Reward. */
    description?: string;
    /**
     * Date on which remaining reward amount expires.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    expiry_time: string;
    rev_org: OrgSummary;
    rev_user?: UserSummary;
};
/** reward-summary */
export type RewardSummary = AtomBaseSummary;
/** reward-transaction */
export type RewardTransaction = AtomBase & {
    /**
     * The reward points transferred as part of this transaction.
     * @format int32
     */
    amount_transferred: number;
    /** Details of the Reward Transaction. */
    description?: string;
    rev_org: OrgSummary;
    rev_user?: UserSummary;
    /**
     * Date of the transaction.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    transaction_time: string;
};
/** reward-transaction-summary */
export type RewardTransactionSummary = AtomBaseSummary;
/** reward-transactions-list-request */
export interface RewardTransactionsListRequest {
    /**
     * The transaction date from which to aggregate reward transaction
     * objects.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    from_transaction_date?: string;
    /**
     * List of fields to sort the reward transaction object, by and how to
     * sort them. Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
    /**
     * The transaction date till which to aggregate reward transaction
     * objects.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    to_transaction_date?: string;
}
/** reward-transactions-list-response */
export interface RewardTransactionsListResponse {
    /** The list of reward transaction objects. */
    reward_transactions: RewardTransaction[];
}
/** rewards-create-request */
export interface RewardsCreateRequest {
    /** Description of the reward object. */
    description?: string;
    /**
     * Timestamp when the rewarded points will expire.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    expiry_time?: string;
    /**
     * The rev org for which reward is being created.
     * @example "REV-AbCdEfGh"
     */
    rev_org_id?: string;
    /**
     * The rev user for which reward is being created (if reward is for a
     * rev user).
     */
    rev_user_id?: string;
    /**
     * The reward points being awarded.
     * @format int64
     */
    reward_points: number;
}
/** rewards-create-response */
export interface RewardsCreateResponse {
    reward: Reward;
}
/** rewards-get-request */
export interface RewardsGetRequest {
    /** The reward object's DON. */
    id: string;
}
/** rewards-get-response */
export interface RewardsGetResponse {
    reward: Reward;
}
/** rewards-list-request */
export interface RewardsListRequest {
    /**
     * The expiry date from which to aggregate reward objects.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    from_expiry_date?: string;
    /**
     * List of fields to sort the reward object, by and how to sort them.
     * Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
    /**
     * The expiry date till which to aggregate reward objects.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    to_expiry_date?: string;
}
/** rewards-list-response */
export interface RewardsListResponse {
    /** The list of reward objects. */
    rewards: Reward[];
}
/** rewards-transfer-request */
export interface RewardsTransferRequest {
    /**
     * The recipient rev user for the reward transfer (if any).In case,
     * when 'destination_rev_user_id' is not provided then, by default rev
     * org is the recipient of the transfer.
     */
    destination_rev_user_id?: string;
    /**
     * The reward points to be transferred.
     * @format int64
     */
    transfer_amount: number;
}
/** rewards-transfer-response */
export interface RewardsTransferResponse {
    reward_transaction: RewardTransaction;
}
/** rewards-transfer-to-credits-request */
export interface RewardsTransferToCreditsRequest {
    /**
     * The reward points to be transferred.
     * @format int64
     */
    transfer_amount: number;
}
/** rewards-transfer-to-credits-response */
export interface RewardsTransferToCreditsResponse {
    reward_transaction: RewardTransaction;
}
/** role */
export type Role = AtomBase & {
    /** Description of caveat. */
    caveat_description?: string;
    /** Caveats under which this role to be applicable. */
    caveats?: Caveat[];
    /** Version of the default role. */
    default_version?: string;
    /** Description of the role. */
    description?: string;
    /** Field Privileges. */
    field_privileges?: FieldPrivileges;
    /**
     * Whether to include all subtypes in role target along with the leaf
     * type.
     */
    include_all_subtypes?: boolean;
    /** Specifies whether the role is a default role. */
    is_default: boolean;
    /**
     * Determines if this role can be used for object member based
     * sharing.
     */
    is_object_member_type?: boolean;
    /** Name of the Role. */
    name?: string;
    /** Privileges the role provides. */
    privileges?: RolePrivileges[];
    /** Type of the role. */
    role_type: RoleType;
    /** Target object type of the role. */
    target: RoleTarget;
    /** Subtype of the target of the role. */
    target_subtype?: string;
};
/** Privileges the role provides. */
export declare enum RolePrivileges {
    Create = "create",
    Delete = "delete",
    Read = "read",
    Update = "update"
}
/** role-summary */
export type RoleSummary = AtomBaseSummary & {
    /** Name of the Role. */
    name?: string;
};
/** Target object type of the role. */
export declare enum RoleTarget {
    Account = "account",
    AccountCommerceDetails = "account_commerce_details",
    AddonRule = "addon_rule",
    AppFragment = "app_fragment",
    Article = "article",
    Artifact = "artifact",
    Capability = "capability",
    Command = "command",
    Comment = "comment",
    Conversation = "conversation",
    Credit = "credit",
    CreditCoupon = "credit_coupon",
    CustomPart = "custom_part",
    CustomTypeFragment = "custom_type_fragment",
    Dashboard = "dashboard",
    Dataset = "dataset",
    DevOrg = "dev_org",
    DevUser = "dev_user",
    Directory = "directory",
    DiscoveryRun = "discovery_run",
    Enhancement = "enhancement",
    Feature = "feature",
    Flow = "flow",
    Group = "group",
    Invoice = "invoice",
    Issue = "issue",
    Keyring = "keyring",
    LicenseAssignment = "license_assignment",
    Link = "link",
    Linkable = "linkable",
    Marketplace = "marketplace",
    MarketplaceCategory = "marketplace_category",
    MarketplaceItem = "marketplace_item",
    MarketplaceSubmission = "marketplace_submission",
    OasisData = "oasis_data",
    ObjectMember = "object_member",
    Opportunity = "opportunity",
    PaymentMethodCard = "payment_method_card",
    Pricing = "pricing",
    Product = "product",
    QuestionAnswer = "question_answer",
    Quote = "quote",
    RevOrg = "rev_org",
    RevUser = "rev_user",
    RevoConfig = "revo_config",
    Role = "role",
    Runnable = "runnable",
    ServicePlan = "service_plan",
    Sku = "sku",
    SkuRule = "sku_rule",
    SnapIn = "snap_in",
    SnapWidget = "snap_widget",
    Task = "task",
    TenantFragment = "tenant_fragment",
    Ticket = "ticket",
    Token = "token",
    Uom = "uom",
    Vista = "vista",
    Webhook = "webhook",
    Widget = "widget"
}
/** Type of the role. */
export declare enum RoleType {
    FieldAccess = "field_access",
    ObjectAccess = "object_access"
}
/** role-v1-don */
export interface RoleV1Don {
    display_id?: string;
    id: string;
    id_v1: string;
}
/**
 * roles-apply-request
 * A request to apply (assign or revoke) roles of a principal.
 */
export interface RolesApplyRequest {
    /** Act as ID. */
    act_as?: string;
    /** Roles to be additionally assigned to principal. */
    assign?: string[];
    /**
     * The ID of the principal.
     * @example "DEV-AbCdEfGh"
     */
    principal: string;
    /** Roles to be revoked from principal. */
    revoke?: string[];
    /** Whether to revoke all roles from principal. */
    revoke_all?: boolean;
}
/**
 * roles-apply-response
 * The response to roles apply.
 */
export type RolesApplyResponse = object;
/**
 * roles-clone-request
 * A request to clone roles of a target for its subtype.
 */
export interface RolesCloneRequest {
    /**
     * List of principals to clone roles of.
     * @minItems 1
     */
    principals: string[];
    /** Target object type of the role. */
    target: RoleTarget;
    /** Subtype of the target object for which to clone roles. */
    target_subtype?: string;
}
/**
 * roles-clone-response
 * The response to cloning of roles.
 */
export type RolesCloneResponse = object;
/**
 * roles-create-request
 * A request to create a new role.
 */
export interface RolesCreateRequest {
    /** The caveats on the role. */
    caveats?: RolesCreateRequestCaveat[];
    /** The description of the role. */
    description?: string;
    /** Field Privileges. */
    field_privileges?: RolesCreateRequestFieldPrivileges;
    /**
     * Whether to include all subtypes of the leaf type as target of the
     * role.
     */
    include_all_subtypes?: boolean;
    /** The name of the role. */
    name?: string;
    /**
     * The privileges the role provides on target.
     * @minItems 1
     */
    privileges?: RolePrivileges[];
    /** Target object type of the role. */
    target: RoleTarget;
    /** The subtype of the target. */
    target_subtype?: string;
}
/**
 * roles-create-request-caveat
 * Caveat under which the role applies.
 */
export interface RolesCreateRequestCaveat {
    /** Selector. */
    key: Selector;
    /** The operator used to compare the key and the value. */
    operator: CaveatOperator;
    /** Primitive Value. */
    value: RolesCreateRequestPrimitiveValue;
}
/**
 * roles-create-request-field-options
 * Field Options.
 */
export interface RolesCreateRequestFieldOptions {
    /** Whether all fields are opted. */
    all: boolean;
    /** List of field names from the stock schema. */
    stock_fields?: string[];
    /** List of field names from the subtype schema. */
    subtype_fields?: string[];
    /** List of field names from the tenant schema. */
    tenant_fields?: string[];
}
/**
 * roles-create-request-field-privileges
 * Field Privileges.
 */
export interface RolesCreateRequestFieldPrivileges {
    /** Field Options. */
    read?: RolesCreateRequestFieldOptions;
    /** Field Options. */
    write?: RolesCreateRequestFieldOptions;
}
/**
 * roles-create-request-primitive-value
 * Primitive Value.
 */
export interface RolesCreateRequestPrimitiveValue {
    /** Selector. */
    attribute_value?: Selector;
    /** Boolean value. */
    bool_value?: boolean;
    /** List of ID values. */
    id_list_value?: string[];
    /** ID value. */
    id_value?: string;
    /** List of integer values. */
    int_list_value?: number[];
    /**
     * Integer value.
     * @format int32
     */
    int_value?: number;
    /** List of overridable enum values. */
    overridable_enum_list_value?: string[];
    /** Overridable enum value. */
    overridable_enum_value?: string;
    /** List of string values. */
    string_list_value?: string[];
    /** String value. */
    string_value?: string;
    /** Type of the value. */
    type: PrimitiveValueType;
}
/**
 * roles-create-response
 * A response to a request to create a new role.
 */
export interface RolesCreateResponse {
    role: Role;
}
/**
 * roles-delete-request
 * A request to delete a role.
 */
export interface RolesDeleteRequest {
    /** ID for the role. */
    id: string;
}
/**
 * roles-delete-response
 * The response to deleting the role.
 */
export type RolesDeleteResponse = object;
export declare enum RolesFilterTargetSubtypeOperatorType {
    Any = "any",
    Null = "null"
}
/**
 * roles-get-request
 * A request to get a role's information.
 */
export interface RolesGetRequest {
    /** ID for the role. */
    id: string;
}
/**
 * roles-get-response
 * The response to getting the information for the role.
 */
export interface RolesGetResponse {
    role: Role;
}
/**
 * roles-list-request
 * A request to get list of roles assigned to a principal.
 */
export interface RolesListRequest {
    /** Whether to fetch roles that target all subtypes of the leaf type. */
    include_all_subtypes?: boolean;
    /** Whether to fetch default or custom roles. */
    is_default?: boolean;
    /** Filter the object member type roles. */
    is_object_member_type?: boolean;
    /**
     * Filters roles by principal.
     * @example "DEV-AbCdEfGh"
     */
    principal?: string;
    /** Filter roles by role type(s). */
    role_type?: RoleType[];
    /** Filter roles by target object type(s). */
    target?: RoleTarget[];
    /** Filter roles by subtype(s). */
    target_subtype?: string[];
    target_subtype_op?: RolesFilterTargetSubtypeOperatorType;
}
/**
 * roles-list-response
 * The response to listing the roles.
 */
export interface RolesListResponse {
    /** The list of roles. */
    roles: Role[];
}
/**
 * roles-update-request
 * A request to update a role.
 */
export interface RolesUpdateRequest {
    /** The caveats on the role. */
    caveats?: RolesUpdateRequestCaveat[];
    caveats_new?: RolesUpdateRequestCaveats;
    /** The updated role's description. */
    description?: string;
    /** Field Privileges. */
    field_privileges?: RolesUpdateRequestFieldPrivileges;
    /** Field Privileges. */
    field_privileges_v2?: RolesUpdateRequestFieldPrivilegesV2;
    /** ID for the role. */
    id: string;
    /**
     * Whether to include all subtypes of the leaf type as target of the
     * role.
     */
    include_all_subtypes?: boolean;
    /** The updated role's name. */
    name?: string;
    privileges?: RolesUpdateRequestPrivileges;
}
/**
 * roles-update-request-caveat
 * Caveat under which the role applies.
 */
export interface RolesUpdateRequestCaveat {
    /** Selector. */
    key: Selector;
    /** The operator used to compare the key and the value. */
    operator: CaveatOperator;
    /** Primitive Value. */
    value: RolesUpdateRequestPrimitiveValue;
}
/** roles-update-request-caveats */
export interface RolesUpdateRequestCaveats {
    /** Sets the caveats to the provided caveats. */
    set: RolesUpdateRequestCaveat[];
}
/**
 * roles-update-request-field-options
 * Field Options.
 */
export interface RolesUpdateRequestFieldOptions {
    /** Whether all fields are opted. */
    all: boolean;
    /** List of field names from the stock schema. */
    stock_fields?: string[];
    /** List of field names from the subtype schema. */
    subtype_fields?: string[];
    /** List of field names from the tenant schema. */
    tenant_fields?: string[];
}
/**
 * roles-update-request-field-options-v2
 * Field Options.
 */
export interface RolesUpdateRequestFieldOptionsV2 {
    /** Whether all stock, tenant, and subytpe fields are opted. */
    all?: boolean;
    /** Field Action. */
    stock_fields?: RolesUpdateRequestFieldOptionsV2FieldAction;
    /** Field Action. */
    subtype_fields?: RolesUpdateRequestFieldOptionsV2FieldAction;
    /** Field Action. */
    tenant_fields?: RolesUpdateRequestFieldOptionsV2FieldAction;
}
/**
 * roles-update-request-field-options-v2-field-action
 * Field Action.
 */
export interface RolesUpdateRequestFieldOptionsV2FieldAction {
    /** Adds the field names to the field schema. */
    add?: string[];
    /** Removes the field names from the field schema. */
    remove?: string[];
    /** Sets the field names of field schema. */
    set?: string[];
}
/**
 * roles-update-request-field-privileges
 * Field Privileges.
 */
export interface RolesUpdateRequestFieldPrivileges {
    /** Field Options. */
    read?: RolesUpdateRequestFieldOptions;
    /** Field Options. */
    write?: RolesUpdateRequestFieldOptions;
}
/**
 * roles-update-request-field-privileges-v2
 * Field Privileges.
 */
export interface RolesUpdateRequestFieldPrivilegesV2 {
    /** Field Options. */
    read: RolesUpdateRequestFieldOptionsV2;
    /** Field Options. */
    write: RolesUpdateRequestFieldOptionsV2;
}
/**
 * roles-update-request-primitive-value
 * Primitive Value.
 */
export interface RolesUpdateRequestPrimitiveValue {
    /** Selector. */
    attribute_value?: Selector;
    /** Boolean value. */
    bool_value?: boolean;
    /** List of ID values. */
    id_list_value?: string[];
    /** ID value. */
    id_value?: string;
    /** List of integer values. */
    int_list_value?: number[];
    /**
     * Integer value.
     * @format int32
     */
    int_value?: number;
    /** List of overridable enum values. */
    overridable_enum_list_value?: string[];
    /** Overridable enum value. */
    overridable_enum_value?: string;
    /** List of string values. */
    string_list_value?: string[];
    /** String value. */
    string_value?: string;
    /** Type of the value. */
    type: PrimitiveValueType;
}
/** roles-update-request-privileges */
export interface RolesUpdateRequestPrivileges {
    /**
     * Sets the privileges to the provided privileges. This must not be
     * empty.
     */
    set?: RolePrivileges[];
}
/**
 * roles-update-response
 * The response to updating the role.
 */
export interface RolesUpdateResponse {
    role: Role;
}
/** room */
export type Room = AtomBase & {
    /** Description of the room. */
    description?: string;
    parent?: AtomSummary;
    /** Unique token for joining the room. */
    token?: string;
};
/** room-summary */
export type RoomSummary = AtomBaseSummary;
/**
 * rooms-create-request
 * A request to create a video-call room.
 */
export interface RoomsCreateRequest {
    /** Description of the room. */
    description?: string;
    /**
     * The users that should be invited to the huddle.
     * @example ["DEVU-12345"]
     */
    invite_users?: string[];
    /** The parent object ID in which the room is created. */
    parent_id: string;
}
/**
 * rooms-create-response
 * Create room response.
 */
export interface RoomsCreateResponse {
    room: Room;
}
/**
 * rooms-inform-request
 * A request to inform a room of a user update.
 */
export interface RoomsInformRequest {
    /**
     * The users that should be invited to the huddle.
     * @example ["DEVU-12345"]
     */
    invite_users?: string[];
    /** The parent object ID in which the room is informed. */
    parent_id: string;
    status?: RoomsInformRequestStatusValue;
}
export declare enum RoomsInformRequestStatusValue {
    Joined = "joined",
    Left = "left"
}
/** rooms-inform-response */
export type RoomsInformResponse = object;
/** row-error */
export interface RowError {
    /** List of all the errors in a single row of the CSV. */
    errors: string[];
}
/** rule */
export type Rule = AtomBase & {
    /** Description of the rule. */
    description?: string;
    /** Labels of Rules. A rule can have multiple labels. */
    labels?: string[];
    /** Name of the rule. */
    name: string;
    /** Namespace of the rule. */
    namespace?: string;
    /** RuleNodes. */
    nodes: RuleNodeInstance[];
    /** State of the rule. */
    state: string;
    /** RuleNode instance containg relevant rule node information. */
    trigger: RuleNodeInstance;
};
/**
 * rule-node
 * RuleNode.
 */
export interface RuleNode {
    /** Action. */
    action?: RuleNodeAction;
    /** Condition. */
    condition?: RuleNodeCondition;
    /**
     * Timestamp when the object was created.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_date?: string;
    /** Description of the node. */
    description?: string;
    /** Human-readable object ID unique within a Dev organization. */
    display_id: string;
    /** Globally unique object ID. */
    id: string;
    /** input schema of the rule node. */
    input_schema: object;
    /** Schema of the rule node input or output. */
    input_schema_v2: RuleNodeSchema;
    /** Labels of Rule Nodes. A node can have multiple labels. */
    labels?: string[];
    /**
     * Timestamp when the object was last modified.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    modified_date?: string;
    /** Name of the node. */
    name: string;
    /** output schema of the rule node. */
    output_schema: object;
    /** Schema of the rule node input or output. */
    output_schema_v2: RuleNodeSchema;
    /** Possible output states of the node. */
    output_states: string[];
    /** Trigger. */
    trigger?: RuleNodeTrigger;
    /** Type of the rule node. */
    type?: string;
}
/**
 * rule-node-action
 * Action.
 */
export interface RuleNodeAction {
    /** Action details. */
    action_details?: string;
}
/**
 * rule-node-condition
 * Condition.
 */
export interface RuleNodeCondition {
    /** Condition details. */
    condition_details?: string;
}
/**
 * rule-node-instance
 * RuleNode instance containg relevant rule node information.
 */
export interface RuleNodeInstance {
    /** Description of the rule node. */
    description?: string;
    /** Display Name of the rule node. */
    display_id: string;
    /** input of the rule node. */
    input: object;
    /** Name of the rule node. */
    name: string;
    /** Id of the rule node. */
    rule_node_id?: string;
    /** List of transitions of the rule node based on the output state. */
    transitions: RuleNodeTransition[];
    /** Type of the rule node. */
    type: string;
    /** UI hints for the rule node instance. */
    ui?: RuleNodeInstanceUiHints;
}
/**
 * rule-node-instance-ui-hints
 * UI hints for the rule node instance.
 */
export interface RuleNodeInstanceUiHints {
    /** Display name of the rule node instance. */
    display_name?: string;
}
/**
 * rule-node-schema
 * Schema of the rule node input or output.
 */
export interface RuleNodeSchema {
    /** List of composite schemas. */
    composite_schemas: CompositeSchema[];
    /** List of all fields in this schema. */
    fields: SchemaFieldDescriptor[];
}
/**
 * rule-node-snap-component
 * Snap Component.
 */
export interface RuleNodeSnapComponent {
    /** Description of the snap component. */
    description?: string;
    /** Display name of the snap component. */
    display_name?: string;
    /** Name of the snap component. */
    name?: string;
    /** Namespace of the snap component. */
    namespace?: string;
    /** Snap kit action of the snap component. */
    snap_kit_action?: string;
    /** Snap kit body of the snap component. */
    snap_kit_body?: object;
    /** Surface of the snap component. */
    surface?: string;
}
/**
 * rule-node-transition
 * Contains which rule node to transition to next based on the the output
 * state.
 */
export interface RuleNodeTransition {
    /** Id of the next rule node. */
    node: string;
    /** Output state of the rule node. */
    state: string;
}
/**
 * rule-node-trigger
 * Trigger.
 */
export interface RuleNodeTrigger {
    /** events for the trigger. */
    events: string[];
    /** Snap Component. */
    snap_component?: RuleNodeSnapComponent;
    /** Trigger details. */
    trigger_details?: string;
}
/**
 * rule-nodes-get-request
 * The request for getting a rule node.
 */
export interface RuleNodesGetRequest {
    /** The display ID of the requested rule node. */
    display_id?: string;
    /** The ID of the requested rule node. */
    id?: string;
}
/**
 * rule-nodes-get-response
 * The response for get rule node request.
 */
export interface RuleNodesGetResponse {
    /** RuleNode. */
    rule_node: RuleNode;
}
/**
 * rule-nodes-list-request
 * The request for getting rule nodes based on requested filters.
 */
export interface RuleNodesListRequest {
    created_date?: DateTimeFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** Filters on id of rule node. */
    display_ids?: string[];
    /** Filters on id of rule node. */
    ids?: string[];
    /**
     * Filters for rule nodes that contain at least one of the specified
     * labels.
     */
    labels?: string[];
    /**
     * The maximum number of rule nodes to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    modified_date?: DateTimeFilter;
    /** Fields to sort the rule nodes by and the direction to sort them. */
    sort_by?: string[];
    trigger_filter?: TriggerFilter;
    /** Filters on type of rule node. */
    types?: string[];
}
/**
 * rule-nodes-list-response
 * The response for list rule nodes request.
 */
export interface RuleNodesListResponse {
    /** Rule nodes matching the list request. */
    rule_nodes: RuleNode[];
}
/** rule-summary */
export type RuleSummary = AtomBaseSummary;
/**
 * rules-create-request
 * The request for creating a rule.
 */
export interface RulesCreateRequest {
    /** Description of the rule. */
    description?: string;
    /** Name of the rule. */
    name: string;
    /** Nodes part of the rule. */
    nodes: CreateRuleNodeInstance[];
    /** State of the rule. */
    state: string;
    /** RuleNode instance containg relevant rule node information. */
    trigger: CreateRuleNodeInstance;
}
/**
 * rules-create-response
 * The response for create rule request.
 */
export interface RulesCreateResponse {
    rule: Rule;
}
/**
 * rules-delete-request
 * The request for deleting a rule.
 */
export interface RulesDeleteRequest {
    /** The ID of the requested rule. */
    id: string;
}
/**
 * rules-fill-node-request
 * Fill rule node request.
 */
export interface RulesFillNodeRequest {
    /**
     * The name of the node on which the action is to be performed.
     * @minLength 1
     */
    node_name: string;
    prompt?: GenerateRulePrompt;
    /** The request for creating a rule. */
    rule: RulesCreateRequest;
}
/**
 * rules-fill-node-response
 * Fill rule node response.
 */
export interface RulesFillNodeResponse {
    /** RuleNode instance containg relevant rule node information. */
    rule_node: CreateRuleNodeInstance;
    system_response?: GeneratedSystemResponse;
}
/**
 * rules-generate-request
 * Generate rule request.
 */
export interface RulesGenerateRequest {
    prompt: GenerateRulePrompt;
}
/**
 * rules-generate-response
 * Generate rule response.
 */
export interface RulesGenerateResponse {
    /** The request for creating a rule. */
    rule: RulesCreateRequest;
    system_response?: GeneratedSystemResponse;
}
/**
 * rules-generate-structure-request
 * Generate rule structure request.
 */
export interface RulesGenerateStructureRequest {
    prompt: GenerateRulePrompt;
}
/**
 * rules-generate-structure-response
 * Generate rule structure response.
 */
export interface RulesGenerateStructureResponse {
    /** The request for creating a rule. */
    rule: RulesCreateRequest;
    system_response?: GeneratedSystemResponse;
}
/**
 * rules-get-request
 * The request for getting a rule.
 */
export interface RulesGetRequest {
    /** The ID of the requested rule. */
    id: string;
}
/**
 * rules-get-response
 * The response for get rule request.
 */
export interface RulesGetResponse {
    rule: Rule;
}
/**
 * rules-list-request
 * The request for getting rules based on requested filters.
 */
export interface RulesListRequest {
    /**
     * Filters created by user for rule.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_date?: DateTimeFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of rules to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    modified_date?: DateTimeFilter;
    /** Fields to sort the rules by and the direction to sort them. */
    sort_by?: string[];
    /** Filters on state for rule. */
    states?: string[];
    /** Filters on trigger display id for rule. */
    trigger_display_ids?: string[];
    /** Filters on trigger id for rule. */
    trigger_ids?: string[];
}
/**
 * rules-list-response
 * The response for list rule request.
 */
export interface RulesListResponse {
    /** Rules matching the list request. */
    rules: Rule[];
}
/**
 * rules-suggest-node-request
 * Suggest rule node request.
 */
export interface RulesSuggestNodeRequest {
    /**
     * The name of the node.
     * @minLength 1
     */
    node_name: string;
    prompt?: GenerateRulePrompt;
    /** The request for creating a rule. */
    rule: RulesCreateRequest;
}
/**
 * rules-suggest-node-response
 * Suggest rule node response.
 */
export interface RulesSuggestNodeResponse {
    /** RuleNode instance containg relevant rule node information. */
    rule_node: CreateRuleNodeInstance;
    system_response?: GeneratedSystemResponse;
}
/**
 * rules-update-request
 * The request for updating a rule.
 */
export interface RulesUpdateRequest {
    /** The updated description of the rule. */
    description?: string;
    /** The ID of the rule to update. */
    id: string;
    /** The updated name of the rule. */
    name?: string;
    /** The updated nodes part of the rule. */
    nodes?: UpdateRuleNodeInstance[];
    /** The updated state of the rule. */
    state?: string;
    /** RuleNode instance containg relevant rule node information. */
    trigger?: UpdateRuleNodeInstance;
}
/**
 * rules-update-response
 * The response for update rule request.
 */
export interface RulesUpdateResponse {
    rule: Rule;
}
/** run-discovery-request */
export interface RunDiscoveryRequest {
    /**
     * Optional Dev organization ID. This allows running on another Dev
     * organization, as long as the logged in user has access to it.
     * @example "DEV-AbCdEfGh"
     */
    other_dev_org?: string;
    /** Optional list of sources which will override discovery profile. */
    sources?: string[];
}
/** run-discovery-response */
export interface RunDiscoveryResponse {
    run: DiscoveryRun;
}
/** runnable */
export type Runnable = PartBase & {
    /**
     * Code part surface area is defined as all the source files or file
     * globs that make up this code part. This field lists the surface
     * area of this code part as it was inferred automatically.
     */
    code_inferred_surface_area?: string[];
    /**
     * Holds details about the inference of a part. Including evidence and
     * confidence.
     */
    code_last_inference_details?: InferenceDetails;
    /** Paths in the repository for the code part. */
    code_repo_paths?: string;
    /** URL to the server & repo for the code part. */
    code_repo_url?: string;
    /** Versions of the code. */
    code_versions?: CodeVersionSummary[];
    /**
     * A confidence score computed by the inference engine. Currently, the
     * score is not normalized across different part inferences. Until
     * this is improved, this should only be comparable to confidence of
     * same part type.
     * @format double
     */
    discovery_confidence?: number;
    /**
     * A evidences that the inferer were able to find that justify the
     * inference outcome.
     */
    discovery_evidences?: string[];
    /**
     * The time when this inference occurred.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    discovery_last_inferred_at?: string;
    /** The kind of runnable. */
    kind?: RunnableKind;
};
/** The kind of runnable. */
export declare enum RunnableKind {
    EcrImage = "ecr_image",
    Lambda = "lambda",
    Microservice = "microservice",
    Service = "service"
}
/** runnable-pin */
export type RunnablePin = PartPinBase & {
    /**
     * Excluded IDs of the parts in pin entry that this runnable is
     * dependent on.
     */
    dependent_on_exclusion_list?: PartSummary[];
    /**
     * Included IDs of the parts in pin entry that this runnable is
     * dependent on.
     */
    dependent_on_inclusion_list?: PartSummary[];
    /**
     * Excluded IDs of the parts in pin entry that are imported by this
     * runnable.
     */
    imported_by_exclusion_list?: PartSummary[];
    /**
     * Included IDs of the parts in pin entry that are imported by this
     * runnable.
     */
    imported_by_inclusion_list?: PartSummary[];
};
/** runnable-pin-summary */
export type RunnablePinSummary = PartPinBaseSummary;
/** runnable-summary */
export type RunnableSummary = PartBaseSummary;
/** scenario */
export type Scenario = AtomBase & {
    /** List of actions that'll be executed in this scenario. */
    actions?: SynapseAction[];
    bot_id?: AtomSummary;
    /** Description of the scenario. */
    description?: string;
    /** Name of the scenario. */
    name?: string;
    next?: AtomSummary;
};
/** scenario-summary */
export type ScenarioSummary = AtomBaseSummary & {
    /** Name of the scenario. */
    name?: string;
};
/** schedule-data-collection-request */
export interface ScheduleDataCollectionRequest {
    /**
     * Optional Dev organization ID. This allows running on another Dev
     * organization, as long as the logged in user has access to it.
     * @example "DEV-AbCdEfGh"
     */
    other_dev_org?: string;
}
/** schedule-data-collection-response */
export type ScheduleDataCollectionResponse = object;
/** schedule-discovery-request */
export interface ScheduleDiscoveryRequest {
    /**
     * Optional Dev organization ID. This allows running on another Dev
     * organization, as long as the logged in user has access to it.
     * @example "DEV-AbCdEfGh"
     */
    other_dev_org?: string;
}
/** schedule-discovery-response */
export type ScheduleDiscoveryResponse = object;
/** schema-bool-field-descriptor */
export type SchemaBoolFieldDescriptor = SchemaFieldDescriptorBase & {
    /** Default value. */
    default_value?: boolean;
};
/** schema-bool-list-field-descriptor */
export type SchemaBoolListFieldDescriptor = SchemaFieldDescriptorBase & {
    /** Default value. */
    default_value?: boolean[];
};
/** schema-composite-field-descriptor */
export type SchemaCompositeFieldDescriptor = SchemaFieldDescriptorBase & {
    /** Composite type. Required when field type is composite. */
    composite_type?: string;
};
/** schema-composite-list-field-descriptor */
export type SchemaCompositeListFieldDescriptor = SchemaFieldDescriptorBase & {
    /** Composite type. Required when field type is composite. */
    composite_type?: string;
};
/** schema-date-field-descriptor */
export type SchemaDateFieldDescriptor = SchemaFieldDescriptorBase & {
    /** Default value. */
    default_value?: string;
};
/** schema-date-list-field-descriptor */
export type SchemaDateListFieldDescriptor = SchemaFieldDescriptorBase & {
    /** Default value. */
    default_value?: string[];
};
/** schema-double-field-descriptor */
export type SchemaDoubleFieldDescriptor = SchemaFieldDescriptorBase & {
    /**
     * Default value.
     * @format double
     */
    default_value?: number;
};
/** schema-double-list-field-descriptor */
export type SchemaDoubleListFieldDescriptor = SchemaFieldDescriptorBase & {
    /** Default value. */
    default_value?: number[];
};
/** schema-enum-field-descriptor */
export type SchemaEnumFieldDescriptor = SchemaFieldDescriptorBase & {
    /** Allowed values for the field. */
    allowed_values: string[];
    /** Default value. */
    default_value?: string;
};
/** schema-enum-list-field-descriptor */
export type SchemaEnumListFieldDescriptor = SchemaFieldDescriptorBase & {
    /** Allowed values for the field. */
    allowed_values: string[];
    /** Default value. */
    default_value?: string[];
};
/**
 * schema-field-create-view-ui-metadata
 * Create view UI hint overrides.
 */
export interface SchemaFieldCreateViewUiMetadata {
    /** Whether field is hidden in the UI create view. */
    is_hidden?: boolean;
}
/**
 * schema-field-descriptor
 * Set of field attributes.
 */
export type SchemaFieldDescriptor = (SchemaBoolFieldDescriptor | SchemaCompositeFieldDescriptor | SchemaDateFieldDescriptor | SchemaDoubleFieldDescriptor | SchemaEnumFieldDescriptor | SchemaFieldDescriptorArrayType | SchemaIdFieldDescriptor | SchemaIntFieldDescriptor | SchemaRichTextFieldDescriptor | SchemaTextFieldDescriptor | SchemaTimestampFieldDescriptor | SchemaTokensFieldDescriptor | SchemaUenumFieldDescriptor | SchemaUnknownFieldDescriptor) & {
    field_type: SchemaFieldDescriptorFieldType;
};
/** schema-field-descriptor-array-type */
export type SchemaFieldDescriptorArrayType = (SchemaBoolListFieldDescriptor | SchemaCompositeListFieldDescriptor | SchemaDateListFieldDescriptor | SchemaDoubleListFieldDescriptor | SchemaEnumListFieldDescriptor | SchemaIdListFieldDescriptor | SchemaIntListFieldDescriptor | SchemaRichTextListFieldDescriptor | SchemaTextListFieldDescriptor | SchemaTimestampListFieldDescriptor | SchemaTokensListFieldDescriptor | SchemaUenumListFieldDescriptor) & {
    base_type: SchemaFieldDescriptorArrayTypeBaseType;
    /**
     * The exact array length.
     * @format int64
     */
    eq_items?: number;
    /**
     * The maximum array length.
     * @format int64
     */
    max_items?: number;
    /**
     * The minimum array length.
     * @format int64
     */
    min_items?: number;
};
export declare enum SchemaFieldDescriptorArrayTypeBaseType {
    Bool = "bool",
    Composite = "composite",
    Date = "date",
    Double = "double",
    Enum = "enum",
    Id = "id",
    Int = "int",
    RichText = "rich_text",
    Text = "text",
    Timestamp = "timestamp",
    Tokens = "tokens",
    Uenum = "uenum"
}
/** schema-field-descriptor-base */
export interface SchemaFieldDescriptorBase {
    /** DB name of the field. */
    db_name?: string;
    /** Description of the field. */
    description?: string;
    /** Whether this field is filterable, groupable and sortable. */
    is_filterable?: boolean;
    /** Whether this field is immutable or not. */
    is_immutable?: boolean;
    /**
     * Whether this field can hold Personally Identifiable Information
     * (PII).
     */
    is_pii?: boolean;
    /** Whether this field is required or not. */
    is_required?: boolean;
    /** Whether this field is a system field or not. */
    is_system?: boolean;
    /** The schema of MFZ specific fields. */
    mfz?: SchemaFieldMfzMetadata;
    /** Name of the field. */
    name: string;
    /** The schema of oasis specific fields. */
    oasis?: SchemaFieldOasisMetadata;
    /** Type this field is from. */
    origin?: string;
    /** The schema of ui specific fields. */
    ui?: SchemaFieldUiMetadata;
}
export declare enum SchemaFieldDescriptorFieldType {
    Array = "array",
    Bool = "bool",
    Composite = "composite",
    Date = "date",
    Double = "double",
    Enum = "enum",
    Id = "id",
    Int = "int",
    RichText = "rich_text",
    Text = "text",
    Timestamp = "timestamp",
    Tokens = "tokens",
    Uenum = "uenum",
    Unknown = "unknown"
}
/**
 * schema-field-detail-view-ui-metadata
 * Detail view UI hint overrides.
 */
export interface SchemaFieldDetailViewUiMetadata {
    /** Whether the field is hidden in the UI detail view. */
    is_hidden?: boolean;
}
/**
 * schema-field-filter-view-ui-metadata
 * Filter view UI hint overrides.
 */
export interface SchemaFieldFilterViewUiMetadata {
    /** Whether field is hidden in the UI filter view. */
    is_hidden?: boolean;
}
/**
 * schema-field-list-view-ui-metadata
 * List view UI hint overrides.
 */
export interface SchemaFieldListViewUiMetadata {
    /** Whether the field is hidden in the UI list view. */
    is_hidden?: boolean;
}
/**
 * schema-field-mfz-metadata
 * The schema of MFZ specific fields.
 */
export interface SchemaFieldMfzMetadata {
    /** Whether users are allowed to write MFZ caveats with this field. */
    caveats_permitted?: boolean;
}
/**
 * schema-field-oasis-metadata
 * The schema of oasis specific fields.
 */
export interface SchemaFieldOasisMetadata {
    /** Oasis name of the field. */
    name?: string;
    /** Oasis field type. */
    oasis_field_type?: string;
}
/**
 * schema-field-summary-view-ui-metadata
 * Summary view UI hint overrides.
 */
export interface SchemaFieldSummaryViewUiMetadata {
    /** Whether field is hidden in the UI summary view. */
    is_hidden?: boolean;
}
/**
 * schema-field-uenum-value
 * A unified enum value.
 */
export interface SchemaFieldUenumValue {
    /**
     * The immutable id of the enum value.
     * @format int64
     */
    id: number;
    /** True if this value is deprecated. */
    is_deprecated?: boolean;
    /** The human readable name of the enum value. */
    label: string;
    /**
     * The order value of the enum.
     * @format int64
     */
    ordinal: number;
    /** Tooltip shown in the UI for this value. */
    tooltip?: string;
}
/**
 * schema-field-ui-metadata
 * The schema of ui specific fields.
 */
export interface SchemaFieldUiMetadata {
    /** Allowed values of the field. */
    allowed_values?: string[];
    /** Create view UI hint overrides. */
    create_view?: SchemaFieldCreateViewUiMetadata;
    /** Fields on which this field depends on. */
    dependent_fields?: string[];
    /** Detail view UI hint overrides. */
    detail_view?: SchemaFieldDetailViewUiMetadata;
    /** enum groups. */
    devrev_enum_groups?: DevrevEnumGroup[];
    /** The display name of the field. */
    display_name?: string;
    /** Filter view UI hint overrides. */
    filter_view?: SchemaFieldFilterViewUiMetadata;
    /** An optional group name for the field. */
    group_name?: string;
    /** Whether the field is active in the UI detail view. */
    is_active_in_detail_view?: boolean;
    /** Whether stock field is rendered at top. */
    is_base_field?: boolean;
    /** Whether the field supports bulk action. */
    is_bulk_action_enabled?: boolean;
    /** Indicates if the field holds a currency value in USD. */
    is_currency_field?: boolean;
    /** Whether the field is groupable in the UI. */
    is_groupable?: boolean;
    /** Whether the field is hidden in the UI. */
    is_hidden?: boolean;
    /** Whether the field is hidden in the UI during creation. */
    is_hidden_during_create?: boolean;
    /** Whether the field is read-only in the UI. */
    is_read_only?: boolean;
    /** Whether the field is shown in the UI summary view. */
    is_shown_in_summary?: boolean;
    /** Whether the field is sortable in the UI. */
    is_sortable?: boolean;
    /** List view UI hint overrides. */
    list_view?: SchemaFieldListViewUiMetadata;
    /**
     * Order in which field is shown.
     * @format int32
     */
    order?: number;
    /** A placeholder for the field. */
    placeholder?: string;
    /** Summary view UI hint overrides. */
    summary_view?: SchemaFieldSummaryViewUiMetadata;
    /** Tooltip for the field. */
    tooltip?: string;
    /** Unit of measurment. */
    unit?: string;
}
/** schema-id-field-descriptor */
export type SchemaIdFieldDescriptor = SchemaFieldDescriptorBase & {
    /** Default value. */
    default_value?: string;
    /** Object ID types. Required when field type is ID. */
    id_type?: string[];
};
/** schema-id-list-field-descriptor */
export type SchemaIdListFieldDescriptor = SchemaFieldDescriptorBase & {
    /** Default value. */
    default_value?: string[];
    /** Object ID types. Required when field type is ID. */
    id_type?: string[];
};
/** schema-int-field-descriptor */
export type SchemaIntFieldDescriptor = SchemaFieldDescriptorBase & {
    /**
     * Default value.
     * @format int64
     */
    default_value?: number;
    /**
     * The minimum value for the integer (exclusive).
     * @format int64
     */
    gt?: number;
    /**
     * The minimum value for the integer (inclusive).
     * @format int64
     */
    gte?: number;
    /**
     * The maximum value for the integer (exclusive).
     * @format int64
     */
    lt?: number;
    /**
     * The maximum value for the integer (inclusive).
     * @format int64
     */
    lte?: number;
};
/** schema-int-list-field-descriptor */
export type SchemaIntListFieldDescriptor = SchemaFieldDescriptorBase & {
    /** Default value. */
    default_value?: number[];
    /**
     * The minimum value for the integer (exclusive).
     * @format int64
     */
    gt?: number;
    /**
     * The minimum value for the integer (inclusive).
     * @format int64
     */
    gte?: number;
    /**
     * The maximum value for the integer (exclusive).
     * @format int64
     */
    lt?: number;
    /**
     * The maximum value for the integer (inclusive).
     * @format int64
     */
    lte?: number;
};
/** schema-rich-text-field-descriptor */
export type SchemaRichTextFieldDescriptor = SchemaFieldDescriptorBase & {
    /** The contained substring. */
    contains?: string;
    /** Default value. */
    default_value?: string;
    /**
     * The exact string length.
     * @format int64
     */
    eq_len?: number;
    /**
     * The maximum string length.
     * @format int64
     */
    max_len?: number;
    /**
     * The minimum string length.
     * @format int64
     */
    min_len?: number;
    /** The string pattern (regular expression). */
    pattern?: string;
    /** The string prefix. */
    prefix?: string;
    /** The string suffix. */
    suffix?: string;
};
/** schema-rich-text-list-field-descriptor */
export type SchemaRichTextListFieldDescriptor = SchemaFieldDescriptorBase & {
    /** The contained substring. */
    contains?: string;
    /** Default value. */
    default_value?: string[];
    /**
     * The exact string length.
     * @format int64
     */
    eq_len?: number;
    /**
     * The maximum string length.
     * @format int64
     */
    max_len?: number;
    /**
     * The minimum string length.
     * @format int64
     */
    min_len?: number;
    /** The string pattern (regular expression). */
    pattern?: string;
    /** The string prefix. */
    prefix?: string;
    /** The string suffix. */
    suffix?: string;
};
/** schema-text-field-descriptor */
export type SchemaTextFieldDescriptor = SchemaFieldDescriptorBase & {
    /** The contained substring. */
    contains?: string;
    /** Default value. */
    default_value?: string;
    /**
     * The exact string length.
     * @format int64
     */
    eq_len?: number;
    /**
     * The maximum string length.
     * @format int64
     */
    max_len?: number;
    /**
     * The minimum string length.
     * @format int64
     */
    min_len?: number;
    /** The string pattern (regular expression). */
    pattern?: string;
    /** The string prefix. */
    prefix?: string;
    /** The string suffix. */
    suffix?: string;
};
/** schema-text-list-field-descriptor */
export type SchemaTextListFieldDescriptor = SchemaFieldDescriptorBase & {
    /** The contained substring. */
    contains?: string;
    /** Default value. */
    default_value?: string[];
    /**
     * The exact string length.
     * @format int64
     */
    eq_len?: number;
    /**
     * The maximum string length.
     * @format int64
     */
    max_len?: number;
    /**
     * The minimum string length.
     * @format int64
     */
    min_len?: number;
    /** The string pattern (regular expression). */
    pattern?: string;
    /** The string prefix. */
    prefix?: string;
    /** The string suffix. */
    suffix?: string;
};
/** schema-timestamp-field-descriptor */
export type SchemaTimestampFieldDescriptor = SchemaFieldDescriptorBase & {
    /** Default value. */
    default_value?: string;
};
/** schema-timestamp-list-field-descriptor */
export type SchemaTimestampListFieldDescriptor = SchemaFieldDescriptorBase & {
    /** Default value. */
    default_value?: string[];
};
/** schema-tokens-field-descriptor */
export type SchemaTokensFieldDescriptor = SchemaFieldDescriptorBase & {
    /** The contained substring. */
    contains?: string;
    /** Default value. */
    default_value?: string;
    /**
     * The exact string length.
     * @format int64
     */
    eq_len?: number;
    /**
     * The maximum string length.
     * @format int64
     */
    max_len?: number;
    /**
     * The minimum string length.
     * @format int64
     */
    min_len?: number;
    /** The string pattern (regular expression). */
    pattern?: string;
    /** The string prefix. */
    prefix?: string;
    /** The string suffix. */
    suffix?: string;
};
/** schema-tokens-list-field-descriptor */
export type SchemaTokensListFieldDescriptor = SchemaFieldDescriptorBase & {
    /** The contained substring. */
    contains?: string;
    /** Default value. */
    default_value?: string[];
    /**
     * The exact string length.
     * @format int64
     */
    eq_len?: number;
    /**
     * The maximum string length.
     * @format int64
     */
    max_len?: number;
    /**
     * The minimum string length.
     * @format int64
     */
    min_len?: number;
    /** The string pattern (regular expression). */
    pattern?: string;
    /** The string prefix. */
    prefix?: string;
    /** The string suffix. */
    suffix?: string;
};
/** schema-uenum-field-descriptor */
export type SchemaUenumFieldDescriptor = SchemaFieldDescriptorBase & {
    /** Allowed values for the field. */
    allowed_values: SchemaFieldUenumValue[];
    /**
     * Default value.
     * @format int64
     */
    default_value?: number;
};
/** schema-uenum-list-field-descriptor */
export type SchemaUenumListFieldDescriptor = SchemaFieldDescriptorBase & {
    /** Allowed values for the field. */
    allowed_values: SchemaFieldUenumValue[];
    /** Default value. */
    default_value?: number[];
};
/** schema-unknown-field-descriptor */
export type SchemaUnknownFieldDescriptor = SchemaFieldDescriptorBase;
/** schemas-subtype-prepare-update-get-request */
export interface SchemasSubtypePrepareUpdateGetRequest {
    /** Custom fields of the object. */
    custom_fields: object;
    /** List of custom schema fragment IDs of the object. */
    custom_schema_fragments: string[];
    /** Leaf type of the object. */
    leaf_type: string;
    /** Name of the potential new subtype for the object. */
    new_subtype?: string;
    /**
     * Optional ID of the object of which subtype is to be changed.Only
     * used for logging purposes.
     */
    object?: string;
}
/** schemas-subtype-prepare-update-get-response */
export interface SchemasSubtypePrepareUpdateGetResponse {
    /** List of fields that have a default value and need to be set. */
    added_fields?: SchemasSubtypePrepareUpdateGetResponseAddedField[];
    /** List of fields that will be dropped from the object. */
    dropped_fields?: SchemasSubtypePrepareUpdateGetResponseDroppedField[];
    /** List of new custom schema fragment IDs of the object. */
    new_custom_schema_fragments?: string[];
}
/** schemas-subtype-prepare-update-get-response-added-field */
export interface SchemasSubtypePrepareUpdateGetResponseAddedField {
    /** Default value of the added field. */
    default_value?: object;
    /** API compliant qualified name of the added field. */
    name: string;
}
export declare enum SchemasSubtypePrepareUpdateGetResponseConflictType {
    AbsentInNew = "absent_in_new",
    AbsentInOld = "absent_in_old",
    IncompatibleType = "incompatible_type"
}
/** schemas-subtype-prepare-update-get-response-dropped-field */
export interface SchemasSubtypePrepareUpdateGetResponseDroppedField {
    conflict_type: SchemasSubtypePrepareUpdateGetResponseConflictType;
    /** Conflict message for the field being dropped. */
    message: string;
    /** API compliant qualified name of the dropped field. */
    name: string;
}
/**
 * scope-definition
 * Define the scope of access to user data, including the name,
 * description, value, and whether it is optional.
 */
export interface ScopeDefinition {
    /** Provide a brief description of the scope. */
    description?: string;
    /** Indicate whether the scope is optional. */
    is_optional?: boolean;
    /** Specify the name of the scope. */
    name?: string;
    /** Specify the scope value. */
    value?: string;
}
/** score */
export type Score = AtomBase & {
    /** Object type to which the score is attributed. */
    attribution_type?: ScoreAttributionType;
    /** Description of the score. */
    description?: string;
    /** Whether this is a default score. */
    is_default?: boolean;
    /** Name of the score. */
    name?: string;
    /**
     * Terms for the score. The score is a linear combination of these
     * terms.
     */
    terms?: Term[];
};
/** Object type to which the score is attributed. */
export declare enum ScoreAttributionType {
    Account = "account"
}
/** score-summary */
export type ScoreSummary = AtomBaseSummary;
/** scores-create-request */
export interface ScoresCreateRequest {
    /** Object type to which the score is attributed. */
    attribution_type: ScoreAttributionType;
    /** Description of the score. */
    description: string;
    /** Name of the score. */
    name: string;
    /**
     * Terms for the score. The score is a linear combination of these
     * terms.
     */
    terms: ScoresCreateRequestTerm[];
}
/** scores-create-request-term */
export interface ScoresCreateRequestTerm {
    /** Whether the term is positively or negatively correlated with the score. */
    correlation: TermCorrelation;
    /** Term ID. */
    term: string;
    /**
     * Weight of the term, this will be used to decide the attribution of
     * this term to the score.
     * @format double
     */
    weight: number;
}
/** scores-create-response */
export interface ScoresCreateResponse {
    score: Score;
}
/** scores-delete-request */
export interface ScoresDeleteRequest {
    /** ID of the score to delete. */
    id: string;
}
/**
 * scores-delete-response
 * The response to deleting a score.
 */
export type ScoresDeleteResponse = object;
/** scores-get-request */
export interface ScoresGetRequest {
    /** ID of the score to get. */
    id: string;
}
/** scores-get-response */
export interface ScoresGetResponse {
    score: Score;
}
/**
 * scores-list-request
 * A request to get information about a list of scores.
 */
export type ScoresListRequest = object;
/**
 * scores-list-response
 * The response to listing scores.
 */
export interface ScoresListResponse {
    /** The list of scores. */
    scores: Score[];
}
/** scores-update-request */
export interface ScoresUpdateRequest {
    /** The updated score's description. */
    description?: string;
    /** ID of the score to update. */
    id: string;
    /** The updated score's name. */
    name?: string;
    terms?: ScoresUpdateRequestTerms;
}
/** scores-update-request-term */
export interface ScoresUpdateRequestTerm {
    /** Whether the term is positively or negatively correlated with the score. */
    correlation: TermCorrelation;
    /** Term ID. */
    term: string;
    /**
     * Weight of the term, this will be used to decide the attribution of
     * this term to the score.
     * @format double
     */
    weight: number;
}
/** scores-update-request-terms */
export interface ScoresUpdateRequestTerms {
    /** Sets the terms of the score to the provided values. */
    set: ScoresUpdateRequestTerm[];
}
/** scores-update-response */
export interface ScoresUpdateResponse {
    score: Score;
}
/**
 * search-articles-request
 * Request for searches over articles and to get an answer to the query.
 */
export interface SearchArticlesRequest {
    /** Whether to include an answer along with the search results. */
    include_answer?: boolean;
    /**
     * The maximum number of search results to return. The default is '5'.
     * @format int32
     */
    limit?: number;
    /** The query string. */
    query: string;
}
/**
 * search-articles-response
 * Response articles along with an answer for the provided query.
 */
export interface SearchArticlesResponse {
    /** Answer to the given query if available. */
    answer?: string;
    /** The article search results. */
    results: ArticleSearchSummary[];
}
/**
 * search-auto-complete-request
 * The request to complete a natural language query.
 */
export interface SearchAutoCompleteRequest {
    /**
     * The query to be completed.
     * @minLength 1
     */
    query: string;
}
/**
 * search-auto-complete-response
 * The generated completion for the query.
 */
export interface SearchAutoCompleteResponse {
    /** The suggestions generated for the query. */
    suggestions: SearchAutoCompleteResponseSuggestion[];
}
/** search-auto-complete-response-suggestion */
export interface SearchAutoCompleteResponseSuggestion {
    /** The text of the suggestion. */
    text: string;
}
/**
 * search-core-request
 * Search request.
 */
export interface SearchCoreRequest {
    /**
     * The cursor from where to begin iteration. Start from beginning if
     * not provided.
     */
    cursor?: string;
    /**
     * The maximum number of items to return in a page. The default is
     * '10'.
     * @format int32
     */
    limit?: number;
    /** The namespaces to search in. */
    namespaces?: SearchNamespace[];
    /**
     * The query string. Search query language:
     * https://docs.devrev.ai/product/search#fields
     */
    query: string;
    /**
     * Filters for items that are associated with any of the provided Rev
     * organizations.
     * @example ["REV-AbCdEfGh"]
     */
    rev_orgs?: string[];
    /** Search sort by parameters. */
    sort_by?: SearchSortByParam;
    /** Search sort order parameters. */
    sort_order?: SearchSortOrderParam;
}
/**
 * search-core-response
 * Search response.
 */
export interface SearchCoreResponse {
    /**
     * The cursor from where to begin iteration. Start from beginning if
     * not provided.
     */
    cursor?: string;
    /** The search results. */
    results: SearchResult[];
}
/** The namespaces for hybrid search. */
export declare enum SearchHybridNamespace {
    Article = "article",
    Conversation = "conversation",
    Issue = "issue",
    Part = "part",
    QuestionAnswer = "question_answer",
    Ticket = "ticket",
    Work = "work"
}
/**
 * search-hybrid-request
 * Request for search with exact, prefix and infix matches.
 */
export interface SearchHybridRequest {
    /**
     * The maximum number of items to return in a page. The default is
     * '10'.
     * @format int32
     * @min 0
     * @max 50
     */
    limit?: number;
    /** The namespaces for hybrid search. */
    namespace: SearchHybridNamespace;
    /**
     * The query string.
     * @minLength 1
     * @maxLength 400
     */
    query: string;
    /**
     * The weightage for semantic search. Values between 0 and 1 are
     * accepted.
     * @format float
     * @min 0
     * @max 1
     */
    semantic_weight?: number;
}
/**
 * search-hybrid-response
 * Hybrid search response.
 */
export interface SearchHybridResponse {
    /** The search results. */
    results: SearchResult[];
}
/** The namespaces to search in. */
export declare enum SearchNamespace {
    Account = "account",
    Article = "article",
    Capability = "capability",
    Component = "component",
    Conversation = "conversation",
    CustomPart = "custom_part",
    CustomWork = "custom_work",
    Dashboard = "dashboard",
    DevUser = "dev_user",
    Enhancement = "enhancement",
    Feature = "feature",
    Group = "group",
    Issue = "issue",
    Linkable = "linkable",
    Microservice = "microservice",
    ObjectMember = "object_member",
    Opportunity = "opportunity",
    Product = "product",
    Project = "project",
    QuestionAnswer = "question_answer",
    RevOrg = "rev_org",
    RevUser = "rev_user",
    Runnable = "runnable",
    ServiceAccount = "service_account",
    SysUser = "sys_user",
    Tag = "tag",
    Task = "task",
    Ticket = "ticket",
    Vista = "vista"
}
/** search-result */
export type SearchResult = (AccountSearchSummary | ArticleSearchSummary | ArtifactSearchSummary | ConversationSearchSummary | DashboardSearchSummary | GroupSearchSummary | LinkSearchSummary | ObjectMemberSearchSummary | OrgSearchSummary | PartSearchSummary | QuestionAnswerSearchSummary | TagSearchSummary | UserSearchSummary | VistaSearchSummary | WorkSearchSummary) & {
    type: SearchResultType;
};
export declare enum SearchResultType {
    Account = "account",
    Article = "article",
    Artifact = "artifact",
    Conversation = "conversation",
    Dashboard = "dashboard",
    Group = "group",
    Link = "link",
    ObjectMember = "object_member",
    Org = "org",
    Part = "part",
    QuestionAnswer = "question_answer",
    Tag = "tag",
    User = "user",
    Vista = "vista",
    Work = "work"
}
/** Search sort by parameters. */
export declare enum SearchSortByParam {
    CreatedDate = "created_date",
    ModifiedDate = "modified_date",
    Relevance = "relevance"
}
/** Search sort order parameters. */
export declare enum SearchSortOrderParam {
    Asc = "asc",
    Desc = "desc"
}
/**
 * search-suggest-request
 * Request for search with exact, prefix and infix matches.
 */
export interface SearchSuggestRequest {
    /**
     * The cursor from where to begin iteration. Start from beginning if
     * not provided.
     */
    cursor?: string;
    /**
     * The maximum number of items to return in a page. The default is
     * '10'.
     * @format int32
     */
    limit?: number;
    /** The namespaces to search in. */
    namespaces?: SearchNamespace[];
    /** The query string. */
    query: string;
    /**
     * Filters for items that are associated with any of the provided Rev
     * organizations.
     * @example ["REV-AbCdEfGh"]
     */
    rev_orgs?: string[];
    /** Search sort by parameters. */
    sort_by?: SearchSortByParam;
    /** Search sort order parameters. */
    sort_order?: SearchSortOrderParam;
}
/**
 * search-suggest-response
 * Suggests search response.
 */
export interface SearchSuggestResponse {
    /**
     * The cursor from where to begin iteration. Start from beginning if
     * not provided.
     */
    cursor?: string;
    /** The search results. */
    results: SearchResult[];
}
/** search-summary-base */
export interface SearchSummaryBase {
    /**
     * Final search score for the object.
     * @format float
     */
    final_score: number;
    /**
     * Timestamp when the object was last modified.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    modified_date?: string;
    /**
     * Semantic search score for the object.
     * @format float
     */
    semantic_score: number;
    /** Text snippet where the search hit occurred. */
    snippet?: string;
    /**
     * Syntactic search score for the object.
     * @format float
     */
    syntactic_score: number;
}
/**
 * search-typeahead-request
 * Typeahead search request.
 */
export interface SearchTypeaheadRequest {
    /**
     * The cursor from where to begin iteration. Start from beginning if
     * not provided.
     */
    cursor?: string;
    /** The fields to search on. */
    fields: string[];
    /**
     * The maximum number of items to return in a page. The default is
     * '10'.
     * @format int32
     */
    limit?: number;
    /** The namespaces to search in. */
    namespaces: SearchNamespace[];
    /** The query string. */
    query: string;
    /**
     * Filters for items that are associated with any of the provided Rev
     * organizations.
     * @example ["REV-AbCdEfGh"]
     */
    rev_orgs?: string[];
    /** Search sort by parameters. */
    sort_by?: SearchSortByParam;
    /** Search sort order parameters. */
    sort_order?: SearchSortOrderParam;
}
/**
 * search-typeahead-response
 * Typeahead search response.
 */
export interface SearchTypeaheadResponse {
    /**
     * The cursor from where to begin iteration. Start from beginning if
     * not provided.
     */
    cursor?: string;
    /** The search results. */
    results: SearchResult[];
}
/**
 * secret-config
 * Secret configuration for Basic Auth connection / multi-field Secret
 * connection.
 */
export interface SecretConfig {
    /**
     * Secret Transform is a function that transforms the secret before it
     * is stored.
     */
    secret_transform?: string;
    /**
     * Defines the fields that are required for the  Basic Auth connection
     * / multi-field Secret connection.
     */
    token_fields?: TokenFields[];
    /**
     * Define the template for making HTTP requests, including URL, method,
     * headers, query parameters, body (if needed), and optional JQ filtering.
     */
    token_verification?: HttpRequestTemplate;
}
/**
 * selector
 * Selector.
 */
export interface Selector {
    /** Attribute of the object. */
    attribute: string;
    /** The object. */
    object: SelectorObject;
}
/** The object. */
export declare enum SelectorObject {
    Actor = "actor",
    Target = "target"
}
/** send-notification */
export type SendNotification = (SendNotificationDevRevReminder | SendNotificationGenericNotificationEntry) & {
    /** Origin of the notification. */
    origin?: string;
    /** The ID of the parent object associated with the notification. */
    parent?: string;
    /** Priority of the notification. */
    priority?: NotificationPriority;
    /** The ID of the user for whom the notification was generated. */
    receiver: string;
    /** The ID of the user who generated the notification. */
    sender: string;
    /**
     * Timestamp of the event that triggered the notification.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    timestamp?: string;
    type: SendNotificationType;
};
/** send-notification-dev-rev-reminder */
export interface SendNotificationDevRevReminder {
    /**
     * Timestamp at which the reminder was created.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_at?: string;
    /** The message included with the reminder. */
    message?: string;
}
/** send-notification-generic-notification-entry */
export interface SendNotificationGenericNotificationEntry {
    /** Event ID to cluster notifications. */
    event_id?: string;
    /** Event type of the notification. */
    event_type: GenericNotificationEventType;
    /** Metadata for the objects that triggered the notification. */
    metadata: SendNotificationGenericNotificationEntryMetadata[];
}
/** send-notification-generic-notification-entry-metadata */
export interface SendNotificationGenericNotificationEntryMetadata {
    action?: SendNotificationGenericNotificationEntryNotificationAction;
    /** The content template's ID. */
    content_template: string;
    /** Inputs required for the template */
    inputs?: object;
}
/** send-notification-generic-notification-entry-notification-action */
export interface SendNotificationGenericNotificationEntryNotificationAction {
    clickable_action?: SendNotificationGenericNotificationEntryNotificationActionClickableAction;
    commentable_action?: SendNotificationGenericNotificationEntryNotificationActionCommentableAction;
    type?: 'clickable_action' | 'commentable_action';
}
/** send-notification-generic-notification-entry-notification-action-clickable-action */
export interface SendNotificationGenericNotificationEntryNotificationActionClickableAction {
    /** DevRev Object ID for internal redirection. */
    object_id?: string;
    type?: 'object_id' | 'url';
    /** Internal/External URL for redirection. */
    url?: string;
}
/** send-notification-generic-notification-entry-notification-action-commentable-action */
export interface SendNotificationGenericNotificationEntryNotificationActionCommentableAction {
    /**
     * Timeline Comment ID.
     * @example "don:core:<partition>:devo/<dev-org-id>:ticket/123:timeline_event/<timeline-event-id>"
     */
    timeline_entry_id?: string;
    type?: 'timeline_entry_id';
}
export declare enum SendNotificationType {
    DevrevReminder = "devrev_reminder",
    GenericNotification = "generic_notification"
}
/** service-account */
export type ServiceAccount = UserBase & {
    /** Information regarding why this service account was created. */
    description?: string;
    /** A reference to the keyrings associated with a service account. */
    keyrings?: ServiceAccountKeyring[];
};
/**
 * service-account-keyring
 * A reference to a keyring under a service account.
 */
export interface ServiceAccountKeyring {
    /** The display name of the keyring. */
    display_name?: string;
    /** A reference to a shared secret associated with a service account. */
    key?: string;
    /** A generated unique identifier under a given service account. */
    key_id?: string;
}
/** service-account-summary */
export type ServiceAccountSummary = UserBaseSummary;
/**
 * service-accounts-create-request
 * The request object to create a new service account.
 */
export interface ServiceAccountsCreateRequest {
    /**
     * The service account's display name. A unique, human readable name
     * to identify a service account.
     */
    display_name: string;
    /**
     * Indicates whether to generate a keyring along with the new service
     * account. The default is false.
     */
    gen_keyring?: boolean;
}
/**
 * service-accounts-create-response
 * The response object to create a new service account.
 */
export interface ServiceAccountsCreateResponse {
    service_account: ServiceAccount;
}
/**
 * service-accounts-delete-request
 * A request object to delete a service account.
 */
export interface ServiceAccountsDeleteRequest {
    /** The ID of the service account to be deleted. */
    id: string;
}
/**
 * service-accounts-delete-response
 * The response object to delete a service account.
 */
export type ServiceAccountsDeleteResponse = object;
/**
 * service-accounts-get-request
 * The request object to get a service account's information.
 */
export interface ServiceAccountsGetRequest {
    /** The ID of the requested service account. */
    id: string;
}
/**
 * service-accounts-get-response
 * The response object that carries the service account's information
 * corresponding to the request.
 */
export interface ServiceAccountsGetResponse {
    service_account: ServiceAccount;
}
/**
 * service-accounts-keyrings-create-request
 * A request object to create a new keyring under a service account.
 */
export interface ServiceAccountsKeyringsCreateRequest {
    /**
     * The keyrings's display name. A human readable name to identify a
     * keyring.
     */
    display_name: string;
    /** The service account ID under which the new keyring to be created. */
    service_account_id: string;
}
/**
 * service-accounts-keyrings-create-response
 * The response object to get a keyring under a service account.
 */
export interface ServiceAccountsKeyringsCreateResponse {
    /** A reference to a keyring under a service account. */
    keyring: ServiceAccountKeyring;
    /** The ID of the requested service account. */
    service_account_id: string;
}
/**
 * service-accounts-keyrings-delete-request
 * A request object to delete a keyring under a service account.
 */
export interface ServiceAccountsKeyringsDeleteRequest {
    /** The ID of the keyring. */
    key_id: string;
    /** The ID of the requested service account. */
    service_account_id: string;
}
/**
 * service-accounts-keyrings-delete-response
 * The response to delete a keyring under a service account.
 */
export type ServiceAccountsKeyringsDeleteResponse = object;
/**
 * service-accounts-keyrings-get-request
 * A request object to get a keyring corresponding to a service account.
 */
export interface ServiceAccountsKeyringsGetRequest {
    /** The ID of the keyring. */
    key_id: string;
    /** The ID corresponding to the requested keyring. */
    service_account_id: string;
}
/**
 * service-accounts-keyrings-get-response
 * The response object to get the keyring associated with a service
 * account.
 */
export interface ServiceAccountsKeyringsGetResponse {
    /** A reference to a keyring under a service account. */
    keyring: ServiceAccountKeyring;
    /** The ID of the requested service account. */
    service_account_id: string;
}
/**
 * service-accounts-keyrings-update-request
 * A request object to update a new keyring under a service account.
 */
export interface ServiceAccountsKeyringsUpdateRequest {
    /**
     * The keyrings's display name to be updated. A human readable name to
     * identify a keyring.
     */
    display_name?: string;
    /** The ID of the keyring. */
    key_id: string;
    /** The ID of the requested service account. */
    service_account_id: string;
}
/**
 * service-accounts-keyrings-update-response
 * The response object to get the keyring under a service account.
 */
export interface ServiceAccountsKeyringsUpdateResponse {
    /** A reference to a keyring under a service account. */
    keyring: ServiceAccountKeyring;
    /** The ID corresponding to the keyring. */
    service_account_id: string;
}
/**
 * service-accounts-list-request
 * A request object to get the list of service accounts.
 */
export interface ServiceAccountsListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of service accounts to return. The default is
     * '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
}
/**
 * service-accounts-list-response
 * The response object to list the service accounts.
 */
export interface ServiceAccountsListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The list of service accounts. */
    service_accounts: ServiceAccount[];
}
/**
 * service-accounts-update-request
 * The request object to update a service account.
 */
export interface ServiceAccountsUpdateRequest {
    /**
     * The service account's display name to be updated. A unique, human
     * readable name to identify a service account.
     */
    display_name?: string;
    /**
     * Artifact ID of service account's display picture.
     * @example "ARTIFACT-12345"
     */
    display_picture_id?: string | null;
    /** The ID of the requested service account. */
    id: string;
}
/**
 * service-accounts-update-response
 * The response object that carries the updated service account's
 * information.
 */
export interface ServiceAccountsUpdateResponse {
    service_account: ServiceAccount;
}
/** service-plan */
export type ServicePlan = AtomBase & {
    account?: AccountSummary;
    /** The billing frequency of the service plan. */
    billing_cycle: ServicePlanBillingCycle;
    /**
     * Settings related to payment, proration, etc. Configurations may or may
     * not be defined by a DevO. 1. If DevO defines configurations then same
     * configurations are copied to RevO also to sub pack (for now, later RevO
     * can also set) 2. If DevO doesn't set anything then these configurations
     * would be set to default by application for which they were being
     * defined (for eg. if DevO doesn't set payment method for it's RevOs then
     * stripe would set it to 'charge_automatically' by default).
     */
    configurations?: Configuration;
    /** The currency on which the service plan is created. */
    currency: string;
    /** Description for the Service Plan. */
    description?: string;
    /** Human readable name for the service plan. */
    name: string;
    /** The one time invoice items attached to the service plan. */
    one_time_line_items?: OneTimeLineItemSummary[];
    /** The recurring items inside the service plan. */
    recurring_line_items?: RecurringLineItemSummary[];
    rev_org: OrgSummary;
    /**
     * The status of the service plan indicates its current state. If the
     * status is 'active,' it means the service plan items are in use and
     * billed every cycle. If the status is 'cancelled,' it signifies that the
     * service plan has been terminated and is no longer active or considered
     * for billing.
     */
    status?: ServicePlanStatus;
    /**
     * The trial details store the time interval periods during which the
     * services offered in the service plan are not charged.
     */
    trial_details?: TrialPeriod[];
};
/** The billing frequency of the service plan. */
export declare enum ServicePlanBillingCycle {
    Monthly = "monthly"
}
/**
 * service-plan-detail
 * Service plan information if the invoice is generated for a service plan
 * or plans information in case if invoice is to be generated at the
 * account level.
 */
export interface ServicePlanDetail {
    customer_dev_oid?: OrgSummary;
    rev_oid?: OrgSummary;
    service_plan_id?: ServicePlanSummary;
}
/**
 * The status of the service plan indicates its current state. If the
 * status is 'active,' it means the service plan items are in use and
 * billed every cycle. If the status is 'cancelled,' it signifies that the
 * service plan has been terminated and is no longer active or considered
 * for billing.
 */
export declare enum ServicePlanStatus {
    Active = "active",
    Cancelled = "cancelled"
}
/** service-plan-summary */
export type ServicePlanSummary = AtomBaseSummary;
/** service-plans-cancel-request */
export interface ServicePlansCancelRequest {
    /** The service plan's DON. */
    id: string;
}
/** service-plans-count-request */
export interface ServicePlansCountRequest {
    /**
     * Filter service plans by account.
     * @example ["ACC-12345"]
     */
    account_ids?: string[];
    /** The list of service plan DONs which are to be aggregated. */
    ids?: string[];
    /**
     * The list of rev org DONs which are to be aggregated.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org_ids?: string[];
    /** The list of states which are to be aggregated. */
    states?: string[];
}
/** service-plans-count-response */
export interface ServicePlansCountResponse {
    /**
     * The count of service plans matching the filter.
     * @format int32
     */
    count: number;
}
/** service-plans-create-request */
export interface ServicePlansCreateRequest {
    /** The billing frequency of the service plan. */
    billing_cycle: ServicePlanBillingCycle;
    /**
     * The billing date set for the service plan.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    billing_date?: string;
    /**
     * Settings related to payment, proration, etc. Configurations may or may
     * not be defined by a DevO. 1. If DevO defines configurations then same
     * configurations are copied to RevO also to sub pack (for now, later RevO
     * can also set) 2. If DevO doesn't set anything then these configurations
     * would be set to default by application for which they were being
     * defined (for eg. if DevO doesn't set payment method for it's RevOs then
     * stripe would set it to 'charge_automatically' by default).
     */
    configurations?: Configuration;
    /** The currency on which the service plan is created. */
    currency: string;
    /** Description of the service plan. */
    description?: string;
    /** Human readable name of the service plan. */
    name: string;
    /** The one time line items to be added in the service plan. */
    one_time_line_items?: CreateOneTimeLineItems[];
    /** The recurring line items to be added in the service plan. */
    recurring_line_items: CreateRecurringLineItems[];
    /**
     * The rev org for which the current service plan is created for. Rev
     * Org is needed when service plan is being created by dev for a
     * specific rev.
     * @example "REV-AbCdEfGh"
     */
    rev_org_id?: string;
    /**
     * The trial period end time of the service plan.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    trial_period_end_time?: string;
}
/** service-plans-create-response */
export interface ServicePlansCreateResponse {
    service_plan: ServicePlan;
}
/** service-plans-get-compatible-skus-request */
export interface ServicePlansGetCompatibleSkusRequest {
    /** The service plan's DON. */
    id?: string;
    /**
     * The product ID for which to get the compatible SKUs.
     * @example "PROD-12345"
     */
    product_id?: string;
}
/** service-plans-get-compatible-skus-response */
export interface ServicePlansGetCompatibleSkusResponse {
    /** Product to compatible SKU mapping. */
    product_sku_mapping?: ServicePlansGetCompatibleSkusResponseProductSkuMapping[];
}
/** service-plans-get-compatible-skus-response-product-sku-mapping */
export interface ServicePlansGetCompatibleSkusResponseProductSkuMapping {
    /**
     * The product ID for the compatible skus.
     * @example "PROD-12345"
     */
    product_id: string;
    /** The SKU and Pricing details. */
    sku_details: ServicePlansGetCompatibleSkusResponseProductSkuMappingSkuDetails[];
}
/** service-plans-get-compatible-skus-response-product-sku-mapping-sku-details */
export interface ServicePlansGetCompatibleSkusResponseProductSkuMappingSkuDetails {
    pricing: Pricing;
    /**
     * Maximum quantity that can be purchased in case of a subscription
     * SKU.
     * @format int64
     */
    quantity?: number;
    sku: Sku;
}
/** service-plans-get-request */
export interface ServicePlansGetRequest {
    /** The service plan's DON. */
    id: string;
}
/** service-plans-get-response */
export interface ServicePlansGetResponse {
    service_plan: ServicePlan;
}
/** service-plans-list-request */
export interface ServicePlansListRequest {
    /**
     * Filter service plans by account.
     * @example ["ACC-12345"]
     */
    account_ids?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** The list of service plan DONs which are to be aggregated. */
    ids?: string[];
    /**
     * The maximum number of service plans to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /**
     * The list of rev org DONs which are to be aggregated.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org_ids?: string[];
    /**
     * List of fields to sort the service plan object, by and how to sort
     * them. Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
    /** The list of states which are to be aggregated. */
    states?: string[];
}
/** service-plans-list-response */
export interface ServicePlansListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The list of service plan objects. */
    service_plans: ServicePlan[];
}
/** service-plans-update-request */
export interface ServicePlansUpdateRequest {
    /** The service plan's DON. */
    id: string;
    /**
     * Migrate recurring line items from one SKU to another. This
     * operation can only be performed for licensed SKUs. It is utilized
     * when upgrading or downgrading a SKU in the service plan, where all
     * associated licenses will be moved to the new SKU.
     */
    migrate_recurring_line_items?: MigrateRecurringLineItem[];
    one_time_line_items?: ServicePlansUpdateRequestOneTimeLineItems;
    recurring_line_items?: ServicePlansUpdateRequestRecurringLineItems;
    /** Flag to end the trial for the service plan. */
    trial_end_now?: boolean;
    /**
     * The updated trial period end time for the service plan.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    trial_period_end_time?: string;
}
/** service-plans-update-request-one-time-line-items */
export interface ServicePlansUpdateRequestOneTimeLineItems {
    /** The one time line items to be added in the service plan. */
    add?: CreateOneTimeLineItems[];
}
/** service-plans-update-request-recurring-line-items */
export interface ServicePlansUpdateRequestRecurringLineItems {
    /** The recurring line items to be added in the service plan. */
    add?: CreateRecurringLineItems[];
    /** The recurring line items to be deleted from the service plan. */
    remove?: DeleteRecurringLineItems[];
    /** The recurring line items to be updated in the service plan. */
    set?: UpdateRecurringLineItems[];
}
/** service-plans-update-response */
export interface ServicePlansUpdateResponse {
    service_plan: ServicePlan;
}
/** set-issue-selector */
export interface SetIssueSelector {
    /**
     * Custom fields on the issue with their fully qualified names and the
     * associated with their exact allowed values. The SLA policy applies
     * to issues where all named custom fields have exactly the specified
     * values.
     */
    custom_fields?: object;
    /**
     * The SLA policy applies to the issues of these parts.
     * @example ["PROD-12345"]
     */
    parts?: string[];
    /**
     * The SLA policy applies to the issues of these revorgs.
     * @example ["REV-AbCdEfGh"]
     */
    rev_orgs?: string[];
    /** The SLA policy applies to issues with these stages. */
    stage_name?: string[];
    /** The issue subtype for which the SLA policy applies. */
    subtype?: string[];
    /**
     * Specifies the logical operation to perform between the presence of the
     * specified tags, whether all or any are needed.
     */
    tag_op?: IssueSelectorTagOp;
    /**
     * The SLA policy applies to issues with these tags. If empty, the tag
     * filter isn't applied.
     * @example ["TAG-12345"]
     */
    tags?: string[];
}
/**
 * set-money
 * The money value to create.
 */
export interface SetMoney {
    /** The amount. */
    amount: string;
    /** The currency code conforming ISO 4217 standard. */
    currency: string;
}
/** set-org-schedule-fragment-summary */
export interface SetOrgScheduleFragmentSummary {
    /** Organization schedule fragment ID. */
    id: string;
}
/**
 * set-shared-with-membership
 * Information about the role the member receives due to the share.
 */
export interface SetSharedWithMembership {
    /** ID of the member the object is shared with. */
    member?: string;
    /**
     * ID of the role that describes what privileges the membership
     * entails.
     */
    role?: string;
}
/** set-sla-policy */
export interface SetSlaPolicy {
    /** Metrics to apply to the selected items. */
    metrics?: SetSupportMetricTarget[];
    /** Human-readable name. */
    name: string;
    selector: SetSlaSelector;
}
/** set-sla-selector */
export interface SetSlaSelector {
    /** The item type for which the SLA policy applies. */
    applies_to: SlaSelectorAppliesTo;
    /**
     * Custom fields with their fully qualified names and associated with
     * their exact allowed values. The SLA policy applies to records where
     * all named custom fields have exactly the specified values. If the
     * value is null, the field must have null value or not be present.
     */
    custom_fields?: object;
    issue_selector?: SetIssueSelector;
    /**
     * The SLA policy applies to the tickets of these parts.
     * @example ["PROD-12345"]
     */
    parts?: string[];
    /** The SLA policy applies to conversations with these priorities. */
    priority?: SlaSelectorPriority[];
    /** The SLA policy applies to tickets with these severities. */
    severity?: SlaSelectorSeverity[];
    /** The SLA policy applies to conversations with these sources. */
    source_channel?: string[];
    /** The SLA policy applies to tickets with these subtypes. */
    subtype?: string[];
    /**
     * Specifies the logical operation to perform between the presence of the
     * specified tags, whether all or any are needed.
     */
    tag_operation?: SlaSelectorTagOperation;
    /**
     * The SLA policy applies to items with these tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
}
/** set-support-metric-target */
export interface SetSupportMetricTarget {
    /** The metric to apply. */
    metric: string;
    /**
     * The organization schedule controlling this metrics calculation.
     * Time based metrics don't consume time while their schedule is off.
     */
    org_schedule_id?: string;
    /**
     * The percentage of instances for which this metric's target must not
     * be breached, in order to avoid breaching the overall SLA policy.
     * @format double
     */
    performance?: number;
    /**
     * The target value to be achieved, for example the time in which to
     * do something, or the maximum allowed number of message pairs. The
     * units and interpretation of the value is controlled by the
     * properties of the referenced metric.
     * @format int32
     */
    target: number;
    /**
     * The threshold in the same units as target where the metric is
     * considered to be 'at risk'.
     * @format int32
     */
    warning_target?: number;
}
/** set-tag-with-value */
export interface SetTagWithValue {
    /**
     * The ID of the tag.
     * @example "TAG-12345"
     */
    id: string;
    /**
     * The value for the object's association with the tag. If specified,
     * the value must be one that's specified in the tag's allowed values.
     */
    value?: string;
}
/** set-weekly-org-schedule */
export interface SetWeeklyOrgSchedule {
    /** The 'on' intervals of the week. */
    intervals: CreateWeeklyOrgScheduleInterval[];
    /**
     * The name of the period during which the organization schedule
     * applies.
     */
    period_name: string;
}
/** settings */
export type Settings = AtomBase & {
    /** Data for the settings in JSON schema format. */
    data?: object;
    /** Provides a logical grouping for settings. */
    namespace?: string;
    /** Globally unique IDs of rev orgs. */
    rev_org_ids?: AtomSummary[];
};
/** settings-summary */
export type SettingsSummary = AtomBaseSummary;
/** Type of the created resource. */
export declare enum SetupResourceResourceType {
    Tag = "tag",
    User = "user"
}
/**
 * shared-with-membership
 * Information about the role the member receives due to the share.
 */
export interface SharedWithMembership {
    member?: MemberSummary;
    role?: RoleSummary;
}
/**
 * shared-with-membership-filter
 * Filter on target item based on intended audience.
 */
export interface SharedWithMembershipFilter {
    /** ID of the group/member with whom the item is shared. */
    member?: string;
    /** Role ID of the group/member with whom the item is shared. */
    role?: string;
}
/**
 * sign-config
 * Quote signing config.
 */
export interface SignConfig {
    /** Members list to be cced in the email of the signing document. */
    cc_members?: MemberDetail[];
    /** External agreement id of the signing document. */
    external_agreement_id?: string;
    /** Email message of the signing document. */
    message?: string;
    /** Recipient details list of the signing document. */
    recipients?: RecipientDetail[];
    /** Status of the signing document. */
    status?: SignConfigStatus;
    /** Email title of the signing document. */
    title?: string;
    /** Type of the sign needed for the quote. */
    type: SignConfigType;
}
/** Status of the signing document. */
export declare enum SignConfigStatus {
    Declined = "declined",
    Pending = "pending",
    Signed = "signed",
    Viewed = "viewed"
}
/** Type of the sign needed for the quote. */
export declare enum SignConfigType {
    Esign = "esign",
    EsignWithWetSignature = "esign_with_wet_signature",
    ManualSign = "manual_sign",
    NoSign = "no_sign"
}
/**
 * skill-type
 * Pre defined skill type defined at devorg level.
 */
export interface SkillType {
    /** Name of the skill. */
    name?: string;
}
/** sku */
export type Sku = AtomBase & {
    approved_by_id?: UserSummary;
    /**
     * Timestamp when the SKU was approved.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    approved_date?: string;
    /**
     * Flag to enable/disable auto addition of consumption sku's as part
     * of creating a service plan (defaults to false).
     */
    auto_add?: boolean;
    /**
     * The attribute indicates the type of billing mode for license-based
     * SKUs. 'Committed' indicates a chargeable quantity is specified by
     * DevOrg admin regardless actual license assignments to users. Customers
     * are billed for the committed quantity configured. 'Consumed' indicates
     * that customers are billed based on the actual consumption of licenses
     * by users. eg. Build Starter License SKU provides entitlements to
     * consume Build App, with maximum limit of licenses = 5. If billing_mode
     * = Committed and committed quantity = 3, customers monthly invoices will
     * always contain a charge for 3 licenses, even if number of actual
     * licenses assigned to users is < 3. If billing_mode = Consumed and
     * used_quantity = 4, customers monthly invoices will contain a charge for
     * 4 licenses, which is based on actual license to user assignments.
     */
    billing_mode?: SkuBillingMode;
    /** Description of the SKU. */
    description?: string;
    /**
     * Announced Timestamp when the SKU will be moved to End of Life.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    end_of_life_announced_date?: string;
    end_of_life_by_id?: UserSummary;
    /**
     * Timestamp when the SKU was made End of Life.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    end_of_life_date?: string;
    /**
     * Timestamp when the SKU would be moved to End of Life.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    end_of_life_target_date?: string;
    end_of_sale_by_id?: UserSummary;
    /**
     * Timestamp when the SKU was made End of Sale.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    end_of_sale_date?: string;
    /** This contains the list of entitlements for the SKU. */
    entitlements: Entitlement[];
    /** Human readable name of the SKU. For example; Basic, Premium, etc. */
    family_name: string;
    /**
     * Invoice Description is meant to be displayable on the invoice
     * against the usage for the SKU.
     */
    invoice_description?: string;
    /**
     * If flag is enabled then the usage will be prorated for the time the
     * SKU is active.
     */
    is_duration_based_proration_enabled?: boolean;
    /**
     * Indicates whether the SKU, particularly of type subscription, is a
     * user based licensed SKU. If set to true, the licensing mechanism
     * for the SKU is based on the number of individual users, each unique
     * user is required to have a separate license.
     */
    is_user_based_license?: boolean;
    /**
     * maximum quantity a rev can subscribe to when subscribing to this
     * SKU.
     * @format int32
     */
    maximum_quantity?: number;
    /**
     * Minimum duration in minutes for the SKU usage after which the SKU
     * would be charged.
     * @format int32
     */
    minimum_duration_to_charge?: number;
    /**
     * minimum quantity a rev need to subscribe when subscribing to this
     * SKU.
     * @format int32
     */
    minimum_quantity?: number;
    /** Pricing details of the SKU. */
    pricing: PricingSummary[];
    product: PartSummary;
    product_id: PartSummary;
    released_by_id?: UserSummary;
    /**
     * Timestamp when the SKU was released.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    released_date?: string;
    /** It defines the type of SKU. */
    sku_type: SkuType;
    /**
     * Every SKU for a given family name can have multiple SKU versions.
     * For example; when a new SKU named 'Basic' is created and publish it
     * to production, it starts with version 0. Once the SKU goes to
     * production, one can decide to do some major updates like update
     * entitlements or change the price, in that case the version 0 SKU
     * will be moved to 'end of sale' and a new 'Basic' SKU with the same
     * family name is created with version 1. Once any SKU is in 'end of
     * sale', it is not available for new sale. Customers who wants to buy
     * this SKU will always get latest version of that family name. For a
     * given family name there can be only one SKU which is in production.
     * @format int32
     */
    sku_version: number;
    /**
     * Current state of the SKU. A SKU is visible to RevOs only when it is
     * released.
     */
    state: SkuState;
    /** The update status of the SKU. */
    status: SkuStatus;
    versioned_from_sku?: SkuSummary;
    versioned_from_sku_id?: SkuSummary;
};
/**
 * The attribute indicates the type of billing mode for license-based
 * SKUs. 'Committed' indicates a chargeable quantity is specified by
 * DevOrg admin regardless actual license assignments to users. Customers
 * are billed for the committed quantity configured. 'Consumed' indicates
 * that customers are billed based on the actual consumption of licenses
 * by users. eg. Build Starter License SKU provides entitlements to
 * consume Build App, with maximum limit of licenses = 5. If billing_mode
 * = Committed and committed quantity = 3, customers monthly invoices will
 * always contain a charge for 3 licenses, even if number of actual
 * licenses assigned to users is < 3. If billing_mode = Consumed and
 * used_quantity = 4, customers monthly invoices will contain a charge for
 * 4 licenses, which is based on actual license to user assignments.
 */
export declare enum SkuBillingMode {
    Committed = "committed",
    Consumed = "consumed"
}
/** sku-rule */
export type SkuRule = AtomBase & {
    /**
     * The list of allowed SKU family names which can be bought together
     * by a RevO.
     */
    allowed_sku_names: string[];
    /** Description of the SKU rules. */
    description?: string;
    product: PartSummary;
};
/** sku-rule-summary */
export type SkuRuleSummary = AtomBaseSummary;
/** sku-rules-create-request */
export interface SkuRulesCreateRequest {
    /**
     * The list of allowed sku names which can be bought together by a rev
     * org.
     */
    allowed_sku_names: string[];
    /** Description of the sku rule. */
    description?: string;
    /** Human readable name of the sku rule. */
    name: string;
    /**
     * The product DON for which the sku rule is defined.
     * @example "PROD-12345"
     */
    product_id: string;
}
/** sku-rules-create-response */
export interface SkuRulesCreateResponse {
    sku_rule: SkuRule;
}
/** sku-rules-delete-request */
export interface SkuRulesDeleteRequest {
    /** The sku rule's DON. */
    id: string;
}
/** sku-rules-get-request */
export interface SkuRulesGetRequest {
    /** The sku rule's DON */
    id: string;
}
/** sku-rules-get-response */
export interface SkuRulesGetResponse {
    sku_rule: SkuRule;
}
/** sku-rules-list-request */
export interface SkuRulesListRequest {
    /** The list of allowed sku names which are to be aggregated. */
    allowed_sku_names?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** The list of sku rule DONs which are to be aggregated. */
    ids?: string[];
    /**
     * The maximum number of sku rules to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /**
     * The list of product DONs which are to be aggregated.
     * @example ["PROD-12345"]
     */
    product_ids?: string[];
    /**
     * List of fields to sort the sku rules, by and how to sort them.
     * Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
}
/** sku-rules-list-response */
export interface SkuRulesListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The list of sku rules. */
    sku_rules: SkuRule[];
}
/** sku-rules-update-request */
export interface SkuRulesUpdateRequest {
    /**
     * The sku names which are to be added to this subscription rule
     * configuration.
     */
    add_allowed_sku_names?: string[];
    /** Description of the sku rule. */
    description?: string;
    /** The sku rule's DON. */
    id: string;
    /**
     * The sku names which are to be removed from this subscription rule
     * configuration.
     */
    remove_allowed_sku_names?: string[];
}
/** sku-rules-update-response */
export interface SkuRulesUpdateResponse {
    sku_rule: SkuRule;
}
/**
 * Current state of the SKU. A SKU is visible to RevOs only when it is
 * released.
 */
export declare enum SkuState {
    Approved = "approved",
    Draft = "draft",
    EndOfLife = "end_of_life",
    EndOfSale = "end_of_sale",
    Released = "released"
}
/** The update status of the SKU. */
export declare enum SkuStatus {
    CreateInProgress = "create_in_progress",
    DeleteInProgress = "delete_in_progress",
    Normal = "normal",
    UpdateInProgress = "update_in_progress"
}
/** sku-summary */
export type SkuSummary = AtomBaseSummary & {
    /** Human readable name of the SKU. For example; Basic, Premium, etc. */
    family_name: string;
    /**
     * Invoice Description is meant to be displayable on the invoice
     * against the usage for the SKU.
     */
    invoice_description?: string;
    /**
     * If flag is enabled then the usage will be prorated for the time the
     * SKU is active.
     */
    is_duration_based_proration_enabled?: boolean;
    /**
     * Indicates whether the SKU, particularly of type subscription, is a
     * user based licensed SKU. If set to true, the licensing mechanism
     * for the SKU is based on the number of individual users, each unique
     * user is required to have a separate license.
     */
    is_user_based_license?: boolean;
    /**
     * Minimum duration in minutes for the SKU usage after which the SKU
     * would be charged.
     * @format int32
     */
    minimum_duration_to_charge?: number;
    /** It defines the type of SKU. */
    sku_type: SkuType;
    /**
     * Current state of the SKU. A SKU is visible to RevOs only when it is
     * released.
     */
    state: SkuState;
};
/** It defines the type of SKU. */
export declare enum SkuType {
    Consumption = "consumption",
    ConsumptionAddon = "consumption_addon",
    OneOffAddon = "one_off_addon",
    OneOffCharge = "one_off_charge",
    Subscription = "subscription",
    SubscriptionAddon = "subscription_addon"
}
/** skus-count-request */
export interface SkusCountRequest {
    /** The list of SKU DONs which are to be aggregated. */
    ids?: string[];
    /** The list of SKU names which are to be aggregated. */
    names?: string[];
    /**
     * The list of product DONs which are to be aggregated.
     * @example ["PROD-12345"]
     */
    product_ids?: string[];
    /**
     * The list of rev org DONs which are to be aggregated.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org_ids?: string[];
    /** The list of SKU types which are to be aggregated. */
    sku_types?: SkuType[];
    /** The list of SKU versions which are to be aggregated. */
    sku_versions?: number[];
    /** The list of SKU states which are to be aggregated. */
    states?: SkuState[];
    /** Filter skus by uom. */
    uom_ids?: string[];
}
/** skus-count-response */
export interface SkusCountResponse {
    /**
     * Count of SKUs matching the filter.
     * @format int32
     */
    count: number;
}
/** skus-create-request */
export interface SkusCreateRequest {
    /**
     * The attribute indicates the type of billing mode for license-based
     * SKUs. 'Committed' indicates a chargeable quantity is specified by
     * DevOrg admin regardless actual license assignments to users. Customers
     * are billed for the committed quantity configured. 'Consumed' indicates
     * that customers are billed based on the actual consumption of licenses
     * by users. eg. Build Starter License SKU provides entitlements to
     * consume Build App, with maximum limit of licenses = 5. If billing_mode
     * = Committed and committed quantity = 3, customers monthly invoices will
     * always contain a charge for 3 licenses, even if number of actual
     * licenses assigned to users is < 3. If billing_mode = Consumed and
     * used_quantity = 4, customers monthly invoices will contain a charge for
     * 4 licenses, which is based on actual license to user assignments.
     */
    billing_mode?: SkuBillingMode;
    /** Description of the SKU. */
    description?: string;
    /** Entitlements to be added under the SKU. */
    entitlements?: UpdateEntitlementsAddUpdateEntitlement[];
    /**
     * If specified, it is meant to be displayable on the invoice against
     * the usage for the SKU.
     */
    invoice_description?: string;
    /**
     * Enabling this flag creates custom SKU specifically for a RevOrg.
     * The custom SKU is only visible to Rev Org for whom it is created.
     * Rev Org ID is needed while creating a custom SKU.
     */
    is_custom?: boolean;
    /**
     * If flag is enabled then the usage will be prorated for the time the
     * SKU is active.
     */
    is_duration_based_proration_enabled?: boolean;
    /**
     * Indicates whether the SKU, particularly of type subscription, is a
     * user based licensed SKU. If set to true, the licensing mechanism
     * for the SKU is based on the number of individual users, each unique
     * user is required to have a separate license.
     */
    is_user_based_license?: boolean;
    /**
     * Maximum quantity a rev can subscribe to when subscribing to this
     * SKU.
     * @format int32
     */
    maximum_quantity?: number;
    /**
     * Minimum duration in minutes for the SKU usage after which the SKU
     * would be charged.
     * @format int64
     */
    minimum_duration_to_charge?: number;
    /**
     * Minimum quantity a rev needs to subscribe when subscribing to this
     * SKU.
     * @format int32
     */
    minimum_quantity?: number;
    /** Human readable name of the SKU. For example; Basic, Premium, etc. */
    name: string;
    /** Pricing details of the SKU. */
    pricing?: UpdatePricingAddPriceInfo[];
    /**
     * The product for which the SKU is being created for. One product can
     * have multiple SKUs and multiple type of SKUs.
     * @example "PROD-12345"
     */
    product_id: string;
    /**
     * The rev org for which the current SKU is created for. Revs would be
     * able to see the default SKUs and the SKUs created exclusively for
     * them.
     * @example "REV-AbCdEfGh"
     */
    rev_org_id?: string;
    /** It defines the type of SKU. */
    sku_type: SkuType;
    /**
     * Current state of the SKU. A SKU is visible to RevOs only when it is
     * released.
     */
    state?: SkuState;
}
/** skus-create-response */
export interface SkusCreateResponse {
    sku: Sku;
}
/** skus-delete-request */
export interface SkusDeleteRequest {
    /** The SKU object's DON. */
    id: string;
}
/** skus-get-request */
export interface SkusGetRequest {
    /** The SKU object's DON. */
    id: string;
}
/** skus-get-response */
export interface SkusGetResponse {
    sku: Sku;
}
/** skus-list-request */
export interface SkusListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** The list of SKU DONs which are to be aggregated. */
    ids?: string[];
    /**
     * The maximum number of SKUs to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** The list of SKU names which are to be aggregated. */
    names?: string[];
    /**
     * The list of product DONs which are to be aggregated.
     * @example ["PROD-12345"]
     */
    product_ids?: string[];
    /**
     * The list of rev org DONs which are to be aggregated.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org_ids?: string[];
    /** The list of SKU types which are to be aggregated. */
    sku_types?: SkuType[];
    /** The list of SKU versions which are to be aggregated. */
    sku_versions?: number[];
    /**
     * List of fields to sort the SKU object, by and how to sort them.
     * Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
    /** The list of SKU states which are to be aggregated. */
    states?: SkuState[];
    /** Filter skus by uom. */
    uom_ids?: string[];
}
/** skus-list-response */
export interface SkusListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The list of SKU objects. */
    skus: Sku[];
}
/** skus-update-request */
export interface SkusUpdateRequest {
    /**
     * The attribute indicates the type of billing mode for license-based
     * SKUs. 'Committed' indicates a chargeable quantity is specified by
     * DevOrg admin regardless actual license assignments to users. Customers
     * are billed for the committed quantity configured. 'Consumed' indicates
     * that customers are billed based on the actual consumption of licenses
     * by users. eg. Build Starter License SKU provides entitlements to
     * consume Build App, with maximum limit of licenses = 5. If billing_mode
     * = Committed and committed quantity = 3, customers monthly invoices will
     * always contain a charge for 3 licenses, even if number of actual
     * licenses assigned to users is < 3. If billing_mode = Consumed and
     * used_quantity = 4, customers monthly invoices will contain a charge for
     * 4 licenses, which is based on actual license to user assignments.
     */
    billing_mode?: SkuBillingMode;
    /** Description of the SKU. */
    description?: string;
    entitlements?: UpdateEntitlements;
    /** The SKU object's DON. */
    id: string;
    /**
     * If specified, it is meant to be displayable on the invoice against
     * the usage for the SKU.
     */
    invoice_description?: string;
    /**
     * Enabling this flag updates a SKU to be custom (specifically for a
     * RevOrg).The custom SKU is only visible to Rev Org for whom it is
     * created. Rev Org ID is needed while making a SKU custom.
     */
    is_custom?: boolean;
    /**
     * Indicates whether the SKU, particularly of type subscription, is a
     * user based licensed SKU. If set to true, the licensing mechanism
     * for the SKU is based on the number of individual users, each unique
     * user is required to have a separate license. The flag value can be
     * updated as long as the SKU is in draft state.
     */
    is_user_based_license?: boolean;
    /**
     * Maximum quantity a rev can subscribe to when subscribing to this
     * SKU.
     * @format int32
     */
    maximum_quantity?: number;
    /**
     * Minimum quantity a rev needs to subscribe when subscribing to this
     * SKU.
     * @format int32
     */
    minimum_quantity?: number;
    /** Human readable name of the SKU. For example; Basic, Premium, etc. */
    name?: string;
    pricing?: UpdatePricing;
    /**
     * The rev for which the current SKU is created for. Rev would be able
     * to see the default SKUs and the SKUs created exclusively for them.
     * @example "REV-AbCdEfGh"
     */
    rev_org_id?: string;
    /**
     * Current state of the SKU. A SKU is visible to RevOs only when it is
     * released.
     */
    state?: SkuState;
}
/** skus-update-response */
export interface SkusUpdateResponse {
    sku: Sku;
}
/** skus-version-request */
export interface SkusVersionRequest {
    /** Description of the SKU. */
    description?: string;
    entitlements?: UpdateEntitlements;
    /**
     * The SKU ID from which the current SKU would be versioned from. In
     * case of some major updates are needed like price change or
     * remove/update entitlements of the current SKU, one can do end of
     * sale of the current version of SKU and create a newer version.
     */
    id: string;
    pricing?: UpdatePricing;
    /**
     * Current state of the SKU. A SKU is visible to RevOs only when it is
     * released.
     */
    state?: SkuState;
}
/** skus-version-response */
export interface SkusVersionResponse {
    sku: Sku;
}
/** sla */
export type Sla = AtomBase & {
    /**
     * A set of account attributes that must be satisfied for the SLA to
     * apply. AND applies between each field.
     */
    account_filter?: object;
    /**
     * The object types on which the SLA applies. An external SLA can
     * apply to multiple object types, but an internal SLA can apply to
     * only one object type.
     */
    applies_to?: SlaAppliesTo[];
    /**
     * Describes the compensation to be provided in case of SLA breach. It is
     * not 'self-executing', it is the responsibility of the organization
     * providing the SLA to actually transfer the promised credit, resource or
     * other payment.
     */
    compensation?: SlaCompensation;
    /** Description of the purpose and capabilities of the SLA. */
    description?: string;
    /**
     * Specifies the frequency of when the contractually-meaningful evaluation
     * of the SLA happens. The organization for their own information might
     * evaluate the various metrics contained in the policy as often as we can
     * make it feasible for them, but only the evaluation at the end of the
     * evaluation period triggers a compensation and needs to be shared with
     * the customer.
     */
    evaluation_period?: SlaEvaluationPeriod;
    /** Human-readable name. */
    name: string;
    /**
     * The policies encompassed by this SLA, ordered in decreasing
     * priority.
     */
    policies?: SlaPolicy[];
    /** Type of the SLA. */
    sla_type?: SlaType;
    /**
     * Status determines how an item can be used. In 'draft' status an item
     * can be edited but can't be used. When 'published' the item can longer
     * be edited but can be used. 'Archived' is read-only.
     */
    status: SlaStatus;
};
/**
 * The object types on which the SLA applies. An external SLA can apply to
 * multiple object types, but an internal SLA can apply to only one object
 * type.
 */
export declare enum SlaAppliesTo {
    Conversation = "conversation",
    Issue = "issue",
    Ticket = "ticket"
}
/** sla-assign-result */
export interface SlaAssignResult {
    error?: Error;
    rev_org: RevOrgSummary;
}
/** sla-assignment-rule */
export type SlaAssignmentRule = AtomBase & {
    /** Boolean expression. */
    conditional_expression: BooleanExpression;
    sla: SlaSummary;
};
/** sla-assignment-rules-create-request */
export interface SlaAssignmentRulesCreateRequest {
    /** Boolean expression. */
    conditional_expression?: BooleanExpression;
    /** ID of the SLA that's applied when the rule is satisfied. */
    sla: string;
}
/** sla-assignment-rules-create-response */
export interface SlaAssignmentRulesCreateResponse {
    sla_assignment_rule: SlaAssignmentRule;
}
/** sla-assignment-rules-delete-request */
export interface SlaAssignmentRulesDeleteRequest {
    /** ID of the SLA assignment rule to delete. */
    id: string;
}
/** sla-assignment-rules-delete-response */
export type SlaAssignmentRulesDeleteResponse = object;
/** sla-assignment-rules-get-request */
export interface SlaAssignmentRulesGetRequest {
    /** SLA assignment rule ID. */
    id: string;
}
/** sla-assignment-rules-get-response */
export interface SlaAssignmentRulesGetResponse {
    sla_assignment_rule: SlaAssignmentRule;
}
/** sla-assignment-rules-list-request */
export interface SlaAssignmentRulesListRequest {
    /**
     * Filters to assignment rules created by the specified user(s).
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * Maximum number of SLA assignment rules returned in a page. Default
     * is 50.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Filters to assignment rules created for the specified SLA(s). */
    sla?: string[];
    /** Fields and direction by which to sort the SLA assignment rules. */
    sort_by?: string[];
}
/** sla-assignment-rules-list-response */
export interface SlaAssignmentRulesListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The list of SLA assignment rules. */
    sla_assignment_rules: SlaAssignmentRule[];
}
/** sla-assignment-rules-update-request */
export interface SlaAssignmentRulesUpdateRequest {
    conditional_expression?: SlaAssignmentRulesUpdateRequestConditionalExpression;
    /** ID of the SLA assignment rule to update. */
    id: string;
    /** ID of SLA that's applied when the rule is satisfied. */
    sla?: string;
}
/** sla-assignment-rules-update-request-conditional-expression */
export interface SlaAssignmentRulesUpdateRequestConditionalExpression {
    /** Boolean expression. */
    set?: BooleanExpression;
}
/** sla-assignment-rules-update-response */
export interface SlaAssignmentRulesUpdateResponse {
    sla_assignment_rule: SlaAssignmentRule;
}
/**
 * sla-compensation
 * Describes the compensation to be provided in case of SLA breach. It is
 * not 'self-executing', it is the responsibility of the organization
 * providing the SLA to actually transfer the promised credit, resource or
 * other payment.
 */
export interface SlaCompensation {
    /**
     * The amount to be provided.
     * @format int32
     */
    amount?: number;
    /**
     * The 'unit' in which it is 'paid'. It can be a real currency, but it
     * needs not to be, can be any type of credit, quota, discount etc.
     */
    unit?: string;
}
/**
 * Specifies the frequency of when the contractually-meaningful evaluation
 * of the SLA happens. The organization for their own information might
 * evaluate the various metrics contained in the policy as often as we can
 * make it feasible for them, but only the evaluation at the end of the
 * evaluation period triggers a compensation and needs to be shared with
 * the customer.
 */
export declare enum SlaEvaluationPeriod {
    Monthly = "monthly",
    Quarterly = "quarterly",
    Weekly = "weekly",
    Yearly = "yearly"
}
/**
 * sla-policy
 * A policy that represents a promise to your revs.
 */
export interface SlaPolicy {
    /** Metrics to apply to the selected items. */
    metrics: SupportMetricTarget[];
    /** Human-readable name. */
    name?: string;
    /**
     * The conditions by which a ticket, conversation or issue is selected to
     * be under the SLA policy. AND is taken between the filters on each
     * field.
     */
    selector?: SlaSelector;
}
/**
 * sla-preferences-group
 * Preferences group for SLA.
 */
export interface SlaPreferencesGroup {
    default_sla_id?: SlaSummary;
    /** Enable default SLA assignment. */
    enable_default_sla?: boolean;
}
/**
 * sla-selector
 * The conditions by which a ticket, conversation or issue is selected to
 * be under the SLA policy. AND is taken between the filters on each
 * field.
 */
export interface SlaSelector {
    /** The item type for which the SLA policy applies. */
    applies_to: SlaSelectorAppliesTo;
    /**
     * Custom fields with their fully qualified names and the associated
     * with their exact allowed values. The SLA policy applies to records
     * where all named custom fields have exactly the specified values.
     */
    custom_fields?: object;
    /**
     * The conditions by which an issue is selected to be under the SLA
     * policy. AND is taken between the filters on different fields.
     */
    issue_selector?: IssueSelector;
    /** The SLA policy applies to the tickets of these parts. */
    parts?: PartSummary[];
    /** The SLA policy applies to conversations with these priorities. */
    priority?: SlaSelectorPriority[];
    /**
     * The SLA policy applies to tickets created and conversations started
     * by rev-users of this group.
     */
    rev_user_group?: string[];
    /** The SLA policy applies to tickets with these severities. */
    severity?: SlaSelectorSeverity[];
    /** Th SLA policy applies to conversations with these sources. */
    source_channel?: string[];
    /** The ticket subtype for which the SLA policy applies. */
    subtype?: string[];
    /**
     * Specifies the logical operation to perform between the presence of the
     * specified tags, whether all or any are needed.
     */
    tag_operation?: SlaSelectorTagOperation;
    /**
     * The SLA policy applies to tickets and conversations with these
     * tags. If empty, the tag filter isn't applied.
     */
    tags?: TagSummary[];
}
/** The item type for which the SLA policy applies. */
export declare enum SlaSelectorAppliesTo {
    Conversation = "conversation",
    Issue = "issue",
    Ticket = "ticket"
}
/** The SLA policy applies to conversations with these priorities. */
export declare enum SlaSelectorPriority {
    P0 = "p0",
    P1 = "p1",
    P2 = "p2"
}
/** The SLA policy applies to tickets with these severities. */
export declare enum SlaSelectorSeverity {
    Blocker = "blocker",
    High = "high",
    Low = "low",
    Medium = "medium"
}
/**
 * Specifies the logical operation to perform between the presence of the
 * specified tags, whether all or any are needed.
 */
export declare enum SlaSelectorTagOperation {
    All = "all",
    Any = "any",
    NotAny = "not_any"
}
/**
 * Status determines how an item can be used. In 'draft' status an item
 * can be edited but can't be used. When 'published' the item can longer
 * be edited but can be used. 'Archived' is read-only.
 */
export declare enum SlaStatus {
    Archived = "archived",
    Draft = "draft",
    Published = "published"
}
/** sla-summary */
export type SlaSummary = AtomBaseSummary & {
    /** Human-readable name. */
    name: string;
    /**
     * Status determines how an item can be used. In 'draft' status an item
     * can be edited but can't be used. When 'published' the item can longer
     * be edited but can be used. 'Archived' is read-only.
     */
    status: SlaStatus;
};
/**
 * sla-summary-filter
 * The filter for SLA summary.
 */
export interface SlaSummaryFilter {
    /** Filters for records with any of the provided SLA stages. */
    stage?: SlaSummaryStage[];
    /** Provides ways to specify date ranges on objects. */
    target_time?: DateFilter;
}
/**
 * The stage of the SLA. This is the metric stage which is closest to
 * breach.
 */
export declare enum SlaSummaryStage {
    Breached = "breached",
    Completed = "completed",
    Paused = "paused",
    Running = "running",
    Warning = "warning"
}
/** sla-tracker */
export type SlaTracker = AtomBase & {
    /** Details of the object on which the SLA is being tracked. */
    applies_to_id?: string;
    /** Summary of the metrics target being tracked in the SLA tracker. */
    metric_target_summaries: ArchetypeMetricTarget[];
    sla?: SlaSummary;
    /**
     * Details of the applicable SLA policy. Can be omitted if no sla
     * applies, or if no policy of the sla applies at the moment.
     */
    sla_policy_id?: string;
    /** SLA stage of the object being tracked. */
    stage?: string;
    /**
     * It is an indicator of whether the SLA has ever been breached
     * (missed). If not, it shows whether the SLA is completed, in
     * progress, or nil - if no policy is applied.
     */
    status?: string;
};
/** sla-tracker-summary */
export type SlaTrackerSummary = AtomBaseSummary;
/** sla-trackers-get-request */
export interface SlaTrackersGetRequest {
    /** The ID of the SLA tracker to get. */
    id: string;
}
/** sla-trackers-get-response */
export interface SlaTrackersGetResponse {
    sla_tracker: SlaTracker;
}
/** Type of the SLA. */
export declare enum SlaType {
    External = "external",
    Internal = "internal"
}
/** slas-assign-request */
export interface SlasAssignRequest {
    /**
     * The SLA which would be assigned to the Rev organizations. If
     * omitted, the SLA of all the rev organizations referenced will be
     * unset.
     */
    id?: string;
    /**
     * The Rev organizations to apply the SLA to.
     * @example ["REV-AbCdEfGh"]
     */
    rev_orgs: string[];
}
/** slas-assign-response */
export interface SlasAssignResponse {
    /** The list of outcomes for each Rev organization. */
    results: SlaAssignResult[];
}
/** slas-create-request */
export interface SlasCreateRequest {
    account_selector?: AccountsFilters;
    /** The object types this SLA can apply to. */
    applies_to?: SlaAppliesTo[];
    /** Description of the purpose and capabilities of the SLA. */
    description?: string;
    /**
     * Specifies the frequency of when the contractually-meaningful evaluation
     * of the SLA happens. The organization for their own information might
     * evaluate the various metrics contained in the policy as often as we can
     * make it feasible for them, but only the evaluation at the end of the
     * evaluation period triggers a compensation and needs to be shared with
     * the customer.
     */
    evaluation_period?: SlaEvaluationPeriod;
    /** Human-readable name. */
    name: string;
    /**
     * The policies encompassed by this SLA, ordered in decreasing
     * priority.
     */
    policies?: SetSlaPolicy[];
    /** Type of the SLA. */
    sla_type?: SlaType;
}
/** slas-create-response */
export interface SlasCreateResponse {
    sla: Sla;
}
export declare enum SlasFilterAppliesToOperatorType {
    All = "all",
    Any = "any"
}
/** slas-get-request */
export interface SlasGetRequest {
    /** The ID of the SLA to get. */
    id: string;
}
/** slas-get-response */
export interface SlasGetResponse {
    sla: Sla;
}
/** slas-list-request */
export interface SlasListRequest {
    /** The object types the SLA applies to. */
    applies_to?: SlaAppliesTo[];
    applies_to_op?: SlasFilterAppliesToOperatorType;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of SLAs to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** The SLA types the filter matches. */
    sla_type?: SlaType[];
    /** Fields to sort the SLAs by and the direction to sort them. */
    sort_by?: string[];
    /** The SLA statuses the filter matches. */
    status?: SlaStatus[];
}
/** slas-list-response */
export interface SlasListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The list of SLAs. */
    slas: Sla[];
}
/** slas-transition-request */
export interface SlasTransitionRequest {
    /** The updated SLA. */
    id: string;
    /**
     * Status determines how an item can be used. In 'draft' status an item
     * can be edited but can't be used. When 'published' the item can longer
     * be edited but can be used. 'Archived' is read-only.
     */
    status: SlaStatus;
}
/** slas-transition-response */
export interface SlasTransitionResponse {
    sla: Sla;
}
/** slas-update-request */
export interface SlasUpdateRequest {
    account_selector?: AccountsFilters;
    /** Description of the purpose and capabilities of the SLA. */
    description?: string;
    /**
     * Specifies the frequency of when the contractually-meaningful evaluation
     * of the SLA happens. The organization for their own information might
     * evaluate the various metrics contained in the policy as often as we can
     * make it feasible for them, but only the evaluation at the end of the
     * evaluation period triggers a compensation and needs to be shared with
     * the customer.
     */
    evaluation_period?: SlaEvaluationPeriod;
    /** The SLA's ID. */
    id: string;
    /** Human-readable name. */
    name?: string;
    /**
     * The policies encompassed by this SLA, ordered in decreasing
     * priority, the whole array will be overwritten by the contents of
     * this array.
     */
    policies?: SetSlaPolicy[];
}
/** slas-update-response */
export interface SlasUpdateResponse {
    sla: Sla;
}
/**
 * slot-map
 * Pair of slot names and values.
 */
export interface SlotMap {
    /** Name of the slot. */
    name: string;
    /** Value of the slot. */
    value: string;
}
/**
 * slot-map-list
 * List of slot name and value pairs.
 */
export interface SlotMapList {
    slot_map: SlotMap[];
}
/**
 * slot-value
 * Value of a slot for the running execution of a bot in an interaction.
 */
export interface SlotValue {
    slot?: AtomSummary;
    /** Value of the slot. */
    value?: string;
}
/**
 * Object type for which the slug is registered. It can be 'marketplace'
 * or 'marketplace_item'.
 */
export declare enum SlugRegistrationObjectType {
    Marketplace = "marketplace",
    MarketplaceItem = "marketplace_item"
}
/** State of the slug registration. */
export declare enum SlugRegistrationState {
    Confirmed = "confirmed",
    Pending = "pending"
}
/** snap */
export type Snap = (Flow | SnapIn) & {
    type: SnapType;
};
/** snap-component */
export type SnapComponent = AtomBase & {
    /** Description of the snap component. */
    description?: string;
    /** Display name. */
    display_name?: string;
    initializer?: SnapInFunctionSummary;
    /** Name of the snap component. */
    name?: string;
    /** Snap-in ID to which this snap component belongs. */
    snap_in_id?: string;
    /** Name of the snap kit action in the snap-in. */
    snap_kit_action_name?: string;
    /** Snap kit body json. */
    snap_kit_body?: object;
    /** State of the snap component. */
    state?: SnapComponentState;
    /** UI Surface associated with this snap component. */
    surface?: SnapComponentSurface;
};
/** State of the snap component. */
export declare enum SnapComponentState {
    Active = "active",
    Inactive = "inactive"
}
/** snap-component-summary */
export type SnapComponentSummary = AtomBaseSummary & {
    /** Description of the snap component. */
    description?: string;
    /** Display name. */
    display_name?: string;
    /** Name of the snap component. */
    name?: string;
    /** Name of the snap kit action in the snap-in. */
    snap_kit_action_name?: string;
    /** Snap kit body json. */
    snap_kit_body?: object;
    /** State of the snap component. */
    state?: SnapComponentState;
};
/** UI Surface associated with this snap component. */
export declare enum SnapComponentSurface {
    CommentsRte = "comments_rte",
    Issue = "issue",
    Plug = "plug",
    SnapInConfiguration = "snap_in__configuration",
    Support = "support"
}
/** snap-in */
export type SnapIn = AtomBase & {
    /** List of automations used in the snap-in. */
    automations?: SnapInNameReferenceMapping[];
    /** List of commands used in the snap-in. */
    commands?: SnapInNameReferenceMapping[];
    /** Reference to the snap-in configuration handler. */
    configuration_handler?: ConfigurationHandlerReference;
    /** Definitions for connections used by snap-in. */
    connection_definitions?: SnapInConnection[];
    /** List of connections used in the snap-in. */
    connections?: SnapInNameReferenceMapping[];
    /** Custom fields. */
    custom_fields?: object;
    /** Description of the snap-in. */
    description?: string;
    /** List of event sources used in the snap-in. */
    event_sources?: SnapInNameReferenceMapping[];
    /** Hooks used in the snap-in. */
    hooks?: SnapInHookReference[];
    /** List of imports used in the snap-in. */
    imports?: SnapInNameReferenceMapping[];
    /** Values for global inputs part of the snap-in. */
    inputs?: SnapInGlobalInput[];
    /** Schema of the inputs part of this snap-in. */
    inputs_schema?: SchemaFieldDescriptor[];
    /** Snap-kit for the inputs part of snap-in. */
    inputs_snap_kit?: object;
    /** Values of the inputs. */
    inputs_values?: object;
    /**
     * List denoting mapping of keyring type name in snap-in version to
     * actual keyring_types created by the snap-in.
     */
    keyring_types?: SnapInNameReferenceMapping[];
    marketplace?: MarketplaceSummary;
    marketplace_item?: MarketplaceItemSummary;
    /** Details of the marketplace item. */
    marketplace_item_details?: MarketplaceItemDetails;
    /** Slug of the marketplace item from which this snap-in was installed. */
    marketplace_item_slug?: string;
    /** Name of the snap-in. */
    name?: string;
    /** List of operations associated with the snap-in. */
    operations?: SnapInNameReferenceMapping[];
    /** Per object schema. */
    per_object_schema?: SchemaFieldDescriptor[];
    service_account?: UserSummary;
    /** List of snap components used in the snap-in. */
    snap_components?: SnapInNameReferenceMapping[];
    snap_in_config?: SnapInConfig;
    snap_in_version?: SnapInVersionSummary;
    /** Semversion of the package. */
    snap_in_version_semver?: SnapInSemanticVersion;
    /** List of snapkit actions used in the snap-in. */
    snap_kit_actions?: SnapInNameReferenceMapping[];
    /** Deployment status of the snap-in. */
    status?: SnapInStatus;
    /** List of tags used in the snap-in. */
    tags?: SnapInNameReferenceMapping[];
    /**
     * Default snap-kit for the user inputs part of snap-in. This is only
     * populated in snap-ins.get API.
     */
    user_inputs_snap_kit?: object;
    /**
     * Definitions for user-level keyrings of the snap-in. This is only
     * populated in snap-ins.get API.
     */
    user_keyring_definitions?: SnapInConnection[];
};
/**
 * snap-in-automation
 * Stores automations.
 */
export interface SnapInAutomation {
    /** Event source name to listen to. */
    event_source?: string;
    /** List of events subscribed from the event_source. */
    event_types?: string[];
    /** Function name ID to trigger for this event. */
    function?: string;
    /** Name of the automation. */
    name?: string;
}
/**
 * snap-in-command
 * Snap-in command definition.
 */
export interface SnapInCommand {
    /** Description of the Command. */
    description?: string;
    /** Function name ID to trigger for this Command. */
    function?: string;
    /** Name of the Command. */
    name?: string;
    /** Namespace of the Command. */
    namespace?: string;
    /** surfaces where the command should be shown. */
    surfaces?: SnapInCommandSurface[];
    /** usage hint for the command. */
    usage_hint?: string;
}
/**
 * snap-in-command-surface
 * Command Surface.
 */
export interface SnapInCommandSurface {
    /** Object types for command. */
    object_types?: string[];
    /** Surface of the Command. */
    surface?: string;
}
/** snap-in-config */
export interface SnapInConfig {
    /** List of connections in the snap_in. */
    connections?: SnapInConnectionConfig[];
    /** List of inputs in the snap_in. */
    global_inputs?: SnapInGlobalInputConfig[];
}
/**
 * snap-in-configuration-handler
 * Snap-in configuration.
 */
export interface SnapInConfigurationHandler {
    /** Interaction handler definition. */
    organization?: InteractionHandlerDefinition;
    /** Interaction handler definition. */
    user?: InteractionHandlerDefinition;
}
/**
 * snap-in-connection
 * Stores required connections.
 */
export interface SnapInConnection {
    /** Description of what the connection is used for. */
    description?: string;
    /** Display name. */
    display_name?: string;
    /** Keyring types. */
    keyring_types: string[];
    /** Name of connection. */
    name?: string;
    /** Is connection optional. */
    optional?: boolean;
}
/** snap-in-connection-config */
export interface SnapInConnectionConfig {
    /** Description of the connection in the snap_in. */
    description?: string;
    /** Display name of the connection in the snap_in. */
    display_name?: string;
    /** Name of the connection in the snap_in. */
    name: string;
    /** Is the connection optional for snap-in to be activated. */
    optional?: boolean;
    /** List of keyring types this connection can be. */
    types: string[];
}
/**
 * snap-in-developer-connection
 * Stores required connections provided by the developer.
 */
export interface SnapInDeveloperConnection {
    /** Description of what the connection is used for. */
    description?: string;
    /** Display name. */
    display_name?: string;
    keyring_id?: KeyringSummary;
    /** Name of connection. */
    name?: string;
}
/**
 * snap-in-event-source
 * Stores event sources.
 */
export interface SnapInEventSource {
    /** Reference used to setup the event source. */
    connection?: string;
    /** Event source description. */
    description?: string;
    /** Shown to the installer. */
    display_name?: string;
    /** Function defining the custom handler for this event source. */
    function?: string;
    /** Event source name that serves as an id. */
    name?: string;
    /** Event setup instructions. */
    setup_instructions?: string;
    /** The source of the event. */
    source?: string;
    /** Source config. */
    source_config?: object;
    /** Stores the definition for an event source configuration template. */
    source_config_template?: EventSourceConfigTemplate;
}
/** snap-in-function */
export type SnapInFunction = AtomBase & {
    /** Info of backend used to deploy function. */
    backend_info?: FunctionBackendInfo;
    /** Build related info about function. */
    build_info?: FunctionBuildInfo;
    /** Input config for function runtime. */
    config?: FunctionConfig;
    /** Deployment status of function. */
    deployment_status?: SnapInFunctionDeploymentStatus;
    /** Description of the function. */
    description?: string;
    /** Name of the function. */
    name?: string;
    parent_id?: SnapInVersionSummary;
    /** Info about source of function code. */
    source_info?: FunctionSourceInfo;
};
/**
 * snap-in-function-definition
 * Snap in function definition.
 */
export interface SnapInFunctionDefinition {
    /** Description of the function. */
    description?: string;
    function_id?: SnapInFunctionSummary;
    /** Name of the function. */
    name?: string;
    /** The source type containing the code. */
    source_type?: SnapInFunctionDefinitionSourceType;
}
/** The source type containing the code. */
export declare enum SnapInFunctionDefinitionSourceType {
    Artifact = "artifact",
    Http = "http",
    PrebuiltLambda = "prebuilt_lambda"
}
/** Deployment status of function. */
export declare enum SnapInFunctionDeploymentStatus {
    BuildFailed = "build_failed",
    BuildSucceeded = "build_succeeded",
    Building = "building",
    Deployed = "deployed",
    Deploying = "deploying",
    DeploymentFailed = "deployment_failed",
    Deprecated = "deprecated",
    NotStarted = "not_started"
}
/** snap-in-function-summary */
export type SnapInFunctionSummary = AtomBaseSummary & {
    /** Description of the function. */
    description?: string;
    /** Name of the function. */
    name?: string;
};
/** snap-in-global-input */
export interface SnapInGlobalInput {
    /** Name of the input. */
    name: string;
    /** Input value. */
    value?: string;
}
/** snap-in-global-input-config */
export interface SnapInGlobalInputConfig {
    /** Allowed values for the input. */
    allowed_values?: string[];
    /** Default value for the input. */
    default_value?: string;
    /** Description of the input value. */
    description?: string;
    /** Display name for the input. */
    display_name?: string;
    /** Name of input in the snap_in. */
    name: string;
    /** Type of the input. */
    type: SnapInGlobalInputType;
}
/** Type of the input. */
export declare enum SnapInGlobalInputType {
    Bool = "bool",
    Enum = "enum",
    EnumList = "enum_list",
    Float = "float",
    FloatList = "float_list",
    Integer = "integer",
    IntegerList = "integer_list",
    String = "string",
    StringList = "string_list"
}
/**
 * snap-in-hook-definition
 * Stores mapping of hook function.
 */
export interface SnapInHookDefinition {
    /** Function name trigger for this hook. */
    function?: string;
    /** Type of snap-in hook. */
    type?: string;
}
/**
 * snap-in-hook-reference
 * Stores mapping of hook function.
 */
export interface SnapInHookReference {
    function_reference?: SnapInFunctionSummary;
    /** Type of snap-in hook. */
    type?: SnapInHookReferenceType;
}
/** Type of snap-in hook. */
export declare enum SnapInHookReferenceType {
    Activate = "activate",
    Deactivate = "deactivate",
    Delete = "delete",
    Update = "update",
    Upgrade = "upgrade",
    Validate = "validate"
}
/**
 * snap-in-import
 * Imports definition.
 */
export interface SnapInImport {
    /** Allowed keyring types. */
    allowed_keyring_types?: string[];
    /** Description of the external system. */
    description?: string;
    /** The name of the external system. */
    display_name?: string;
    /** Function name ID for data extraction. */
    extractor_function?: string;
}
/**
 * snap-in-keyring-type
 * Stores the definition for a keyring type.
 */
export interface SnapInKeyringType {
    /**
     * Configure how users authorize your application to access their data by
     * setting the authentication method, URLs, parameters, and optional token
     * expiry check.
     */
    authorize?: AuthorizeRequestConfig;
    /** Description of what the keyring type is used for. */
    description?: string;
    /**
     * External Service ID is a unique identifier used to group
     * connections belonging to the same snap-in.
     */
    external_service_id?: string;
    /** External Service Name. */
    external_service_name?: string;
    /** unique id of the connection. */
    id?: string;
    /**
     * IsSubdomain field indicates whether an external organization URL
     * contains a subdomain.
     */
    is_subdomain?: boolean;
    /**
     * Specifies the name of an existing predefined keyring type to
     * reference for its stored configuration.
     */
    keyring_type_template?: string;
    /** Kind defines the external system authentication method. */
    kind?: SnapInKeyringTypeKind;
    /**
     * Name of keyring type used to register the keyring type on
     * Cellarman.
     */
    name?: string;
    oauth_secret_id?: KeyringSummary;
    /**
     * AdaptableRequestConfig, versatile configuration for tailored API
     * interactions and authentication.
     */
    organization_data?: AdaptableRequestConfig;
    /**
     * AdaptableRequestConfig, versatile configuration for tailored API
     * interactions and authentication.
     */
    refresh?: AdaptableRequestConfig;
    /**
     * AdaptableRequestConfig, versatile configuration for tailored API
     * interactions and authentication.
     */
    revoke?: AdaptableRequestConfig;
    /** Specify the delimiter used to separate scopes in the scope string. */
    scope_delimiter?: string;
    /** defines the scopes available for the connection. */
    scopes?: ScopeDefinition[];
    /**
     * Secret configuration for Basic Auth connection / multi-field Secret
     * connection.
     */
    secret_config?: SecretConfig;
}
/** Kind defines the external system authentication method. */
export declare enum SnapInKeyringTypeKind {
    Oauth2 = "oauth2",
    Secret = "secret"
}
/**
 * snap-in-name-reference-mapping
 * Stores mapping from snap-in version defined name to the corresponding
 * ID.
 */
export interface SnapInNameReferenceMapping {
    /** Name by which the object is being referred in the snap-in version. */
    name: string;
    reference?: AtomSummary;
}
/**
 * snap-in-operation-definition
 * Snap-in operation definition.
 */
export interface SnapInOperationDefinition {
    /** Description of the operation. */
    description?: string;
    /** Name of the function. */
    function?: string;
    /** Schema of the inputs port of this operation. */
    input_ports?: OperationInputPort[];
    /** Name of the operation. */
    name?: string;
    /** Namespace of the operation. */
    namespace?: string;
    /** Schema of the outputs port of this operation. */
    output_ports?: OperationOutputPort[];
    /** Unique slug of operation (within namespace). */
    slug?: string;
    /** Operation type. */
    type?: SnapInOperationDefinitionType;
}
/** Operation type. */
export declare enum SnapInOperationDefinitionType {
    Action = "action",
    Control = "control",
    Trigger = "trigger"
}
/** snap-in-package */
export type SnapInPackage = AtomBase & {
    /** Description of the snap-in package. */
    description?: string;
    /** Name of the snap-in package. */
    name?: string;
    /** Globally unique identifier of the Snap-in. */
    slug?: string;
};
/** snap-in-package-summary */
export type SnapInPackageSummary = AtomBaseSummary & {
    /** Description of the snap-in package. */
    description?: string;
    /** Name of the snap-in package. */
    name?: string;
    /** Globally unique identifier of the Snap-in. */
    slug?: string;
};
/** snap-in-packages-create-request */
export interface SnapInPackagesCreateRequest {
    /** Description of the snap-in package. */
    description?: string;
    /** Name of the snap-in package. */
    name?: string;
    /** Globally unique identifier of the Snap-in. */
    slug: string;
}
/** snap-in-packages-create-response */
export interface SnapInPackagesCreateResponse {
    snap_in_package: SnapInPackage;
}
/** snap-in-packages-delete-request */
export interface SnapInPackagesDeleteRequest {
    /** The ID of the snap-in package to delete. */
    id: string;
}
/** snap-in-packages-get-request */
export interface SnapInPackagesGetRequest {
    /** The ID of the snap-in package to get. */
    id?: string;
    /** The slug of the snap-in package to get. */
    slug?: string;
}
/** snap-in-packages-get-response */
export interface SnapInPackagesGetResponse {
    snap_in_package: SnapInPackage;
}
/** snap-in-packages-list-request */
export interface SnapInPackagesListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of snap-in packages to return. The default is
     * '50', the maximum is '100'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /**
     * Fields to sort the snap-in packages by and the direction to sort
     * them.
     */
    sort_by?: string[];
}
/** snap-in-packages-list-response */
export interface SnapInPackagesListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** List of snap-in packages. */
    snap_in_packages: SnapInPackage[];
}
/** snap-in-packages-log-entry */
export interface SnapInPackagesLogEntry {
    /** Dev Org for the log statement. */
    dev_org?: string;
    /** Event ID of the event corresponding to the log statement. */
    event_id?: string;
    /** Event ID type the event corresponding to the log statement. */
    event_type?: string;
    /** ID of the log. */
    id: string;
    level?: SnapInPackagesLogLevelFilterLogLevelEnum;
    /** Message of the log. */
    msg: string;
    process?: SnapInPackagesLogProcessFilterLogProcessEnum;
    /** Snap-in-package from which the function was created. */
    snap_in_package?: string;
    /** Snap-in-version from which the function was created. */
    snap_in_version?: string;
    /**
     * Source name of the function. This is the name by which the function
     * is referred as in the snap-in-version.
     */
    source_name?: string;
    source_type?: SnapInPackagesLogSourceTypeFilterLogSourceTypeEnum;
    target?: SnapInPackagesLogTargetFilterLogTargetEnum;
    /**
     * Timestamp of the log.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    timestamp: string;
}
/** snap-in-packages-log-level-filter */
export interface SnapInPackagesLogLevelFilter {
    /**
     * Exclude the specified values instead of (default behaviour)
     * including them.
     */
    exclude?: boolean;
    /** List of values to include/exclude. */
    values: SnapInPackagesLogLevelFilterLogLevelEnum[];
}
export declare enum SnapInPackagesLogLevelFilterLogLevelEnum {
    Debug = "debug",
    Error = "error",
    Fatal = "fatal",
    Info = "info",
    None = "none",
    Trace = "trace",
    Warn = "warn"
}
/** snap-in-packages-log-process-filter */
export interface SnapInPackagesLogProcessFilter {
    /**
     * Exclude the specified values instead of (default behaviour)
     * including them.
     */
    exclude?: boolean;
    /** List of values to include/exclude. */
    values: SnapInPackagesLogProcessFilterLogProcessEnum[];
}
export declare enum SnapInPackagesLogProcessFilterLogProcessEnum {
    Build = "build",
    Function = "function",
    None = "none"
}
/** snap-in-packages-log-source-type-filter */
export interface SnapInPackagesLogSourceTypeFilter {
    /**
     * Exclude the specified values instead of (default behaviour)
     * including them.
     */
    exclude?: boolean;
    /** List of values to include/exclude. */
    values: SnapInPackagesLogSourceTypeFilterLogSourceTypeEnum[];
}
export declare enum SnapInPackagesLogSourceTypeFilterLogSourceTypeEnum {
    Automation = "automation",
    Command = "command",
    EventSource = "event_source",
    None = "none",
    SnapKitAction = "snap_kit_action"
}
/** snap-in-packages-log-string-filter */
export interface SnapInPackagesLogStringFilter {
    /**
     * Exclude the specified values instead of (default behaviour)
     * including them.
     */
    exclude?: boolean;
    /**
     * The values to filter on. If empty, filter is ignored. "" is a valid
     * value meaning field is not set.
     */
    values: string[];
}
/** snap-in-packages-log-target-filter */
export interface SnapInPackagesLogTargetFilter {
    /**
     * Exclude the specified values instead of (default behaviour)
     * including them.
     */
    exclude?: boolean;
    /** List of values to include/exclude. */
    values: SnapInPackagesLogTargetFilterLogTargetEnum[];
}
export declare enum SnapInPackagesLogTargetFilterLogTargetEnum {
    DevOrg = "dev_org",
    None = "none"
}
/** snap-in-packages-logs-fetch-request */
export interface SnapInPackagesLogsFetchRequest {
    /** Cursor for set of logs. */
    cursor?: string;
    filters?: SnapInPackagesLogsFetchRequestFilter;
    /**
     * Number of logs to fetch. Defaults to 50.
     * @format int64
     */
    limit?: number;
    /** Query for message text. */
    query?: string;
    timestamp?: DateTimeFilter;
}
/** snap-in-packages-logs-fetch-request-filter */
export interface SnapInPackagesLogsFetchRequestFilter {
    dev_org?: SnapInPackagesLogStringFilter;
    event_id?: SnapInPackagesLogStringFilter;
    event_type?: SnapInPackagesLogStringFilter;
    level?: SnapInPackagesLogLevelFilter;
    process?: SnapInPackagesLogProcessFilter;
    snap_in_package?: SnapInPackagesLogStringFilter;
    snap_in_version?: SnapInPackagesLogStringFilter;
    source_name?: SnapInPackagesLogStringFilter;
    source_type?: SnapInPackagesLogSourceTypeFilter;
    target?: SnapInPackagesLogTargetFilter;
}
/** snap-in-packages-logs-fetch-response */
export interface SnapInPackagesLogsFetchResponse {
    /** Indicates whether the results returned are incomplete. */
    incomplete_results: boolean;
    log_summary: SnapInPackagesLogsFetchResponseLogSummary;
    /** List of logs matching the filters in descending order of timestamp. */
    logs: SnapInPackagesLogEntry[];
    /**
     * Cursor to get the next set of logs. Since logs are sorted in
     * reverse chronological order, this cursor will fetch logs older then
     * the current set. Omitted if there are no further logs in this
     * direction.
     */
    next_cursor?: string;
    /**
     * Cursor to get the previous set of logs. Since logs are sorted in
     * reverse chronological order, this cursor will fetch logs newer than
     * the current set. Omitted if there are no further logs in this
     * direction. If the client expects more logs, it should reuse the
     * cursor it already has after some time.
     */
    prev_cursor?: string;
}
/** snap-in-packages-logs-fetch-response-log-summary */
export interface SnapInPackagesLogsFetchResponseLogSummary {
    total?: SnapInPackagesLogsFetchResponseLogSummaryTotal;
}
/** snap-in-packages-logs-fetch-response-log-summary-total */
export interface SnapInPackagesLogsFetchResponseLogSummaryTotal {
    relation: SnapInPackagesLogsFetchResponseLogSummaryTotalTotalRelationEnum;
    /**
     * Number of logs matching this request.
     * @format int64
     */
    value: number;
}
export declare enum SnapInPackagesLogsFetchResponseLogSummaryTotalTotalRelationEnum {
    Eq = "eq",
    Gte = "gte"
}
/** snap-in-packages-update-request */
export interface SnapInPackagesUpdateRequest {
    /** Description of the snap-in package. */
    description?: string;
    /** The ID of the snap-in package to update. */
    id: string;
    /** Name of the snap-in package. */
    name?: string;
}
/** snap-in-packages-update-response */
export interface SnapInPackagesUpdateResponse {
    snap_in_package: SnapInPackage;
}
/** snap-in-packages-validate-slug-request */
export interface SnapInPackagesValidateSlugRequest {
    /** The Snap-in package slug to be validated. */
    slug: string;
}
/** snap-in-packages-validate-slug-response */
export interface SnapInPackagesValidateSlugResponse {
    /** Whether the slug is valid. */
    is_valid: boolean;
}
/** snap-in-preferences */
export type SnapInPreferences = AtomBase & {
    /** List of event sources to be used by the snap-in. */
    event_sources?: SnapInNameReferenceMapping[];
    /** Schema for the inputs to the snap-in. */
    inputs_schema?: SchemaFieldDescriptor[];
    /** Snap-kit for the inputs part of snap-in. */
    inputs_snap_kit?: object;
    /** Values for the inputs to the snap-in. */
    inputs_values?: object;
    /**
     * List of keyring definitions for user-level keyrings used by the
     * snap-in.
     */
    keyring_definitions?: SnapInConnection[];
    /** List of user-scoped keyrings to be used by the snap-in. */
    keyrings?: SnapInNameReferenceMapping[];
    snap_in_id?: SnapInSummary;
    snap_in_version_id?: SnapInVersionSummary;
    /** State of the snap-in preference for the user. */
    state?: SnapInPreferencesState;
    user_id?: UserSummary;
};
/** snap-in-preferences-create-request */
export interface SnapInPreferencesCreateRequest {
    /** The ID of the snap-in to create preferences for. */
    snap_in_id: string;
    snap_in_preferences: CreateSnapInPreferences;
}
/** snap-in-preferences-create-response */
export interface SnapInPreferencesCreateResponse {
    snap_in_preferences: SnapInPreferences;
}
/** snap-in-preferences-get-request */
export interface SnapInPreferencesGetRequest {
    /** The ID of the snap-in to get preferences for. */
    snap_in_id: string;
}
/** snap-in-preferences-get-response */
export interface SnapInPreferencesGetResponse {
    snap_in_preferences: SnapInPreferences;
}
/** State of the snap-in preference for the user. */
export declare enum SnapInPreferencesState {
    Active = "active",
    Draft = "draft",
    Inactive = "inactive"
}
/** snap-in-preferences-state-update-request */
export interface SnapInPreferencesStateUpdateRequest {
    /** The ID of the snap-in to update preferences for. */
    snap_in_id: string;
    /** State of the snap-in preference for the user. */
    state: SnapInPreferencesState;
}
/** snap-in-preferences-state-update-response */
export interface SnapInPreferencesStateUpdateResponse {
    /** State of the snap-in preference for the user. */
    state: SnapInPreferencesState;
}
/** snap-in-preferences-summary */
export type SnapInPreferencesSummary = AtomBaseSummary;
/** snap-in-preferences-update-request */
export interface SnapInPreferencesUpdateRequest {
    /**
     * The action payload generated by user interaction if the inputs are
     * being updated via snap-kits.
     */
    inputs_snap_kit_action_payload?: object;
    /** The ID of the snap-in to update preferences for. */
    snap_in_id: string;
    snap_in_preferences: UpdateSnapInPreferences;
}
/** snap-in-preferences-update-response */
export interface SnapInPreferencesUpdateResponse {
    snap_in_preferences: SnapInPreferences;
}
/**
 * snap-in-semantic-version
 * Semversion of the package.
 */
export interface SnapInSemanticVersion {
    /**
     * Major version.
     * @format int32
     */
    major?: number;
    /**
     * Minor version.
     * @format int32
     */
    minor?: number;
    /**
     * Patch version.
     * @format int32
     */
    patch?: number;
    /** Pre-release version. */
    pre_release?: string;
}
/**
 * snap-in-semantic-version-summary
 * Semversion of the package.
 */
export interface SnapInSemanticVersionSummary {
    /**
     * Major version.
     * @format int32
     */
    major?: number;
    /**
     * Minor version.
     * @format int32
     */
    minor?: number;
    /**
     * Patch version.
     * @format int32
     */
    patch?: number;
    /** Pre-release version. */
    pre_release?: string;
}
/**
 * snap-in-service-account
 * Details about service account to be associated with snap-ins.
 */
export interface SnapInServiceAccount {
    /** Description of the service account. */
    description?: string;
    /** Display name of the service account. */
    display_name?: string;
}
/**
 * snap-in-snap-component
 * Stores snap components.
 */
export interface SnapInSnapComponent {
    /** Snap component description. */
    description?: string;
    /** Shown to the installer. */
    display_name?: string;
    /** Function called to initialize the snap-component. */
    initializer?: string;
    /** Snap component name that serves as an id. */
    name?: string;
    /** Name of a snap_kit_action defined in this snap-in. */
    snap_kit_action_name?: string;
    /** Snap kit body json. */
    snap_kit_body?: object;
    /** UI Surface associated with this snap component. */
    surface?: SnapInSnapComponentSurface;
}
/** UI Surface associated with this snap component. */
export declare enum SnapInSnapComponentSurface {
    CommentsRte = "comments_rte",
    Issue = "issue",
    Plug = "plug",
    SnapInConfiguration = "snap_in__configuration",
    Support = "support"
}
/**
 * snap-in-snap-kit-action
 * SnapKit action definition.
 */
export interface SnapInSnapKitAction {
    /** Description of the SnapKit Action. */
    description?: string;
    /** Function name ID to trigger for this SnapKit Action. */
    function?: string;
    /** Name of the SnapKitAction. */
    name?: string;
}
/** Deployment status of the snap-in. */
export declare enum SnapInStatus {
    Activating = "activating",
    Active = "active",
    Deactivating = "deactivating",
    Draft = "draft",
    Error = "error",
    Inactive = "inactive",
    Installing = "installing"
}
/** snap-in-summary */
export type SnapInSummary = AtomBaseSummary & {
    /** Name of the snap-in. */
    name?: string;
    service_account?: UserSummary;
    snap_in_version?: SnapInVersionSummary;
    /** Deployment status of the snap-in. */
    status?: SnapInStatus;
};
/**
 * snap-in-tag-definition
 * Tag summary.
 */
export interface SnapInTagDefinition {
    /** Description of the tag. */
    description?: string;
    /** Name of the tag. */
    name?: string;
}
/** snap-in-version */
export type SnapInVersion = AtomBase & {
    /** Automation mappings. */
    automations?: SnapInAutomation[];
    /** Summary of the changes. */
    changelog?: string;
    /** Serialized commands to be installed with Snap-In. */
    commands?: SnapInCommand[];
    /** Snap-in configuration. */
    configuration_handler?: SnapInConfigurationHandler;
    /** Connections used by the snap-in code. */
    connections?: SnapInConnection[];
    /** Description. */
    description?: string;
    /**
     * Connections provided by the developer that are common to all
     * installed snap-ins.
     */
    developer_connections?: SnapInDeveloperConnection[];
    /** Event. */
    events?: SnapInEventSource[];
    /**
     * If state above is `build_failed`/`deployment_failed`, then this
     * contains the reason for failure.
     */
    failure_reason?: string;
    /** Functions containing the user-provided code. */
    functions?: SnapInFunctionDefinition[];
    /** Build config for a snap-in function. */
    functions_build_config?: FunctionBuildConfig;
    /** Set of global variables. */
    global_variables?: string[];
    /** Hooks used in the snap-in. */
    hooks?: SnapInHookDefinition[];
    /** Serialized imports to be installed with Snap-In. */
    imports?: SnapInImport[];
    /** Keyring types used by the Snap-In. */
    keyring_types?: SnapInKeyringType[];
    /** RAW content of the latest manifest file (YAML). */
    manifest?: string;
    /** Semversion of the package. */
    manifest_version?: SnapInSemanticVersion;
    /** Name. */
    name?: string;
    /** Operations defined in the snap-in version. */
    operations?: SnapInOperationDefinition[];
    /** Details about service account to be associated with snap-ins. */
    service_account?: SnapInServiceAccount;
    /** Globally unique identifier of the Snap-in package. */
    slug?: string;
    /**
     * List of snap components, where each snap component contains a
     * snap-kit.
     */
    snap_components?: SnapInSnapComponent[];
    snap_in_package?: SnapInPackageSummary;
    /**
     * List of serialized SnapKitAction to be installed with Snap-In. An
     * snapkit action is a synchronous code path called when an
     * interactive element on the snap-kit is interacted with. Interactive
     * elements include buttons, checkboxes, date-pickers etc. A snapkit
     * action is defined as change in value of these elements.
     */
    snapkit_actions?: SnapInSnapKitAction[];
    source_code_artifact?: ArtifactSummary;
    /** Snap-in package state. */
    state?: SnapInVersionState;
    /** Tags created during snap-in installation. */
    tags?: SnapInTagDefinition[];
    /** User level Event Sources. */
    user_event_sources?: SnapInEventSource[];
    /** Set of user level Inputs. */
    user_inputs?: string[];
    /** User level keyrings used by the snap-in code. */
    user_keyrings?: SnapInConnection[];
    /** Semversion of the package. */
    version?: SnapInSemanticVersion;
};
/** Snap-in package state. */
export declare enum SnapInVersionState {
    BuildFailed = "build_failed",
    Deploying = "deploying",
    DeploymentFailed = "deployment_failed",
    Draft = "draft",
    Published = "published",
    Ready = "ready"
}
/** snap-in-version-summary */
export type SnapInVersionSummary = AtomBaseSummary & {
    /** Semversion of the package. */
    version?: SnapInSemanticVersionSummary;
};
/** snap-in-versions-create-request */
export interface SnapInVersionsCreateRequest {
    /**
     * Connections provided by the developer that are common to all
     * installed snap-ins.
     */
    developer_connections?: CreateSnapInDeveloperConnection[];
    functions_build_config?: CreateFunctionBuildConfig;
    /** RAW content of the latest manifest file (YAML). */
    manifest: string;
    /** Operations defined in the snap-in version. */
    operations?: CreateSnapInOperationDefinition[];
    /** Globally unique identifier of the Snap-in package. */
    slug?: string;
    /** Parent snap-in package. */
    snap_in_package: string;
    /**
     * The artifact containing user provided source code for snap-in
     * functions.
     * @example "ARTIFACT-12345"
     */
    source_code_artifact?: string;
    /** URL to run the snap-in in test mode. */
    testing_url?: string;
}
/** snap-in-versions-create-response */
export interface SnapInVersionsCreateResponse {
    snap_in_version: SnapInVersion;
}
/** snap-in-versions-delete-request */
export interface SnapInVersionsDeleteRequest {
    /** The ID of the snap-in version to delete. */
    id: string;
}
/** snap-in-versions-get-request */
export interface SnapInVersionsGetRequest {
    /** The ID of the snap-in version to get. */
    id: string;
}
/** snap-in-versions-get-response */
export interface SnapInVersionsGetResponse {
    snap_in_version: SnapInVersion;
}
/** snap-in-versions-list-request */
export interface SnapInVersionsListRequest {
    /**
     * Filters for snap-in-versions created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_date?: DateTimeFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of snap-in versions to return. The default is
     * '50', the maximum is '100'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    modified_date?: DateTimeFilter;
    /** Filters for snap-in-versions part of any of these packages. */
    snap_in_package?: string[];
    /**
     * Fields to sort the snap-in versions by and the direction to sort
     * them.
     */
    sort_by?: string[];
    /** Filters for snap-in-versions in any of these states. */
    state?: SnapInVersionState[];
}
/** snap-in-versions-list-response */
export interface SnapInVersionsListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** List of snap-in versions. */
    snap_in_versions: SnapInVersion[];
}
/** snap-in-versions-upgradability-check-request */
export interface SnapInVersionsUpgradabilityCheckRequest {
    /** Snap-in version's new manifest to be checked for upgrade. */
    manifest: string;
    /** ID of the source Snap-in version. */
    source_snap_in_version: string;
}
/** snap-in-versions-upgradability-check-response */
export interface SnapInVersionsUpgradabilityCheckResponse {
    /**
     * List of errors encountered while checking Snap-in version's
     * upgradability.
     */
    validation_errors: SnapInVersionsUpgradabilityCheckResponseValidationError[];
}
/** snap-in-versions-upgradability-check-response-validation-error */
export interface SnapInVersionsUpgradabilityCheckResponseValidationError {
    /**
     * Error encountered when validating the upgradability of the
     * manifest.
     */
    error: string;
}
/** snap-in-versions-upgrade-request */
export interface SnapInVersionsUpgradeRequest {
    /** Whether to force upgrade if the upgrade is not compatible. */
    force_upgrade?: boolean;
    /** Snap-in version to upgrade. */
    id: string;
    /** New manifest, if updated. */
    manifest?: string;
    /** New source code artifact, if updated. */
    source_code_artifact?: string;
    /** Updated url to run the snap-in in test mode. */
    testing_url?: string;
}
/** snap-in-versions-upgrade-response */
export interface SnapInVersionsUpgradeResponse {
    /** ID of the new snap-in version. */
    snap_in_version: string;
    /** Whether the upgrade was forced. */
    was_upgrade_forced: boolean;
}
/** snap-in-versions-validate-manifest-request */
export interface SnapInVersionsValidateManifestRequest {
    /** Validates the Snap-in version's manifest. */
    manifest: string;
}
/** snap-in-versions-validate-manifest-response */
export interface SnapInVersionsValidateManifestResponse {
    /** List of errors encountered during validation of the manifest. */
    validation_errors: SnapInVersionsValidateManifestResponseValidationError[];
}
/** snap-in-versions-validate-manifest-response-validation-error */
export interface SnapInVersionsValidateManifestResponseValidationError {
    /** Error encountered when validating the manifest. */
    error: string;
}
/** snap-ins-activate-request */
export interface SnapInsActivateRequest {
    /** The ID of the snap-in to activate. */
    id: string;
}
/** snap-ins-activate-response */
export type SnapInsActivateResponse = object;
/** snap-ins-deactivate-request */
export interface SnapInsDeactivateRequest {
    /** Parameter to force deactivate snap-in ignoring errors. */
    force?: boolean;
    /** The ID of the snap-in to deactivate. */
    id: string;
}
/** snap-ins-deactivate-response */
export type SnapInsDeactivateResponse = object;
/** snap-ins-delete-request */
export interface SnapInsDeleteRequest {
    /** Parameter to force delete snap-in ignoring errors. */
    force?: boolean;
    /** The ID of the snap-in to delete. */
    id: string;
}
/** snap-ins-draft-create-request */
export interface SnapInsDraftCreateRequest {
    /** The snap-in version from which the snap-in should be created. */
    snap_in_version: string;
}
/** snap-ins-draft-create-response */
export interface SnapInsDraftCreateResponse {
    snap_in: SnapIn;
}
/** snap-ins-get-request */
export interface SnapInsGetRequest {
    /** The ID of the snap-in to get. */
    id: string;
}
/** snap-ins-get-response */
export interface SnapInsGetResponse {
    snap_in: SnapIn;
}
/** snap-ins-list-request */
export interface SnapInsListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of snap-ins to return. The default is '50', the
     * maximum is '100'.
     * @format int32
     */
    limit?: number;
    /** Filter for marketplace-item associated with snap-in. */
    marketplace_item?: SnapInsListRequestFilterMarketplaceItemFilter[];
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Filter for service account associated with snap-in. */
    service_account_id?: string[];
    /** Fields to sort the snap-ins by and the direction to sort them. */
    sort_by?: string[];
}
/** snap-ins-list-request-filter-marketplace-item-filter */
export interface SnapInsListRequestFilterMarketplaceItemFilter {
    /** The marketplace to filter by. */
    marketplace?: string;
    /** The marketplace item slug to filter by. */
    marketplace_item_slug?: string;
}
/** snap-ins-list-response */
export interface SnapInsListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** List of snap-ins. */
    snap_ins: SnapIn[];
}
/** snap-ins-resources-request */
export interface SnapInsResourcesRequest {
    /** The ID of the snap-in to get resources for. */
    id: string;
    /** The ID of the user to get resources for. */
    user: string;
}
/** snap-ins-resources-response */
export interface SnapInsResourcesResponse {
    /** The event sources for the snap-in. */
    event_sources?: Record<string, string>;
    /** The inputs for the snap-in. */
    inputs?: object;
    /** Map of keyring names and its data. */
    keyrings?: Record<string, SnapInsResourcesResponseKeyringData>;
    snap_in_version: SnapInVersionSummary;
}
/** snap-ins-resources-response-keyring-data */
export interface SnapInsResourcesResponseKeyringData {
    /** The ID of the keyring. */
    id: string;
    /** The secret value of the keyring. This must be handled with caution. */
    secret: string;
}
/** snap-ins-system-update-request */
export type SnapInsSystemUpdateRequest = (SnapInsSystemUpdateRequestActive | SnapInsSystemUpdateRequestError | SnapInsSystemUpdateRequestInactive) & {
    /** The ID of the snap-in to update. */
    id: string;
    /** Values of the inputs. */
    inputs_values?: object;
    status: SnapInsSystemUpdateRequestStatus;
};
/** snap-ins-system-update-request-active */
export type SnapInsSystemUpdateRequestActive = object;
/** snap-ins-system-update-request-error */
export type SnapInsSystemUpdateRequestError = object;
/** snap-ins-system-update-request-inactive */
export interface SnapInsSystemUpdateRequestInactive {
    /** Parameter to proceed with deletion of snap-in. */
    is_deletion?: boolean;
}
export declare enum SnapInsSystemUpdateRequestStatus {
    Active = "active",
    Error = "error",
    Inactive = "inactive"
}
/** snap-ins-system-update-response */
export interface SnapInsSystemUpdateResponse {
    snap_in: SnapIn;
}
/** snap-ins-update-request */
export interface SnapInsUpdateRequest {
    /** List of connections used in the snap-in */
    connections?: UpdateSnapInNameReferenceMapping[];
    /** Application-defined custom fields. */
    custom_fields?: object;
    /** The ID of the snap-in to update. */
    id: string;
    /** List of inputs to update */
    inputs?: UpdateSnapInGlobalInput[];
    /**
     * The action payload generated by user interaction if the inputs are
     * being updated via snap-kits.
     */
    inputs_snap_kit_action_payload?: object;
    /** Values of the inputs. */
    inputs_values?: object;
    /** List of operations associated with the snap-in */
    operations?: UpdateSnapInNameReferenceMapping[];
}
/** snap-ins-update-response */
export interface SnapInsUpdateResponse {
    snap_in: SnapIn;
}
/** snap-kit-action */
export type SnapKitAction = AtomBase & {
    /** Defines the logic to run when this snapkit action is triggered. */
    action?: SnapKitActionImpl;
    /** Description of the snapkit action. */
    description?: string;
    /** Name of the snapkit action. */
    name?: string;
    parent_id?: AtomSummary;
};
/** snap-kit-action-create-deferred-request */
export interface SnapKitActionCreateDeferredRequest {
    /**
     * Base object ID to which this snap-kit belongs to.
     * @example "ACC-12345"
     */
    base_object: string;
    /** Channel associated with this snap-kit execution. */
    channel: SnapKitExecutionChannel;
    /** User to which this snap-kit is dispatched to. */
    dispatched_to?: string;
    /** The ID of the snap-in associated with the snap-kit. */
    snap_in: string;
    /**
     * The name of the action in snap-in for handling interactivity in
     * snap-kit.
     */
    snap_in_action_name: string;
    /** The JSON body of the snap-kit. */
    snap_kit_body: object;
}
/** snap-kit-action-create-deferred-response */
export interface SnapKitActionCreateDeferredResponse {
    execution: SnapKitExecution;
}
/** snap-kit-action-execute-deferred-request */
export interface SnapKitActionExecuteDeferredRequest {
    /** List of actions triggered in the request. */
    actions: SnapKitActionRequest[];
    /** ID of the deferred snap-kit action to be executed. */
    id: string;
}
/** snap-kit-action-execute-deferred-response */
export type SnapKitActionExecuteDeferredResponse = object;
/**
 * snap-kit-action-impl
 * Defines the logic to run when this snapkit action is triggered.
 */
export interface SnapKitActionImpl {
    /**
     * The raw code to execute, defined in the language specified by
     * executor.
     */
    code?: string;
    /** Executor specific config. */
    executor_config?: object;
    /** Specifies how the action is defined. */
    executor_type?: SnapKitActionImplExecutorType;
    snap_in_function_id?: SnapInFunctionSummary;
}
/** Specifies how the action is defined. */
export declare enum SnapKitActionImplExecutorType {
    Rego = "rego"
}
/** snap-kit-action-request */
export type SnapKitActionRequest = (SnapKitActionRequestButton | SnapKitActionRequestForm) & {
    /**
     * Id of the interactive element specified by developer in a snap-kit
     * object.
     */
    action_id: string;
    /** Action interaction type. */
    action_type?: string;
    /**
     * Id of the block within the surface which is the container for the
     * interactive element.
     */
    block_id?: string;
    /**
     * Timestamp when the action was originated.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    timestamp: string;
    type: SnapKitActionRequestElementTypeValue;
};
/** snap-kit-action-request-button */
export interface SnapKitActionRequestButton {
    /** Value for the button interactive element. */
    value: string;
}
export declare enum SnapKitActionRequestElementTypeValue {
    Button = "button",
    Form = "form"
}
/** snap-kit-action-request-form */
export interface SnapKitActionRequestForm {
    /** Value for the form interactive element. */
    value: object;
}
/** snap-kit-action-summary */
export type SnapKitActionSummary = AtomBaseSummary;
/** snap-kit-banner-nudge-widget */
export type SnapKitBannerNudgeWidget = BannerNudgeWidgetBase & SnapKitBaseWidget;
/** snap-kit-banner-nudge-widget-summary */
export type SnapKitBannerNudgeWidgetSummary = BannerNudgeWidgetBaseSummary & SnapKitBaseWidgetSummary;
/**
 * snap-kit-base-widget
 * A SnapKit based widget.
 */
export interface SnapKitBaseWidget {
    /**
     * The name of the action in SnapIn for handling interactivity in
     * SnapKit.
     */
    action_name?: string;
    /** The SnapKit JSON for the widget. */
    body: object;
    /** The ID of the SnapIn ID associated with the SnapKit. */
    snap_in?: string;
}
/**
 * snap-kit-base-widget-summary
 * A SnapKit based widget.
 */
export interface SnapKitBaseWidgetSummary {
    /**
     * The name of the action in SnapIn for handling interactivity in
     * SnapKit.
     */
    action_name?: string;
    /** The SnapKit JSON for the widget. */
    body: object;
    /** The ID of the SnapIn ID associated with the SnapKit. */
    snap_in?: string;
}
/** snap-kit-embeddable-widget */
export type SnapKitEmbeddableWidget = EmbeddableWidgetBase & SnapKitBaseWidget;
/** snap-kit-embeddable-widget-summary */
export type SnapKitEmbeddableWidgetSummary = EmbeddableWidgetBaseSummary & SnapKitBaseWidgetSummary;
/** snap-kit-execution */
export type SnapKitExecution = AtomBase & {
    base_object?: AtomSummary;
    /** Channel associated with this snap-kit execution. */
    channel?: SnapKitExecutionChannel;
    dispatched_to?: UserSummary;
    snap_in?: SnapInSummary;
    /**
     * The name of the action in snap-in for handling interactivity in
     * snap-kit.
     */
    snap_in_action_name?: string;
    /** JSON of snap-kit body. */
    snap_kit_body?: object;
};
/** Channel associated with this snap-kit execution. */
export declare enum SnapKitExecutionChannel {
    App = "app",
    Email = "email"
}
/** snap-kit-execution-summary */
export type SnapKitExecutionSummary = AtomBaseSummary & {
    /**
     * The name of the action in snap-in for handling interactivity in
     * snap-kit.
     */
    snap_in_action_name?: string;
};
/** snap-kit-link-preview-widget */
export type SnapKitLinkPreviewWidget = LinkPreviewWidgetBase & SnapKitBaseWidget;
/** snap-kit-link-preview-widget-summary */
export type SnapKitLinkPreviewWidgetSummary = LinkPreviewWidgetBaseSummary & SnapKitBaseWidgetSummary;
/** snap-kit-post-nudge-widget */
export type SnapKitPostNudgeWidget = PostNudgeWidgetBase & SnapKitBaseWidget;
/** snap-kit-post-nudge-widget-summary */
export type SnapKitPostNudgeWidgetSummary = PostNudgeWidgetBaseSummary & SnapKitBaseWidgetSummary;
/** snap-kit-spotlight-nudge-widget */
export type SnapKitSpotlightNudgeWidget = SnapKitBaseWidget & SpotlightNudgeWidgetBase;
/** snap-kit-spotlight-nudge-widget-summary */
export type SnapKitSpotlightNudgeWidgetSummary = SnapKitBaseWidgetSummary & SpotlightNudgeWidgetBaseSummary;
export declare enum SnapType {
    Flow = "flow",
    SnapIn = "snap_in"
}
/** snap-widget */
export type SnapWidget = (BannerNudgeWidget | CommentSuggestedRepliesWidget | EmailPreviewWidget | EmbeddableWidget | LinkPreviewWidget | PostNudgeWidget | SpotlightNudgeWidget) & {
    type: SnapWidgetType;
};
/** snap-widget-base */
export type SnapWidgetBase = AtomBase & {
    /** A display expression object meant to be used by the UI rule engine. */
    display_expression?: SnapWidgetDisplayExpression;
    /** A list of interactions supported by the widget. */
    interactions?: SnapWidgetInteraction[];
    /** A human readable name for the snap widget. */
    name: string;
    /** Logical grouping of snap widgets. Useful for filtering. */
    namespace?: SnapWidgetNamespace;
    /** The status of the snap widget. */
    status: SnapWidgetStatus;
};
/** snap-widget-base-summary */
export type SnapWidgetBaseSummary = AtomBaseSummary;
/**
 * snap-widget-click-interaction
 * An interaction supported by a widget.
 */
export type SnapWidgetClickInteraction = (SnapWidgetOpenPlugWidgetAction | SnapWidgetOpenUrlAction | SnapWidgetStartConversationAction) & {
    click_action: SnapWidgetClickInteractionClickAction;
};
/** snap-widget-click-interaction-base */
export type SnapWidgetClickInteractionBase = SnapWidgetDisplayInteractionBase;
export declare enum SnapWidgetClickInteractionClickAction {
    OpenPlugWidget = "open_plug_widget",
    OpenUrl = "open_url",
    StartConversation = "start_conversation"
}
/**
 * snap-widget-device-type-display-condition
 * A device type display condition.
 */
export type SnapWidgetDeviceTypeDisplayCondition = SnapWidgetDisplayConditionBase & {
    /** Comparison operator for the display condition. */
    operator: WidgetDeviceTypeDisplayConditionOperator;
    /** The value against which the device type will be compared */
    value: WidgetDeviceTypeDisplayConditionValue;
};
/**
 * snap-widget-display-condition
 * A display condition object.
 */
export type SnapWidgetDisplayCondition = (SnapWidgetDeviceTypeDisplayCondition | SnapWidgetPageUrlDisplayCondition | SnapWidgetTimeOnPageDisplayCondition | SnapWidgetViewCountDisplayCondition) & {
    condition_type: SnapWidgetDisplayConditionConditionType;
};
/** snap-widget-display-condition-base */
export type SnapWidgetDisplayConditionBase = SnapWidgetDisplayExpressionOperandBase;
export declare enum SnapWidgetDisplayConditionConditionType {
    DeviceType = "device_type",
    PageUrl = "page_url",
    TimeOnPage = "time_on_page",
    ViewCount = "view_count"
}
/**
 * snap-widget-display-expression
 * A display expression object meant to be used by the UI rule engine.
 */
export type SnapWidgetDisplayExpression = SnapWidgetDisplayExpressionOperandBase & {
    /** Operands to use for the logical operation. */
    operands: SnapWidgetDisplayExpressionOperand[];
    /** Logical operator to use. */
    operator: WidgetDisplayExpressionOperator;
};
/**
 * snap-widget-display-expression-operand
 * A display expression operand object.
 */
export type SnapWidgetDisplayExpressionOperand = (SnapWidgetDisplayCondition | SnapWidgetDisplayExpression) & {
    type: SnapWidgetDisplayExpressionOperandType;
};
/** snap-widget-display-expression-operand-base */
export interface SnapWidgetDisplayExpressionOperandBase {
    /** Dummy field to make this message non-empty. */
    dummy?: string;
}
export declare enum SnapWidgetDisplayExpressionOperandType {
    Condition = "condition",
    Expression = "expression"
}
/** snap-widget-display-interaction-base */
export interface SnapWidgetDisplayInteractionBase {
    /** Dummy field to make this message non-empty. */
    dummy?: string;
}
/**
 * snap-widget-email-input-interaction
 * An interaction supported by a widget.
 */
export type SnapWidgetEmailInputInteraction = SnapWidgetDisplayInteractionBase;
/**
 * snap-widget-email-preview-filter
 * An email preview widget.
 */
export interface SnapWidgetEmailPreviewFilter {
    /** The message_id of the email. */
    message_id: string[];
}
/**
 * snap-widget-interaction
 * An interaction supported by a widget.
 */
export type SnapWidgetInteraction = (SnapWidgetClickInteraction | SnapWidgetEmailInputInteraction) & {
    type: SnapWidgetInteractionType;
};
export declare enum SnapWidgetInteractionType {
    Click = "click",
    EmailInput = "email_input"
}
/** Logical grouping of snap widgets. Useful for filtering. */
export declare enum SnapWidgetNamespace {
    CommentSuggestionReplies = "comment_suggestion_replies",
    EmailPreview = "email_preview",
    LinkPreview = "link_preview",
    PlugNudge = "plug_nudge"
}
/**
 * snap-widget-open-plug-widget-action
 * Details of open plug widget action.
 */
export type SnapWidgetOpenPlugWidgetAction = SnapWidgetClickInteractionBase;
/**
 * snap-widget-open-url-action
 * Details of open url widget action.
 */
export type SnapWidgetOpenUrlAction = SnapWidgetClickInteractionBase & {
    /** The url to open when the widget is clicked. */
    url: string;
};
/**
 * snap-widget-page-url-display-condition
 * A page url display condition.
 */
export type SnapWidgetPageUrlDisplayCondition = SnapWidgetDisplayConditionBase & {
    /** Comparison operator for the display condition. */
    operator: WidgetPageUrlDisplayConditionOperator;
    /** Value which will be used for comparison for the display condition. */
    value: string;
};
/**
 * snap-widget-start-conversation-action
 * Details of open url widget action.
 */
export type SnapWidgetStartConversationAction = SnapWidgetClickInteractionBase;
/** The status of the snap widget. */
export declare enum SnapWidgetStatus {
    Draft = "draft",
    Published = "published"
}
/** snap-widget-summary */
export type SnapWidgetSummary = (BannerNudgeWidgetSummary | CommentSuggestedRepliesWidgetSummary | EmailPreviewWidgetSummary | EmbeddableWidgetSummary | LinkPreviewWidgetSummary | PostNudgeWidgetSummary | SpotlightNudgeWidgetSummary) & {
    type: SnapWidgetType;
};
/**
 * snap-widget-time-on-page-display-condition
 * A time on page display condition.
 */
export type SnapWidgetTimeOnPageDisplayCondition = SnapWidgetDisplayConditionBase & {
    /** Comparison operator for the display condition. */
    operator: WidgetTimeOnPageDisplayConditionOperator;
    /**
     * The value (in seconds) against which the time on page will be
     * compared.
     * @format int64
     */
    value: number;
};
export declare enum SnapWidgetType {
    BannerNudge = "banner_nudge",
    CommentSuggestedReplies = "comment_suggested_replies",
    EmailPreview = "email_preview",
    Embeddable = "embeddable",
    LinkPreview = "link_preview",
    PostNudge = "post_nudge",
    SpotlightNudge = "spotlight_nudge"
}
/**
 * snap-widget-view-count-display-condition
 * A view count display condition.
 */
export type SnapWidgetViewCountDisplayCondition = SnapWidgetDisplayConditionBase & {
    /** Comparison operator for the display condition. */
    operator: WidgetViewCountDisplayConditionOperator;
    /**
     * The value against which the view count will be compared.
     * @format int64
     */
    value: number;
};
/** snap-widgets-create-request */
export type SnapWidgetsCreateRequest = (CreateBannerNudgeWidget | CreateCommentSuggestedRepliesWidget | CreateEmailPreviewWidget | CreateEmbeddableWidget | CreateLinkPreviewWidget | CreatePostNudgeWidget | CreateSpotlightNudgeWidget) & {
    /** A display expression object meant to be used by the UI rule engine. */
    display_expression?: SnapWidgetDisplayExpression;
    /** The list of interactions supported by the widget. */
    interactions?: SnapWidgetInteraction[];
    /** A human readable name for the snap widget. */
    name: string;
    /** Logical grouping of snap widgets. Useful for filtering. */
    namespace?: SnapWidgetNamespace;
    /** The status of the snap widget. */
    status?: SnapWidgetStatus;
    type: SnapWidgetsCreateRequestType;
};
export declare enum SnapWidgetsCreateRequestType {
    BannerNudge = "banner_nudge",
    CommentSuggestedReplies = "comment_suggested_replies",
    EmailPreview = "email_preview",
    Embeddable = "embeddable",
    LinkPreview = "link_preview",
    PostNudge = "post_nudge",
    SpotlightNudge = "spotlight_nudge"
}
/** snap-widgets-create-response */
export interface SnapWidgetsCreateResponse {
    snap_widget: SnapWidget;
}
/** snap-widgets-delete-request */
export interface SnapWidgetsDeleteRequest {
    /**
     * ID of the snap widget object which is to be deleted.
     * @example "don:core:<partition>:devo/<dev-org-id>:snap_widget/<snap-widget-id>"
     */
    id: string;
}
/** snap-widgets-delete-response */
export type SnapWidgetsDeleteResponse = object;
/** snap-widgets-get-request */
export interface SnapWidgetsGetRequest {
    /**
     * The snap widget object ID.
     * @example "don:core:<partition>:devo/<dev-org-id>:snap_widget/<snap-widget-id>"
     */
    id: string;
}
/** snap-widgets-get-response */
export interface SnapWidgetsGetResponse {
    snap_widget: SnapWidget;
}
/** snap-widgets-list-request */
export interface SnapWidgetsListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** An email preview widget. */
    email_preview?: SnapWidgetEmailPreviewFilter;
    /**
     * The maximum number of snap widget objects to return. The default is
     * '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Logical grouping of snap widgets. */
    namespace?: SnapWidgetNamespace[];
    /**
     * Fields to sort the snap widget objects by and the direction to sort
     * them.
     */
    sort_by?: string[];
    /** The status of the snap widget. */
    status?: SnapWidgetStatus[];
}
/** snap-widgets-list-response */
export interface SnapWidgetsListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The list of requested snap widget objects. */
    snap_widgets: SnapWidget[];
}
/** snap-widgets-update-request */
export type SnapWidgetsUpdateRequest = (CreateBannerNudgeWidget | CreateCommentSuggestedRepliesWidget | CreateEmailPreviewWidget | CreateEmbeddableWidget | CreateLinkPreviewWidget | CreatePostNudgeWidget | CreateSpotlightNudgeWidget) & {
    /** A display expression object meant to be used by the UI rule engine. */
    display_expression?: SnapWidgetDisplayExpression;
    /**
     * The ID of the snap widget object to be updated.
     * @example "don:core:<partition>:devo/<dev-org-id>:snap_widget/<snap-widget-id>"
     */
    id: string;
    /** The list of interactions supported by the widget. */
    interactions?: SnapWidgetInteraction[];
    /** A human readable name for the snap widget. */
    name?: string;
    /** Logical grouping of snap widgets. Useful for filtering. */
    namespace?: SnapWidgetNamespace;
    /** The status of the snap widget. */
    status?: SnapWidgetStatus;
    type: SnapWidgetsUpdateRequestType;
};
export declare enum SnapWidgetsUpdateRequestType {
    BannerNudge = "banner_nudge",
    CommentSuggestedReplies = "comment_suggested_replies",
    EmailPreview = "email_preview",
    Embeddable = "embeddable",
    LinkPreview = "link_preview",
    PostNudge = "post_nudge",
    SpotlightNudge = "spotlight_nudge"
}
/** snap-widgets-update-response */
export interface SnapWidgetsUpdateResponse {
    snap_widget: SnapWidget;
}
/** snaps-list-request */
export type SnapsListRequest = object;
/** snaps-list-response */
export interface SnapsListResponse {
    /** List of snaps. */
    snaps: Snap[];
}
/**
 * social-media-link
 * Social media link.
 */
export interface SocialMediaLink {
    /** If social media links are enabled. */
    enabled?: boolean;
    /** Name of the social media platform. */
    name?: SocialMediaLinkName;
    /** URL of the social media platform. */
    url?: string;
}
/** Name of the social media platform. */
export declare enum SocialMediaLinkName {
    Discord = "discord",
    Fb = "fb",
    Github = "github",
    Instagram = "instagram",
    Linkedin = "linkedin",
    Medium = "medium",
    Notion = "notion",
    Reddit = "reddit",
    Twitch = "twitch",
    Twitter = "twitter",
    Youtube = "youtube"
}
/** socket-action */
export interface SocketAction {
    subscribe?: SocketActionSubscribe;
    timeline_mark?: SocketActionTimelineMark;
    type?: 'subscribe' | 'timeline_mark' | 'user_presence' | 'user_typing';
    user_presence?: SocketActionUserPresence;
    user_typing?: SocketActionUserTyping;
}
/** socket-action-subscribe */
export interface SocketActionSubscribe {
    /**
     * Adds event subscriptions for the objects with provided IDs. If a
     * subscription for an ID is already active, then the subscription ID
     * is updated.
     */
    add?: string[];
    /**
     * An ID, generated by the client, that will be provided in the
     * resulting subscribe events. This is a mechanism for the client to
     * match a subscribe request (action) to its response (event), where a
     * subscribe action may generate one or more events. Therefore, the
     * client should not reuse the ID for several minutes to ensure that
     * duplicates aren't mistaken.
     * @minLength 1
     */
    id?: string;
    /**
     * Removes event subscriptions for the objects with the provided IDs.
     * If there is no active subscription for an ID, then nothing is done.
     */
    remove?: string[];
}
/** socket-action-timeline-mark */
export interface SocketActionTimelineMark {
    /**
     * The ID of the object's timeline to mark, otherwise all timelines if
     * unset.
     * @example "PROD-12345"
     */
    object?: string;
    /** Display panels for the Timeline entry. */
    panel?: TimelineEntryPanel;
    /**
     * The timestamp to mark the timeline at, otherwise if unset, then the
     * current timestamp is used.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    timestamp?: string;
}
/** socket-action-user-presence */
export interface SocketActionUserPresence {
    presence?: UserPresenceValue;
}
/** socket-action-user-typing */
export interface SocketActionUserTyping {
    /**
     * The collection(s) that the typing event belongs to.
     * @maxItems 2
     */
    collections?: TimelineEntryCollection[];
    /**
     * The labels associated with data that's being typed.
     * @minLength 1
     * @maxLength 64
     * @maxItems 16
     */
    labels?: string[];
    /** The ID of the object that the user is typing to. */
    object: string;
    /**
     * The visibility of the entry. If 'private', then the entry is only
     * visible to the creator, 'internal' is visible with the Dev
     * organization, 'external' is visible to the Dev organzation and Rev
     * users, and 'public' is visible to all. If not set, then the default
     * visibility is 'external'.
     */
    visibility?: TimelineEntryVisibility;
}
/** socket-event */
export interface SocketEvent {
    account_created?: EventAccountCreated;
    account_deleted?: EventAccountDeleted;
    account_updated?: EventAccountUpdated;
    article_created?: EventArticleCreated;
    article_deleted?: EventArticleDeleted;
    article_updated?: EventArticleUpdated;
    artifact_created?: EventArtifactCreated;
    artifact_deleted?: EventArtifactDeleted;
    artifact_updated?: EventArtifactUpdated;
    atom_notify?: EventAtomNotify;
    chat_created?: EventChatCreated;
    chat_deleted?: EventChatDeleted;
    chat_updated?: EventChatUpdated;
    conversation_created?: EventConversationCreated;
    conversation_deleted?: EventConversationDeleted;
    conversation_updated?: EventConversationUpdated;
    credit_created?: EventCreditCreated;
    credit_deleted?: EventCreditDeleted;
    credit_updated?: EventCreditUpdated;
    custom_schema_fragment_created?: EventCustomSchemaFragmentCreated;
    custom_schema_fragment_deleted?: EventCustomSchemaFragmentDeleted;
    custom_schema_fragment_updated?: EventCustomSchemaFragmentUpdated;
    custom_stage_created?: EventCustomStageCreated;
    custom_stage_updated?: EventCustomStageUpdated;
    custom_state_created?: EventCustomStateCreated;
    custom_state_updated?: EventCustomStateUpdated;
    dev_user_created?: EventDevUserCreated;
    dev_user_deleted?: EventDevUserDeleted;
    dev_user_updated?: EventDevUserUpdated;
    engagement_created?: EventEngagementCreated;
    engagement_deleted?: EventEngagementDeleted;
    engagement_updated?: EventEngagementUpdated;
    external_sync_unit_discovered?: EventExternalSyncUnitDiscovered;
    flow_created?: EventFlowCreated;
    flow_deleted?: EventFlowDeleted;
    flow_updated?: EventFlowUpdated;
    incident_created?: EventIncidentCreated;
    incident_deleted?: EventIncidentDeleted;
    incident_updated?: EventIncidentUpdated;
    invoice_created?: EventInvoiceCreated;
    invoice_deleted?: EventInvoiceDeleted;
    invoice_updated?: EventInvoiceUpdated;
    job_created?: EventJobCreated;
    job_deleted?: EventJobDeleted;
    job_updated?: EventJobUpdated;
    link_created?: EventLinkCreated;
    link_deleted?: EventLinkDeleted;
    link_updated?: EventLinkUpdated;
    marketplace_item_created?: EventMarketplaceItemCreated;
    marketplace_item_deleted?: EventMarketplaceItemDeleted;
    marketplace_item_updated?: EventMarketplaceItemUpdated;
    meeting_created?: EventMeetingCreated;
    meeting_deleted?: EventMeetingDeleted;
    meeting_updated?: EventMeetingUpdated;
    notification_created?: EventNotificationCreated;
    notification_deleted?: EventNotificationDeleted;
    notification_updated?: EventNotificationUpdated;
    part_created?: EventPartCreated;
    part_deleted?: EventPartDeleted;
    part_updated?: EventPartUpdated;
    quote_created?: EventQuoteCreated;
    quote_deleted?: EventQuoteDeleted;
    quote_updated?: EventQuoteUpdated;
    rev_org_created?: EventRevOrgCreated;
    rev_org_deleted?: EventRevOrgDeleted;
    rev_org_updated?: EventRevOrgUpdated;
    rev_user_created?: EventRevUserCreated;
    rev_user_deleted?: EventRevUserDeleted;
    rev_user_updated?: EventRevUserUpdated;
    sla_tracker_created?: EventSlaTrackerCreated;
    sla_tracker_deleted?: EventSlaTrackerDeleted;
    sla_tracker_updated?: EventSlaTrackerUpdated;
    snap_in_created?: EventSnapInCreated;
    snap_in_deleted?: EventSnapInDeleted;
    snap_in_updated?: EventSnapInUpdated;
    stage_diagram_created?: EventStageDiagramCreated;
    stage_diagram_updated?: EventStageDiagramUpdated;
    stock_schema_fragment_updated?: EventStockSchemaFragmentUpdated;
    subscribe?: EventSubscribe;
    /**
     * The ID of the subscription that the event was generated for.
     * @minLength 1
     */
    subscribe_id?: string;
    sync_unit_created?: EventSyncUnitCreated;
    sync_unit_deleted?: EventSyncUnitDeleted;
    sync_unit_updated?: EventSyncUnitUpdated;
    tag_created?: EventTagCreated;
    tag_deleted?: EventTagDeleted;
    tag_updated?: EventTagUpdated;
    timeline_entry_created?: EventTimelineEntryCreated;
    timeline_entry_deleted?: EventTimelineEntryDeleted;
    timeline_entry_updated?: EventTimelineEntryUpdated;
    type?: 'account_created' | 'account_deleted' | 'account_updated' | 'article_created' | 'article_deleted' | 'article_updated' | 'artifact_created' | 'artifact_deleted' | 'artifact_updated' | 'atom_notify' | 'chat_created' | 'chat_deleted' | 'chat_updated' | 'conversation_created' | 'conversation_deleted' | 'conversation_updated' | 'credit_created' | 'credit_deleted' | 'credit_updated' | 'custom_schema_fragment_created' | 'custom_schema_fragment_deleted' | 'custom_schema_fragment_updated' | 'custom_stage_created' | 'custom_stage_updated' | 'custom_state_created' | 'custom_state_updated' | 'dev_user_created' | 'dev_user_deleted' | 'dev_user_updated' | 'engagement_created' | 'engagement_deleted' | 'engagement_updated' | 'external_sync_unit_discovered' | 'flow_created' | 'flow_deleted' | 'flow_updated' | 'incident_created' | 'incident_deleted' | 'incident_updated' | 'invoice_created' | 'invoice_deleted' | 'invoice_updated' | 'job_created' | 'job_deleted' | 'job_updated' | 'link_created' | 'link_deleted' | 'link_updated' | 'marketplace_item_created' | 'marketplace_item_deleted' | 'marketplace_item_updated' | 'meeting_created' | 'meeting_deleted' | 'meeting_updated' | 'notification_created' | 'notification_deleted' | 'notification_updated' | 'part_created' | 'part_deleted' | 'part_updated' | 'quote_created' | 'quote_deleted' | 'quote_updated' | 'rev_org_created' | 'rev_org_deleted' | 'rev_org_updated' | 'rev_user_created' | 'rev_user_deleted' | 'rev_user_updated' | 'sla_tracker_created' | 'sla_tracker_deleted' | 'sla_tracker_updated' | 'snap_in_created' | 'snap_in_deleted' | 'snap_in_updated' | 'stage_diagram_created' | 'stage_diagram_updated' | 'stock_schema_fragment_updated' | 'subscribe' | 'sync_unit_created' | 'sync_unit_deleted' | 'sync_unit_updated' | 'tag_created' | 'tag_deleted' | 'tag_updated' | 'timeline_entry_created' | 'timeline_entry_deleted' | 'timeline_entry_updated' | 'user_presence' | 'user_typing' | 'vista_created' | 'vista_deleted' | 'vista_group_item_created' | 'vista_group_item_deleted' | 'vista_group_item_updated' | 'vista_updated' | 'webhook_created' | 'webhook_deleted' | 'webhook_updated' | 'work_created' | 'work_deleted' | 'work_updated';
    user_presence?: EventUserPresence;
    user_typing?: EventUserTyping;
    vista_created?: EventVistaCreated;
    vista_deleted?: EventVistaDeleted;
    vista_group_item_created?: EventVistaGroupItemCreated;
    vista_group_item_deleted?: EventVistaGroupItemDeleted;
    vista_group_item_updated?: EventVistaGroupItemUpdated;
    vista_updated?: EventVistaUpdated;
    webhook_created?: EventWebhookCreated;
    webhook_deleted?: EventWebhookDeleted;
    webhook_updated?: EventWebhookUpdated;
    work_created?: EventWorkCreated;
    work_deleted?: EventWorkDeleted;
    work_updated?: EventWorkUpdated;
}
/**
 * sockets-connect-request
 * The request to connect to an open socket.
 */
export interface SocketsConnectRequest {
    /** The ID for the open socket to connect to. */
    id: string;
}
/**
 * sockets-open-request
 * The request to open an event socket.
 */
export type SocketsOpenRequest = object;
/**
 * sockets-open-response
 * The response to opening an event socket.
 */
export interface SocketsOpenResponse {
    /** The ID to use to connect to the opened socket. */
    id: string;
}
/**
 * sockets-publish-request
 * The request to publish actions on behalf of the client.
 */
export interface SocketsPublishRequest {
    /** The actions to be published for the client. */
    actions: SocketAction[];
}
/**
 * sockets-publish-response
 * The response to publishing actions on behalf of the client.
 */
export type SocketsPublishResponse = object;
/**
 * source-details
 * Discovery source details.
 */
export interface SourceDetails {
    /**
     * Discovery source data last captured timestamp.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    last_captured_timestamp?: string;
    /**
     * Discovery source data collected file size in bytes.
     * @format int32
     */
    size_bytes?: number;
    /** Discovery source type. */
    type?: string;
}
/**
 * source-migration-item
 * Source migration item report.
 */
export interface SourceMigrationItem {
    /**
     * The total count of all source items extracted.
     * @format int32
     */
    count?: number;
    /**
     * The flag indicating that not all items in the count are new or
     * updated.
     */
    is_cumulative?: boolean;
    /**
     * The flag indicating that the items might already be found in other
     * sync runs.
     */
    is_shared?: boolean;
    /** The migration source item type. */
    type?: string;
}
/** spotlight-nudge-widget */
export type SpotlightNudgeWidget = (NativeSpotlightNudgeWidget | SnapKitSpotlightNudgeWidget) & {
    spotlight_nudge_type: SpotlightNudgeWidgetSpotlightNudgeType;
};
/** spotlight-nudge-widget-base */
export type SpotlightNudgeWidgetBase = SnapWidgetBase & {
    /** The background color of the spotlight nudge widget. */
    background_color?: string;
    /** Whether to show the close button on the spotlight nudge widget. */
    show_close_button: boolean;
};
/** spotlight-nudge-widget-base-summary */
export type SpotlightNudgeWidgetBaseSummary = SnapWidgetBaseSummary;
export declare enum SpotlightNudgeWidgetSpotlightNudgeType {
    Native = "native",
    SnapKit = "snap_kit"
}
/** spotlight-nudge-widget-summary */
export type SpotlightNudgeWidgetSummary = (NativeSpotlightNudgeWidgetSummary | SnapKitSpotlightNudgeWidgetSummary) & {
    spotlight_nudge_type: SpotlightNudgeWidgetSpotlightNudgeType;
};
/**
 * stage
 * Describes the current stage of a object.
 */
export interface Stage {
    /** Notes relevant to the stage. */
    notes?: string;
    /**
     * Current stage number of the object (sortable).
     * @format int32
     */
    ordinal?: number;
    stage?: CustomStageSummary;
    state?: CustomStateSummary;
}
/** stage-diagram */
export type StageDiagram = AtomBase & {
    /** True if this diagram is the default for the leaf type. */
    is_default?: boolean;
    /** The leaf type this stage diagram applies to. */
    leaf_type?: string;
    /** The human readable name of the diagram. */
    name?: string;
    /** Stage node. */
    stages: StageNode[];
};
/** stage-diagram-summary */
export type StageDiagramSummary = AtomBaseSummary;
/** stage-diagrams-create-request */
export interface StageDiagramsCreateRequest {
    /** The leaf type this stage diagram applies to. */
    leaf_type: string;
    /**
     * The name of the stage diagram. Stage diagram is used for defining
     * stage transitions.
     */
    name: string;
    /** List of stages in the diagram. */
    stages: CreateStageNode[];
}
/** stage-diagrams-create-response */
export interface StageDiagramsCreateResponse {
    stage_diagram: StageDiagram;
}
/** stage-diagrams-get-request */
export interface StageDiagramsGetRequest {
    /** The ID of the stage diagram to get. */
    id?: string;
    /**
     * The leaf type. Should be specified to retrieve the default stage
     * diagram for the leaf type. If not provided, then id is used.
     */
    leaf_type?: string;
}
/** stage-diagrams-get-response */
export interface StageDiagramsGetResponse {
    stage_diagram: StageDiagram;
}
/** stage-diagrams-list-request */
export interface StageDiagramsListRequest {
    /**
     * The cursor to resume iteration from, otherwise if not provided,
     * then iteration starts from the beginning.
     */
    cursor?: string;
    /** The list of leaf types. */
    leaf_type?: string[];
    /**
     * The maximum number of items.
     * @format int32
     */
    limit?: number;
    /** The list of stage diagram names. */
    name?: string[];
    /** The list of fields to sort the items by and how to sort them. */
    sort_by?: string[];
}
/** stage-diagrams-list-response */
export interface StageDiagramsListResponse {
    /**
     * The cursor to resume iteration from, otherwise if not provided,
     * then iteration starts from the beginning.
     */
    cursor?: string;
    /** The stage diagram. */
    result: StageDiagram[];
}
/** stage-diagrams-update-request */
export interface StageDiagramsUpdateRequest {
    /** The ID of the stage diagram. */
    id: string;
    /** The updated name of the stage diagram. */
    name?: string;
    /** List of stages in the stage diagram. */
    stages?: UpdateStageNode[];
}
/** stage-diagrams-update-response */
export interface StageDiagramsUpdateResponse {
    stage_diagram: StageDiagram;
}
/**
 * stage-filter
 * The filter for stages.
 */
export interface StageFilter {
    /** Filters for records in the provided stage(s) by name. */
    name?: string[];
    /** List of IDs of the custom stages which will be used for filtering. */
    stages?: string[];
}
/**
 * stage-init
 * Sets an object's initial stage.
 */
export interface StageInit {
    /**
     * The ID of the custom stage. If this is set, the name field is
     * ignored.
     */
    id?: string;
    /** The name of the stage. */
    name?: string;
    /** Notes relevant to the stage. */
    notes?: string;
}
/**
 * stage-node
 * Diagram stage.
 */
export interface StageNode {
    /** True if this stage has been deprecated. */
    is_deprecated?: boolean;
    /** True if this stage is the starting stage of the stage diagram. */
    is_start?: boolean;
    stage?: CustomStageSummary;
    /** The list of stages that can be reached. */
    transitions?: StageTransition[];
}
/**
 * stage-transition
 * Stage transition.
 */
export interface StageTransition {
    target_stage?: CustomStageSummary;
}
/**
 * stage-update
 * Updates an object's stage.
 */
export interface StageUpdate {
    /** The updated name of the stage, otherwise unchanged if not set. */
    name?: string;
    /** The updated notes for the stage, otherwise unchanged if not set. */
    notes?: string;
    /**
     * The ID of the updated custom stage, otherwise unchanged if not set.
     * If this is set, the name field is ignored.
     */
    stage?: string;
}
/** Type of stage validation options when creating an object. */
export declare enum StageValidationOptionForCreate {
    AllowNonStart = "allow_non_start"
}
/** Type of state validation options when updating the stage of an object. */
export declare enum StageValidationOptionForUpdate {
    AllowInvalidTransition = "allow_invalid_transition"
}
/**
 * staged-info
 * Meta information about the staged record.
 */
export interface StagedInfo {
    /**
     * Whether the record is staged and requires confirmation before
     * further processing.
     */
    is_staged?: boolean;
    /**
     * A list of fields that have not been resolved, which is causing the
     * record to be staged.
     */
    unresolved_fields?: string[];
}
/** staged-info-filter */
export interface StagedInfoFilter {
    /** Filters for issues that are staged. */
    is_staged?: boolean;
}
/** start-data-collection-request */
export interface StartDataCollectionRequest {
    /**
     * Optional Dev organization ID. This allows running on another Dev
     * organization, as long as the logged in user has access to it.
     * @example "DEV-AbCdEfGh"
     */
    other_dev_org?: string;
}
/** start-data-collection-response */
export type StartDataCollectionResponse = object;
/**
 * status
 * Status of the user.
 */
export interface Status {
    /** Description of the status. */
    description?: string;
    /** Name of the emoji supporting the status text. */
    emoji?: string;
    /**
     * Time at which status expires.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    expires_at?: string;
}
/**
 * stock-field-override
 * A stock field override.
 */
export interface StockFieldOverride {
    /** Whether the field is required. */
    is_required?: boolean;
    /** Name of the stock field to be overridden. */
    name?: string;
    /** Overridden allowed values for a unified enum. */
    uenum_values?: SchemaFieldUenumValue[];
    /** The schema of ui specific fields. */
    ui?: SchemaFieldUiMetadata;
}
/** stock-schema-fragment */
export type StockSchemaFragment = AtomBase & {
    /** List of composite schemas. */
    composite_schemas: CompositeSchema[];
    /** Description of the schema. */
    description?: string;
    /** List of all fields in this schema. */
    fields: SchemaFieldDescriptor[];
    /** Leaf type this fragment applies to. */
    leaf_type?: string;
    new_fragment_ref?: AtomSummary;
    old_fragment_ref?: AtomSummary;
    /**
     * The SHA-256 hash of the schema. Used to implement idempotent
     * updates.
     */
    schema_signature?: string;
    /**
     * The salt used to evaluate SHA-256 hash of the schema. Used to
     * implement idempotent updates.
     */
    schema_signature_salt?: string;
    /** Title of the schema. */
    title?: string;
};
/** stock-schema-fragment-private */
export type StockSchemaFragmentPrivate = AtomBase & {
    /** List of composite schemas. */
    composite_schemas: CompositeSchemaPrivate[];
    /** Description of the schema. */
    description?: string;
    /** List of all fields in this schema. */
    fields: FieldDescriptor[];
    /** Leaf type this fragment applies to. */
    leaf_type?: string;
    new_fragment_ref?: AtomSummary;
    old_fragment_ref?: AtomSummary;
    /**
     * The SHA-256 hash of the schema. Used to implement idempotent
     * updates.
     */
    schema_signature?: string;
    /**
     * The salt used to evaluate SHA-256 hash of the schema. Used to
     * implement idempotent updates.
     */
    schema_signature_salt?: string;
    /** Title of the schema. */
    title?: string;
};
/** stock-schema-fragment-private-summary */
export type StockSchemaFragmentPrivateSummary = AtomBaseSummary;
/** stock-schema-fragment-summary */
export type StockSchemaFragmentSummary = AtomBaseSummary;
/** stock-schema-fragments-get-request */
export interface StockSchemaFragmentsGetRequest {
    /** The ID of the stock schema fragment. */
    id?: string;
    /** The leaf type this fragment applies to. */
    leaf_type?: string;
}
/** stock-schema-fragments-get-request-private */
export interface StockSchemaFragmentsGetRequestPrivate {
    /** The ID of the stock schema fragment. */
    id?: string;
    /** The leaf type this fragment applies to. */
    leaf_type?: string;
}
/** stock-schema-fragments-get-response */
export interface StockSchemaFragmentsGetResponse {
    fragment: StockSchemaFragment;
}
/** stock-schema-fragments-get-response-private */
export interface StockSchemaFragmentsGetResponsePrivate {
    fragment: StockSchemaFragmentPrivate;
}
/** stock-schema-fragments-list-request */
export interface StockSchemaFragmentsListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    filter_preset?: StockSchemaFragmentsListRequestFilterPreset;
    /** The list of leaf types. */
    leaf_type?: string[];
    /**
     * The maximum number of items.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /**
     * List of fields which are not required in the payload and can be
     * pruned away.
     */
    prune?: StockSchemaFragmentsListRequestPrune[];
    /** The list of fields to sort the items by and how to sort them. */
    sort_by?: string[];
}
export declare enum StockSchemaFragmentsListRequestFilterPreset {
    CustomizableTypesPreset = "customizable_types_preset",
    NoPreset = "no_preset"
}
/** stock-schema-fragments-list-request-private */
export interface StockSchemaFragmentsListRequestPrivate {
    /**
     * The cursor to resume iteration from, otherwise if not provided,
     * then iteration starts from the beginning.
     */
    cursor?: string;
    /** The list of leaf types. */
    leaf_type?: string[];
    /**
     * The maximum number of items.
     * @format int32
     */
    limit?: number;
    /** The list of fields to sort the items by and how to sort them. */
    sort_by?: string[];
}
export declare enum StockSchemaFragmentsListRequestPrune {
    CompositeSchemas = "composite_schemas",
    Fields = "fields"
}
/** stock-schema-fragments-list-response */
export interface StockSchemaFragmentsListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The stock schema fragments. */
    result: StockSchemaFragment[];
}
/** stock-schema-fragments-list-response-private */
export interface StockSchemaFragmentsListResponsePrivate {
    /**
     * The cursor to resume iteration from, otherwise if not provided,
     * then iteration starts from the beginning.
     */
    cursor?: string;
    /** The stock schema fragments. */
    result: StockSchemaFragmentPrivate[];
}
/**
 * stripe-invoicing-detail
 * Stripe metadata used for invoicing.
 */
export interface StripeInvoicingDetail {
    /** Stripe invoice unique identifier. */
    invoice_id: string;
    /**
     * A unique, identifying string that appears on emails sent to the
     * customer for this invoice.
     */
    invoice_number: string;
}
/**
 * stripe-payment-detail
 * Stripe metadata need for payment, if payment is being done through
 * stripe.
 */
export interface StripePaymentDetail {
    /**
     * If the invoice is to be paid, this key needs to be used on the
     * frontend side to complete the payment.
     */
    client_key?: string;
    /**
     * If the invoice is to be paid, this id needs to be used on the
     * frontend side to complete the payment.
     */
    payment_intent_id?: string;
}
/**
 * sub-widget
 * A sub-widget represents a data visualization unit contained within a
 * widget.
 */
export interface SubWidget {
    /**
     * The query for a widget. This includes measures and dimensions to be
     * visualized.
     */
    query: WidgetQuery;
    /**
     * A reference ID for the sub-widget. It should be unique within the
     * widget.
     */
    reference_id: string;
    /**
     * The visualization for a widget. This includes the type of visualization
     * and any  configuration specific to that type.
     */
    visualization: WidgetVisualization;
}
/** subtype */
export interface Subtype {
    /** Display name of the subtype. */
    display_name?: string;
    /** DON of the custom type fragment this subtype belongs to. */
    fragment_id: string;
    /** Leaf type for the subtype. */
    leaf_type: string;
    /** Value of the subtype. */
    value: string;
}
export declare enum SubtypeOpOperatorType {
    All = "all",
    Any = "any",
    Empty = "empty",
    NotAny = "not_any",
    NotEmpty = "not_empty"
}
/** subtypes-list-request */
export interface SubtypesListRequest {
    /**
     * Leaf type for which subtypes are required.
     * @deprecated
     */
    leaf_type?: string;
    /** List of leaf types for which subtypes are required. */
    leaf_types?: string[];
}
/** subtypes-list-response */
export interface SubtypesListResponse {
    /** List of subtypes. */
    subtypes: Subtype[];
}
/** Target objects to search in. */
export declare enum SuggestObjectsObjectType {
    Article = "article",
    Conversation = "conversation",
    Issue = "issue",
    Question = "question",
    Ticket = "ticket"
}
/**
 * suggest-objects-request
 * Get similar objects for a given object.
 */
export interface SuggestObjectsRequest {
    /** The ID of the object to find similar objects for. */
    id: string;
    /**
     * Maximum number of results to return for each object type. The
     * default value is 5.
     * @format int32
     * @min 1
     * @max 20
     */
    limit_per_object_type?: number;
    /**
     * List of target objects for which similar objects are requested.
     * @maxItems 5
     * @minItems 1
     */
    object_types: SuggestObjectsObjectType[];
}
/**
 * suggest-objects-response
 * Response for similar objects.
 */
export interface SuggestObjectsResponse {
    /** A list of all the similar objects of the requested type. */
    results: SuggestObjectsResponseSimilarObjects[];
}
/**
 * suggest-objects-response-similar-objects
 * Contains the similar objects of a particular type.
 */
export interface SuggestObjectsResponseSimilarObjects {
    /** Target objects to search in. */
    object_type: SuggestObjectsObjectType;
    /** The list of similar objects. */
    objects: AtomSummary[];
}
/**
 * summarize-list-request
 * Summarize list request.
 */
export interface SummarizeListRequest {
    /**
     * List of objects to summarize.
     * @example ["ISS-12345"]
     */
    objects: string[];
}
/** summarize-list-response */
export interface SummarizeListResponse {
    summary: string;
}
/**
 * support-metric-target
 * An individual metric of an SLA, describing which metric should be
 * evaluated and against what target.
 */
export interface SupportMetricTarget {
    metric_definition?: MetricDefinitionSummary;
    org_schedule?: OrgScheduleSummary;
    /**
     * The percentage of instances for which this metric's target must not
     * be breached, in order not to breach the overall SLA policy.
     * @format double
     */
    performance?: number;
    /**
     * The target value to be achieved, for example the time in which to
     * do something, or the maximum allowed number of message pairs. The
     * units and interpretation of the value is controlled by the
     * properties of the metric referenced in metric_definition_id, time
     * metrics count time in minutes, while value metrics just use
     * arbitrary units.
     * @format int32
     */
    target?: number;
    /**
     * The threshold in the same units as target where the metric is
     * considered to be 'at risk'. If it is reached, a notification will
     * be generated. It might be greater or smaller than the target,
     * depending on whether the metric is 'lesser is better' or 'greater
     * is better'.
     * @format int32
     */
    warning_target?: number;
}
/**
 * support-notifications-group
 * Preferences group for support notifications.
 */
export interface SupportNotificationsGroup {
    /**
     * Delay time in minutes after which the rev/dev user will be notified
     * of a new message on conversation via email.
     * @format int32
     */
    conv_msg_email_delay?: number;
    /**
     * Disable all automated notifation emails to customers from
     * notifications@devrev.ai.
     */
    disable_default_rev_emails?: boolean;
}
/**
 * support-preferences-group
 * Preferences group for Support.
 */
export interface SupportPreferencesGroup {
    /** Preferences group for support notifications. */
    notification_preferences?: SupportNotificationsGroup;
    /** Preferences group for support tickets. */
    ticket_preferences?: SupportTicketPreferencesGroup;
}
/**
 * support-ticket-preferences-group
 * Preferences group for support tickets.
 */
export interface SupportTicketPreferencesGroup {
    svc_acc_for_unassigned_tickets?: UserSummary;
}
/** supported-languages-request */
export interface SupportedLanguagesRequest {
    /**
     * The language to use to return localized, human readable names of
     * supported languages.
     */
    target_language?: string;
}
/** supported-languages-response */
export interface SupportedLanguagesResponse {
    /** The list of languages supported by translation API. */
    languages: LanguageResource[];
}
/** survey */
export type Survey = AtomBase & {
    /** Description of the survey. */
    description?: string;
    /**
     * Survey name associated with schema. This name would be unique per
     * dev org.
     */
    name?: string;
    /** List of all fields in the schema. */
    schema: SchemaFieldDescriptor[];
};
/**
 * survey-aggregation-filter
 * The filter for survey aggregation.
 */
export interface SurveyAggregationFilter {
    /** Minimum value for an object aggregation. */
    minimum: string[];
}
/**
 * survey-engagement-summary
 * Survey engagement summary object.
 */
export interface SurveyEngagementSummary {
    /** URL to the survey. */
    survey_url?: string;
}
/** survey-response */
export type SurveyResponse = AtomBase & {
    /** The unique ID associated with the dispatched survey. */
    dispatch_id?: string;
    /** Source channels on which the survey is sent. */
    dispatched_channels?: EnumValue[];
    /** The ID of the object for which survey is taken. */
    object?: string;
    recipient?: UserSummary;
    /** Response for the survey. */
    response?: object;
    /** Enum Value defines the structure for an enum. */
    response_channel?: EnumValue;
    /** Source channel for the survey response. */
    source_channel?: string;
    /** Enum Value defines the structure for an enum. */
    stage?: EnumValue;
    /** The ID of the survey for which response is taken. */
    survey?: string;
};
/** survey-response-summary */
export type SurveyResponseSummary = AtomBaseSummary;
/** survey-summary */
export type SurveySummary = AtomBaseSummary;
/** surveys-create-request */
export interface SurveysCreateRequest {
    /** Description about the survey. */
    description?: string;
    /** The survey's name. */
    name: string;
    /** Schema for the survey. */
    schema: FieldDescriptor[];
}
/** surveys-create-response */
export interface SurveysCreateResponse {
    survey: Survey;
}
/** surveys-delete-request */
export interface SurveysDeleteRequest {
    /** ID of the survey being deleted. */
    id: string;
}
/** surveys-delete-response */
export type SurveysDeleteResponse = object;
/** surveys-get-request */
export interface SurveysGetRequest {
    /** The ID of the survey to get. */
    id: string;
}
/** surveys-get-response */
export interface SurveysGetResponse {
    survey: Survey;
}
/** surveys-list-request */
export interface SurveysListRequest {
    /**
     * Filters for surveys created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of surveys to return. If not set, then the
     * default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** Filters for surveys by name(s). */
    name?: string[];
    /** Fields to sort the surveys by and the direction to sort them. */
    sort_by?: string[];
}
/** surveys-list-response */
export interface SurveysListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The list of the surveys. */
    surveys: Survey[];
}
/** surveys-responses-list-request */
export interface SurveysResponsesListRequest {
    /**
     * Filters for survey responses created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of survey responses to return. If not set, then
     * the default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /**
     * Filters for survey responses created for the objects.
     * @example ["ACC-12345"]
     */
    objects?: string[];
    /**
     * Fields to sort the survey responses by and the direction to sort
     * them.
     */
    sort_by?: string[];
    /** Filters for survey response stages. */
    stages?: number[];
    /** Filters for survey responses for the provided survey IDs. */
    surveys?: string[];
}
/** surveys-responses-list-response */
export interface SurveysResponsesListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The list of the survey responses. */
    survey_responses: SurveyResponse[];
}
/** surveys-responses-update-request */
export interface SurveysResponsesUpdateRequest {
    /** The unique ID associated with the dispatched survey. */
    dispatch_id: string;
    /** Survey response submitted for the object. */
    response?: object;
    /**
     * The source channel ordinal which recorded the survey response.
     * @format int64
     */
    response_channel?: number;
    /**
     * The response score for the survey. Only applicable for CSAT and
     * NPS.
     * @format int32
     * @min 1
     * @max 10
     */
    response_score?: number;
    /**
     * The stage ordinal of the survey response object.
     * @format int64
     */
    stage?: number;
}
/** surveys-responses-update-response */
export type SurveysResponsesUpdateResponse = object;
/** surveys-send-request */
export interface SurveysSendRequest {
    email: SurveysSendRequestEmail;
}
/** surveys-send-request-email */
export interface SurveysSendRequestEmail {
    /** Message body for a survey email. */
    body: string;
    /** Recipients list for a survey email. */
    recipients: string[];
    /** Sender email address from which an email is sent. */
    sender: string;
    /** Subject for an email where survey is sent. */
    subject: string;
}
/** surveys-send-response */
export type SurveysSendResponse = object;
/** surveys-submit-request */
export interface SurveysSubmitRequest {
    /** The unique ID associated with the dispatched survey. */
    dispatch_id?: string;
    /** The ordinals of the source channels on which the survey is sent. */
    dispatched_channels?: number[];
    /**
     * The ID of the object this survey is on (e.g. ticket, conversation,
     * etc).
     * @example "ACC-12345"
     */
    object: string;
    /**
     * The unique ID associated with the recipient of the survey.
     * @example "DEVU-12345"
     */
    recipient?: string;
    /** Survey response submitted for the object. */
    response?: object;
    /**
     * The response score for the survey. Only applicable for CSAT and
     * NPS.
     * @format int32
     */
    response_score?: number;
    /** The source channel from which survey response is submitted. */
    source_channel?: string;
    /**
     * The stage ordinal of the survey response object.
     * @format int64
     */
    stage?: number;
    /** The ID of the survey to submit the response to. */
    survey: string;
}
/** surveys-submit-response */
export type SurveysSubmitResponse = object;
/**
 * synapse-action
 * Action that'll be executed by the bot.
 */
export interface SynapseAction {
    /** Name of the action. */
    name?: string;
    /** Parameters required to execute the action. */
    parameters?: object;
}
export declare enum SyncDirection {
    FromDevrev = "from_devrev",
    ToDevrev = "to_devrev"
}
/**
 * sync-error-record
 * The airdrop error record.
 */
export interface SyncErrorRecord {
    /**
     * The airdrop error record code.
     * @format int32
     */
    code?: number;
    /** The airdrop component that encountered an error. */
    component?: string;
    /** The hash of the error message. */
    hash?: string;
    /** The airdrop error record level. */
    level?: SyncErrorRecordLevel;
    /**
     * A longer detailed description of the error in a human-readable
     * form.
     */
    long_message?: string;
    /**
     * The number of times the error occurred.
     * @format int32
     */
    occurrence?: number;
    /** A short message describing the error in a human-readable form. */
    short_message?: string;
}
/** The airdrop error record level. */
export declare enum SyncErrorRecordLevel {
    Error = "error",
    Warning = "warning"
}
/** sync-history */
export type SyncHistory = AtomBase & {
    /** Object for holding run-specific data. */
    sync_run?: SyncRun;
};
/**
 * sync-history-record
 * List of modifications belonging to one sync run.
 */
export interface SyncHistoryRecord {
    /** List of modifications for each field. */
    field_modification_records?: FieldModificationRecord[];
    sync_history?: SyncHistorySummary;
}
/** sync-history-summary */
export type SyncHistorySummary = AtomBaseSummary & {
    /** Object for holding run-specific data. */
    sync_run?: SyncRunSummary;
};
/**
 * sync-in
 * Information about the sync to DevRev.
 */
export interface SyncIn {
    /** Status of the sync for the object. */
    status?: SyncInStatus;
    /**
     * Timestamp when the object was synced in/from DevRev.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    sync_date?: string;
    sync_history?: SyncHistorySummary;
    sync_unit?: SyncUnitSummary;
}
/** Status of the sync for the object. */
export declare enum SyncInStatus {
    Failed = "failed",
    Modified = "modified",
    Staged = "staged",
    Succeeded = "succeeded"
}
/**
 * sync-job-internals
 * The internal data about automatic sync.
 */
export interface SyncJobInternals {
    /** Type of a automatic sync job. */
    job_type?: SyncJobInternalsJobType;
    /** The internal stage of the scheduled sync job. */
    sync_job_stage?: SyncJobInternalsSyncJobStage;
}
/** Type of a automatic sync job. */
export declare enum SyncJobInternalsJobType {
    Bidirectional = "bidirectional",
    Unidirectional = "unidirectional"
}
/**
 * sync-job-internals-summary
 * The internal data about automatic sync.
 */
export interface SyncJobInternalsSummary {
    /** Type of a automatic sync job. */
    job_type?: SyncJobInternalsJobType;
}
/** The internal stage of the scheduled sync job. */
export declare enum SyncJobInternalsSyncJobStage {
    FromDevrev = "from_devrev",
    ToDevrev = "to_devrev"
}
/**
 * sync-metadata
 * Mixin for storing sync metadata.
 */
export interface SyncMetadata {
    /** External record URL. */
    external_reference?: string;
    /** Information about the sync to DevRev. */
    last_sync_in?: SyncIn;
    /** Information about the sync to DevRev. */
    last_sync_out?: SyncOut;
    /** Where the record was first created. */
    origin_system?: string;
}
/** sync-metadata-filter */
export interface SyncMetadataFilter {
    last_sync_in?: SyncMetadataFilterSyncInFilter;
    last_sync_out?: SyncMetadataFilterSyncOutFilter;
    /** Filters for issues synced from this specific origin system. */
    origin_system?: string[];
}
/** sync-metadata-filter-sync-in-filter */
export interface SyncMetadataFilterSyncInFilter {
    /** Filters for works with selected sync statuses. */
    status?: SyncMetadataFilterSyncInFilterStatus[];
    /** Provides ways to specify date ranges on objects. */
    sync_date?: DateFilter;
    /** Filters for works modified with selected sync units. */
    sync_unit?: string[];
}
export declare enum SyncMetadataFilterSyncInFilterStatus {
    Failed = "failed",
    Modified = "modified",
    Staged = "staged",
    Succeeded = "succeeded"
}
/** sync-metadata-filter-sync-out-filter */
export interface SyncMetadataFilterSyncOutFilter {
    /** Filters for works with selected sync statuses. */
    status?: SyncMetadataFilterSyncOutFilterStatus[];
    /** Provides ways to specify date ranges on objects. */
    sync_date?: DateFilter;
    /** Filters for works modified with selected sync units. */
    sync_unit?: string[];
}
export declare enum SyncMetadataFilterSyncOutFilterStatus {
    Failed = "failed",
    Succeeded = "succeeded"
}
/** sync-modification-record */
export type SyncModificationRecord = AtomBase & {
    /** List of modifications belonging to one sync run. */
    sync_in?: SyncHistoryRecord;
    /** List of modifications belonging to one sync run. */
    sync_out?: SyncHistoryRecord;
    target_object?: AtomSummary;
};
/** sync-modification-record-summary */
export type SyncModificationRecordSummary = AtomBaseSummary;
/**
 * sync-out
 * Information about the sync to DevRev.
 */
export interface SyncOut {
    /** Status of the sync for the object. */
    status?: SyncOutStatus;
    /**
     * Timestamp when the object was synced in/from DevRev.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    sync_date?: string;
    sync_history?: SyncHistorySummary;
    sync_unit?: SyncUnitSummary;
}
/** Status of the sync for the object. */
export declare enum SyncOutStatus {
    Failed = "failed",
    Succeeded = "succeeded"
}
/**
 * sync-preferences
 * Information about the sync preferences used by automatic sync
 * scheduler.
 */
export interface SyncPreferences {
    /**
     * The time of a first automatic sync.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    first_sync_time?: string;
    /**
     * The time of a next automatic sync.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    next_sync_time?: string;
    /** The internal data about automatic sync. */
    sync_job_internals?: SyncJobInternals;
    /**
     * Time between syncs in nanoseconds.
     * @format int32
     */
    sync_period?: number;
}
/**
 * sync-preferences-summary
 * Information about the sync preferences used by automatic sync
 * scheduler.
 */
export interface SyncPreferencesSummary {
    /** The internal data about automatic sync. */
    sync_job_internals?: SyncJobInternalsSummary;
}
/**
 * sync-progress
 * Progress.
 */
export interface SyncProgress {
    /**
     * The sync progress as a percentage.
     * @format int32
     */
    percentage?: number;
    /** The state of a sync progress. */
    state?: SyncProgressState;
}
/** The state of a sync progress. */
export declare enum SyncProgressState {
    Completed = "completed",
    DeleteInProgress = "delete_in_progress",
    Deleted = "deleted",
    DeletionError = "deletion_error",
    ExtractAttachments = "extract_attachments",
    ExtractAttachmentsError = "extract_attachments_error",
    Extraction = "extraction",
    ExtractionError = "extraction_error",
    Loading = "loading",
    LoadingAttachments = "loading_attachments",
    LoadingAttachmentsError = "loading_attachments_error",
    LoadingError = "loading_error",
    RecipeDiscovery = "recipe_discovery",
    RecipeDiscoveryError = "recipe_discovery_error",
    RecipeDiscoveryWaitingForUserInput = "recipe_discovery_waiting_for_user_input",
    Starting = "starting",
    Transformation = "transformation",
    TransformationError = "transformation_error"
}
/**
 * sync-progress-summary
 * Progress.
 */
export interface SyncProgressSummary {
    /** The state of a sync progress. */
    state?: SyncProgressState;
}
/**
 * sync-report
 * Report.
 */
export interface SyncReport {
    /**
     * The destination migration items describing what was transferred to
     * the sync destination.
     */
    destination_items?: DestinationMigrationItem[];
    /**
     * Describes the high level overview of mappings between inputs and
     * outputs.
     */
    recipe_report?: RecipeReport;
    report_tag?: TagSummary;
    /** Source items. */
    source_items?: SourceMigrationItem[];
}
/**
 * sync-run
 * Object for holding run-specific data.
 */
export interface SyncRun {
    /**
     * The time when a sync was ended.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    ended_at?: string;
    /** A set of errors that occurred during a sync run. */
    error_set?: SyncErrorRecord[];
    keyring?: KeyringSummary;
    /** The name of a keyring with which a run was started. */
    keyring_name?: string;
    /** The direction/mode of a sync run. */
    mode?: SyncRunMode;
    /** Progress. */
    progress?: SyncProgress;
    /** Report. */
    report?: SyncReport;
    /**
     * The time when a sync was started.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    started_at?: string;
    /** Describes how the sync was initiated. */
    started_by?: SyncRunStartedBy;
}
/** The direction/mode of a sync run. */
export declare enum SyncRunMode {
    Initial = "initial",
    SyncFromDevrev = "sync_from_devrev",
    SyncToDevrev = "sync_to_devrev"
}
/** Describes how the sync was initiated. */
export declare enum SyncRunStartedBy {
    PeriodicSyncScheduler = "periodic_sync_scheduler",
    User = "user"
}
/**
 * sync-run-summary
 * Object for holding run-specific data.
 */
export interface SyncRunSummary {
    /** The name of a keyring with which a run was started. */
    keyring_name?: string;
    /** The direction/mode of a sync run. */
    mode?: SyncRunMode;
    /** Progress. */
    progress?: SyncProgressSummary;
}
/** sync-unit */
export type SyncUnit = AtomBase & {
    /** Available actions for a given SyncUnit. */
    available_actions: SyncUnitAvailableActions[];
    /** The flag signaling if sync unit is editable in current state. */
    editable?: boolean;
    external_system_type?: ExternalSystemType;
    /** The name of the sync unit. */
    name?: string;
    /** Required actions to continue sync. */
    required_actions: SyncUnitRequiredActions[];
    /** The IDs of subscribers that are subscribed to this sync unit. */
    subscribers: AtomSummary[];
    /**
     * Information about the sync preferences used by automatic sync
     * scheduler.
     */
    sync_preference?: SyncPreferences;
    /** Object for holding run-specific data. */
    sync_run?: SyncRun;
    /** Type of sync preferences. */
    sync_type?: SyncUnitSyncType;
};
/** Available actions for a given SyncUnit. */
export declare enum SyncUnitAvailableActions {
    Delete = "delete",
    Start = "start",
    SyncFromDevrev = "sync_from_devrev",
    SyncToDevrev = "sync_to_devrev"
}
/** Required actions to continue sync. */
export declare enum SyncUnitRequiredActions {
    ChangeConnection = "change_connection",
    LowCodeDecision = "low_code_decision"
}
/** sync-unit-summary */
export type SyncUnitSummary = AtomBaseSummary & {
    external_system_type?: ExternalSystemType;
    /** The name of the sync unit. */
    name?: string;
    /**
     * Information about the sync preferences used by automatic sync
     * scheduler.
     */
    sync_preference?: SyncPreferencesSummary;
    /** Object for holding run-specific data. */
    sync_run?: SyncRunSummary;
    /** Type of sync preferences. */
    sync_type?: SyncUnitSyncType;
};
/** Type of sync preferences. */
export declare enum SyncUnitSyncType {
    Manual = "manual",
    Periodic = "periodic"
}
/** sys-user */
export type SysUser = UserBase & {
    /** Description of the system user. */
    description?: string;
    /** References to the tokens issued by the STS for this system user. */
    system_user_token_ids?: string[];
};
/** sys-user-summary */
export type SysUserSummary = UserBaseSummary;
/**
 * sys-users-get-request
 * A request to get a system user's information.
 */
export interface SysUsersGetRequest {
    /** User ID of the requested system user. */
    id: string;
}
/**
 * sys-users-get-response
 * The response to getting the information for the system user.
 */
export interface SysUsersGetResponse {
    sys_user: SysUser;
}
/**
 * sys-users-list-request
 * A request to get the list of system user's information.
 */
export interface SysUsersListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of system users to return. Value can range from
     * '1' to '100', with a default of '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Fields to sort the system users by and the direction to sort them. */
    sort_by?: string[];
}
/**
 * sys-users-list-response
 * The response to listing the system users.
 */
export interface SysUsersListResponse {
    /**
     * The cursor that should be used to resume iteration. If not
     * provided, then iteration has completed.
     * @deprecated
     */
    cursor?: string;
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The list of system users. */
    sys_users: SysUser[];
}
/**
 * sys-users-update-request
 * Request to update information of the system user.
 */
export interface SysUsersUpdateRequest {
    /**
     * Updated display handle for the system user.
     * @deprecated
     */
    display_handle?: string;
    /** Updated display name for the system user. */
    display_name?: string;
    /**
     * Artifact ID of the system user's new display picture.
     * @example "ARTIFACT-12345"
     */
    display_picture?: string | null;
    /**
     * Artifact ID of the system user's new display picture.
     * @deprecated
     * @example "ARTIFACT-12345"
     */
    display_picture_id?: string | null;
    /** Updated full name for the system user. */
    full_name?: string;
    /** The ID of system user to update. */
    id: string;
}
/**
 * sys-users-update-response
 * Updated Sys user object.
 */
export interface SysUsersUpdateResponse {
    sys_user: SysUser;
}
/** Table format of the dataset. */
export declare enum TableFormatValue {
    Hive = "hive",
    Iceberg = "iceberg",
    Unknown = "unknown"
}
/**
 * table-visualization-column
 * A column in a table visualization.
 */
export interface TableVisualizationColumn {
    /** The color for an axis. This can be a single color or a gradient. */
    color?: VisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: VisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** Whether the column should be movable. */
    is_movable?: boolean;
    /** Whether the column should be resizable. */
    is_resizable?: boolean;
    /** Whether the column should be sortable. */
    is_sortable?: boolean;
    /** Whether the column visibility can be toggled. */
    is_visibility_togglable?: boolean;
    /** The label for the axis. */
    label?: string;
    /**
     * Whether the column should be locked to the left or right side of the
     * table.
     */
    lock_position?: TableVisualizationColumnLockPosition;
    /**
     * The maximum width of the column.
     * @format int32
     */
    max_width?: number;
    /**
     * The minimum width of the column.
     * @format int32
     */
    min_width?: number;
    /**
     * The order in which the column should be displayed.
     * @format int32
     */
    order?: number;
    /**
     * Whether the column should be pinned to the left or right side of the
     * table.
     */
    pin_position?: TableVisualizationColumnPinPosition;
    /** The reference name of the axis. */
    reference_name: string;
}
/**
 * Whether the column should be locked to the left or right side of the
 * table.
 */
export declare enum TableVisualizationColumnLockPosition {
    Left = "left",
    Right = "right"
}
/**
 * Whether the column should be pinned to the left or right side of the
 * table.
 */
export declare enum TableVisualizationColumnPinPosition {
    Left = "left",
    Right = "right"
}
/**
 * table-widget-visualization
 * A table visualization configuration. Includes metadata specific to
 * tables.
 */
export interface TableWidgetVisualization {
    /** The configuration for the columns in the table. */
    columns: TableVisualizationColumn[];
}
/** tag */
export type Tag = AtomBase & {
    access_level?: AccessLevel;
    /**
     * The allowed values for the tag, where a value is provided when a
     * tag is associated with an object. If empty, then no value should be
     * provided when the association is made.
     */
    allowed_values?: string[];
    /**
     * An informative description for the tag that should provide context
     * on the tag's purpose and usage.
     */
    description?: string;
    /**
     * The name of the tag, which denotes the logical concept by which all
     * tagged objects will be associated. The name is guaranteed to be
     * unique.
     */
    name: string;
    style?: TagStyle;
    /** An enum to specify the behaviour of values for this tag. */
    type?: TagType;
};
/** tag-search-summary */
export type TagSearchSummary = SearchSummaryBase & {
    tag: TagSummary;
};
/** tag-style */
export interface TagStyle {
    /** The hex color code in "#RRGGBB" format. */
    color?: string;
}
/** tag-style-summary */
export interface TagStyleSummary {
    /** The hex color code in "#RRGGBB" format. */
    color?: string;
}
/** tag-summary */
export type TagSummary = AtomBaseSummary & {
    /**
     * The name of the tag, which denotes the logical concept by which all
     * tagged objects will be associated. The name is guaranteed to be
     * unique.
     */
    name: string;
    style?: TagStyleSummary;
};
/** An enum to specify the behaviour of values for this tag. */
export declare enum TagType {
    Annotation = "annotation",
    Tag = "tag"
}
/** tag-with-value */
export interface TagWithValue {
    id: TagSummary;
    tag: TagSummary;
    /** The value for the object's association with the tag. */
    value?: string;
}
/** tag-with-value-filter */
export interface TagWithValueFilter {
    /**
     * The ID of the tag.
     * @example "TAG-12345"
     */
    id?: string;
    /**
     * The value for the object's association with the tag. If specified,
     * the value must be one that's specified in the tag's allowed values.
     */
    value?: string;
}
/**
 * tags-create-request
 * The request to create a new tag.
 */
export interface TagsCreateRequest {
    /**
     * The allowed values for the tag, or empty if no values are
     * permitted.
     */
    allowed_values?: string[];
    /** The description for the tag. */
    description?: string;
    /** The name for the tag, which must be unique across all tags. */
    name: string;
    /**
     * Style information for the tag.
     * @deprecated
     */
    style?: string;
    style_new?: TagStyle;
    /** An enum to specify the behaviour of values for this tag. */
    type?: TagType;
}
/**
 * tags-create-response
 * The response to creating a new tag.
 */
export interface TagsCreateResponse {
    tag: Tag;
}
/**
 * tags-delete-request
 * The request to delete a tag.
 */
export interface TagsDeleteRequest {
    /**
     * The ID of the tag to delete.
     * @example "TAG-12345"
     */
    id: string;
}
/**
 * tags-delete-response
 * The response for deleting a tag.
 */
export type TagsDeleteResponse = object;
/**
 * tags-get-request
 * The request to get a tag's information.
 */
export interface TagsGetRequest {
    /**
     * The requested tag's ID.
     * @example "TAG-12345"
     */
    id: string;
}
/**
 * tags-get-response
 * The response to getting a tag's information.
 */
export interface TagsGetResponse {
    tag: Tag;
}
/**
 * tags-list-request
 * The request to get information about a list of tags.
 */
export interface TagsListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of tags to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Filters for tags with the provided names. */
    name?: string[];
    /** Fields to sort tags by and the direction to sort them. */
    sort_by?: string[];
}
/**
 * tags-list-response
 * The response to listing the tags.
 */
export interface TagsListResponse {
    /**
     * The cursor that should be used to resume iteration, otherwise if
     * not provided, then iteration has completed.
     * @deprecated
     */
    cursor?: string;
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The list of tags. */
    tags: Tag[];
}
/**
 * tags-update-allowed-values
 * Specifies an update to a tag's allowed values.
 */
export interface TagsUpdateAllowedValues {
    /** Sets the allowed values for the tag. */
    set?: string[];
}
/**
 * tags-update-request
 * The request to update a tag.
 */
export interface TagsUpdateRequest {
    /** Specifies an update to a tag's allowed values. */
    allowed_values?: TagsUpdateAllowedValues;
    /** The updated description of the tag. */
    description?: string;
    /**
     * The ID of the tag to update.
     * @example "TAG-12345"
     */
    id: string;
    /**
     * The updated name of the tag. The name must be unique across all
     * tags.
     */
    name?: string;
    /** The updated style information for the tag. */
    style?: string;
    style_new?: TagStyle;
    /** An enum to specify the behaviour of values for this tag. */
    type?: TagType;
}
/**
 * tags-update-response
 * The response for updating a tag.
 */
export interface TagsUpdateResponse {
    tag: Tag;
}
/** Type of target object for a link. */
export declare enum TargetObjectType {
    Issue = "issue",
    Opportunity = "opportunity",
    Ticket = "ticket"
}
/** task */
export type Task = WorkBase & {
    /**
     * Actual effort to complete the task.
     * @format double
     */
    actual_effort?: number;
    /** Part versions relevant to the work. */
    applies_to_versions?: string[];
    /** Whether this task is an embedded task of another work or not. */
    embedded?: boolean;
    /**
     * Estimated effort to complete the task.
     * @format double
     */
    estimated_effort?: number;
    /** Priority of the work based upon impact and criticality. */
    priority?: TaskPriority;
    /**
     * Timestamp when the task was started.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    start_date?: string;
};
/** Priority of the work based upon impact and criticality. */
export declare enum TaskPriority {
    P0 = "p0",
    P1 = "p1",
    P2 = "p2",
    P3 = "p3"
}
/** task-summary */
export type TaskSummary = WorkBaseSummary;
/**
 * tax-line-item
 * The tax applied on top of the invoice, represented in the form of a
 * line item.
 */
export interface TaxLineItem {
    /** Tax description for a country. */
    country_specific_tax_description?: string;
}
/**
 * template
 * Template refers to the semver formatted version of a flow and its
 * source code. Once a new version of a flow is released (i.e. marketplace
 * item is updated and  transitioned to state 'published') all the
 * installations of such items will be updated to the new flow.
 */
export interface Template {
    artifact_id?: ArtifactSummary;
    /**
     * Semver formatted version of the template. Version needs to match
     * the following pattern: 'major.minor.fix'. An example of a valid
     * version is '1.2.3' or '0.0.1'.
     */
    version?: string;
}
/** tenant-fragment */
export type TenantFragment = CustomSchemaFragmentBase & {
    /** The display ID prefix. For custom objects only. */
    id_prefix?: string;
    /** The stock field overrides. */
    stock_field_overrides?: StockFieldOverride[];
};
/** tenant-fragment-private */
export type TenantFragmentPrivate = CustomSchemaFragmentPrivateBase & {
    /** The display ID prefix. For custom objects only. */
    id_prefix?: string;
    /** The stock field overrides. */
    stock_field_overrides?: StockFieldOverride[];
};
/** tenant-fragment-private-summary */
export type TenantFragmentPrivateSummary = CustomSchemaFragmentPrivateBaseSummary;
/** tenant-fragment-summary */
export type TenantFragmentSummary = CustomSchemaFragmentBaseSummary;
/**
 * term
 * Score term.
 */
export interface Term {
    /** Whether the term is positively or negatively correlated with the score. */
    correlation?: TermCorrelation;
    term?: AtomSummary;
    /**
     * Weight of the term, this will be used to decide attribution of this
     * term to the score.
     * @format double
     */
    weight?: number;
}
/** Whether the term is positively or negatively correlated with the score. */
export declare enum TermCorrelation {
    Negative = "negative",
    Positive = "positive"
}
/**
 * term-detail
 * Captures quote's term related fields such as name, input, input type,
 * etc.
 */
export interface TermDetail {
    /** Description of the term template. */
    description?: string;
    /**
     * It represents the specific date value expected as input for a
     * particular term, when the 'input_type' is set to 'date'.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    input_date?: string;
    /** Captures the time duration in terms of years, months and days. */
    input_duration?: TermDuration;
    /**
     * It represents the number value expected as input for a particular
     * term, when the 'input_type' is set to 'number'.
     * @format double
     */
    input_number?: number;
    /**
     * It contains the different option values expected as input for a
     * particular term, when the 'input_type' is set to 'option'.
     */
    input_option?: string[];
    /**
     * It represents the text value expected as input for a particular
     * term, when the 'input_type' is set to 'text'.
     */
    input_text?: string;
    /** It specifies the type of input expected for a particular term. */
    input_type: TermDetailInputType;
    /** Label for the term template. */
    label?: string;
    /** Name of the term template. */
    name: string;
    /** Helps in determining the placement of the term in quote layout. */
    section_type: TermDetailSectionType;
}
/** It specifies the type of input expected for a particular term. */
export declare enum TermDetailInputType {
    Date = "date",
    Duration = "duration",
    Number = "number",
    Option = "option",
    Text = "text"
}
/** Helps in determining the placement of the term in quote layout. */
export declare enum TermDetailSectionType {
    Footer = "footer",
    HeaderLeft = "header_left",
    HeaderRight = "header_right",
    Introduction = "introduction",
    LogoLeft = "logo_left",
    LogoRight = "logo_right"
}
/**
 * term-duration
 * Captures the time duration in terms of years, months and days.
 */
export interface TermDuration {
    /**
     * Number of days in the time duration.
     * @format int32
     */
    days?: number;
    /**
     * Number of months in the time duration.
     * @format int32
     */
    months?: number;
    /**
     * Number of years in the time duration.
     * @format int32
     */
    years?: number;
}
/**
 * text-link
 * Text link.
 */
export interface TextLink {
    /** If text links are enabled. */
    enabled?: boolean;
    /** Name of the link. */
    name?: string;
    /** URL of the text link. */
    url?: string;
}
/** ticket */
export type Ticket = WorkBase & {
    account?: AccountSummary;
    /** Part versions relevant to the work. */
    applies_to_versions?: string[];
    /** Channels of the ticket. */
    channels?: TicketChannels[];
    group?: GroupSummary;
    /** Whether interactions are enabled for the ticket. */
    interaction_enabled?: boolean;
    interaction_id?: AtomSummary;
    /** Whether the ticket is spam. */
    is_spam?: boolean;
    /** Whether the ticket needs an response. */
    needs_response?: boolean;
    rev_org?: OrgSummary;
    /** Severity of the ticket. */
    severity?: TicketSeverity;
    sla?: SlaSummary;
    /** SLA summary for the object. */
    sla_summary?: ArchetypeSlaSummary;
    sla_tracker?: SlaTrackerSummary;
    /** Source channel of the ticket. */
    source_channel?: string;
    /** Aggregate of surveys responses. */
    surveys_aggregation?: ArchetypeSurveyAggregation[];
};
/** Channels of the ticket. */
export declare enum TicketChannels {
    Email = "email",
    Plug = "plug",
    Slack = "slack",
    Twilio = "twilio"
}
/**
 * ticket-creation-group
 * Preferences group for Ticket creation.
 */
export interface TicketCreationGroup {
    /**
     * Allow rev users to select a part other than the default part for a
     * ticket.
     */
    allow_custom_part_selection_for_rev_users?: boolean;
    default_ticket_owner_id?: UserSummary;
    default_ticket_part_id?: PartSummary;
    /** Part types available for rev users to select from. */
    part_types_available_for_rev_users?: TicketCreationGroupPartTypesAvailableForRevUsers;
}
/** Part types available for rev users to select from. */
export declare enum TicketCreationGroupPartTypesAvailableForRevUsers {
    Capability = "capability",
    Enhancement = "enhancement",
    Feature = "feature",
    Product = "product"
}
/** Severity of the ticket. */
export declare enum TicketSeverity {
    Blocker = "blocker",
    High = "high",
    Low = "low",
    Medium = "medium"
}
/** ticket-summary */
export type TicketSummary = WorkBaseSummary & {
    account?: AccountSummary;
    interaction_id?: AtomSummary;
    rev_org?: OrgSummary;
    /** Severity of the ticket. */
    severity?: TicketSeverity;
};
/**
 * time-range
 * A time range object.
 */
export interface TimeRange {
    /**
     * Timestamp representing the end of the time range.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    end_time: string;
    /**
     * Timestamp representing the start of the time range.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    start_time: string;
}
/** timeline-change-event */
export type TimelineChangeEvent = TimelineEntryBase & {
    /** A timeline event. */
    event?: TimelineEvent;
};
/** timeline-change-event-summary */
export type TimelineChangeEventSummary = TimelineEntryBaseSummary;
/** timeline-comment */
export type TimelineComment = TimelineEntryBase & {
    /** The artifacts for the comment. */
    artifacts?: ArtifactSummary[];
    /** The attachments for the comment. */
    attachments?: ArtifactSummary[];
    /**
     * The comment's body. If the comment has been deleted, then no body
     * will appear in the response.
     */
    body?: string;
    /** The type of the body to use for the comment. */
    body_type?: TimelineCommentBodyType;
    /** The previews of the links in the comment. */
    link_previews?: SnapWidgetSummary[];
    /**
     * The date when the timeline comment was created within DevRev, but
     * only set when the creation date differs from the DevRev creation
     * date. For example, if the timeline comment was imported from
     * another system, the created date will reflect the original creation
     * and this will indicate the date when the timeline comment was
     * imported.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    platform_created_date?: string;
    /** The objects referenced in the comment. */
    references?: AtomSummary[];
    /** Snap Kit Body of the comment. */
    snap_kit_body?: TimelineSnapKitBody;
    /** The snap widget body of the comment. */
    snap_widget_body?: SnapWidget[];
};
/** The type of the body to use for the comment. */
export declare enum TimelineCommentBodyType {
    SnapKit = "snap_kit",
    SnapWidget = "snap_widget",
    Text = "text"
}
/** timeline-comment-summary */
export type TimelineCommentSummary = TimelineEntryBaseSummary;
/** Describes collections of timeline entries. */
export declare enum TimelineEntriesCollection {
    Comments = "comments",
    Discussions = "discussions",
    Events = "events"
}
/**
 * timeline-entries-create-request
 * The request to create a timeline entry for an object.
 */
export type TimelineEntriesCreateRequest = (TimelineEntriesCreateRequestTimelineChangeEvent | TimelineEntriesCreateRequestTimelineComment) & {
    /**
     * The collection(s) that the entry belongs to, otherwise if not
     * provided, then the entry's default collection is used.
     */
    collections?: TimelineEntriesCollection[];
    /**
     * If set, then the entry is ephemeral and will be deleted after the
     * provided time. The minimum value should be at least a minute more
     * than the current timestamp.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    expires_at?: string;
    /**
     * The labels to be associated with the entry.
     * @minLength 1
     * @maxLength 64
     * @maxItems 16
     */
    labels?: string[];
    /**
     * The ID of the object to create the timeline entry for.
     * @example "PROD-12345"
     */
    object: string;
    /**
     * If the visibility of the entry is private, this specifies the users
     * that the entry is private to. Note the creator is always implicitly
     * included in this list.
     * @example ["DEVU-12345"]
     */
    private_to?: string[];
    type: TimelineEntriesCreateRequestType;
    /**
     * The visibility of the entry. If 'private', then the entry is only
     * visible to the creator, 'internal' is visible with the Dev
     * organization, 'external' is visible to the Dev organzation and Rev
     * users, and 'public' is visible to all. If not set, then the default
     * visibility is 'external'.
     */
    visibility?: TimelineEntryVisibility;
};
/** timeline-entries-create-request-timeline-change-event */
export interface TimelineEntriesCreateRequestTimelineChangeEvent {
    change_event: TimelineEntriesCreateRequestTimelineChangeEventChangeEvent;
}
/** timeline-entries-create-request-timeline-change-event-change-event */
export type TimelineEntriesCreateRequestTimelineChangeEventChangeEvent = MicroflowActionEvent & {
    type: TimelineEntriesCreateRequestTimelineChangeEventChangeEventType;
};
export declare enum TimelineEntriesCreateRequestTimelineChangeEventChangeEventType {
    MicroflowAction = "microflow_action"
}
/** timeline-entries-create-request-timeline-comment */
export interface TimelineEntriesCreateRequestTimelineComment {
    /**
     * The IDs of the artifacts attached to the comment.
     * @maxItems 50
     * @example ["ARTIFACT-12345"]
     */
    artifacts?: string[];
    /** The comment's body. */
    body?: string;
    /** The type of the body to use for the comment. */
    body_type?: TimelineCommentBodyType;
    /**
     * The external reference for the comment. This must be unique within
     * the object's timeline.
     */
    external_ref?: string;
    /**
     * The IDs of the previews of the links posted in the comment.
     * @example ["don:core:<partition>:devo/<dev-org-id>:snap_widget/<snap-widget-id>"]
     */
    link_previews?: string[];
    /** Snap Kit Body of the comment. */
    snap_kit_body?: TimelineSnapKitBody;
    /**
     * The snap widget body of the comment.
     * @example ["don:core:<partition>:devo/<dev-org-id>:snap_widget/<snap-widget-id>"]
     */
    snap_widget_body?: string[];
}
export declare enum TimelineEntriesCreateRequestType {
    TimelineChangeEvent = "timeline_change_event",
    TimelineComment = "timeline_comment"
}
/**
 * timeline-entries-create-response
 * The response to creating a timeline entry for an object.
 */
export interface TimelineEntriesCreateResponse {
    timeline_entry: TimelineEntry;
}
/**
 * timeline-entries-delete-request
 * The request to delete a timeline entry from an object.
 */
export interface TimelineEntriesDeleteRequest {
    /**
     * The ID of the timeline entry to delete.
     * @example "don:core:<partition>:devo/<dev-org-id>:ticket/123:timeline_event/<timeline-event-id>"
     */
    id: string;
}
/**
 * timeline-entries-delete-response
 * The response to deleting a timeline entry from an object.
 */
export type TimelineEntriesDeleteResponse = object;
/**
 * timeline-entries-get-request
 * The request to get a timeline entry.
 */
export interface TimelineEntriesGetRequest {
    /**
     * If set, then gets the entry with the given external reference for
     * the provided entry ID's timeline.
     */
    external_ref?: string;
    /**
     * The ID of the timeline entry to get.
     * @example "don:core:<partition>:devo/<dev-org-id>:ticket/123:timeline_event/<timeline-event-id>"
     */
    id: string;
}
/**
 * timeline-entries-get-response
 * The request to getting a timeline entry.
 */
export interface TimelineEntriesGetResponse {
    timeline_entry: TimelineEntry;
}
/**
 * timeline-entries-list-request
 * The request to list timeline entries for an object.
 */
export interface TimelineEntriesListRequest {
    /**
     * The collection(s) to list entries from, otherwise if not provided,
     * all entries are returned.
     */
    collections?: TimelineEntriesCollection[];
    /**
     * The created date to start iteration from. If not provided, then
     * iteration starts from the beginning. Mutually exclusive with
     * `cursor`.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_date_cursor?: string;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The entry to begin iteration from (inclusive). If provided, then no
     * cursor should be set.
     * @example "don:core:<partition>:devo/<dev-org-id>:ticket/123:timeline_event/<timeline-event-id>"
     */
    entry?: string;
    /**
     * Filters for entries containing at least one of the provided labels,
     * otherwise if no labels are provided, then no label filtering is
     * done.
     * @minLength 1
     * @maxLength 64
     */
    labels?: string[];
    /**
     * The maximum number of entries to return. If not set, then this
     * defaults to `50`.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /**
     * The ID of the object to list timeline entries for.
     * @example "PROD-12345"
     */
    object?: string;
    /** Filters for entries to be displayed on the provided panel(s). */
    panels?: TimelineEntryPanel[];
    /**
     * The visibility of the timeline entries to filter for. Note this is
     * a strict filter, such that only entries with the exact visibilities
     * specified will be returned.
     */
    visibility?: TimelineEntryVisibility[];
}
/**
 * timeline-entries-list-response
 * The response to listing timeline entries for an object.
 */
export interface TimelineEntriesListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The timeline entries for the object. */
    timeline_entries: TimelineEntry[];
}
/**
 * timeline-entries-update-request
 * The request to update a timeline entry.
 */
export type TimelineEntriesUpdateRequest = TimelineEntriesUpdateRequestTimelineComment & {
    /**
     * The ID of the timeline entry to update.
     * @example "don:core:<partition>:devo/<dev-org-id>:ticket/123:timeline_event/<timeline-event-id>"
     */
    id: string;
    type: TimelineEntriesUpdateRequestType;
};
/** timeline-entries-update-request-timeline-comment */
export interface TimelineEntriesUpdateRequestTimelineComment {
    artifacts?: TimelineEntriesUpdateRequestTimelineCommentArtifacts;
    /** The updated comment's body. */
    body?: string;
    /** The type of the body to use for the comment. */
    body_type?: TimelineCommentBodyType;
    link_previews?: TimelineEntriesUpdateRequestTimelineCommentLinkPreviews;
    /** Snap Kit Body of the comment. */
    snap_kit_body?: TimelineSnapKitBody;
    snap_widget_body?: TimelineEntriesUpdateRequestTimelineCommentSnapWidgetBody;
}
/** timeline-entries-update-request-timeline-comment-artifacts */
export interface TimelineEntriesUpdateRequestTimelineCommentArtifacts {
    /**
     * Adds the provided artifacts to the comment. An artifact cannot be
     * added more than once, i.e. nothing is done if the artifact is
     * already attached. Mutually exclusive with `set`.
     * @maxItems 10
     * @example ["ARTIFACT-12345"]
     */
    add?: string[];
    /**
     * Removes the provided artifacts from the comment. If an artifact is
     * not present, then it's ignored. Mututally exclusive with `set`.
     * @maxItems 10
     * @example ["ARTIFACT-12345"]
     */
    remove?: string[];
    /**
     * Sets the field to the provided artifacts.
     * @maxItems 50
     * @example ["ARTIFACT-12345"]
     */
    set?: string[];
}
/** timeline-entries-update-request-timeline-comment-link-previews */
export interface TimelineEntriesUpdateRequestTimelineCommentLinkPreviews {
    /**
     * Adds the provided link previews to the comment. A link preview
     * cannot be added more than once, i.e. nothing is done if the link
     * preview is already present. Mutually exclusive with `set`.
     * @example ["don:core:<partition>:devo/<dev-org-id>:snap_widget/<snap-widget-id>"]
     */
    add?: string[];
    /**
     * Removes the provided link previews from the comment. If a link
     * preview is not present, then it's ignored. Mutually exclusive with
     * `set`.
     * @example ["don:core:<partition>:devo/<dev-org-id>:snap_widget/<snap-widget-id>"]
     */
    remove?: string[];
    /**
     * Set the link previews to the provided IDs.
     * @example ["don:core:<partition>:devo/<dev-org-id>:snap_widget/<snap-widget-id>"]
     */
    set?: string[];
}
/** timeline-entries-update-request-timeline-comment-snap-widget-body */
export interface TimelineEntriesUpdateRequestTimelineCommentSnapWidgetBody {
    /**
     * Adds the provided snap widget bodies to the comment. A snap widget
     * body cannot be added more than once, i.e. nothing is done if the
     * snap widget body is already present. Mutually exclusive with `set`.
     * @example ["don:core:<partition>:devo/<dev-org-id>:snap_widget/<snap-widget-id>"]
     */
    add?: string[];
    /**
     * Removes the provided snap widget body from the comment. If a snap
     * widget body is not present, then it's ignored. Mutually exclusive
     * with `set`.
     * @example ["don:core:<partition>:devo/<dev-org-id>:snap_widget/<snap-widget-id>"]
     */
    remove?: string[];
    /**
     * Set the snap widget body to the provided IDs.
     * @example ["don:core:<partition>:devo/<dev-org-id>:snap_widget/<snap-widget-id>"]
     */
    set?: string[];
}
export declare enum TimelineEntriesUpdateRequestType {
    TimelineComment = "timeline_comment"
}
/**
 * timeline-entries-update-response
 * The response to updating a timeline entry.
 */
export interface TimelineEntriesUpdateResponse {
    timeline_entry: TimelineEntry;
}
/** timeline-entry */
export type TimelineEntry = (TimelineChangeEvent | TimelineComment | TimelineHuddle) & {
    type: TimelineEntryType;
};
/** timeline-entry-base */
export type TimelineEntryBase = AtomBase & {
    /** The collections that the timeline entry belongs to. */
    collections?: TimelineEntryCollection[];
    created_by_agent?: UserSummary;
    /**
     * An external reference that's associated with the Timeline entry
     * that's guaranteed to be unique among its siblings.
     */
    external_ref?: string;
    /**
     * Represents if the parent entry is deleted but still has threaded
     * child entries.
     */
    is_tombstone?: boolean;
    /** Labels that are associated with the Timeline entry. */
    labels?: string[];
    modified_by_agent?: UserSummary;
    /** The object that the Timeline entry belongs to. */
    object: string;
    /** The display ID of the object that the Timeline entry belongs to. */
    object_display_id: string;
    /** The type of object that the Timeline entry belongs to. */
    object_type?: TimelineEntryObjectType;
    /** Display panels for the Timeline entry. */
    panels?: TimelineEntryPanel[];
    /** Information about a pinned entry. */
    pin?: TimelinePin;
    /** The reactions to the entry. */
    reactions?: TimelineReaction[];
    /** Thread. */
    thread?: TimelineThread;
    /**
     * The visibility of the entry. If 'private', then the entry is only
     * visible to the creator, 'internal' is visible with the Dev
     * organization, 'external' is visible to the Dev organzation and Rev
     * users, and 'public' is visible to all. If not set, then the default
     * visibility is 'external'.
     */
    visibility?: TimelineEntryVisibility;
};
/** timeline-entry-base-summary */
export type TimelineEntryBaseSummary = AtomBaseSummary;
/** The collections that the timeline entry belongs to. */
export declare enum TimelineEntryCollection {
    Discussions = "discussions",
    Events = "events"
}
/** The type of object that the Timeline entry belongs to. */
export declare enum TimelineEntryObjectType {
    Account = "account",
    Article = "article",
    Capability = "capability",
    Channel = "channel",
    CodeChange = "code_change",
    Component = "component",
    Conversation = "conversation",
    CustomPart = "custom_part",
    CustomWork = "custom_work",
    Dataset = "dataset",
    Engagement = "engagement",
    Enhancement = "enhancement",
    Feature = "feature",
    Flow = "flow",
    Incident = "incident",
    Interaction = "interaction",
    Invoice = "invoice",
    Issue = "issue",
    Keyring = "keyring",
    Linkable = "linkable",
    MarketplaceSubmission = "marketplace_submission",
    Meeting = "meeting",
    Microservice = "microservice",
    OasisData = "oasis_data",
    Opportunity = "opportunity",
    Product = "product",
    Project = "project",
    Quote = "quote",
    RevOrg = "rev_org",
    RevUser = "rev_user",
    Runnable = "runnable",
    SnapIn = "snap_in",
    SyncUnit = "sync_unit",
    Task = "task",
    Ticket = "ticket",
    TimelineChangeEvent = "timeline_change_event",
    TimelineComment = "timeline_comment",
    TimelineHuddle = "timeline_huddle"
}
/** Display panels for the Timeline entry. */
export declare enum TimelineEntryPanel {
    CustomerChat = "customer_chat",
    Discussions = "discussions",
    Events = "events"
}
export declare enum TimelineEntryType {
    TimelineChangeEvent = "timeline_change_event",
    TimelineComment = "timeline_comment",
    TimelineHuddle = "timeline_huddle"
}
/**
 * The visibility of the entry. If 'private', then the entry is only
 * visible to the creator, 'internal' is visible with the Dev
 * organization, 'external' is visible to the Dev organzation and Rev
 * users, and 'public' is visible to all. If not set, then the default
 * visibility is 'external'.
 */
export declare enum TimelineEntryVisibility {
    External = "external",
    Internal = "internal",
    Private = "private",
    Public = "public"
}
/**
 * timeline-event
 * A timeline event.
 */
export interface TimelineEvent {
    /** Base event for annotated type event. */
    annotated?: EventAnnotated;
    /** A creation event. */
    created?: EventCreated;
    /** A deletion event. */
    deleted?: EventDeleted;
    /** A linking event. */
    linked?: EventLinked;
    /** The type of the event. */
    type?: TimelineEventType;
    /** An update event. */
    updated?: EventUpdated;
}
/** The type of the event. */
export declare enum TimelineEventType {
    Annotated = "annotated",
    Created = "created",
    Deleted = "deleted",
    Linked = "linked",
    Updated = "updated"
}
/** timeline-huddle */
export type TimelineHuddle = TimelineEntryBase & {
    status: TimelineHuddleStatus;
};
/**
 * timeline-huddle-created
 * Describes a huddle that was created but has not yet started.
 */
export type TimelineHuddleCreated = object;
/**
 * timeline-huddle-ended
 * Describes a huddle entry that has ended.
 */
export interface TimelineHuddleEnded {
    /**
     * The timestamp when the huddle had ended.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    ended_date: string;
    /**
     * A subset of the participants in the huddle, which are the users
     * that joined the huddle at some point during its lifetime.
     */
    participants?: UserSummary[];
    /**
     * The timestamp when the huddle had started.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    started_date: string;
    /**
     * The total number of participants.
     * @format int32
     */
    total_participants?: number;
}
/**
 * timeline-huddle-started
 * Describes a huddle that has started.
 */
export interface TimelineHuddleStarted {
    /** The ID of the room for the huddle. */
    room?: string;
    /**
     * The timestamp when the huddle was started.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    started_date: string;
    /**
     * The total number of users in the huddle.
     * @format int32
     */
    total_users?: number;
    /** A subset of the users that are in the huddle. */
    users?: UserSummary[];
}
/** timeline-huddle-status */
export type TimelineHuddleStatus = (TimelineHuddleCreated | TimelineHuddleEnded | TimelineHuddleStarted) & {
    type: TimelineHuddleStatusType;
};
export declare enum TimelineHuddleStatusType {
    Created = "created",
    Ended = "ended",
    Started = "started"
}
/** timeline-huddle-summary */
export type TimelineHuddleSummary = TimelineEntryBaseSummary;
/** timeline-info */
export interface TimelineInfo {
    /** Details about the user's Timeline marks for the object. */
    marks?: TimelineInfoMark[];
}
/** timeline-info-mark */
export interface TimelineInfoMark {
    /**
     * The timestamp of the latest Timeline entry for the panel, otherwise
     * not set if unknown.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    latest?: string;
    /**
     * The timestamp of when the user last marked the Timeline panel,
     * otherwise not set if unknown.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    marked?: string;
    /** Display panels for the Timeline entry. */
    panel: TimelineEntryPanel;
    /**
     * Timeline mark information about the user's peers. If a user is not
     * present in this list, then the mark is unknown.
     */
    peers?: TimelineInfoMarkPeer[];
}
/** timeline-info-mark-peer */
export interface TimelineInfoMarkPeer {
    /**
     * The timestamp of when the peer user last marked the Timeline panel.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    marked: string;
    /**
     * The ID of the peer user.
     * @example "DEVU-12345"
     */
    user: string;
}
/**
 * timeline-pin
 * Information about a pinned entry.
 */
export interface TimelinePin {
    pinned_by?: UserSummary;
    /**
     * Time when the object was pinned.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    pinned_date?: string;
}
/**
 * timeline-reaction
 * Reaction.
 */
export interface TimelineReaction {
    /** The reaction emoji's unicode codepoint, e.g. "1f44d". */
    emoji?: string;
    /** Whether the requesting user reacted. */
    reacted?: boolean;
    reference?: EmojiSummary;
    /**
     * The total number of users with this reaction.
     * @format int32
     */
    total_users?: number;
}
/**
 * timeline-snap-kit-body
 * Snap Kit Body of the comment.
 */
export interface TimelineSnapKitBody {
    /** The JSON body of the SnapKit. */
    body?: object;
    /**
     * The name of an action defined in the SnapIn. The combination of
     * snap_in_id and snap_in_action_name uniquely identifies the
     * interaction object which is to be called when actions on a snapkit
     * element is taken.
     */
    snap_in_action_name?: string;
    /** ID of the snap-in which created the SnapKit. */
    snap_in_id?: string;
}
/**
 * timeline-thread
 * Thread.
 */
export interface TimelineThread {
    /**
     * A subset of the first users in the thread. They will be ordered by
     * their appearance, beginning from the first reply and onwards. This
     * should be used only as a hint and should not be relied upon to be
     * present.
     */
    first_replies_by: UserSummary[];
    last_reply_by?: UserSummary;
    /**
     * Time of the last reply.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    last_reply_date?: string;
    /**
     * The total number of replies in the thread.
     * @format int32
     */
    total_replies?: number;
    /**
     * The total number of unique users in the thread.
     * @format int32
     */
    total_users?: number;
}
/**
 * token-fields
 * Defines the fields that are required for the  Basic Auth connection /
 * multi-field Secret connection.
 */
export interface TokenFields {
    /** Provide a brief description of the field. */
    description?: string;
    /** Unique identifier for the field. */
    id?: string;
    /** Indicate whether the field is optional. */
    is_optional?: boolean;
    /** Specify the name of the field. This name will be used in the UI. */
    name?: string;
}
/** track-event */
export interface TrackEvent {
    /** Properties of client to be used in track API. */
    client_context?: ClientContext;
    /** Unique ID for the event. */
    event_id?: string;
    /**
     * The timestamp at which the event occurred.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    event_time?: string;
    /** Name of the event. */
    name: string;
    /** Payload of the event */
    payload: object;
}
/** track-events-publish-request */
export interface TrackEventsPublishRequest {
    events_list: TrackEvent[];
}
/** track-events-publish-response */
export type TrackEventsPublishResponse = object;
/** translate-request */
export interface TranslateRequest {
    /** The content to translate. */
    contents: TranslateRequestContent[];
    /**
     * The language of the input text, if not set the API will attempt to
     * identify it.
     */
    input_language?: string;
    /** The format of the source text, for example, 'text/html'. */
    mime_type?: string;
    /** The language to use for translation of the input text. */
    target_language: string;
}
/** translate-request-content */
export interface TranslateRequestContent {
    /** A unique identifier for the text, for example, 'comment_id'. */
    key?: string;
    /** The input text to translate. */
    text: string;
}
/** translate-response */
export interface TranslateResponse {
    /** Translated content. */
    translations: Translation[];
}
/** translation */
export interface Translation {
    /**
     * The detected language of the input text when the input language is
     * not specified.
     */
    detected_language?: string;
    /**
     * A unique identifier for the text e.g comment_id. This is copied
     * over from the TranslationRequest content.
     */
    key?: string;
    /** The text translated to target language. */
    text: string;
}
/** translations-languages-list-request */
export type TranslationsLanguagesListRequest = object;
/** translations-languages-list-response */
export interface TranslationsLanguagesListResponse {
    /** The list of languages supported by translation API. */
    languages: LanguageItem[];
}
/** translations-list-request */
export interface TranslationsListRequest {
    /** Filters translations with associated languages. */
    languages: string[];
    /** Filters translations with associated namespaces. */
    namespaces: string[];
}
/** translations-list-response */
export interface TranslationsListResponse {
    /** Translated content. */
    resources: object;
}
/**
 * trial-period
 * The trial period duration during which the services offered in the
 * service plan are not charged.
 */
export interface TrialPeriod {
    /**
     * Trial period end time.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    trial_period_end_time: string;
    /**
     * Trial period start time.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    trial_period_start_time: string;
}
/** trigger-filter */
export interface TriggerFilter {
    /** Filters only active trigger rule nodes. */
    active?: boolean;
    /** Filters on events of trigger rule nodes. */
    events?: string[];
}
/**
 * turing-answers-group
 * Preferences group for Turing Answers.
 */
export interface TuringAnswersGroup {
    activated_bot?: AtomSummary;
    /**
     * Preferred exit message for auto response in case no response is
     * found.
     */
    auto_response_exit_message?: string;
    /** Preferred message to cite sources. */
    cite_sources_message?: string;
    default_ticket_part_id?: PartSummary;
    /** Allow DevRev Turing bot in a conversation. */
    enable_auto_response?: boolean;
    /** Allow customized DevRev Turing in a conversation. */
    enable_custom_bot?: boolean;
    /** Preference for QA generation. */
    enable_qa_generation?: QaGeneration;
    /** Allow use of QA as a source. */
    enable_qa_source?: boolean;
    /** Allow suggestions given by DevRev Turing in a conversation. */
    enable_suggestions?: boolean;
    /**
     * Turing bot exit action when Turing is unable to deflect the
     * conversation.
     */
    exit_action?: TuringAnswersGroupExitAction;
    /** Language preference for Turing Answers. */
    language?: TuringAnswersGroupLanguage;
    notify_group_id?: GroupSummary;
    /** Preferred exit message for suggestion in case no response is found. */
    suggestion_exit_message?: string;
}
/**
 * Turing bot exit action when Turing is unable to deflect the
 * conversation.
 */
export declare enum TuringAnswersGroupExitAction {
    CreateTicket = "create_ticket",
    RouteConversation = "route_conversation"
}
/** Language preference for Turing Answers. */
export declare enum TuringAnswersGroupLanguage {
    English = "english",
    Spanish = "spanish"
}
/**
 * turing-rte-request
 * Turing RTE request.
 */
export type TuringRteRequest = (TuringRteRequestChangeTone | TuringRteRequestFixGrammar | TuringRteRequestLengthen | TuringRteRequestShorten) & {
    action: TuringRteRequestAction;
    /** Portion of the text after the highlighted text. */
    after_text: string;
    /** Portion of the text before the highlighted text. */
    before_text: string;
    /** Portion of the text highlighted by the user. */
    highlighted_text: string;
};
export declare enum TuringRteRequestAction {
    ChangeTone = "change_tone",
    FixGrammar = "fix_grammar",
    Lengthen = "lengthen",
    Shorten = "shorten"
}
/**
 * turing-rte-request-change-tone
 * Change the tone of the highlighted text.
 */
export interface TuringRteRequestChangeTone {
    tone: TuringRteRequestChangeToneTone;
}
export declare enum TuringRteRequestChangeToneTone {
    Casual = "casual",
    Friendly = "friendly",
    Professional = "professional"
}
/**
 * turing-rte-request-fix-grammar
 * Fixes the grammar of the highlighted text.
 */
export type TuringRteRequestFixGrammar = object;
/**
 * turing-rte-request-lengthen
 * Makes the highlighted text longer.
 */
export type TuringRteRequestLengthen = object;
/**
 * turing-rte-request-shorten
 * Shorten the highlighted text.
 */
export type TuringRteRequestShorten = object;
/**
 * turing-rte-response
 * Response object for RTE interactions. This is the payload of each event
 * in the SSE stream.
 */
export interface TuringRteResponse {
    suggestion: string;
}
/** turing-sources */
export type TuringSources = (ArticleSummary | QuestionAnswerSummary) & {
    type: TuringSourcesType;
};
export declare enum TuringSourcesType {
    Article = "article",
    QuestionAnswer = "question_answer"
}
/**
 * turing-spacebar-request
 * Turing Spacebar request.
 */
export interface TuringSpacebarRequest {
    /**
     * The input text.
     * @minLength 1
     */
    input: string;
}
/**
 * turing-spacebar-response
 * Turing Spacebar response.
 */
export interface TuringSpacebarResponse {
    action?: TuringSpacebarResponseSpacebarAction;
    /** The answer to the prompt input by user. */
    answer?: string;
    command?: TuringSpacebarResponseCommand;
    /** The error message to be shown to the user on failure */
    error_message?: string;
    heart_beat?: Empty;
    /** The progress message to be shown to the user. */
    progress_message?: string;
    /** The answer to the prompt input by user in snap-kit JSON format. */
    snapkit_answer?: object;
}
/** turing-spacebar-response-command */
export interface TuringSpacebarResponseCommand {
    /**
     * The command metadata in JSON format in response to the prompt input
     * by user.
     */
    metadata: object;
    name: TuringSpacebarResponseCommandNameValue;
}
export declare enum TuringSpacebarResponseCommandNameValue {
    Capi = "capi",
    Grow = "grow",
    SqlQueryBuilder = "sql_query_builder",
    Widget = "widget"
}
/** turing-spacebar-response-spacebar-action */
export interface TuringSpacebarResponseSpacebarAction {
    /** ID of the action to be executed. */
    id: string;
    /** Payload of the action to be executed. */
    payload: object;
}
/**
 * turing-suggestions-request
 * Turing suggestions request.
 */
export interface TuringSuggestionsRequest {
    /** The input text. */
    input?: string;
}
/**
 * turing-suggestions-response
 * Turing suggestions response.
 */
export interface TuringSuggestionsResponse {
    suggestions: TuringSuggestionsResponseSuggestion[];
}
/**
 * turing-suggestions-response-suggestion
 * A suggestion.
 */
export interface TuringSuggestionsResponseSuggestion {
    /** The corresponding prompt for the suggestion. */
    prompt: string;
    /** The displayed text for the suggestion. */
    text: string;
}
/** Interface of interaction with Turing. */
export declare enum TuringSurface {
    Conversation = "conversation",
    Plug = "plug",
    Portal = "portal",
    Spacebar = "spacebar",
    Unknown = "unknown",
    Wedge = "wedge"
}
/**
 * type-ahead-context
 * Fields required for typeahead recommendation.
 */
export interface TypeAheadContext {
    /**
     * The part that the work applies to.
     * @example "PROD-12345"
     */
    applies_to_part?: string;
    /**
     * The part that the work applies to.
     * @deprecated
     * @example "PROD-12345"
     */
    applies_to_part_id?: string;
    /** Text context is used to represent the context for any text field. */
    body?: TypeAheadContextTextContext;
    /** Text context is used to represent the context for any text field. */
    title?: TypeAheadContextTextContext;
}
/**
 * type-ahead-context-text-context
 * Text context is used to represent the context for any text field.
 */
export interface TypeAheadContextTextContext {
    /** The text after the cursor. */
    after?: string;
    /** The text before the cursor. */
    before?: string;
}
/**
 * type-ahead-request
 * Typeahead request.
 */
export interface TypeAheadRequest {
    /** User action types. */
    action?: UserAction;
    /** Fields required for typeahead recommendation. */
    context: TypeAheadContext;
    /** Field types for typeahead recommendation. */
    requested_field: TypeAheadRequestedField;
}
/** Field types for typeahead recommendation. */
export declare enum TypeAheadRequestedField {
    Body = "body",
    Title = "title"
}
/**
 * type-ahead-response
 * Typeahead response.
 */
export interface TypeAheadResponse {
    /** The text recommedation returned by typeahead. */
    body: TypeAheadResponseTextRecommendation;
    /** The text recommedation returned by typeahead. */
    title: TypeAheadResponseTextRecommendation;
    /** The version of the type ahead model. */
    version?: string;
}
/**
 * type-ahead-response-text-recommendation
 * The text recommedation returned by typeahead.
 */
export interface TypeAheadResponseTextRecommendation {
    /** The text after the cursor. */
    after: string;
    /** The text before the cursor. */
    before: string;
    /** The text recommendation. */
    recommendation: string;
}
/**
 * unit
 * Unit encapsulates the name of the unit and the type of the unit. For
 * example, '#Number of API calls' where name is 'number_of_api_calls' and
 * type is 'number'.
 */
export interface Unit {
    /**
     * This represents human readable unit name of the UOM For example,
     * number of API calls.
     */
    name: string;
    /**
     * This defines the UOM unit type. For example, for 'number of video
     * calls', unit type will be a number.
     */
    type: UnitType;
}
/**
 * unit-summary
 * Unit encapsulates the name of the unit and the type of the unit. For
 * example, '#Number of API calls' where name is 'number_of_api_calls' and
 * type is 'number'.
 */
export interface UnitSummary {
    /**
     * This represents human readable unit name of the UOM For example,
     * number of API calls.
     */
    name: string;
    /**
     * This defines the UOM unit type. For example, for 'number of video
     * calls', unit type will be a number.
     */
    type: UnitType;
}
/**
 * This defines the UOM unit type. For example, for 'number of video
 * calls', unit type will be a number.
 */
export declare enum UnitType {
    Boolean = "boolean",
    Number = "number"
}
/**
 * unlink-rev-user-from-rev-org-request
 * Request to unlink/remove a Rev user from a Rev organization.
 */
export interface UnlinkRevUserFromRevOrgRequest {
    /** The ID of the Rev user. */
    id?: string;
    /**
     * The ID of the Rev organization to unlink the Rev user from.
     * @example "REV-AbCdEfGh"
     */
    rev_org?: string;
}
/**
 * unlink-rev-user-from-rev-org-response
 * Response for unlinking/removing a Rev user from a Rev organization.
 */
export interface UnlinkRevUserFromRevOrgResponse {
    rev_user: RevUser;
}
/** unschedule-data-collection-request */
export interface UnscheduleDataCollectionRequest {
    /**
     * Optional Dev organization ID. This allows running on another Dev
     * organization, as long as the logged in user has access to it.
     * @example "DEV-AbCdEfGh"
     */
    other_dev_org?: string;
}
/** unschedule-data-collection-response */
export type UnscheduleDataCollectionResponse = object;
/** unschedule-discovery-request */
export interface UnscheduleDiscoveryRequest {
    /**
     * Optional Dev organization ID. This allows running on another Dev
     * organization, as long as the logged in user has access to it.
     * @example "DEV-AbCdEfGh"
     */
    other_dev_org?: string;
}
/** unschedule-discovery-response */
export type UnscheduleDiscoveryResponse = object;
/** uom */
export type Uom = AtomBase & {
    /** Stores aggregation type and dimension information. */
    aggregation_details: AggregationDetail;
    /** Description of the UOM. */
    description?: string;
    /**
     * The list of dimensions that can be emitted along with the metering
     * data.
     */
    dimensions?: string[];
    /**
     * If set to true, then the UOM can be configured as part of
     * entitlements in skus and metering data only for the enabled uoms
     * will be passed through the metering pipeline.
     */
    is_enabled: boolean;
    /** Human readable metric name of the UOM. */
    metric_name: string;
    /**
     * The granularity at which the metrics ingestion data is to be emitted
     * for the UOM.
     */
    metric_scope: UomMetricScope;
    /** Human readable name of the UOM. */
    name: string;
    part?: PartSummary;
    product: PartSummary;
    /**
     * Unit encapsulates the name of the unit and the type of the unit. For
     * example, '#Number of API calls' where name is 'number_of_api_calls' and
     * type is 'number'.
     */
    unit: Unit;
};
/**
 * The granularity at which the metrics ingestion data is to be emitted
 * for the UOM.
 */
export declare enum UomMetricScope {
    Org = "org",
    User = "user"
}
/** uom-summary */
export type UomSummary = AtomBaseSummary & {
    /** Stores aggregation type and dimension information. */
    aggregation_details: AggregationDetailSummary;
    /** Human readable metric name of the UOM. */
    metric_name: string;
    /** Human readable name of the UOM. */
    name: string;
    /**
     * Unit encapsulates the name of the unit and the type of the unit. For
     * example, '#Number of API calls' where name is 'number_of_api_calls' and
     * type is 'number'.
     */
    unit: UnitSummary;
};
/** uoms-count-request */
export interface UomsCountRequest {
    /** List of aggregation types for filtering list of UOMs. */
    aggregation_types?: AggregationDetailAggregationType[];
    /**
     * List of Unit of Measurement (UOM) DONs to be used in filtering
     * complete list of UOMs defined in a Dev Org.
     */
    ids?: string[];
    /** List of metric names for filtering list of UOMs. */
    metric_names?: string[];
    /**
     * List of part IDs for filtering list of UOMs.
     * @example ["PROD-12345"]
     */
    part_ids?: string[];
    /**
     * List of product IDs for filtering list of UOMs.
     * @example ["PROD-12345"]
     */
    product_ids?: string[];
    /** List of unit types for filtering list of UOMs. */
    unit_types?: UnitType[];
}
/** uoms-count-response */
export interface UomsCountResponse {
    /**
     * Count of Unit of Measurements matching the filter.
     * @format int32
     */
    count: number;
}
/** uoms-create-request */
export interface UomsCreateRequest {
    /** Stores aggregation type and dimension information. */
    aggregation_detail: AggregationDetail;
    /** Description of the Unit of Measurement (UOM). */
    description?: string;
    /**
     * The list of dimensions that can be emitted as part of metrics data.
     * Dimensions consist of list of key-value pairs. For example, if the
     * UOM is 'number_of_api_calls', then dimensions can be ['api_name',
     * 'api_version'].Dimension keys can only contain alphanumeric
     * characters (A-Z, a-z, and 0-9) and underscores (_). Dimension keys
     * cannot start with a number and is case-insensitive.Dimension keys
     * must be unique and it is not allowed to have more than one value
     * with the same key.Metrics data ingested in DevRev metrics format
     * will be grouped and aggregated based on the dimensions specified in
     * UOM.
     * @minLength 1
     * @maxLength 64
     * @maxItems 12
     */
    dimensions?: string[];
    /**
     * Name of the Unit of Measurement (UOM). Unit of Measurement is a
     * unit of measure defined over a part offered by a Dev Org. A single
     * part can have multiple unit of measurements defined over it. For
     * example, a part can be 'video call', one UOM defined on this can be
     * 'number_of_calls', other UOM can be 'call_duration' etc.Metric name
     * should be unique across all UOMs in a Dev Org.Metric name can only
     * contain alphanumeric characters (A-Z, a-z, and 0-9) and underscores
     * (_). Metric name cannot start with a number and is
     * case-insensitive.
     * @minLength 1
     * @maxLength 64
     */
    metric_name: string;
    /**
     * The granularity at which the metrics ingestion data is to be emitted
     * for the UOM.
     */
    metric_scope: UomMetricScope;
    /** Human readable name of the Unit of Measurement (UOM). */
    name: string;
    /**
     * The part ID for which the Unit of Measurement (UOM) is defined.
     * When defined, ingested metrics data will be associated with part
     * and product specified in UOM.
     * @example "PROD-12345"
     */
    part_id?: string;
    /**
     * The product ID for which the Unit of Measurement (UOM) is defined.
     * @example "PROD-12345"
     */
    product_id: string;
    /**
     * Unit encapsulates the name of the unit and the type of the unit. For
     * example, '#Number of API calls' where name is 'number_of_api_calls' and
     * type is 'number'.
     */
    unit: Unit;
}
/** uoms-create-response */
export interface UomsCreateResponse {
    uom: Uom;
}
/** uoms-delete-request */
export interface UomsDeleteRequest {
    /** The Unit of Measurement (UOM)'s DON. */
    id: string;
}
/** uoms-get-request */
export interface UomsGetRequest {
    /** The Unit of Measurement (UOM)'s DON. */
    id: string;
}
/** uoms-get-response */
export interface UomsGetResponse {
    uom: Uom;
}
/** uoms-list-request */
export interface UomsListRequest {
    /** List of aggregation types for filtering list of UOMs. */
    aggregation_types?: AggregationDetailAggregationType[];
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * List of Unit of Measurement (UOM) DONs to be used in filtering
     * complete list of UOMs defined in a Dev Org.
     */
    ids?: string[];
    /**
     * The maximum number of UOMs to be returned in a response. The
     * default is '50'.
     * @format int32
     */
    limit?: number;
    /** List of metric names for filtering list of UOMs. */
    metric_names?: string[];
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /**
     * List of part IDs for filtering list of UOMs.
     * @example ["PROD-12345"]
     */
    part_ids?: string[];
    /**
     * List of product IDs for filtering list of UOMs.
     * @example ["PROD-12345"]
     */
    product_ids?: string[];
    /**
     * Fields to sort the Unit Of Measuments (UOMs) by and the direction
     * to sort them.
     */
    sort_by?: string[];
    /** List of unit types for filtering list of UOMs. */
    unit_types?: UnitType[];
}
/** uoms-list-response */
export interface UomsListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The list of Unit of Measurement (UOM) objects. */
    uoms: Uom[];
}
/** uoms-update-request */
export interface UomsUpdateRequest {
    /**
     * Aggregation type to be used while aggregating the metering data for the
     * UOM. 1] Sum - sum of all the values for the meter in a given period Ex.
     * { M1:2, M1:4 } => {M1:6} 2] Minimum - min of all the values for the
     * meter in a given period Ex. { M1:2, M1:4 } => {M1:2} 3] Maximum - max
     * of all the values for the meter in a given period Ex. { M1:2, M1:4 } =>
     * {M1:4} 4] Unique Count - Sum of distinct unique dimension observed for
     * the meter in the given period (not considering the data from the
     * previous billing period) Ex. January {M1:{VM:VM0}}, February
     * {M1:{VM:VM1}, M1:{VM:VM2}, M1:{VM:VM1}} => {M1:2} 5] Running Total -
     * Sum of distinct active unique dimension observed for a meter in the
     * given period, taking into consideration the active data from the
     * previous billing cycle Ex. January {M1:{VM:VM0,on}, {M1:{VM:VM1,off}
     * February {M1:{VM:VM2, on}, M1:{VM:VM2, off}, M1:{VM:VM3, on}} => {M1:3}
     * 6] Duration - Sum of distinct active unique dimension duration for a
     * meter in the given period, taking into consideration the active data
     * from the previous month Ex. January15 {M1:{VM:VM0,on, 4}} February15
     * {M1:{VM:VM0,off}, February18 {M1:{VM:VM1,on,5} => M1->
     * 30*4*charge_per_day + 10*5*charge_per_day 7] Latest - consider the
     * latest/last meter in the given period 8] Oldest - consider the
     * oldest/first record in the given period.
     */
    aggregation_type?: AggregationDetailAggregationType;
    /** Description of the Unit of Measurement (UOM). */
    description?: string;
    dimensions?: UomsUpdateRequestDimensions;
    /** The Unit of Measurement (UOM)'s DON. */
    id: string;
    /**
     * Flag used to enable/disable the Unit of Measurement (UOM). When
     * disabled, any metricsrecords ingested against this UOM will be
     * dropped.
     */
    is_enabled?: boolean;
    /** Human readable name of the Unit of Measurement (UOM). */
    name?: string;
    /**
     * The part ID such as feature or capability for which the Unit of
     * Measurement (UOM) is defined.
     * @example "PROD-12345"
     */
    part_id?: string;
    /**
     * The product ID for which the Unit of Measurement (UOM) is defined.
     * @example "PROD-12345"
     */
    product_id?: string;
    /** Unit name of the Unit of Measurement (UOM). */
    unit?: string;
}
/** uoms-update-request-dimensions */
export interface UomsUpdateRequestDimensions {
    /** Adds the provided dimensions to the UOM. */
    add?: string[];
    /** Removes the provided dimensions from the UOM. */
    remove?: string[];
}
/** uoms-update-response */
export interface UomsUpdateResponse {
    uom: Uom;
}
/**
 * update-allowed-currency-item
 * Update object for AllowedCurrencyItem.
 */
export interface UpdateAllowedCurrencyItem {
    /** Currency code. */
    currency_code?: string;
    /** Exchange rate of this currency with respect to the base currency. */
    currency_exchange_rate?: string;
    /** Is this currency deprecated. */
    is_deprecated?: boolean;
}
/**
 * update-analytics-group
 * Update object for AnalyticsGroup.
 */
export interface UpdateAnalyticsGroup {
    /** Segment profile access token for the organization. */
    segment_profile_access_token?: string;
    /** Segment space id for the organization. */
    segment_space_id?: string;
}
/**
 * update-app-preferences-group
 * Update object for AppPreferencesGroup.
 */
export interface UpdateAppPreferencesGroup {
    /** Default app to open on login */
    default_app?: string;
}
/**
 * update-auth-preferences
 * Update object for AuthPreferences.
 */
export interface UpdateAuthPreferences {
    /** Just in Time (JIT) rev user provisioning type. */
    jit_rev_user_provisioning?: AuthPreferencesJitRevUserProvisioning;
    /** Login method for authenticating customers to the rev user portal. */
    login_method?: AuthPreferencesLoginMethod;
    /** Redirect URL to authenticate customers to the rev user portal. */
    login_url?: string;
}
/**
 * update-availability-preferences-group
 * Update object for AvailabilityPreferencesGroup.
 */
export interface UpdateAvailabilityPreferencesGroup {
    /** Manually set presence to away */
    manual_away?: boolean;
}
/** update-bar-visualization-x-axis */
export interface UpdateBarVisualizationXAxis {
    color?: UpdateVisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: UpdateVisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name?: string;
}
/** update-bar-visualization-y-axis */
export interface UpdateBarVisualizationYAxis {
    color?: UpdateVisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: UpdateVisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name?: string;
}
/** update-bar-widget-visualization */
export interface UpdateBarWidgetVisualization {
    /** Whether the bar should be stacked. */
    is_stacked?: boolean;
    /** The configuration for the X-axis. */
    x?: UpdateBarVisualizationXAxis[];
    /** The configuration for the Y-axes. */
    y?: UpdateBarVisualizationYAxis[];
}
/**
 * update-bot-from-yaml-request
 * The request to update bot from the yaml.
 */
export interface UpdateBotFromYamlRequest {
    /** Bot configuration in yaml format. */
    yaml: string;
}
/**
 * update-bot-from-yaml-response
 * Update bot from yaml response.
 */
export type UpdateBotFromYamlResponse = object;
/** update-column-visualization-x-axis */
export interface UpdateColumnVisualizationXAxis {
    color?: UpdateVisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: UpdateVisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name?: string;
}
/** update-column-visualization-y-axis */
export interface UpdateColumnVisualizationYAxis {
    color?: UpdateVisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: UpdateVisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name?: string;
}
/** update-column-widget-visualization */
export interface UpdateColumnWidgetVisualization {
    /** Whether the columns should be stacked. */
    is_stacked?: boolean;
    /** The configuration for the X-axis. */
    x?: UpdateColumnVisualizationXAxis[];
    /** The configuration for the Y-axes. */
    y?: UpdateColumnVisualizationYAxis[];
}
/** update-command-action */
export interface UpdateCommandAction {
    action_details?: UpdateCommandActionDetails;
    /**
     * The raw code to execute, defined in the language specified by
     * executor
     */
    code?: string;
    /** Executor specific config */
    executor_config?: object;
    /**
     * The message to populate in discussion box, when the command is
     * selected to execute.
     */
    message?: string;
    /**
     * Function containing logic for the command. If function ID is
     * specified the executor config is ignored and command is executed by
     * functions.
     */
    snap_in_function_id?: string;
    /** The template engine for resolving message. */
    template_type?: CommandActionTemplateType;
}
/** update-command-action-details */
export interface UpdateCommandActionDetails {
    /** The payload to update the object in context upon command execution. */
    object_update_payload?: object;
}
/** update-command-surface */
export interface UpdateCommandSurface {
    /** Objects types on which a command can be invoked */
    object_types?: CommandSurfaceObjectTypes[];
    /**
     * Surfaces from where this command can be invoked. In future this will be
     * extended to add more places like list views and events from where a
     * command can be invoked.
     */
    surface?: CommandSurfaceSurface;
}
/**
 * update-contacts-preferences-group
 * Update object for ContactsPreferencesGroup.
 */
export interface UpdateContactsPreferencesGroup {
    /** Assign each new user an individual account. */
    account_provision_for_contacts_via_public_aat?: ContactsPreferencesGroupAccountProvisionForContactsViaPublicAat;
    /** Enable account creation for contacts. */
    enable_auto_create_account_for_new_contacts?: boolean;
}
/**
 * update-currency-group
 * Update object for CurrencyGroup.
 */
export interface UpdateCurrencyGroup {
    /** Allowed currencies for the organization. */
    allowed_currencies?: UpdateAllowedCurrencyItem[];
    /** Base currency for the organization. Default is USD. */
    base_currency?: string;
}
/** update-custom-field-widget-column-projection */
export interface UpdateCustomFieldWidgetColumnProjection {
    /** The leaf type of the custom field. */
    leaf_type?: string;
    /** The name of the custom field. */
    name?: string;
    /** The subtype of the custom field. */
    subtype?: string;
}
/**
 * update-custom-tab
 * Update object for CustomTab.
 */
export interface UpdateCustomTab {
    /** If custom tabs are enabled. */
    enabled?: boolean;
    /** Name to display on the tab. */
    name?: string;
    /** URL to redirect to when the tab is clicked. */
    url?: string;
}
/**
 * update-customization-configuration
 * Update object for CustomizationConfiguration.
 */
export interface UpdateCustomizationConfiguration {
    /**
     * Layouts for the portal.
     * @example ["ARTIFACT-12345"]
     */
    layouts?: string[];
    /**
     * Selected layout for the portal.
     * @example "ARTIFACT-12345"
     */
    selected_layout?: string;
    /**
     * Selected global theme for the portal.
     * @example "ARTIFACT-12345"
     */
    selected_theme?: string;
    /**
     * Global themes for the portal.
     * @example ["ARTIFACT-12345"]
     */
    themes?: string[];
}
/** update-dashboard-filter */
export interface UpdateDashboardFilter {
    expression?: UpdateDashboardFilterExpression;
    /**
     * The reference id of the tab, section, or widget to which this
     * filter applies to.
     */
    reference_id?: string;
}
/** update-dashboard-filter-condition */
export interface UpdateDashboardFilterCondition {
    /** The value to be compared. */
    json_value?: object;
    /** The key to be compared. */
    key?: string;
    /** The operator used to compare the key and value. */
    operator?: DashboardFilterConditionOperator;
    part_value?: UpdateDashboardFilterPartCondition;
    relative_date_value?: UpdateDashboardFilterRelativeDateCondition;
    /** The operator used to compare the key and value. */
    value_type?: DashboardFilterConditionValueType;
}
/** update-dashboard-filter-expression */
export interface UpdateDashboardFilterExpression {
    /**
     * The operands used for the logical operation. Each operand can be
     * either a filter  expression or a filter condition.
     */
    operands?: UpdateDashboardFilterOperand[];
    /** The logical operator that binds the filter conditions or expressions. */
    operator?: DashboardFilterExpressionOperator;
}
/** update-dashboard-filter-operand */
export interface UpdateDashboardFilterOperand {
    condition?: UpdateDashboardFilterCondition;
    expression?: UpdateDashboardFilterExpression;
    /**
     * The type of the operand. It can be either a filter expression or a
     * filter condition.
     */
    type?: DashboardFilterOperandType;
}
/** update-dashboard-filter-part-condition */
export interface UpdateDashboardFilterPartCondition {
    /** Whether to include child parts. */
    include_child_parts?: boolean;
    /** The part ids to be compared. */
    part?: string[];
}
/** update-dashboard-filter-relative-date-condition */
export interface UpdateDashboardFilterRelativeDateCondition {
    /** The type of the relative date condition. */
    type?: DashboardFilterRelativeDateConditionType;
    /**
     * The relative time value to be compared.
     * @format int64
     */
    value?: number;
}
/** update-dashboard-section */
export interface UpdateDashboardSection {
    /**
     * A reference ID for the section. It should be unique within the
     * dashboard.
     */
    reference_id?: string;
    /** The title of the section. */
    title?: string;
}
/** update-dashboard-tab */
export interface UpdateDashboardTab {
    /**
     * A reference ID for the tab. It should be unique within the
     * dashboard.
     */
    reference_id?: string;
    /** The title of the tab. */
    title?: string;
}
/** update-dashboard-widget */
export interface UpdateDashboardWidget {
    /**
     * A reference ID for the widget. It should be unique within the
     * dashboard.
     */
    reference_id?: string;
    /**
     * The DON of the widget.
     * @example "VISTA-12345"
     */
    widget?: string;
}
/** update-data-source-join */
export interface UpdateDataSourceJoin {
    /** A reference name for the join. */
    reference_name?: string;
    /** The name of the column in the source data source. */
    source_reference_name?: string;
    /** The name of the column in the target data source. */
    target_reference_name?: string;
}
/** update-discount-details */
export interface UpdateDiscountDetails {
    /** Discounts to be added. */
    create_discounts?: CreateDiscountDetail[];
    /** Discounts to be deleted. */
    delete_discounts?: string[];
    /** Discounts to be updated. */
    update_discounts?: UpdateDiscountDetailsUpdateDiscountDetail[];
}
/** update-discount-details-update-discount-detail */
export interface UpdateDiscountDetailsUpdateDiscountDetail {
    /**
     * The end point of the time range, indicating the date and time at
     * which the object's validity or relevance concludes.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    end_date?: string;
    /** The id of the discount to be updated. */
    id: string;
    /**
     * The starting point of the time range, indicating the date and time
     * from which the object's validity or relevance begins.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    start_date?: string;
    /**
     * Information/Description to be shown when cursor is held over
     * text/icon.
     */
    tooltip?: string;
    /** The type of the discount that is associated. */
    type?: DiscountDetailType;
    /**
     * The value of the discount that is associated.
     * @format double
     */
    value?: number;
}
/** update-discovery-profile-request */
export interface UpdateDiscoveryProfileRequest {
    /** Configuration knobs for extractors. */
    extractors?: Extractors;
    /** The ID of the discovery profile to update. */
    id: string;
    /** Configuration knobs for partitioners and partition mergers. */
    mergers?: DevRevPartitionerMerger;
    /**
     * The updated ID of other data source Dev org to run discovery.
     * @example "DEV-AbCdEfGh"
     */
    other_data_source_dev_org?: string;
    /**
     * Optional Dev organization ID. This allows running on another Dev
     * organization, as long as the logged in user has access to it.
     * @example "DEV-AbCdEfGh"
     */
    other_dev_org?: string;
    /** Configuration knobs for partitioners and partition mergers. */
    partitioners?: DevRevPartitionerMerger;
    /** The updated name of the discovery profile. */
    profile_name?: string;
}
/** update-discovery-profile-response */
export interface UpdateDiscoveryProfileResponse {
    discovery_profile: DiscoveryProfile;
}
/** update-discovery-settings-request */
export interface UpdateDiscoverySettingsRequest {
    /** Configuration knobs for discovery application per devorg. */
    data_collection_app_settings?: DataCollectionAppSettings;
    /** Configuration knobs for discovery application per devorg. */
    discovery_app_settings?: DiscoveryAppSettings;
    /** Discovery profile id associated with devorg. */
    discovery_profile_id?: string;
    /** Discovery GitHub repositories settings for devorg. */
    github_repos?: DiscoveryGithubReposSettings[];
    /**
     * Optional Dev organization ID. This allows running on another Dev
     * organization, as long as the logged in user has access to it.
     * @example "DEV-AbCdEfGh"
     */
    other_dev_org?: string;
}
/** update-discovery-settings-response */
export interface UpdateDiscoverySettingsResponse {
    discovery_settings: DiscoverySettings;
}
/** update-documents */
export interface UpdateDocuments {
    /** Documents to be added. */
    create_documents?: CreateDocument[];
    /**
     * Artifact ids of the documents to be deleted from the list.
     * @example ["ARTIFACT-12345"]
     */
    delete_documents?: string[];
    /** Documents to be updated. */
    update_documents?: UpdateDocumentsUpdateDocument[];
}
/** update-documents-update-document */
export interface UpdateDocumentsUpdateDocument {
    /**
     * Artifact to be updated to the documents list.
     * @example "ARTIFACT-12345"
     */
    artifact_id: string;
    /** Type of the artifact. */
    type?: ArtifactDetailType;
}
/** update-donut-visualization-x-axis */
export interface UpdateDonutVisualizationXAxis {
    color?: UpdateVisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: UpdateVisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name?: string;
}
/** update-donut-visualization-y-axis */
export interface UpdateDonutVisualizationYAxis {
    color?: UpdateVisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: UpdateVisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name?: string;
}
/** update-donut-widget-visualization */
export interface UpdateDonutWidgetVisualization {
    /** The configuration for the X-axis. */
    x?: UpdateDonutVisualizationXAxis[];
    y?: UpdateDonutVisualizationYAxis;
}
/** update-entitlements */
export interface UpdateEntitlements {
    /** Entitlements to be added under the SKU. */
    add_entitlements?: UpdateEntitlementsAddUpdateEntitlement[];
    /**
     * Entitlements to be removed from the SKU. In case, a SKU is
     * versioned orinherited, then entitlements from the parent SKU can be
     * removed.
     */
    remove_entitlements?: UpdateEntitlementsRemoveEntitlement[];
    /**
     * Entitlements to be updated in the SKU. In case, a SKU is versioned
     * orinherited, then entitlements from the parent SKU can be updated.
     */
    update_entitlements?: UpdateEntitlementsAddUpdateEntitlement[];
}
/** update-entitlements-add-update-entitlement */
export interface UpdateEntitlementsAddUpdateEntitlement {
    /** Category to group SKU entitlements together. */
    category?: string;
    /**
     * Duration encapsulates the value of the duration and the type of the
     * duration. For example, 1 day where value is '1' and type is 'day'.
     */
    duration?: Duration;
    /**
     * Quantity, that the entitlement is entitled to use for the specified
     * UOM ID. In case of UOM being a boolean type (like
     * inline_compression, SAML, OAUTH) then quantity will simply be 0/1.
     * @format int32
     */
    quantity?: number;
    /**
     * Scope defines whether the entitlement is at org level or at each user
     * level. Knowing this will help on enforcing them for the given SKU at
     * rev, or at rev user level.
     */
    scope?: EntitlementScope;
    /** UOM ID of entitlement to be added/updated in the SKU. */
    uom_id: string;
}
/** update-entitlements-remove-entitlement */
export interface UpdateEntitlementsRemoveEntitlement {
    /** UOM ID of entitlement to be removed from the SKU. */
    uom_id: string;
}
/** update-event-source-setup-instructions */
export interface UpdateEventSourceSetupInstructions {
    /** Content of the instructions */
    content?: string;
    /** Format in which content is defined. */
    format?: InstructionsFormat;
}
/** update-field-values */
export interface UpdateFieldValues {
    /** Specify the field name. */
    field_name?: string;
    /** Values of the given field. */
    field_value?: object;
}
/** update-flow-name-reference-mapping */
export interface UpdateFlowNameReferenceMapping {
    /**
     * Name by which the object is being referred in the flow. May be
     * different from the value of the `name` field (if present) of the
     * object.
     */
    name?: string;
    /** Reference to the actual object. */
    reference?: string;
}
/** update-flow-name-value-pair */
export interface UpdateFlowNameValuePair {
    /** Name. */
    name?: string;
    /** Value. */
    value?: string;
}
/** update-flow-setup-resource */
export interface UpdateFlowSetupResource {
    resource?: UpdateFlowNameReferenceMapping;
    /** Type of the created resource. */
    resource_type?: SetupResourceResourceType;
}
/**
 * update-general-preferences-group
 * Update object for GeneralPreferencesGroup.
 */
export interface UpdateGeneralPreferencesGroup {
    /** Update object for AppPreferencesGroup. */
    app?: UpdateAppPreferencesGroup;
    /** Update object for AvailabilityPreferencesGroup. */
    availability?: UpdateAvailabilityPreferencesGroup;
    /** Preferred locale of the user. */
    preferred_locale?: GeneralPreferencesGroupPreferredLocale;
}
/** update-global-input */
export interface UpdateGlobalInput {
    /** Name. */
    name?: string;
    /** Value. */
    value?: string;
}
/** update-grid-layout */
export interface UpdateGridLayout {
    /** Layout of the elements within the current element. */
    layout?: UpdateGridLayout[];
    position?: UpdateGridPosition;
    /**
     * The reference ID for the element to be laid out. It should be an ID
     * of a tab, section, or widget.
     */
    reference_id?: string;
}
/** update-grid-position */
export interface UpdateGridPosition {
    /**
     * The height of the widget or section, in grid units.
     * @format int64
     */
    height?: number;
    /**
     * The width of the widget or section, in grid units.
     * @format int64
     */
    width?: number;
    /**
     * The x-coordinate of the top-left corner of the widget or section,
     * based on  a grid system.
     * @format int64
     */
    x?: number;
    /**
     * The y-coordinate of the top-left corner of the widget or section,
     * based on  a grid system.
     * @format int64
     */
    y?: number;
}
/**
 * update-help-center
 * Update object for HelpCenter.
 */
export interface UpdateHelpCenter {
    /** Whether the portal help center is enabled. */
    enabled?: boolean;
}
/** update-invoice-items */
export interface UpdateInvoiceItems {
    /** Add invoice line items. */
    add_invoice_line_items?: UpdateInvoiceItemsAddInvoiceLineItem[];
    /** Delete invoice line items. */
    delete_invoice_line_items?: string[];
    /** Update invoice line items. */
    update_invoice_line_items?: UpdateInvoiceItemsUpdateInvoiceLineItem[];
}
/** update-invoice-items-add-invoice-line-item */
export interface UpdateInvoiceItemsAddInvoiceLineItem {
    /** Description of the invoice line item. */
    description: string;
    /**
     * Quantity of the invoice line item.
     * @format int64
     */
    quantity: number;
    /**
     * Per unit price of the invoice line item.
     * @format double
     */
    unit_price: number;
}
/** update-invoice-items-update-invoice-line-item */
export interface UpdateInvoiceItemsUpdateInvoiceLineItem {
    /** Description of the invoice line item. */
    description?: string;
    /** The invoice line item id. */
    id: string;
    /**
     * Quantity of the invoice line item.
     * @format int64
     */
    quantity?: number;
    /**
     * Per unit price of the invoice line item.
     * @format double
     */
    unit_price?: number;
}
/** update-keyring */
export interface UpdateKeyring {
    categories?: UpdateKeyringCategories;
    /** Description of the keyring. */
    description?: string;
    /** External organization ID of the keyring. */
    external_org_id?: string;
    /** Secret key. */
    key?: string;
    /** Name of the keyring. */
    name?: string;
    /** Scope of keyring. */
    scope?: KeyringScope;
}
/** update-keyring-categories */
export interface UpdateKeyringCategories {
    /** The updated categories, which will replace current categories. */
    set?: string[];
}
/** update-line-visualization-x-axis */
export interface UpdateLineVisualizationXAxis {
    color?: UpdateVisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: UpdateVisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name?: string;
}
/** update-line-visualization-y-axis */
export interface UpdateLineVisualizationYAxis {
    color?: UpdateVisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: UpdateVisualizationAxisDrillThrough[];
    /** Whether the area under the line should be filled. */
    is_area_filled?: boolean;
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name?: string;
    /** The stroke style for the line. */
    stroke_style?: LineVisualizationYAxisStrokeStyle;
}
/** update-line-widget-visualization */
export interface UpdateLineWidgetVisualization {
    /** The configuration for the X-axis. */
    x?: UpdateLineVisualizationXAxis[];
    /** The configuration for the Y-axes. */
    y?: UpdateLineVisualizationYAxis[];
}
/** update-meerkat-widget-column-function */
export interface UpdateMeerkatWidgetColumnFunction {
    /** The type of the function. */
    type?: MeerkatWidgetColumnFunctionType;
}
/** update-meerkat-widget-column-projection */
export interface UpdateMeerkatWidgetColumnProjection {
    function?: UpdateMeerkatWidgetColumnFunction;
    /**
     * The SQL expression used to extract or transform the column from the
     * data source.
     */
    sql_expression?: string;
    /** The data type of the column generated by the SQL expression. */
    type?: MeerkatWidgetColumnProjectionType;
}
/** update-metric-visualization-y-axis */
export interface UpdateMetricVisualizationYAxis {
    color?: UpdateVisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: UpdateVisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name?: string;
}
/** update-metric-widget-visualization */
export interface UpdateMetricWidgetVisualization {
    /** The configuration for the Y-axis. */
    y?: UpdateMetricVisualizationYAxis[];
}
/**
 * update-mfz-preferences-group
 * Update object for MfzPreferencesGroup.
 */
export interface UpdateMfzPreferencesGroup {
    /** Default group to add devUser to if not defined. */
    default_group_display_id?: string;
}
/**
 * update-notification-actor-section
 * Update object for NotificationActorSection.
 */
export interface UpdateNotificationActorSection {
    /** Id(s) specific section for actor */
    id_list?: object;
    /** Preferences based on type */
    type?: object;
}
/**
 * update-notification-channel-settings
 * Update object for NotificationChannelSettings.
 */
export interface UpdateNotificationChannelSettings {
    /** Category for the channel */
    category?: string;
    /** Description for the channel */
    description?: string;
    /** Allow settings to revoke */
    disable?: boolean;
    /** Icon for the channel */
    icon?: string;
    /** User overrideable access */
    non_overrideable?: boolean;
    /**
     * Priority for the channel
     * @format int64
     */
    priority?: number;
}
/**
 * update-notification-channels-section
 * Update object for NotificationChannelsSection.
 */
export interface UpdateNotificationChannelsSection {
    /** Update object for NotificationChannelSettings. */
    desktop?: UpdateNotificationChannelSettings;
    /** Update object for NotificationChannelSettings. */
    email?: UpdateNotificationChannelSettings;
    /** Update object for NotificationChannelSettings. */
    in_app?: UpdateNotificationChannelSettings;
    /** Update object for NotificationChannelSettings. */
    mobile?: UpdateNotificationChannelSettings;
}
/**
 * update-notification-general-channel-settings
 * Update object for NotificationGeneralChannelSettings.
 */
export interface UpdateNotificationGeneralChannelSettings {
    /**
     * Category of channel. This will be used if id of specific channel is
     * missing.
     */
    category?: string;
    /** Allow settings to revoke */
    disable?: boolean;
    /** Channel ID */
    id?: string;
}
/**
 * update-notification-general-section
 * Update object for NotificationGeneralSection.
 */
export interface UpdateNotificationGeneralSection {
    /** Update object for NotificationGeneralSettings. */
    devrev_reminder?: UpdateNotificationGeneralSettings;
    /** Update object for NotificationGeneralSettings. */
    object_assignment?: UpdateNotificationGeneralSettings;
    /** Update object for NotificationGeneralSettings. */
    object_assignment_group?: UpdateNotificationGeneralSettings;
    /** Update object for NotificationGeneralSettings. */
    user_mentioned?: UpdateNotificationGeneralSettings;
    /** Update object for NotificationGeneralSettings. */
    user_mentioned_group?: UpdateNotificationGeneralSettings;
    /** Update object for NotificationGeneralSettings. */
    user_participation_comment?: UpdateNotificationGeneralSettings;
    /** Update object for NotificationGeneralSettings. */
    user_participation_event?: UpdateNotificationGeneralSettings;
    /** Update object for NotificationGeneralSettings. */
    user_participation_reply_comment?: UpdateNotificationGeneralSettings;
}
/**
 * update-notification-general-settings
 * Update object for NotificationGeneralSettings.
 */
export interface UpdateNotificationGeneralSettings {
    /** Channels that user is subscribed to for a particular setting */
    channels?: UpdateNotificationGeneralChannelSettings[];
    /** Allow settings to revoke */
    disable?: boolean;
    /** User overrideable access */
    non_overrideable?: boolean;
    /**
     * The priority of the notification
     * @format int64
     */
    priority?: number;
}
/**
 * update-notification-preferences
 * Update object for NotificationPreferences.
 */
export interface UpdateNotificationPreferences {
    /** Update object for NotificationActorSection. */
    actor?: UpdateNotificationActorSection;
    /** Update object for NotificationChannelsSection. */
    channels?: UpdateNotificationChannelsSection;
    /** Update object for NotificationGeneralSection. */
    general?: UpdateNotificationGeneralSection;
    /** Update object for NotificationSubscriberSection. */
    subscriber?: UpdateNotificationSubscriberSection;
}
/**
 * update-notification-preferences-group
 * Update object for NotificationPreferencesGroup.
 */
export interface UpdateNotificationPreferencesGroup {
    /** Email notifications. */
    email_notifications?: NotificationPreferencesGroupEmailNotifications;
}
/**
 * update-notification-subscriber-section
 * Update object for NotificationSubscriberSection.
 */
export interface UpdateNotificationSubscriberSection {
    /** Update object for NotificationSubscriberUserSettings. */
    user?: UpdateNotificationSubscriberUserSettings;
}
/**
 * update-notification-subscriber-user-level-settings
 * Update object for NotificationSubscriberUserLevelSettings.
 */
export interface UpdateNotificationSubscriberUserLevelSettings {
    /** Events */
    events?: number[];
}
/**
 * update-notification-subscriber-user-settings
 * Update object for NotificationSubscriberUserSettings.
 */
export interface UpdateNotificationSubscriberUserSettings {
    /** Update object for NotificationSubscriberUserLevelSettings. */
    commenter?: UpdateNotificationSubscriberUserLevelSettings;
    /** Update object for NotificationSubscriberUserLevelSettings. */
    creator?: UpdateNotificationSubscriberUserLevelSettings;
    /** Update object for NotificationSubscriberUserLevelSettings. */
    mentioned?: UpdateNotificationSubscriberUserLevelSettings;
    /** Update object for NotificationSubscriberUserLevelSettings. */
    owner?: UpdateNotificationSubscriberUserLevelSettings;
}
/** update-operation-io-port-fields-schema */
export interface UpdateOperationIoPortFieldsSchema {
    /** List of composite schemas */
    composite_schemas?: CompositeSchema[];
    /** The conditions associated with the fields. */
    conditions?: CustomSchemaFragmentCondition[];
    /** Schema used to describe fields using field descriptors */
    field_descriptors?: SchemaFieldDescriptor[];
    /** Schema type used to describe fields. */
    type?: IoPortFieldsSchemaType;
}
/** update-operation-port-io-schema */
export interface UpdateOperationPortIoSchema {
    /**
     * The name of the port, serving as an identifier for the data entry
     * or exit point within the step.
     */
    name?: string;
    schema?: UpdateOperationIoPortFieldsSchema;
}
/**
 * update-org-preferences
 * Update object for OrgPreferences.
 */
export interface UpdateOrgPreferences {
    /** Update object for AnalyticsGroup. */
    analytics?: UpdateAnalyticsGroup;
    /** Automated initial response message. */
    autoresponse_initial_message?: string;
    /** Update object for ContactsPreferencesGroup. */
    contacts_preferences?: UpdateContactsPreferencesGroup;
    /** Update object for CurrencyGroup. */
    currency?: UpdateCurrencyGroup;
    /** Update object for MfzPreferencesGroup. */
    mfz?: UpdateMfzPreferencesGroup;
    /** Users who are notified when a new conversation is created. */
    new_conversation_notified_to?: string[];
    /** Update object for PeopleInsightsGroup. */
    people_insights?: UpdatePeopleInsightsGroup;
    /** Update object for RevPortalGroup. */
    rev_portal?: UpdateRevPortalGroup;
    /** Update object for SlaPreferencesGroup. */
    sla?: UpdateSlaPreferencesGroup;
    /** Update object for SupportPreferencesGroup. */
    support?: UpdateSupportPreferencesGroup;
    /** Update object for TuringAnswersGroup. */
    turing_answers?: UpdateTuringAnswersGroup;
    /** Update object for UserTraitsPreferencesGroup. */
    user_traits?: UpdateUserTraitsPreferencesGroup;
    /**
     * Groups or users to send the analytics report to. If not specified,
     * send to all users in the organization.
     */
    weekly_analytics_report_recipients?: string[];
}
/**
 * update-people-insights-group
 * Update object for PeopleInsightsGroup.
 */
export interface UpdatePeopleInsightsGroup {
    /** Units of work for the organization. */
    uow?: UpdatePeopleInsightsUow[];
}
/**
 * update-people-insights-uow
 * Update object for PeopleInsightsUow.
 */
export interface UpdatePeopleInsightsUow {
    /** Category of the contribution type. */
    category?: PeopleInsightsUowCategory;
    /** Type of contribution */
    type?: string;
    /**
     * Weight for the contribution type
     * @format int64
     */
    weight?: number;
}
/**
 * update-phone-number
 * Update object for PhoneNumber.
 */
export interface UpdatePhoneNumber {
    /** The phone number in e164 format. */
    e164_number?: string;
    /** An optional extension. */
    extension?: string;
}
/** update-pie-visualization-x-axis */
export interface UpdatePieVisualizationXAxis {
    color?: UpdateVisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: UpdateVisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name?: string;
}
/** update-pie-visualization-y-axis */
export interface UpdatePieVisualizationYAxis {
    color?: UpdateVisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: UpdateVisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** The label for the axis. */
    label?: string;
    /** The reference name of the axis. */
    reference_name?: string;
}
/** update-pie-widget-visualization */
export interface UpdatePieWidgetVisualization {
    /** The configuration for the X-axis. */
    x?: UpdatePieVisualizationXAxis[];
    y?: UpdatePieVisualizationYAxis;
}
/** update-policy-instance */
export interface UpdatePolicyInstance {
    /** Name assigned to this policy instance by user */
    name?: string;
    /**
     * Json string storing values for each templated variable, go as
     * `input.parameters` when evaluating policies
     */
    parameters?: string;
    /**
     * Holds the contents of the policy. Each policy would consist a rule
     * named main/allow which would be the entry point for the policy. The
     * policy would be templated, i.e. there would be some variables which
     * would be filled during creating a policy instance, those would be
     * referenced under `input.parameters` and stored in parameters
     * variable below
     */
    policy?: string;
    /**
     * Indicates if the policy could be parsed into constituent pieces
     * that can be displayed on UI as individual drop boxes
     */
    system_parseable?: boolean;
}
/**
 * update-portal-banner
 * Update object for PortalBanner.
 */
export interface UpdatePortalBanner {
    /** Banner tile color */
    color?: string;
    /** Banner description */
    description?: string;
    /** If banner is enabled. */
    enabled?: boolean;
    /** Banner title */
    title?: string;
}
/**
 * update-portal-configuration
 * Update object for PortalConfiguration.
 */
export interface UpdatePortalConfiguration {
    /** Reference to keyring object which holds the AAT. */
    aat_keyring_id?: string;
    /** Update object for PortalFooterGroup. */
    footer_group?: UpdatePortalFooterGroup;
    /** Google Analytics ID to be used on the portal. */
    google_analytics_id?: string;
    /**
     * Organization favicon
     * @example "ARTIFACT-12345"
     */
    org_favicon?: string;
    /**
     * Organization logo
     * @example "ARTIFACT-12345"
     */
    org_logo?: string;
    /** Organization name which will appear on the Portal. */
    org_name?: string;
    /**
     * Organization URL which will be used to redirect to the company's
     * product or marketing website.
     */
    org_url?: string;
    /** App id of the plug widget to be used on portal. */
    plug_widget_app_id?: string;
    /** If Plug Widget is enabled on the portal. */
    plug_widget_enabled?: boolean;
    /** If the portal will have a Powered by DevRev footer. */
    powered_by_devrev?: boolean;
    /** If support portal is enabled for anonymous users. */
    public_portal_enabled?: boolean;
    /** If ticket creation is enabled on the portal. */
    ticket_creation_enabled?: boolean;
    /** If Turing response is enabled on portal search. */
    turing_response_enabled?: boolean;
}
/**
 * update-portal-footer-group
 * Update object for PortalFooterGroup.
 */
export interface UpdatePortalFooterGroup {
    /** If footer is enabled. */
    enabled?: boolean;
    /** Social media links */
    social_media_links?: UpdateSocialMediaLink[];
    /** Text links */
    text_links?: UpdateTextLink[];
}
/**
 * update-portal-preferences
 * Update object for PortalPreferences.
 */
export interface UpdatePortalPreferences {
    /** Update object for AuthPreferences. */
    auth?: UpdateAuthPreferences;
    /** Update object for PortalConfiguration. */
    configuration?: UpdatePortalConfiguration;
    /** Domain for the portal. */
    domain?: string;
    /** Update object for HelpCenter. */
    help_center?: UpdateHelpCenter;
    /** Status of the portal. */
    status?: PortalPreferencesStatus;
    /** Update object for PortalStyling. */
    styling?: UpdatePortalStyling;
    /** Update object for PortalTab. */
    tabs?: UpdatePortalTab;
}
/**
 * update-portal-styling
 * Update object for PortalStyling.
 */
export interface UpdatePortalStyling {
    /** Button color */
    accent_color?: string;
    /** Update object for CustomizationConfiguration. */
    customization_configuration?: UpdateCustomizationConfiguration;
    /**
     * Header image
     * @example "ARTIFACT-12345"
     */
    header_image?: string;
    /** If header image is enabled on the portal. */
    header_image_enabled?: boolean;
    /** Portal appearance theme. */
    theme?: PortalStylingTheme;
}
/**
 * update-portal-tab
 * Update object for PortalTab.
 */
export interface UpdatePortalTab {
    /** Update object for PortalBanner. */
    banner?: UpdatePortalBanner;
    /** Custom Tabs */
    custom_tabs?: UpdateCustomTab[];
    /** If ticket creation is enabled on the portal. */
    ticket_creation_enabled?: boolean;
}
/**
 * update-postal-address
 * Update object for PostalAddress.
 */
export interface UpdatePostalAddress {
    /** Country name component. */
    country?: string;
    /**
     * Full mailing address, formatted for display or use on a mailing
     * label.
     */
    formatted?: string;
    /** Town, city. */
    locality?: string;
    /** Zip code of the address. */
    postal_code?: string;
    /** State, province, prefecture, or region component. */
    region?: string;
    /** Full street address component. */
    street_address?: string;
}
/** update-pricing */
export interface UpdatePricing {
    /** Pricing objects to be added. */
    add_price_infos?: UpdatePricingAddPriceInfo[];
    /** Pricing objects to be removed. */
    remove_price_infos?: UpdatePricingRemovePriceInfo[];
    /** Pricing objects to be updated. */
    update_price_infos?: UpdatePricingUpdatePriceInfo[];
}
/** update-pricing-add-price-info */
export interface UpdatePricingAddPriceInfo {
    /** Billing frequency of the SKU. */
    billing_cycle: PricingBillingCycle;
    /**
     * Number of units in each block. For example, If the metered units is
     * 540 and the block size is 100. Then the quantity will be 5.4. The
     * default value is 1.
     * @format int32
     */
    block_size?: number;
    /**
     * Currency used for the pricing object. For example, USD, INR etc.
     * Defaults to USD.
     */
    currency: string;
    /** Description of the pricing object. */
    description?: string;
    /**
     * Helps in deciding if a pricing object can be used for purchasing
     * new items. If set to true then new purchase can be made. If set to
     * false then no new purchase can be made, but quantity of existing
     * items, which were bought with this pricing ID can be updated.
     * Defaults to false.
     */
    is_active?: boolean;
    /**
     * Whether the slabs should be priced tiered or flat. The default
     * value is false.
     */
    is_tiered?: boolean;
    /** List of price slabs for the given currency. */
    price_slabs: PriceSlab[];
}
/** update-pricing-remove-price-info */
export interface UpdatePricingRemovePriceInfo {
    /** Billing frequency of the SKU. */
    billing_cycle: PricingBillingCycle;
    /**
     * Currency used for the pricing. For example, USD, INR etc. Defaults
     * to USD.
     */
    currency: string;
}
/** update-pricing-update-price-info */
export interface UpdatePricingUpdatePriceInfo {
    /** Billing frequency of the SKU. */
    billing_cycle: PricingBillingCycle;
    /**
     * Number of units in each block. For example, If the metered units is
     * 540 and the block size is 100. Then the quantity will be 5.4. The
     * default value is 1.
     * @format int32
     */
    block_size?: number;
    /**
     * Currency used for the pricing. For example, USD, INR etc. Defaults
     * to USD.
     */
    currency: string;
    /** Description of the pricing. */
    description?: string;
    /**
     * Helps in deciding if a pricing object can be used for purchasing
     * new items. If set to true then new purchase can be made. If set to
     * false then no new purchase can be made, but quantity of existing
     * items, which were bought with this pricing ID can be updated.
     * Defaults to false.
     */
    is_active?: boolean;
    /**
     * Whether the slabs should be priced tiered or flat. The default
     * value is false.
     */
    is_tiered?: boolean;
    /** List of price slabs for the given currency. */
    price_slabs: PriceSlab[];
}
/**
 * update-qa-generation
 * Update object for QaGeneration.
 */
export interface UpdateQaGeneration {
    /** Allow QA generation from conversations. */
    conversations?: boolean;
}
/** update-quote-line-items */
export interface UpdateQuoteLineItems {
    /** Line items to be created. */
    create_line_items?: CreateQuoteLineItem[];
    /** Line items to be deleted. */
    delete_line_items?: string[];
    /** Line items to be updated. */
    update_line_items?: UpdateQuoteLineItemsUpdateQuoteLineItem[];
}
/** update-quote-line-items-update-quote-line-item */
export interface UpdateQuoteLineItemsUpdateQuoteLineItem {
    /**
     * Adjusted unit price overrides unit price for SKU in line item.
     * @format double
     */
    adjusted_unit_price?: number | null;
    /** Description of the line item. */
    description?: string;
    discount?: 'discount_amount' | 'discount_percentage';
    discount_amount?: DiscountAmount;
    discount_percentage?: DiscountPercentage;
    /**
     * It represents the time when a specific line item's effectiveness or
     * applicability within the quote comes to an end.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    end_date?: string;
    /** The quote line item object's ID. */
    id: string;
    /**
     * It indicates the active status of a line item within a quote. When
     * set to true, it signifies that the line item is active and included
     * in the quote's calculations and pricing.
     */
    is_active?: boolean;
    /** Name of the line item. */
    name?: string;
    overage_discount?: 'overage_discount_amount' | 'overage_discount_percentage';
    overage_discount_amount?: DiscountAmount;
    overage_discount_percentage?: DiscountPercentage;
    /**
     * Quantity of the SKU.
     * @format int32
     */
    quantity?: number;
    /**
     * It represents the time when a specific line item becomes effective
     * or applicable within the quote.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    start_date?: string;
}
/** update-recurring-line-items */
export interface UpdateRecurringLineItems {
    /**
     * Quantity to be updated in the service plan.
     * @format int32
     */
    quantity?: number;
    /** Recurring line item to be updated in the service plan. */
    recurring_line_item_id: string;
}
/**
 * update-rev-portal-group
 * Update object for RevPortalGroup.
 */
export interface UpdateRevPortalGroup {
    /** Update object for TicketCreationGroup. */
    ticket_creation_preferences?: UpdateTicketCreationGroup;
}
/**
 * update-rule-node-instance
 * RuleNode instance containg relevant rule node information.
 */
export interface UpdateRuleNodeInstance {
    /** Description of the rule node. */
    description?: string;
    /** Display Name of the rule node. */
    display_id: string;
    /** input of the rule node. */
    input: object;
    /** Name of the rule node. */
    name: string;
    /** Id of the rule node. */
    rule_node_id?: string;
    /** List of transitions of the rule node based on the output state. */
    transitions: RuleNodeTransition[];
    /** Type of the rule node. */
    type?: string;
    /** UI hints for the rule node instance. */
    ui?: RuleNodeInstanceUiHints;
}
/** update-sign-config */
export interface UpdateSignConfig {
    /** Members list to be cced in the email of the signing document. */
    cc_members?: MemberInfo[];
    /** Email message of the signing document. */
    message?: string;
    /** Recipient details list of the signing document. */
    recipients?: RecipientInfo[];
    /** Email title of the signing document. */
    title?: string;
    /** Type of the sign needed for the quote. */
    type?: SignConfigType;
}
/**
 * update-skill-type
 * Update object for SkillType.
 */
export interface UpdateSkillType {
    /** Name of the skill. */
    name?: string;
}
/**
 * update-sla-preferences-group
 * Update object for SlaPreferencesGroup.
 */
export interface UpdateSlaPreferencesGroup {
    /** Default SLA assigned to rev organizations */
    default_sla_id?: string;
    /** Enable default SLA assignment */
    enable_default_sla?: boolean;
}
/** update-snap-in-global-input */
export interface UpdateSnapInGlobalInput {
    /** Name of the input whose value is to be updated. */
    name: string;
    /** Updated value, omit to UNSET. */
    value?: string;
}
/** update-snap-in-name-reference-mapping */
export interface UpdateSnapInNameReferenceMapping {
    /** Name by which the object is being referred in the snap-in version. */
    name?: string;
    /**
     * Reference to the actual object.
     * @example "TAG-12345"
     */
    reference?: string;
}
/** update-snap-in-preferences */
export interface UpdateSnapInPreferences {
    /** Values for the inputs to the snap-in. */
    inputs_values?: object;
    /** List of user-scoped keyrings to be used by the snap-in. */
    keyrings?: UpdateSnapInNameReferenceMapping[];
}
/**
 * update-social-media-link
 * Update object for SocialMediaLink.
 */
export interface UpdateSocialMediaLink {
    /** If social media links are enabled. */
    enabled?: boolean;
    /** Name of the social media platform. */
    name?: SocialMediaLinkName;
    /** URL of the social media platform. */
    url?: string;
}
/**
 * update-stage
 * Update object for Stage.
 */
export interface UpdateStage {
    /** Notes relevant to the stage */
    notes?: string;
    /** DON of the stage. */
    stage?: string;
}
/** update-stage-node */
export interface UpdateStageNode {
    /** Whether this stage is deprecated. */
    is_deprecated?: boolean;
    /** Whether this is the start stage. */
    is_start?: boolean;
    /** The ID of the stage. */
    stage_id: string;
    /** List of transitions from this stage. */
    transitions?: UpdateStageTransition[];
}
/** update-stage-transition */
export interface UpdateStageTransition {
    /** The ID of the target stage. */
    target_stage_id: string;
}
/**
 * update-status-workflow-request
 * The request to update the status of a workflow.
 */
export interface UpdateStatusWorkflowRequest {
    /** The ID of the workflow to update. */
    id: string;
    /** Status of the workflow. */
    status: WorkflowStatus;
}
/**
 * update-status-workflow-response
 * The response to a workflow status update request.
 */
export type UpdateStatusWorkflowResponse = object;
/** update-sub-widget */
export interface UpdateSubWidget {
    query?: UpdateWidgetQuery;
    /**
     * A reference ID for the sub-widget. It should be unique within the
     * widget.
     */
    reference_id?: string;
    visualization?: UpdateWidgetVisualization;
}
/**
 * update-support-notifications-group
 * Update object for SupportNotificationsGroup.
 */
export interface UpdateSupportNotificationsGroup {
    /**
     * Delay time in minutes after which the rev/dev user will be notified
     * of a new message on conversation via email.
     * @format int64
     */
    conv_msg_email_delay?: number;
    /**
     * Disable all automated notifation emails to customers from
     * notifications@devrev.ai
     */
    disable_default_rev_emails?: boolean;
}
/**
 * update-support-preferences-group
 * Update object for SupportPreferencesGroup.
 */
export interface UpdateSupportPreferencesGroup {
    /** Update object for SupportNotificationsGroup. */
    notification_preferences?: UpdateSupportNotificationsGroup;
    /** Update object for SupportTicketPreferencesGroup. */
    ticket_preferences?: UpdateSupportTicketPreferencesGroup;
}
/**
 * update-support-ticket-preferences-group
 * Update object for SupportTicketPreferencesGroup.
 */
export interface UpdateSupportTicketPreferencesGroup {
    /** Service Account to assign a ticket to when a ticket has no owner */
    svc_acc_for_unassigned_tickets?: string;
}
/** update-table-visualization-column */
export interface UpdateTableVisualizationColumn {
    color?: UpdateVisualizationAxisColor;
    /** The drill through configurations for the axis. */
    drill_throughs?: UpdateVisualizationAxisDrillThrough[];
    /** Whether the axis should be hidden. */
    is_hidden?: boolean;
    /** Whether the column should be movable. */
    is_movable?: boolean;
    /** Whether the column should be resizable. */
    is_resizable?: boolean;
    /** Whether the column should be sortable. */
    is_sortable?: boolean;
    /** Whether the column visibility can be toggled. */
    is_visibility_togglable?: boolean;
    /** The label for the axis. */
    label?: string;
    /**
     * Whether the column should be locked to the left or right side of the
     * table.
     */
    lock_position?: TableVisualizationColumnLockPosition;
    /**
     * The maximum width of the column.
     * @format int64
     */
    max_width?: number;
    /**
     * The minimum width of the column.
     * @format int64
     */
    min_width?: number;
    /**
     * The order in which the column should be displayed.
     * @format int64
     */
    order?: number;
    /**
     * Whether the column should be pinned to the left or right side of the
     * table.
     */
    pin_position?: TableVisualizationColumnPinPosition;
    /** The reference name of the axis. */
    reference_name?: string;
}
/** update-table-widget-visualization */
export interface UpdateTableWidgetVisualization {
    /** The configuration for the columns in the table. */
    columns?: UpdateTableVisualizationColumn[];
}
/**
 * update-tag-with-value
 * Update object for TagWithValue.
 */
export interface UpdateTagWithValue {
    /**
     * ID of the referenced tag
     * @example "TAG-12345"
     */
    tag_id?: string;
    /** Value associated with the tag for the object. */
    value?: string;
}
/** update-terms */
export interface UpdateTerms {
    /** Terms to be added. */
    create_terms?: TermDetail[];
    /** Terms to be deleted. */
    delete_terms?: string[];
    /** Terms to be updated. */
    update_terms?: UpdateTermsUpdateTerm[];
}
/** update-terms-update-term */
export interface UpdateTermsUpdateTerm {
    /** Description of the term template. */
    description?: string;
    /** The term object's ID. */
    id: string;
    /**
     * It represents the specific date value expected as input for a
     * particular term, when the input_type is set to 'date'.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    input_date?: string;
    /** Captures the time duration in terms of years, months and days. */
    input_duration?: TermDuration;
    /**
     * It represents the number value expected as input for a particular
     * term, when the input_type is set to 'number'.
     * @format double
     */
    input_number?: number;
    /**
     * It represents the text value expected as input for a particular
     * term, when the input_type is set to 'text'.
     */
    input_text?: string;
    /** Label for the term template. */
    label?: string;
    /** Name of the term template. */
    name?: string;
    update_input_options?: UpdateTermsUpdateTermUpdateInputOptions;
}
/** update-terms-update-term-update-input-options */
export interface UpdateTermsUpdateTermUpdateInputOptions {
    /** Options to be added. */
    add_input_options?: string[];
    /** Options to be removed. */
    remove_input_options?: string[];
}
/**
 * update-text-link
 * Update object for TextLink.
 */
export interface UpdateTextLink {
    /** If text links are enabled. */
    enabled?: boolean;
    /** Name of the link. */
    name?: string;
    /** URL of the text link. */
    url?: string;
}
/**
 * update-ticket-creation-group
 * Update object for TicketCreationGroup.
 */
export interface UpdateTicketCreationGroup {
    /**
     * Allow rev users to select a part other than the default part for a
     * ticket
     */
    allow_custom_part_selection_for_rev_users?: boolean;
    /**
     * Default owner for the ticket, in case the ticket is created without
     * an assigned owner
     */
    default_ticket_owner_id?: string;
    /**
     * Default part to which a ticket is assigned, in case a ticket is
     * being created without an assigned part
     * @example "PROD-12345"
     */
    default_ticket_part_id?: string;
    /** Part types available for rev users to select from. */
    part_types_available_for_rev_users?: TicketCreationGroupPartTypesAvailableForRevUsers;
}
/**
 * update-turing-answers-group
 * Update object for TuringAnswersGroup.
 */
export interface UpdateTuringAnswersGroup {
    /** Turing bot activated for the organization */
    activated_bot?: string;
    /**
     * Preferred exit message for auto response in case no response is
     * found
     */
    auto_response_exit_message?: string;
    /** Preferred message to cite sources */
    cite_sources_message?: string;
    /**
     * Default part to which a ticket is assigned, in case a ticket is
     * created by Turing.
     * @example "PROD-12345"
     */
    default_ticket_part_id?: string;
    /** Allow DevRev Turing bot in a conversation */
    enable_auto_response?: boolean;
    /** Allow customized DevRev Turing in a conversation. */
    enable_custom_bot?: boolean;
    /** Update object for QaGeneration. */
    enable_qa_generation?: UpdateQaGeneration;
    /** Allow use of QA as a source */
    enable_qa_source?: boolean;
    /** Allow suggestions given by DevRev Turing in a conversation */
    enable_suggestions?: boolean;
    /**
     * Turing bot exit action when Turing is unable to deflect the
     * conversation.
     */
    exit_action?: TuringAnswersGroupExitAction;
    /** Language preference for Turing Answers. */
    language?: TuringAnswersGroupLanguage;
    /**
     * Group which will be notified when a conversation is exited by
     * Turing in case it doesn't create a ticket on exit.
     */
    notify_group_id?: string;
    /** Preferred exit message for suggestion in case no response is found */
    suggestion_exit_message?: string;
}
/**
 * update-user-preferences
 * Update object for UserPreferences.
 */
export interface UpdateUserPreferences {
    /** Enable email notifications */
    enable_email_notifications?: boolean;
    /** Enable weekly analytics report. */
    enable_weekly_analytics_report?: boolean;
    /** Update object for GeneralPreferencesGroup. */
    general_preferences?: UpdateGeneralPreferencesGroup;
    /** Update object for NotificationPreferencesGroup. */
    notification_preferences?: UpdateNotificationPreferencesGroup;
    /** App theme mode. */
    theme_mode?: UserPreferencesThemeMode;
}
/**
 * update-user-traits-preferences-group
 * Update object for UserTraitsPreferencesGroup.
 */
export interface UpdateUserTraitsPreferencesGroup {
    /**
     * Predefined locations that can be assigned to DevUsers within this
     * DevOrg.
     */
    locations?: string[];
    /**
     * Predefined skills that can be assigned to DevUsers within this
     * DevOrg.
     */
    skill_types?: UpdateSkillType[];
}
/** update-visualization-axis-color */
export interface UpdateVisualizationAxisColor {
    /** The key lookup color. */
    key_lookup?: UpdateVisualizationAxisColorKeyLookup[];
    /** The static color. */
    static?: string;
    /** The type of the color. */
    type?: VisualizationAxisColorType;
}
/** update-visualization-axis-color-key-lookup */
export interface UpdateVisualizationAxisColorKeyLookup {
    /** The key to map to a color. */
    key?: string;
    /** The color value. */
    value?: string;
}
/** update-visualization-axis-drill-through */
export interface UpdateVisualizationAxisDrillThrough {
    /** The ID of the dashboard to navigate to when the axis is clicked. */
    dashboard?: string;
    /** The label for the drill through. */
    label?: string;
}
/** update-widget-column-projection */
export interface UpdateWidgetColumnProjection {
    custom_field?: UpdateCustomFieldWidgetColumnProjection;
    /** Set of field attributes. */
    devrev_schema?: SchemaFieldDescriptor;
    meerkat_schema?: UpdateMeerkatWidgetColumnProjection;
    /** The reference name of the column. */
    reference_name?: string;
    /** The type of the column. */
    type?: WidgetColumnProjectionType;
}
/** update-widget-data-source */
export interface UpdateWidgetDataSource {
    /**
     * The ID of the data source. Meant to be set when the type is
     * data_source.
     */
    data_source?: string;
    /**
     * The dimensions (or the extended dimensions) provided by the data
     * source.  These are the categories that can be used to group or
     * segment the measures.
     */
    dimensions?: UpdateWidgetColumnProjection[];
    external_data_source?: UpdateWidgetDataSourceReference;
    /**
     * A list of possible joins for the data source. Follows foreign key
     * semantics.
     */
    joins?: UpdateDataSourceJoin[];
    /**
     * The measures (or the extended measures) provided by the data
     * source.  These are the numerical values that can be analyzed.
     */
    measures?: UpdateWidgetColumnProjection[];
    oasis?: UpdateWidgetOasisDataSource;
    /** The reference name of the data source. */
    reference_name?: string;
    /** The type of the data source. */
    type?: WidgetDataSourceType;
}
/** update-widget-data-source-reference */
export interface UpdateWidgetDataSourceReference {
    /**
     * The column projections for the data source. These are the columns
     * that are  projected from the datasets.
     */
    dataset_projections?: UpdateWidgetOasisDatasetColumnProjection[];
    /** The id of the data source. */
    id?: string;
}
/** update-widget-oasis-data-source */
export interface UpdateWidgetOasisDataSource {
    /** List of datasets used by the data source. */
    datasets?: string[];
    /**
     * The column projections for the data source. These are the columns
     * that are  projected from the datasets.
     */
    projections?: UpdateWidgetOasisDatasetColumnProjection[];
    /**
     * The base SQL query that constructs the view for the data source.
     * The SQL can reference the datasets using their aliases.
     */
    sql_query?: string;
}
/** update-widget-oasis-dataset-column */
export interface UpdateWidgetOasisDatasetColumn {
    custom_field?: UpdateCustomFieldWidgetColumnProjection;
    /** The name of the column. */
    name?: string;
}
/** update-widget-oasis-dataset-column-projection */
export interface UpdateWidgetOasisDatasetColumnProjection {
    /** The column name. */
    columns?: UpdateWidgetOasisDatasetColumn[];
    /** The dataset id. */
    dataset?: string;
}
/** update-widget-query */
export interface UpdateWidgetQuery {
    /**
     * The dimensions for the query, which are the categories to group or
     * segment the measures. Usually these are the X-axis values in a
     * visualization.
     */
    dimensions?: string[];
    /**
     * Set of filters to apply on the widgets. These filters are applied
     * on top of the dashboard level filters.
     */
    filters?: UpdateDashboardFilter[];
    /** Join paths to use for the query. */
    joins?: UpdateWidgetQueryJoins[];
    /**
     * The maximum number of records to return. This is used to limit the
     * amount of data  returned by the query.
     * @format int64
     */
    limit?: number;
    /**
     * The measures for the query, which are the numerical values to be
     * analyzed. Usually these are the Y-axis values in a visualization.
     */
    measures?: string[];
    /**
     * The order in which the data should be returned. This is used to
     * sort the data  returned by the query.
     */
    order_by?: UpdateWidgetQueryOrderBy[];
}
/** update-widget-query-joins */
export interface UpdateWidgetQueryJoins {
    /** A list of joins. */
    path?: string[];
}
/** update-widget-query-order-by */
export interface UpdateWidgetQueryOrderBy {
    /** The direction of the sort. */
    direction?: WidgetQueryOrderByDirection;
    /** The column to sort by. */
    reference_name?: string;
}
/** update-widget-visualization */
export interface UpdateWidgetVisualization {
    bar?: UpdateBarWidgetVisualization;
    column?: UpdateColumnWidgetVisualization;
    donut?: UpdateDonutWidgetVisualization;
    line?: UpdateLineWidgetVisualization;
    metric?: UpdateMetricWidgetVisualization;
    pie?: UpdatePieWidgetVisualization;
    table?: UpdateTableWidgetVisualization;
    /** The type of the visualization, such as line, bar, pie, etc. */
    type?: WidgetVisualizationType;
}
/**
 * update-workflow-request
 * The request to update a workflow.
 */
export interface UpdateWorkflowRequest {
    /** Description of the workflow. */
    description?: string;
    /** The ID of the workflow to update. */
    id: string;
    /** Title of the workflow. */
    title?: string;
}
/**
 * update-workflow-response
 * The response to a workflow update request.
 */
export interface UpdateWorkflowResponse {
    workflow: Workflow;
}
/** update-workflow-step-input-value */
export interface UpdateWorkflowStepInputValue {
    /**
     * A list of specifications for the input values, detailing how each
     * value is provided or computed for the port.
     */
    fields?: UpdateWorkflowStepInputValueSpec[];
    /**
     * The name of the input port to which this value corresponds, used
     * for mapping the input to the correct port.
     */
    port_name?: string;
}
/** update-workflow-step-input-value-definition */
export interface UpdateWorkflowStepInputValueDefinition {
    /**
     * Identifies the nature of the input value, distinguishing between a
     * literal constant and a dynamic expression.
     */
    type?: InputValueDefinitionType;
    /**
     * The actual fixed value or expression that defines the input, which
     * is used during the step's execution.
     */
    value?: object;
}
/** update-workflow-step-input-value-spec */
export interface UpdateWorkflowStepInputValueSpec {
    /**
     * An identifier for the input value, used to reference the value
     * within the step's configuration.
     */
    name?: string;
    value?: UpdateWorkflowStepInputValueDefinition;
}
/** update-workflow-step-next-step-spec */
export interface UpdateWorkflowStepNextStepSpec {
    /**
     * The name of the port on the next step that will establish the
     * relationship with the current step.
     */
    next_port_name?: string;
    /** The unique identifier of the next step to define the relationship. */
    next_step?: string;
    /**
     * The name of the port through which the relationship is established
     * with the next step.
     */
    port_name?: string;
}
/**
 * update-workflow-step-request
 * The request to update a workflow step.
 */
export interface UpdateWorkflowStepRequest {
    /**
     * A detailed explanation of the step's purpose and functionality
     * within the workflow.
     */
    description?: string;
    /** The ID of the workflow step to update. */
    id: string;
    /**
     * The input ports and relevant schema(s) for this step. Only relevant
     * for operations which support dynamic ports/schemas like OneOf, HTTP
     * etc.
     */
    input_ports?: UpdateOperationPortIoSchema[];
    /**
     * A set of input values for the step, which may include fixed values
     * or dynamic expressions that reference outputs from previous steps.
     * These expressions are evaluated at runtime to provide the inputs
     * for the step's execution.
     */
    input_values?: UpdateWorkflowStepInputValue[];
    /**
     * The human-readable identifier for the step, used for display
     * purposes.
     */
    name?: string;
    /** List of steps which directly depend on the current step. */
    next_steps?: UpdateWorkflowStepNextStepSpec[];
    /**
     * The output ports and relevant schema(s) for this step. Only
     * relevant for operations which support dynamic ports/schemas like
     * Condition, HTTP etc.
     */
    output_ports?: UpdateOperationPortIoSchema[];
    /**
     * A unique identifier for the step within a workflow, ensuring
     * distinct identification across multiple steps.
     */
    reference_key?: string;
}
/**
 * update-workflow-step-response
 * The response to a workflow step update request.
 */
export interface UpdateWorkflowStepResponse {
    workflow_step: WorkflowStep;
}
/** User action types. */
export declare enum UserAction {
    CreatePart = "create_part",
    CreateWork = "create_work",
    UpdatePart = "update_part",
    UpdateWork = "update_work"
}
/** user-base */
export type UserBase = AtomBase & {
    /**
     * The user's display handle. This field is deprecated now. Use
     * display_name field instead.
     */
    display_handle?: string;
    /** The user's display name. The name is non-unique and mutable. */
    display_name?: string;
    display_picture?: ArtifactSummary;
    /** Email address of the user. */
    email?: string;
    /** Full name of the user. */
    full_name?: string;
    /** Phone numbers of the user. */
    phone_numbers?: string[];
    /** State of the user. */
    state?: UserState;
    /** The display picture of the user. */
    thumbnail?: string;
};
/** user-base-summary */
export type UserBaseSummary = AtomBaseSummary & {
    /**
     * The user's display handle. This field is deprecated now. Use
     * display_name field instead.
     */
    display_handle?: string;
    /** The user's display name. The name is non-unique and mutable. */
    display_name?: string;
    display_picture?: ArtifactSummary;
    /** Email address of the user. */
    email?: string;
    /** Full name of the user. */
    full_name?: string;
    /** State of the user. */
    state?: UserState;
    /** The display picture of the user. */
    thumbnail?: string;
};
/**
 * user-invitation-delete-request
 * The request to delete a invitation sent to the user.
 */
export interface UserInvitationDeleteRequest {
    /** Email of the invited user. */
    email: string;
}
/**
 * user-invitation-delete-response
 * The response of deleting a invitation sent to the user.
 */
export type UserInvitationDeleteResponse = object;
/**
 * user-invitation-update-request
 * A request to update an invitation for a user to the Dev organization.
 */
export interface UserInvitationUpdateRequest {
    /** Email address of the user. */
    email: string;
    /** Ids of the groups assigned to the invitee during invite. */
    group_ids?: string[];
}
/**
 * user-invitation-update-response
 * A response to updating an invitation.
 */
export interface UserInvitationUpdateResponse {
    invite: DevuInvite;
}
/** user-mentioned-notification */
export type UserMentionedNotification = NotificationBase & {
    /** The body on which the user was mentioned. */
    body?: string;
    /** The objects referenced in the body. */
    references?: AtomSummary[];
    source?: TimelineComment;
};
/** user-mentioned-notification-summary */
export type UserMentionedNotificationSummary = NotificationBaseSummary;
/** user-participation-notification */
export type UserParticipationNotification = NotificationBase & {
    /** Details of the comment activities that triggered the notification. */
    comment_activities?: CommentActivity[];
    /** Details of the event activities that triggered the notification. */
    event_activities?: EventActivity[];
    /** The latest type of the activity triggering the notification. */
    latest_activity_type?: UserParticipationNotificationLatestActivityType;
};
/** The latest type of the activity triggering the notification. */
export declare enum UserParticipationNotificationLatestActivityType {
    Comment = "comment",
    Event = "event"
}
/** user-participation-notification-summary */
export type UserParticipationNotificationSummary = NotificationBaseSummary;
/** user-preferences */
export type UserPreferences = PreferencesBase & {
    /** Enable email notifications. */
    enable_email_notifications?: boolean;
    /** Enable weekly analytics report. */
    enable_weekly_analytics_report?: boolean;
    /** Preferences group for General settings. */
    general_preferences?: GeneralPreferencesGroup;
    /** Preferences group for Notifications. */
    notification_preferences?: NotificationPreferencesGroup;
    /** App theme mode. */
    theme_mode?: UserPreferencesThemeMode;
};
/** user-preferences-summary */
export type UserPreferencesSummary = PreferencesBaseSummary;
/** App theme mode. */
export declare enum UserPreferencesThemeMode {
    Auto = "auto",
    Dark = "dark",
    Light = "light"
}
export declare enum UserPresenceValue {
    Offline = "offline",
    Online = "online"
}
/**
 * user-privileges-request
 * A request to get the privileges of user on the target object/object
 * type.
 */
export interface UserPrivilegesRequest {
    /** Whether to include partial privileges in the response. */
    include_partial_privileges?: boolean;
    /** Information regarding the target object/object type. */
    target: UserPrivilegesRequestTarget;
}
/**
 * user-privileges-request-group-member-target-info
 * Information regarding the group membership target.
 */
export interface UserPrivilegesRequestGroupMemberTargetInfo {
    /** The ID of the group. */
    group_id?: string;
}
/**
 * user-privileges-request-target
 * Information regarding the target object/object type.
 */
export type UserPrivilegesRequestTarget = (Empty | UserPrivilegesRequestGroupMemberTargetInfo | UserPrivilegesRequestTargetId | UserPrivilegesRequestTargetInfo | UserPrivilegesRequestTimelineTargetInfo) & {
    /**
     * The ID of the target object for which user privileges are
     * requested.
     * @deprecated
     */
    id?: string;
    object_type?: ObjectTypeProto;
    /**
     * The subtype of the target for which user privileges are requested.
     * @deprecated
     */
    subtype?: string;
    type?: UserPrivilegesRequestTargetType;
};
/**
 * user-privileges-request-target-id
 * Information regarding the id of the target object.
 */
export interface UserPrivilegesRequestTargetId {
    /**
     * The ID of the target object for which user privileges are
     * requested.
     */
    object_id: string;
}
/**
 * user-privileges-request-target-info
 * Information regarding the target object.
 */
export interface UserPrivilegesRequestTargetInfo {
    /** Attributes of the target object. */
    attributes?: object;
    /** The ID of the parent of the target object. */
    parent_id?: string;
}
export declare enum UserPrivilegesRequestTargetType {
    GroupMemberTargetInfo = "group_member_target_info",
    None = "none",
    TargetId = "target_id",
    TargetInfo = "target_info",
    TimelineTargetInfo = "timeline_target_info"
}
/**
 * user-privileges-request-timeline-target-info
 * Information regarding the timeline target.
 */
export interface UserPrivilegesRequestTimelineTargetInfo {
    /** The ID of the parent object of the timeline. */
    parent_id?: string;
    /**
     * The visibility of the entry. If 'private', then the entry is only
     * visible to the creator, 'internal' is visible with the Dev
     * organization, 'external' is visible to the Dev organzation and Rev
     * users, and 'public' is visible to all. If not set, then the default
     * visibility is 'external'.
     */
    visibility?: TimelineEntryVisibility;
}
/**
 * user-privileges-response
 * Response object for the user privileges request.
 */
export interface UserPrivilegesResponse {
    /**
     * The list of fields the user has privileges on for the requested
     * target object/subtype.
     */
    authorized_fields: AuthorizedFieldMetadata[];
    /**
     * Unique decision ID that can be used to identify the policy
     * evaluation
     */
    decision_id?: string;
    /** Field Privileges. */
    field_privileges: FieldPrivileges;
    /**
     * Whether Field ACL is enabled or not for the user object/object
     * type.
     */
    is_field_acl_enabled: boolean;
    /** Whether MFZ is enabled or not for the user object/object type. */
    is_mfz_enabled: boolean;
    /**
     * The object type of the target for which user privileges are
     * requested.
     */
    object_type: string;
    /**
     * The list of the privileges the user has on the requested target
     * object/object type.
     */
    privileges: OperationType[];
    /** The subtype of the target for which user privileges are requested. */
    subtype?: string;
}
/** user-search-summary */
export type UserSearchSummary = SearchSummaryBase & {
    user: UserSummary;
};
/** user-session */
export type UserSession = AtomBase & {
    /** List of Artifacts related to user session. */
    artifacts?: ArtifactSummary[];
    /** Browser info for the session. */
    browser_info?: UserSessionBrowserInfo;
    /** List of external URLs associated with the user session. */
    external_urls?: string[];
    /** Insights for the session. */
    session_insights?: UserSessionInsights;
    /** Start URL of the user session. */
    start_url?: string;
    user: UserSummary;
};
/**
 * user-session-browser-info
 * Browser info for the session.
 */
export interface UserSessionBrowserInfo {
    /** Browser name associated with the user session. */
    browser_name?: UserSessionBrowserInfoBrowserName;
    /** Operating system associated with the user session. */
    operating_system?: UserSessionBrowserInfoOperatingSystem;
}
/** Browser name associated with the user session. */
export declare enum UserSessionBrowserInfoBrowserName {
    Brave = "brave",
    Chrome = "chrome",
    Edge = "edge",
    Firefox = "firefox",
    Opera = "opera",
    Other = "other",
    Safari = "safari"
}
/** Operating system associated with the user session. */
export declare enum UserSessionBrowserInfoOperatingSystem {
    Linux = "linux",
    Macos = "macos",
    Other = "other",
    Windows = "windows"
}
/**
 * user-session-insights
 * Insights for the session.
 */
export interface UserSessionInsights {
    /**
     * Number of console errors in the session.
     * @format int32
     */
    console_errors?: number;
    /**
     * Number of dead clicks in the session.
     * @format int32
     */
    dead_clicks?: number;
    /**
     * Number of 4XX network calls in the session.
     * @format int32
     */
    network_client_errors?: number;
    /**
     * Number of 5XX network calls in the session.
     * @format int32
     */
    network_server_errors?: number;
    /**
     * Number of rage clicks in the session.
     * @format int32
     */
    rage_clicks?: number;
    /**
     * Number of Slow network calls in the session.
     * @format int32
     */
    slow_network_calls?: number;
    /**
     * Time spent in seconds by the user in the session.
     * @format int32
     */
    time_spent?: number;
}
/** user-session-summary */
export type UserSessionSummary = AtomBaseSummary;
/** user-sessions-create-request */
export interface UserSessionsCreateRequest {
    /**
     * The artifact IDs which are to be associated with the user session
     * object.
     * @example ["ARTIFACT-12345"]
     */
    artifacts?: string[];
    /** Browser info for the session. */
    browser_info?: UserSessionBrowserInfo;
    /** The external URLs associated with the user session object. */
    external_urls?: string[];
    /** The start URL of the session. */
    start_url?: string;
}
/** user-sessions-create-response */
export interface UserSessionsCreateResponse {
    user_session: UserSession;
}
/** user-sessions-delete-request */
export interface UserSessionsDeleteRequest {
    /** ID of the user session object which is to be deleted. */
    id: string;
}
/** user-sessions-delete-response */
export type UserSessionsDeleteResponse = object;
/** user-sessions-get-request */
export interface UserSessionsGetRequest {
    /** The user session object ID. */
    id: string;
}
/** user-sessions-get-response */
export interface UserSessionsGetResponse {
    user_session: UserSession;
}
/** user-sessions-list-request */
export interface UserSessionsListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of user session objects to return. The default
     * is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /**
     * Fields to sort the user session object by and the direction to sort
     * them.
     */
    sort_by?: string[];
    /**
     * Filter for user session objects with the given user ID.
     * @example ["DEVU-12345"]
     */
    user?: string[];
}
/** user-sessions-list-response */
export interface UserSessionsListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The list of user session objects. */
    user_sessions: UserSession[];
}
/** user-sessions-update-request */
export interface UserSessionsUpdateRequest {
    artifacts?: UserSessionsUpdateRequestArtifacts;
    external_urls?: UserSessionsUpdateRequestExternalUrlsUpdate;
    /** ID of the user session object which is to be updated. */
    id: string;
    session_insights?: UserSessionsUpdateRequestUserSessionInsightsUpdate;
    /** The start URL of the session. */
    start_url?: string;
}
/** user-sessions-update-request-artifacts */
export interface UserSessionsUpdateRequestArtifacts {
    /**
     * Sets the IDs to the provided artifact IDs.
     * @example ["ARTIFACT-12345"]
     */
    set?: string[];
}
/** user-sessions-update-request-external-urls-update */
export interface UserSessionsUpdateRequestExternalUrlsUpdate {
    /** Sets the external URLs to the provided URLs. */
    set?: string[];
}
/** user-sessions-update-request-user-session-insights-update */
export interface UserSessionsUpdateRequestUserSessionInsightsUpdate {
    /** Insights for the session. */
    set?: UserSessionInsights;
}
/** user-sessions-update-response */
export interface UserSessionsUpdateResponse {
    user_session: UserSession;
}
/**
 * user-skill
 * Skill associated with the user.
 */
export interface UserSkill {
    /** Name of the skill. */
    name?: string;
}
/** State of the user. */
export declare enum UserState {
    Active = "active",
    Connected = "connected",
    Deactivated = "deactivated",
    Deleted = "deleted",
    Locked = "locked",
    Shadow = "shadow",
    Unassigned = "unassigned"
}
/** user-summary */
export type UserSummary = (DevUserSummary | DevrevProfileSummary | RevUserSummary | ServiceAccountSummary | SysUserSummary) & {
    type: UserType;
};
/**
 * user-traits-preferences-group
 * Preferences for setting user traits.
 */
export interface UserTraitsPreferencesGroup {
    /**
     * Predefined locations that can be assigned to DevUsers within this
     * DevOrg.
     */
    locations?: string[];
    /**
     * Predefined skills that can be assigned to DevUsers within this
     * DevOrg.
     */
    skill_types?: SkillType[];
}
export declare enum UserType {
    DevUser = "dev_user",
    DevrevProfile = "devrev_profile",
    RevUser = "rev_user",
    ServiceAccount = "service_account",
    SysUser = "sys_user"
}
/**
 * users-agents-update-request
 * A request by a user to grant/revoke an agent.
 */
export interface UsersAgentsUpdateRequest {
    /**
     * The ID of the agent (service account) that can perform actions on
     * behalf of the users.
     */
    agent: string;
    /** Scope options. */
    grant?: UsersAgentsUpdateRequestScopeOptions;
    /** Scope options. */
    revoke?: UsersAgentsUpdateRequestScopeOptions;
}
/**
 * users-agents-update-request-scope-options
 * Scope options.
 */
export interface UsersAgentsUpdateRequestScopeOptions {
    /** Whether to grant/revoke all scopes. */
    all?: boolean;
}
/**
 * users-agents-update-response
 * A response to the request by user to grant/revoke an agent.
 */
export type UsersAgentsUpdateResponse = object;
/** ux-store-get-request */
export interface UxStoreGetRequest {
    /**
     * The key of the document.
     * @deprecated
     */
    key?: string;
    /** The keys of the documents. */
    keys?: string[];
    /** The namespace of the document. */
    namespace: string;
}
/** ux-store-get-response */
export interface UxStoreGetResponse {
    /** The fetched documents. */
    documents: Document[];
    /**
     * The fetched document.
     * @deprecated
     */
    value: string;
}
/** ux-store-upsert-request */
export interface UxStoreUpsertRequest {
    /** The key of the document. */
    key: string;
    /** The namespace. */
    namespace: string;
    /**
     * The document must be a valid JSON.
     * @maxLength 10485760
     */
    value: string;
}
/** ux-store-upsert-response */
export type UxStoreUpsertResponse = object;
/** validate-flow-template-request */
export interface ValidateFlowTemplateRequest {
    /** New version of the flow. Required with old version. */
    new_version?: string;
    /** The new template as a string. */
    new_yaml: string;
    /** Old version of the flow. Required with old yaml. */
    old_version?: string;
    /** The old template as a string. */
    old_yaml?: string;
}
/** validate-flow-template-response */
export interface ValidateFlowTemplateResponse {
    /**
     * If the templates are valid and the version update (if applicable)
     * is allowed.
     */
    valid: boolean;
    /** Any error in the YAML or version update */
    validation_error?: string;
}
/**
 * vector
 * Vector is a wrapper around an embedding with an identifier.
 */
export interface Vector {
    /**
     * List of floating point numbers representing the embedding.
     * @maxItems 2048
     * @minItems 1
     */
    embedding: number[];
    /**
     * The vector's unique identifier.
     * @minLength 1
     * @maxLength 512
     */
    id: string;
}
/**
 * vector-store-index-create-request
 * This operation creates an index in DevRev Vector store. You can use it
 * to specify name and the dimension of vectors to be stored in the index.
 */
export interface VectorStoreIndexCreateRequest {
    /**
     * The dimension or size of the vectors to be stored in the index.
     * @format int32
     * @min 1
     * @max 2048
     */
    dimension: number;
    /**
     * Name of the index to be created.
     * @minLength 1
     * @maxLength 45
     */
    name: string;
}
/** vector-store-index-create-response */
export type VectorStoreIndexCreateResponse = object;
/**
 * vector-store-index-query-request
 * Retrieves the IDs of the most similar items in the index. The distance
 * metric used for similarity search is 'cosine'.
 */
export interface VectorStoreIndexQueryRequest {
    /**
     * Name of the index in which the query is to be performed.
     * @minLength 1
     */
    name: string;
    /**
     * The query vector. This should be the same length as the dimension
     * of the index being queried
     * @maxItems 2048
     * @minItems 1
     */
    query: number[];
    /**
     * The maximum number of results to return for each query.
     * @format int32
     * @min 1
     */
    topK?: number;
}
/**
 * vector-store-index-query-response
 * Returns results matching the query and limits the results to maximum
 * number of matches requested.
 */
export interface VectorStoreIndexQueryResponse {
    /**
     * List of IDs of the most similar items along with their similarity
     * scores.
     */
    results: QueryResult[];
}
/**
 * vector-store-index-upsert-request
 * Upserts vectors into the specified index.
 */
export interface VectorStoreIndexUpsertRequest {
    /**
     * Name of the index in which vectors are to be inserted.
     * @minLength 1
     * @maxLength 45
     */
    name: string;
    /**
     * List of vectors to be added in the index. If a new value is
     * upserted for an existing vector ID, it will overwrite the previous
     * value.
     * @maxItems 100
     * @minItems 1
     */
    vectors: Vector[];
}
/** vector-store-index-upsert-response */
export type VectorStoreIndexUpsertResponse = object;
/**
 * verify-check-code-request
 * Request to check the verification code received on the phone number via
 * previously invoked "verify.send-code" api.
 */
export interface VerifyCheckCodeRequest {
    /** The phone number to check the verification code for. */
    phone_number: string;
    /** The verification code to check.  */
    verification_code: string;
}
/**
 * verify-check-code-response
 * The response to check a verification code for a phone number.
 */
export interface VerifyCheckCodeResponse {
    /**
     * Whether the verification code is valid. The given code is
     * considered valid when it matches the code received on the given
     * phone number and the code has not expired. Verification codes
     * expires within 10 minutes of first invocation of"verify.send-code"
     * endpoint.
     */
    is_valid: boolean;
}
/** verify-redirect-mobile-signup-request */
export type VerifyRedirectMobileSignupRequest = object;
/** verify-redirect-mobile-signup-response */
export type VerifyRedirectMobileSignupResponse = object;
/**
 * verify-send-code-request
 * Request object to send a verification code to a phone number.
 */
export interface VerifySendCodeRequest {
    /** The phone number to send the verification code to. */
    phone_number: string;
}
/**
 * verify-send-code-response
 * Response to send a verification code to a phone number. On successful
 * response, the verification code is sent to the phone number. To verify
 * the phone number, validate the verification code using the
 * "verify.check-code" endpoint. In case of non-existing phone number the
 * endpoint will return an error.
 */
export type VerifySendCodeResponse = object;
/** vertex-v2 */
export type VertexV2 = (VertexV2Capability | VertexV2CustomPart | VertexV2Enhancement | VertexV2Feature | VertexV2Linkable | VertexV2Product | VertexV2Runnable) & {
    /**
     * ID of user who created the object.
     * @example "DEVU-12345"
     */
    created_by_id: string;
    /** The timestamp at which the object was created. */
    created_date: string;
    /** The ID of the Dev org. */
    dev_oid?: string;
    /** Human-readable ID specific to the Dev org. */
    display_id?: string;
    /** ID of the devrev object which is represented by this Vertex */
    id: string;
    /**
     * ID of the user who last modified the object.
     * @example "DEVU-12345"
     */
    modified_by_id: string;
    /** The timestamp at which the object was last modified. */
    modified_date: string;
    /** Name of the part. */
    name: string;
    object_type: VertexV2ObjectType;
    /**
     * The version of the object.
     * @format int64
     */
    object_version?: number;
    /** Designated category of the part. */
    part_category: PartCategory;
    part_type: PartType;
};
/** vertex-v2-capability */
export interface VertexV2Capability {
    /** IDs of the Dev part fullfilling the part. */
    fullfilled_by: string[];
    /** Links associated with the object. */
    links: ArchetypeLinkSummary[];
    /** ID of the parent part. */
    part_of_part_id: string;
}
/** vertex-v2-custom-part */
export type VertexV2CustomPart = object;
/** vertex-v2-enhancement */
export type VertexV2Enhancement = object;
/** vertex-v2-feature */
export interface VertexV2Feature {
    /** IDs of the Dev part fullfilling the part. */
    fullfilled_by: string[];
    /** Links associated with the object. */
    links: ArchetypeLinkSummary[];
    /** ID of the parent part. */
    part_of_part_id: string;
}
/** vertex-v2-linkable */
export interface VertexV2Linkable {
    /** Links associated with the object. */
    links: ArchetypeLinkSummary[];
}
export declare enum VertexV2ObjectType {
    Capability = "capability",
    CustomPart = "custom_part",
    Enhancement = "enhancement",
    Feature = "feature",
    Linkable = "linkable",
    Product = "product",
    Runnable = "runnable"
}
/** vertex-v2-product */
export interface VertexV2Product {
    /** IDs of the Dev part fullfilling the part. */
    fullfilled_by: string[];
    /** Links associated with the object. */
    links: ArchetypeLinkSummary[];
}
/** vertex-v2-runnable */
export interface VertexV2Runnable {
    /** Links associated with the object. */
    links: ArchetypeLinkSummary[];
}
/** view-frame */
export interface ViewFrame {
    background: ViewFrameBackground;
    foreground: ViewFrameForeground;
}
/** view-frame-background */
export interface ViewFrameBackground {
    current_filter?: object;
    object_ids: string[];
    route: AppRouteValue;
    vista_id?: string;
}
/** view-frame-foreground */
export interface ViewFrameForeground {
    side_panels: ObjectFrame[];
}
/** View type of vista/vista_group_item. */
export declare enum ViewType {
    ListView = "list_view",
    TimelineView = "timeline_view"
}
/**
 * vista
 * Represents a collection of DevRev objects.
 */
export type Vista = (CuratedVista | DynamicVista | GroupedVista) & {
    /** Type of vista object. */
    type: VistaType;
};
/** vista-base */
export type VistaBase = AtomBase & {
    access_level?: AccessLevel;
    /** List of parts to which the corresponding vista is linked. */
    applies_to_parts?: PartSummary[];
    custom_view?: CustomView;
    /** Description of the vista. */
    description?: string;
    /**
     * Timestamp when the vista ends.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    end_date?: string;
    /**
     * Denotes the icon associated with the object in the UI. For example,
     * 'BUG_SELECT', 'INBOX_MAIL_INCOMING'.
     */
    icon_type?: string;
    /** Boolean to specify whether it's a default Vista or not. */
    is_default?: boolean;
    /** Members associated with the object. */
    members?: ObjectMemberV1[];
    /** Name of the vista. */
    name: string;
    /** Users and groups associated with vista. */
    shared_with?: SharedWithMembership[];
    /**
     * Timestamp when the vista starts.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    start_date?: string;
    /** View type of vista/vista_group_item. */
    view_type?: ViewType;
};
/** vista-base-summary */
export type VistaBaseSummary = AtomBaseSummary & {
    /** Name of the vista. */
    name: string;
};
/**
 * vista-group
 * Represents a vista group item.
 */
export type VistaGroup = (ConversationsVistaGroupItem | PartsVistaGroupItem | WorksVistaGroupItem) & {
    /** Type of DevRev object for which the grouped vista is applicable. */
    object_type: GroupedVistaFilterType;
};
/** vista-group-base */
export interface VistaGroupBase {
    custom_view?: CustomView;
    /** Description of the group. */
    description?: string;
    /**
     * Timestamp when the vista group item ends.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    end_date?: string;
    /** Icon associated with the group in the UI. */
    icon_type?: string;
    /** Globally unique object ID. */
    id: string;
    /** Name of the group. */
    name: string;
    /** Represents a collection of DevRev objects. */
    parent?: VistaSummary;
    /**
     * Timestamp when the vista group item starts.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    start_date?: string;
    /** Defines the state of the group item. */
    state?: VistaGroupItemState;
    /** View type of vista/vista_group_item. */
    view_type?: ViewType;
}
/**
 * vista-group-item
 * Vista group item.
 */
export interface VistaGroupItem {
    /** Custom View Fields. */
    custom_view?: CustomViewFields;
    /** Description of the vista. */
    description?: string;
    /**
     * Timestamp when the vista ends.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    end_date?: string;
    /** Stores the corresponding object's list filter as a JSON object. */
    filter?: object;
    /** Denotes the icon associated with the group in the UI. */
    icon_type?: string;
    /** ID of the group item in don v2 format. */
    id: string;
    /** Item list to store a curated list of DevRev objects. */
    items?: AtomSummary[];
    /** Name of the group. */
    name: string;
    /** Represents a collection of DevRev objects. */
    parent?: VistaSummary;
    /**
     * Timestamp when the vista starts.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    start_date?: string;
    /** Defines the state of the group item. */
    state?: VistaGroupItemState;
    /** Type of the group object. */
    type: VistaGroupItemType;
    /** View type of vista group item. */
    view_type?: VistaGroupItemViewType;
}
/** Type of DevRev object for which the vista group item is applicable. */
export declare enum VistaGroupItemGroupObjectType {
    Conversation = "conversation",
    Part = "part",
    Work = "work"
}
/** Defines the state of the group item. */
export declare enum VistaGroupItemState {
    Active = "active",
    Completed = "completed",
    Planned = "planned"
}
/**
 * vista-group-item-summary
 * Vista group item.
 */
export interface VistaGroupItemSummary {
    /**
     * Timestamp when the vista ends.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    end_date?: string;
    /** ID of the group item in don v2 format. */
    id: string;
    /** Name of the group. */
    name: string;
    /** Represents a collection of DevRev objects. */
    parent?: VistaSummary;
    /**
     * Timestamp when the vista starts.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    start_date?: string;
    /** Defines the state of the group item. */
    state?: VistaGroupItemState;
    /** Type of the group object. */
    type: VistaGroupItemType;
}
/** Type of the group object. */
export declare enum VistaGroupItemType {
    Curated = "curated",
    Dynamic = "dynamic"
}
/** View type of vista group item. */
export declare enum VistaGroupItemViewType {
    ListView = "list_view",
    TimelineView = "timeline_view"
}
/** vista-member-value */
export interface VistaMemberValue {
    /** The ID of the member. */
    id: string;
    /** The ID of the role. */
    role: string;
}
/** Type of reference point positions. */
export declare enum VistaReferencePointPositionType {
    After = "after",
    Before = "before",
    Bottom = "bottom",
    Top = "top"
}
/** vista-search-summary */
export type VistaSearchSummary = SearchSummaryBase & {
    /** Represents a collection of DevRev objects. */
    vista: VistaSummary;
};
/** vista-shared-notification */
export type VistaSharedNotification = NotificationBase & {
    vista_id?: AtomSummary;
};
/** vista-shared-notification-summary */
export type VistaSharedNotificationSummary = NotificationBaseSummary;
/**
 * vista-summary
 * Represents a collection of DevRev objects.
 */
export type VistaSummary = (CuratedVistaSummary | DynamicVistaSummary | GroupedVistaSummary) & {
    /** Type of vista object. */
    type: VistaType;
};
/** Type of vista object. */
export declare enum VistaType {
    Curated = "curated",
    Dynamic = "dynamic",
    Grouped = "grouped"
}
/**
 * vistas-create-request
 * The request to create new vista.
 */
export type VistasCreateRequest = (VistasCreateRequestCuratedVista | VistasCreateRequestDynamicVista | VistasCreateRequestGroupedVista) & {
    /**
     * List of parts to which the corresponding vista is linked.
     * @example ["PROD-12345"]
     */
    applies_to_parts?: string[];
    custom_view?: CustomView;
    /** Description of the vista. */
    description?: string;
    /**
     * Timestamp when the vista ends.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    end_date?: string;
    /** Icon type for the vista. */
    icon_type?: string;
    /** Members associated with vista. */
    members?: VistaMemberValue[];
    /** Name of the vista. */
    name: string;
    /** Users and groups associated with vista. */
    shared_with?: SetSharedWithMembership[];
    /**
     * Timestamp when the vista starts.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    start_date?: string;
    /** Type of vista object. */
    type: VistaType;
    /** View type of vista/vista_group_item. */
    view_type?: ViewType;
};
/** vistas-create-request-curated-vista */
export interface VistasCreateRequestCuratedVista {
    /** Items associated with the vista. */
    items?: VistasCreateRequestCuratedVistaItemValue[];
}
/** vistas-create-request-curated-vista-item-value */
export interface VistasCreateRequestCuratedVistaItemValue {
    /**
     * The ID of the item.
     * @example "ISS-12345"
     */
    id: string;
}
/** vistas-create-request-dynamic-vista */
export type VistasCreateRequestDynamicVista = (VistasCreateRequestDynamicVistaAccountsVista | VistasCreateRequestDynamicVistaConversationsVista | VistasCreateRequestDynamicVistaCreditsVista | VistasCreateRequestDynamicVistaIncidentsVista | VistasCreateRequestDynamicVistaInvoicesVista | VistasCreateRequestDynamicVistaPartsVista | VistasCreateRequestDynamicVistaQuotesVista | VistasCreateRequestDynamicVistaRevOrgsVista | VistasCreateRequestDynamicVistaRevUsersVista | VistasCreateRequestDynamicVistaWorksVista) & {
    /** Type of DevRev object for which the vista is applicable. */
    filter_type: DynamicVistaFilterType;
};
/** vistas-create-request-dynamic-vista-accounts-vista */
export interface VistasCreateRequestDynamicVistaAccountsVista {
    filter: VistasCreateRequestDynamicVistaAccountsVistaFilter;
    /** Pinned items associated with the vista. */
    items?: VistasCreateRequestDynamicVistaAccountsVistaItemValue[];
}
/** vistas-create-request-dynamic-vista-accounts-vista-filter */
export interface VistasCreateRequestDynamicVistaAccountsVistaFilter {
    /** Filters for accounts created by the specified user(s). */
    created_by?: string[];
    created_by_op?: RevObjectTagsOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** Array of display names of accounts to be filtered. */
    display_name?: string[];
    /** Domains for accounts to be filtered. */
    domains?: string[];
    domains_op?: RevObjectTagsOperatorType;
    /** Environment values to be filtered. */
    environment?: OrgEnvironment[];
    /** Array of references of accounts to be filtered. */
    external_refs?: string[];
    external_refs_op?: RevObjectTagsOperatorType;
    /** The field to group the collection by. */
    group_by?: string;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** Filters for accounts owned by the specified user(s). */
    owned_by?: string[];
    owned_by_op?: RevObjectTagsOperatorType;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** Filters for accounts on specified stages. */
    stage?: string[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    subtype_op?: SubtypeOpOperatorType;
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    tags_op?: RevObjectTagsOperatorType;
    /** Array of tier for accounts to be filtered. */
    tier?: string[];
    tier_op?: RevObjectTagsOperatorType;
    /** Array of websites of accounts to be filtered. */
    websites?: string[];
    websites_op?: RevObjectTagsOperatorType;
}
/** vistas-create-request-dynamic-vista-accounts-vista-item-value */
export interface VistasCreateRequestDynamicVistaAccountsVistaItemValue {
    /**
     * The ID of the item.
     * @example "ACC-12345"
     */
    id: string;
}
/** vistas-create-request-dynamic-vista-conversations-vista */
export interface VistasCreateRequestDynamicVistaConversationsVista {
    filter: VistasCreateRequestDynamicVistaConversationsVistaFilter;
    /** Pinned items associated with the vista. */
    items?: VistasCreateRequestDynamicVistaConversationsVistaItemValue[];
}
/** vistas-create-request-dynamic-vista-conversations-vista-filter */
export interface VistasCreateRequestDynamicVistaConversationsVistaFilter {
    /**
     * Filters for conversations belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_parts?: string[];
    created_date?: DateTimeFilter;
    /** Filters for conversation that belong to the given groups. */
    group?: string[];
    /** The field to group the collection by. */
    group_by?: string;
    /** Filters for conversations that are created by verified users. */
    is_creator_verified?: boolean;
    /** Filters for conversations that are spam. */
    is_spam?: boolean;
    /**
     * Filters for conversations where these users are participants.
     * @example ["DEVU-12345"]
     */
    members?: string[];
    modified_date?: DateTimeFilter;
    /**
     * Filters for conversations owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for conversations that are associated with any of the
     * provided Rev organizations.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org?: string[];
    /**
     * Filters for conversations with any of the provided SLAs applying to
     * it.
     */
    sla?: string[];
    /**
     * Filters for conversations with any of the provided SLA stages.
     * @deprecated
     */
    sla_stage?: SlaSummaryStage[];
    /** The filter for SLA summary. */
    sla_summary?: SlaSummaryFilter;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** Filters for conversations with any of the provided source channels. */
    source_channels?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for conversations with any of the provided states. */
    state?: string[];
    /** The filter for survey aggregation. */
    surveys?: SurveyAggregationFilter;
    /**
     * Filters for conversations with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for conversations with any of the provided tags with value. */
    tags_v2?: TagWithValueFilter[];
    /** Filters for conversations with any of the provided ticket IDs. */
    tickets?: string[];
    /** Filters for conversations in which turing is active. */
    turing_active?: boolean;
}
/** vistas-create-request-dynamic-vista-conversations-vista-item-value */
export interface VistasCreateRequestDynamicVistaConversationsVistaItemValue {
    /** The ID of the item. */
    id: string;
}
/** vistas-create-request-dynamic-vista-credits-vista */
export interface VistasCreateRequestDynamicVistaCreditsVista {
    filter: VistasCreateRequestDynamicVistaCreditsVistaFilter;
}
/** vistas-create-request-dynamic-vista-credits-vista-filter */
export interface VistasCreateRequestDynamicVistaCreditsVistaFilter {
    /**
     * Filter credits by account.
     * @example ["ACC-12345"]
     */
    account_ids?: string[];
    /**
     * Filter items which have expiry date after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    after_expiry_date?: string;
    /**
     * Filter items which have expiry date before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    before_expiry_date?: string;
    /** Provides ways to specify date ranges on objects. */
    expiry_date?: DateFilter;
    /** The field to group the collection by. */
    group_by?: string;
    /** The list of credit object DONs which are to be aggregated. */
    ids?: string[];
    /**
     * The list of rev org DONs which are to be aggregated.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org_ids?: string[];
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** The list of status values which are to be aggregated. */
    statuses?: CreditStatus[];
    /** The list of type values which are to be aggregated. */
    types?: CreditType[];
}
/** vistas-create-request-dynamic-vista-incidents-vista */
export interface VistasCreateRequestDynamicVistaIncidentsVista {
    filter: VistasCreateRequestDynamicVistaIncidentsVistaFilter;
}
/** vistas-create-request-dynamic-vista-incidents-vista-filter */
export interface VistasCreateRequestDynamicVistaIncidentsVistaFilter {
    /** Filters for incidents that apply to any of the provided parts. */
    applies_to_parts?: string[];
    /**
     * Filters for incidents created by any of the provided users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: IncidentsListFiltersCreatedByOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /** The field to group the collection by. */
    group_by?: string;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** Filters for incidents owned by any of the provided users. */
    owned_by?: string[];
    owned_by_op?: IncidentsListFiltersOwnedByOperatorType;
    /** Filters for incidents containing any of the provided severities. */
    severity?: number[];
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** Filters for incidents in any of the provided stages. */
    stage?: string[];
    /** Filters for incidents with any of the provided states. */
    state?: string[];
    /** Filters for incidents with the provided tag and value. */
    tags?: TagWithValueFilter[];
    /** Filters for incidents by the provided titles. */
    title?: string[];
}
/** vistas-create-request-dynamic-vista-invoices-vista */
export interface VistasCreateRequestDynamicVistaInvoicesVista {
    filter: VistasCreateRequestDynamicVistaInvoicesVistaFilter;
}
/** vistas-create-request-dynamic-vista-invoices-vista-filter */
export interface VistasCreateRequestDynamicVistaInvoicesVistaFilter {
    /**
     * Filter invoices by account.
     * @example ["ACC-12345"]
     */
    account_ids?: string[];
    /**
     * Filter items which have invoice amount due greater than value
     * provided.
     * @format double
     */
    amount_due_greater_than?: number;
    /**
     * Filter items which have invoice amount due less than value
     * provided.
     * @format double
     */
    amount_due_less_than?: number;
    /**
     * Filter items which have invoice amount paid greater than value
     * provided.
     * @format double
     */
    amount_paid_greater_than?: number;
    /**
     * Filter items which have invoice amount paid less than value
     * provided.
     * @format double
     */
    amount_paid_less_than?: number;
    /** Provides ways to specify date ranges on objects. */
    billing_date?: DateFilter;
    /**
     * Filter items which have billing date after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    billing_date_after?: string;
    /**
     * Filter items which have billing date before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    billing_date_before?: string;
    /** Provides ways to specify date ranges on objects. */
    due_date?: DateFilter;
    /**
     * Filter items which have due date after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    due_date_after?: string;
    /**
     * Filter items which have due date before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    due_date_before?: string;
    /** The field to group the collection by. */
    group_by?: string;
    /** The list of Invoice DONs which are to be aggregated. */
    ids?: string[];
    /**
     * Filter items by doing queries on revs. To allow devs filter
     * invoices for specific revs.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org_ids?: string[];
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** The list of Invoice statuses which are to be aggregated. */
    statuses?: InvoiceStatus[];
    /**
     * Filter items which have invoice total greater than value provided.
     * @format double
     */
    total_greater_than?: number;
    /**
     * Filter items which have invoice total less than value provided.
     * @format double
     */
    total_less_than?: number;
    /** The list of invoice types which are to be aggregated. */
    types?: InvoiceType[];
}
/** vistas-create-request-dynamic-vista-parts-vista */
export interface VistasCreateRequestDynamicVistaPartsVista {
    filter: VistasCreateRequestDynamicVistaPartsVistaFilter;
    /** Pinned items associated with the vista. */
    items?: VistasCreateRequestDynamicVistaPartsVistaItemValue[];
}
/** vistas-create-request-dynamic-vista-parts-vista-filter */
export interface VistasCreateRequestDynamicVistaPartsVistaFilter {
    /** Filters for parts of the provided categories. */
    categories?: PartCategory[];
    /**
     * Filters for parts created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: PartsFilterCreatedByOpOperatorType;
    created_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    created_date_v2?: DateFilter;
    /** Filters for custom fields. */
    custom_fields?: object;
    enhancement?: PartsFilterEnhancement;
    /** The field to group the collection by. */
    group_by?: string;
    modified_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    modified_date_v2?: DateFilter;
    /** Filters for parts of the provided name(s). */
    name?: string[];
    /**
     * Filters for parts owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for parts owned by any of the provided users.
     * @deprecated
     * @example ["DEVU-12345"]
     */
    owned_by_ids?: string[];
    owned_by_op?: PartsFilterOwnedByOpOperatorType;
    /** The filter for specifying parent part. */
    parent_part?: ParentPartFilter;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for part with any of the provided states. */
    state?: string[];
    /** Filters for subtypes. */
    subtype?: string[];
    /**
     * Filters for parts with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tag_ids?: string[];
    /**
     * Filters for part with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    tags_op?: PartsFilterTagsOpOperatorType;
    /** Filters for parts of the provided type(s). */
    type?: PartType[];
    /**
     * Filters for parts of the provided type(s).
     * @deprecated
     */
    types?: PartType[];
    /**
     * Filters for parts belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
/** vistas-create-request-dynamic-vista-parts-vista-item-value */
export interface VistasCreateRequestDynamicVistaPartsVistaItemValue {
    /**
     * The ID of the item.
     * @example "PROD-12345"
     */
    id: string;
}
/** vistas-create-request-dynamic-vista-quotes-vista */
export interface VistasCreateRequestDynamicVistaQuotesVista {
    filter: VistasCreateRequestDynamicVistaQuotesVistaFilter;
}
/** vistas-create-request-dynamic-vista-quotes-vista-filter */
export interface VistasCreateRequestDynamicVistaQuotesVistaFilter {
    /**
     * The list of Account DONs for which quote objects are to be
     * aggregated.
     * @example ["ACC-12345"]
     */
    account_ids?: string[];
    /** Provides ways to specify date ranges on objects. */
    expiration_date?: DateFilter;
    /** The field to group the collection by. */
    group_by?: string;
    /** The list of Quote DONs which are to be aggregated. */
    ids?: string[];
    /**
     * The list of Opportunity DONs for which quote objects are to be
     * aggregated.
     * @example ["OPP-12345"]
     */
    opportunity_ids?: string[];
    /** Filter items which are owned by provided owner IDs. */
    owner_ids?: string[];
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for quote with any of the provided states. */
    state?: string[];
}
/** vistas-create-request-dynamic-vista-rev-orgs-vista */
export interface VistasCreateRequestDynamicVistaRevOrgsVista {
    filter: VistasCreateRequestDynamicVistaRevOrgsVistaFilter;
    /** Pinned items associated with the vista. */
    items?: VistasCreateRequestDynamicVistaRevOrgsVistaItemValue[];
}
/** vistas-create-request-dynamic-vista-rev-orgs-vista-filter */
export interface VistasCreateRequestDynamicVistaRevOrgsVistaFilter {
    /**
     * Filters by account.
     * @example ["ACC-12345"]
     */
    account?: string[];
    account_op?: RevOrgsFiltersAccountOperatorType;
    /** Filters by creator. */
    created_by?: string[];
    created_by_op?: RevObjectTagsOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** Array of display names of Rev orgs to be filtered. */
    display_name?: string[];
    /** Array of domain for Rev organizations to be filtered. */
    domain?: string[];
    /** Environment values to be filtered. */
    environment?: OrgEnvironment[];
    /** List of external refs to filter Rev organizations for. */
    external_ref?: string[];
    /** Array of external ref issuers for Rev organizations to be filtered. */
    external_ref_issuer?: string[];
    /** The field to group the collection by. */
    group_by?: string;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** Filters by owners. */
    owned_by?: string[];
    /**
     * Filters by owners.
     * @deprecated
     */
    owned_by_ids?: string[];
    owned_by_op?: RevObjectTagsOperatorType;
    /** Filter by SLA */
    sla?: string[];
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** State values to be filtered. */
    state?: OrgState[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    subtype_op?: SubtypeOpOperatorType;
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    tags_op?: RevObjectTagsOperatorType;
    /** Array of tier for Rev organizations to be filtered. */
    tier?: string[];
    /** Types of Rev organizations to be filtered. */
    type?: RevOrgType[];
}
/** vistas-create-request-dynamic-vista-rev-orgs-vista-item-value */
export interface VistasCreateRequestDynamicVistaRevOrgsVistaItemValue {
    /**
     * The ID of the item.
     * @example "REV-AbCdEfGh"
     */
    id: string;
}
/** vistas-create-request-dynamic-vista-rev-users-vista */
export interface VistasCreateRequestDynamicVistaRevUsersVista {
    filter: VistasCreateRequestDynamicVistaRevUsersVistaFilter;
    /** Pinned items associated with the vista. */
    items?: VistasCreateRequestDynamicVistaRevUsersVistaItemValue[];
}
/** vistas-create-request-dynamic-vista-rev-users-vista-filter */
export interface VistasCreateRequestDynamicVistaRevUsersVistaFilter {
    /**
     * Filters for Rev users belonging to the provided account IDs.
     * @maxItems 1
     * @example ["ACC-12345"]
     */
    account?: string[];
    /** Filters for Rev users that were created by the specified user(s). */
    created_by?: string[];
    created_by_op?: RevObjectTagsOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2)
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** List of emails of Rev users to be filtered. */
    email?: string[];
    email_op?: RevObjectTagsOperatorType;
    /** List of external refs to filter Rev users for. */
    external_ref?: string[];
    /** List of external ref issuers for Rev users to be filtered. */
    external_ref_issuer?: string[];
    external_ref_op?: RevObjectTagsOperatorType;
    /** The field to group the collection by. */
    group_by?: string;
    /** Value of is_verified field to filter the Rev users. */
    is_verified?: boolean;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** List of phone numbers, in E.164 format, to filter Rev users on. */
    phone_numbers?: string[];
    /** Filters for PLuG availability. */
    plug_availability?: RevUserPlugAvailability[];
    /**
     * List of IDs of Rev organizations to be filtered.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org?: string[];
    rev_org_op?: RevUsersFiltersRevOrgOperatorType;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** List of state of Rev users to be filtered. */
    state?: UserState[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    subtype_op?: SubtypeOpOperatorType;
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    tags_op?: RevObjectTagsOperatorType;
}
/** vistas-create-request-dynamic-vista-rev-users-vista-item-value */
export interface VistasCreateRequestDynamicVistaRevUsersVistaItemValue {
    /** The ID of the item. */
    id: string;
}
/** vistas-create-request-dynamic-vista-works-vista */
export interface VistasCreateRequestDynamicVistaWorksVista {
    filter: VistasCreateRequestDynamicVistaWorksVistaFilter;
    /** Pinned items associated with the vista. */
    items?: VistasCreateRequestDynamicVistaWorksVistaItemValue[];
}
/** vistas-create-request-dynamic-vista-works-vista-filter */
export interface VistasCreateRequestDynamicVistaWorksVistaFilter {
    /** Provides ways to specify date ranges on objects. */
    actual_close_date?: DateFilter;
    /**
     * Filters for work which have one of the parts present as its
     * ancestor part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /**
     * Filters for work belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_part?: string[];
    /**
     * Filters for work created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: WorksFilterCreatedByOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /** Filters for custom fields. */
    custom_fields?: object;
    /**
     * Filters for work excluding the provided work IDs.
     * @example ["ISS-12345"]
     */
    exclude?: string[];
    external_source_data?: WorksFilterExternalSourceData;
    /** The field to group the collection by. */
    group_by?: string;
    issue?: WorksFilterIssue;
    /** Provides ways to specify date ranges on objects. */
    last_internal_comment_date?: DateFilter;
    /** Filters for work with any of the provided link target objects. */
    link_target_object?: string[];
    link_target_object_op?: WorksFilterLinkTargetObjectOperatorType;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    opportunity?: WorksFilterOpportunity;
    /**
     * Filters for work owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    owned_by_op?: WorksFilterOwnedByOperatorType;
    /**
     * Filters for work reported by any of these users.
     * @example ["DEVU-12345"]
     */
    reported_by?: string[];
    reported_by_op?: WorksFilterReportedByOperatorType;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for work for the provided stage names. */
    stage_names?: string[];
    staged_info?: StagedInfoFilter;
    /** Filters for work with any of the provided states. */
    state?: string[];
    sync_metadata?: SyncMetadataFilter;
    tag_ids_op?: WorksFilterTagIdsOperatorType;
    /**
     * Filters for work with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for work with the provided tag and value. */
    tags_v2?: TagWithValueFilter[];
    /** Provides ways to specify date ranges on objects. */
    target_close_date?: DateFilter;
    task?: WorksFilterTask;
    ticket?: WorksFilterTicket;
    /** Filters for work of the provided types. */
    type?: WorkType[];
    /**
     * Filters for work belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
/** vistas-create-request-dynamic-vista-works-vista-item-value */
export interface VistasCreateRequestDynamicVistaWorksVistaItemValue {
    /**
     * The ID of the item.
     * @example "ISS-12345"
     */
    id: string;
}
/** vistas-create-request-grouped-vista */
export type VistasCreateRequestGroupedVista = (VistasCreateRequestGroupedVistaConversationsVista | VistasCreateRequestGroupedVistaPartsVista | VistasCreateRequestGroupedVistaWorksVista) & {
    /** Type of DevRev object for which the grouped vista is applicable. */
    filter_type: GroupedVistaFilterType;
    /** Denotes the use case of the grouped vista. */
    flavor?: GroupedVistaFlavor;
};
/** vistas-create-request-grouped-vista-conversations-vista */
export interface VistasCreateRequestGroupedVistaConversationsVista {
    filter?: VistasCreateRequestGroupedVistaConversationsVistaFilter;
    /** The list of vista groups. */
    groups?: VistasCreateRequestGroupedVistaConversationsVistaConversationsVistaGroupItem[];
}
/** vistas-create-request-grouped-vista-conversations-vista-conversations-vista-group-item */
export type VistasCreateRequestGroupedVistaConversationsVistaConversationsVistaGroupItem = (VistasCreateRequestGroupedVistaConversationsVistaConversationsVistaGroupItemCuratedGroup | VistasCreateRequestGroupedVistaConversationsVistaConversationsVistaGroupItemDynamicGroup) & {
    custom_view?: CustomView;
    /** Description of the group. */
    description?: string;
    /** Icon associated with the group in the UI. */
    icon_type?: string;
    /** Name of the group. */
    name: string;
    /** Type of works vista group item. */
    type: WorksVistaGroupItemType;
};
/** vistas-create-request-grouped-vista-conversations-vista-conversations-vista-group-item-curated-group */
export interface VistasCreateRequestGroupedVistaConversationsVistaConversationsVistaGroupItemCuratedGroup {
    /** Static list of conversation items. */
    items?: VistasCreateRequestGroupedVistaConversationsVistaConversationsVistaGroupItemCuratedGroupItemValue[];
}
/** vistas-create-request-grouped-vista-conversations-vista-conversations-vista-group-item-curated-group-item-value */
export interface VistasCreateRequestGroupedVistaConversationsVistaConversationsVistaGroupItemCuratedGroupItemValue {
    /** The ID of the item. */
    id: string;
}
/** vistas-create-request-grouped-vista-conversations-vista-conversations-vista-group-item-dynamic-group */
export interface VistasCreateRequestGroupedVistaConversationsVistaConversationsVistaGroupItemDynamicGroup {
    filter: VistasCreateRequestGroupedVistaConversationsVistaConversationsVistaGroupItemDynamicGroupFilter;
}
/** vistas-create-request-grouped-vista-conversations-vista-conversations-vista-group-item-dynamic-group-filter */
export interface VistasCreateRequestGroupedVistaConversationsVistaConversationsVistaGroupItemDynamicGroupFilter {
    /**
     * Filters for conversations belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_parts?: string[];
    created_date?: DateTimeFilter;
    /** Filters for conversation that belong to the given groups. */
    group?: string[];
    /** The field to group the collection by. */
    group_by?: string;
    /** Filters for conversations that are created by verified users. */
    is_creator_verified?: boolean;
    /** Filters for conversations that are spam. */
    is_spam?: boolean;
    /**
     * Filters for conversations where these users are participants.
     * @example ["DEVU-12345"]
     */
    members?: string[];
    modified_date?: DateTimeFilter;
    /**
     * Filters for conversations owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for conversations that are associated with any of the
     * provided Rev organizations.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org?: string[];
    /**
     * Filters for conversations with any of the provided SLAs applying to
     * it.
     */
    sla?: string[];
    /**
     * Filters for conversations with any of the provided SLA stages.
     * @deprecated
     */
    sla_stage?: SlaSummaryStage[];
    /** The filter for SLA summary. */
    sla_summary?: SlaSummaryFilter;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** Filters for conversations with any of the provided source channels. */
    source_channels?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for conversations with any of the provided states. */
    state?: string[];
    /** The filter for survey aggregation. */
    surveys?: SurveyAggregationFilter;
    /**
     * Filters for conversations with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for conversations with any of the provided tags with value. */
    tags_v2?: TagWithValueFilter[];
    /** Filters for conversations with any of the provided ticket IDs. */
    tickets?: string[];
    /** Filters for conversations in which turing is active. */
    turing_active?: boolean;
}
/** vistas-create-request-grouped-vista-conversations-vista-filter */
export interface VistasCreateRequestGroupedVistaConversationsVistaFilter {
    /**
     * Filters for conversations belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_parts?: string[];
    created_date?: DateTimeFilter;
    /** Filters for conversation that belong to the given groups. */
    group?: string[];
    /** The field to group the collection by. */
    group_by?: string;
    /** Filters for conversations that are created by verified users. */
    is_creator_verified?: boolean;
    /** Filters for conversations that are spam. */
    is_spam?: boolean;
    /**
     * Filters for conversations where these users are participants.
     * @example ["DEVU-12345"]
     */
    members?: string[];
    modified_date?: DateTimeFilter;
    /**
     * Filters for conversations owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for conversations that are associated with any of the
     * provided Rev organizations.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org?: string[];
    /**
     * Filters for conversations with any of the provided SLAs applying to
     * it.
     */
    sla?: string[];
    /**
     * Filters for conversations with any of the provided SLA stages.
     * @deprecated
     */
    sla_stage?: SlaSummaryStage[];
    /** The filter for SLA summary. */
    sla_summary?: SlaSummaryFilter;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** Filters for conversations with any of the provided source channels. */
    source_channels?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for conversations with any of the provided states. */
    state?: string[];
    /** The filter for survey aggregation. */
    surveys?: SurveyAggregationFilter;
    /**
     * Filters for conversations with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for conversations with any of the provided tags with value. */
    tags_v2?: TagWithValueFilter[];
    /** Filters for conversations with any of the provided ticket IDs. */
    tickets?: string[];
    /** Filters for conversations in which turing is active. */
    turing_active?: boolean;
}
/** vistas-create-request-grouped-vista-parts-vista */
export interface VistasCreateRequestGroupedVistaPartsVista {
    filter?: VistasCreateRequestGroupedVistaPartsVistaFilter;
    /** The list of vista groups. */
    groups?: VistasCreateRequestGroupedVistaPartsVistaPartsVistaGroupItem[];
}
/** vistas-create-request-grouped-vista-parts-vista-filter */
export interface VistasCreateRequestGroupedVistaPartsVistaFilter {
    /** Filters for parts of the provided categories. */
    categories?: PartCategory[];
    /**
     * Filters for parts created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: PartsFilterCreatedByOpOperatorType;
    created_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    created_date_v2?: DateFilter;
    /** Filters for custom fields. */
    custom_fields?: object;
    enhancement?: PartsFilterEnhancement;
    /** The field to group the collection by. */
    group_by?: string;
    modified_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    modified_date_v2?: DateFilter;
    /** Filters for parts of the provided name(s). */
    name?: string[];
    /**
     * Filters for parts owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for parts owned by any of the provided users.
     * @deprecated
     * @example ["DEVU-12345"]
     */
    owned_by_ids?: string[];
    owned_by_op?: PartsFilterOwnedByOpOperatorType;
    /** The filter for specifying parent part. */
    parent_part?: ParentPartFilter;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for part with any of the provided states. */
    state?: string[];
    /** Filters for subtypes. */
    subtype?: string[];
    /**
     * Filters for parts with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tag_ids?: string[];
    /**
     * Filters for part with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    tags_op?: PartsFilterTagsOpOperatorType;
    /** Filters for parts of the provided type(s). */
    type?: PartType[];
    /**
     * Filters for parts of the provided type(s).
     * @deprecated
     */
    types?: PartType[];
    /**
     * Filters for parts belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
/** vistas-create-request-grouped-vista-parts-vista-parts-vista-group-item */
export type VistasCreateRequestGroupedVistaPartsVistaPartsVistaGroupItem = (VistasCreateRequestGroupedVistaPartsVistaPartsVistaGroupItemCuratedGroup | VistasCreateRequestGroupedVistaPartsVistaPartsVistaGroupItemDynamicGroup) & {
    custom_view?: CustomView;
    /** Description of the group. */
    description?: string;
    /** Icon associated with the group in the UI. */
    icon_type?: string;
    /** Name of the group. */
    name: string;
    /** Type of works vista group item. */
    type: WorksVistaGroupItemType;
    /** View type of vista/vista_group_item. */
    view_type?: ViewType;
};
/** vistas-create-request-grouped-vista-parts-vista-parts-vista-group-item-curated-group */
export interface VistasCreateRequestGroupedVistaPartsVistaPartsVistaGroupItemCuratedGroup {
    /** Static list of part items. */
    items?: VistasCreateRequestGroupedVistaPartsVistaPartsVistaGroupItemCuratedGroupItemValue[];
}
/** vistas-create-request-grouped-vista-parts-vista-parts-vista-group-item-curated-group-item-value */
export interface VistasCreateRequestGroupedVistaPartsVistaPartsVistaGroupItemCuratedGroupItemValue {
    /**
     * The ID of the item.
     * @example "PROD-12345"
     */
    id: string;
}
/** vistas-create-request-grouped-vista-parts-vista-parts-vista-group-item-dynamic-group */
export interface VistasCreateRequestGroupedVistaPartsVistaPartsVistaGroupItemDynamicGroup {
    filter: VistasCreateRequestGroupedVistaPartsVistaPartsVistaGroupItemDynamicGroupFilter;
}
/** vistas-create-request-grouped-vista-parts-vista-parts-vista-group-item-dynamic-group-filter */
export interface VistasCreateRequestGroupedVistaPartsVistaPartsVistaGroupItemDynamicGroupFilter {
    /** Filters for parts of the provided categories. */
    categories?: PartCategory[];
    /**
     * Filters for parts created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: PartsFilterCreatedByOpOperatorType;
    created_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    created_date_v2?: DateFilter;
    /** Filters for custom fields. */
    custom_fields?: object;
    enhancement?: PartsFilterEnhancement;
    /** The field to group the collection by. */
    group_by?: string;
    modified_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    modified_date_v2?: DateFilter;
    /** Filters for parts of the provided name(s). */
    name?: string[];
    /**
     * Filters for parts owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for parts owned by any of the provided users.
     * @deprecated
     * @example ["DEVU-12345"]
     */
    owned_by_ids?: string[];
    owned_by_op?: PartsFilterOwnedByOpOperatorType;
    /** The filter for specifying parent part. */
    parent_part?: ParentPartFilter;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for part with any of the provided states. */
    state?: string[];
    /** Filters for subtypes. */
    subtype?: string[];
    /**
     * Filters for parts with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tag_ids?: string[];
    /**
     * Filters for part with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    tags_op?: PartsFilterTagsOpOperatorType;
    /** Filters for parts of the provided type(s). */
    type?: PartType[];
    /**
     * Filters for parts of the provided type(s).
     * @deprecated
     */
    types?: PartType[];
    /**
     * Filters for parts belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
/** vistas-create-request-grouped-vista-works-vista */
export interface VistasCreateRequestGroupedVistaWorksVista {
    filter?: VistasCreateRequestGroupedVistaWorksVistaFilter;
    /** The list of vista groups. */
    groups?: VistasCreateRequestGroupedVistaWorksVistaWorksVistaGroupItem[];
}
/** vistas-create-request-grouped-vista-works-vista-filter */
export interface VistasCreateRequestGroupedVistaWorksVistaFilter {
    /** Provides ways to specify date ranges on objects. */
    actual_close_date?: DateFilter;
    /**
     * Filters for work which have one of the parts present as its
     * ancestor part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /**
     * Filters for work belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_part?: string[];
    /**
     * Filters for work created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: WorksFilterCreatedByOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /** Filters for custom fields. */
    custom_fields?: object;
    /**
     * Filters for work excluding the provided work IDs.
     * @example ["ISS-12345"]
     */
    exclude?: string[];
    external_source_data?: WorksFilterExternalSourceData;
    /** The field to group the collection by. */
    group_by?: string;
    issue?: WorksFilterIssue;
    /** Provides ways to specify date ranges on objects. */
    last_internal_comment_date?: DateFilter;
    /** Filters for work with any of the provided link target objects. */
    link_target_object?: string[];
    link_target_object_op?: WorksFilterLinkTargetObjectOperatorType;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    opportunity?: WorksFilterOpportunity;
    /**
     * Filters for work owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    owned_by_op?: WorksFilterOwnedByOperatorType;
    /**
     * Filters for work reported by any of these users.
     * @example ["DEVU-12345"]
     */
    reported_by?: string[];
    reported_by_op?: WorksFilterReportedByOperatorType;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for work for the provided stage names. */
    stage_names?: string[];
    staged_info?: StagedInfoFilter;
    /** Filters for work with any of the provided states. */
    state?: string[];
    sync_metadata?: SyncMetadataFilter;
    tag_ids_op?: WorksFilterTagIdsOperatorType;
    /**
     * Filters for work with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for work with the provided tag and value. */
    tags_v2?: TagWithValueFilter[];
    /** Provides ways to specify date ranges on objects. */
    target_close_date?: DateFilter;
    task?: WorksFilterTask;
    ticket?: WorksFilterTicket;
    /** Filters for work of the provided types. */
    type?: WorkType[];
    /**
     * Filters for work belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
/** vistas-create-request-grouped-vista-works-vista-works-vista-group-item */
export type VistasCreateRequestGroupedVistaWorksVistaWorksVistaGroupItem = (VistasCreateRequestGroupedVistaWorksVistaWorksVistaGroupItemCuratedGroup | VistasCreateRequestGroupedVistaWorksVistaWorksVistaGroupItemDynamicGroup) & {
    custom_view?: CustomView;
    /** Description of the group. */
    description?: string;
    /**
     * Timestamp when the vista group item ends.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    end_date?: string;
    /** Icon associated with the group in the UI. */
    icon_type?: string;
    /** Name of the group. */
    name: string;
    /**
     * Timestamp when the vista group item starts.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    start_date?: string;
    /** Type of works vista group item. */
    type: WorksVistaGroupItemType;
    /** View type of vista/vista_group_item. */
    view_type?: ViewType;
};
/** vistas-create-request-grouped-vista-works-vista-works-vista-group-item-curated-group */
export interface VistasCreateRequestGroupedVistaWorksVistaWorksVistaGroupItemCuratedGroup {
    /** Static list of work items. */
    items?: VistasCreateRequestGroupedVistaWorksVistaWorksVistaGroupItemCuratedGroupItemValue[];
}
/** vistas-create-request-grouped-vista-works-vista-works-vista-group-item-curated-group-item-value */
export interface VistasCreateRequestGroupedVistaWorksVistaWorksVistaGroupItemCuratedGroupItemValue {
    /**
     * The ID of the item.
     * @example "ISS-12345"
     */
    id: string;
}
/** vistas-create-request-grouped-vista-works-vista-works-vista-group-item-dynamic-group */
export interface VistasCreateRequestGroupedVistaWorksVistaWorksVistaGroupItemDynamicGroup {
    filter: VistasCreateRequestGroupedVistaWorksVistaWorksVistaGroupItemDynamicGroupFilter;
}
/** vistas-create-request-grouped-vista-works-vista-works-vista-group-item-dynamic-group-filter */
export interface VistasCreateRequestGroupedVistaWorksVistaWorksVistaGroupItemDynamicGroupFilter {
    /** Provides ways to specify date ranges on objects. */
    actual_close_date?: DateFilter;
    /**
     * Filters for work which have one of the parts present as its
     * ancestor part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /**
     * Filters for work belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_part?: string[];
    /**
     * Filters for work created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: WorksFilterCreatedByOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /** Filters for custom fields. */
    custom_fields?: object;
    /**
     * Filters for work excluding the provided work IDs.
     * @example ["ISS-12345"]
     */
    exclude?: string[];
    external_source_data?: WorksFilterExternalSourceData;
    /** The field to group the collection by. */
    group_by?: string;
    issue?: WorksFilterIssue;
    /** Provides ways to specify date ranges on objects. */
    last_internal_comment_date?: DateFilter;
    /** Filters for work with any of the provided link target objects. */
    link_target_object?: string[];
    link_target_object_op?: WorksFilterLinkTargetObjectOperatorType;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    opportunity?: WorksFilterOpportunity;
    /**
     * Filters for work owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    owned_by_op?: WorksFilterOwnedByOperatorType;
    /**
     * Filters for work reported by any of these users.
     * @example ["DEVU-12345"]
     */
    reported_by?: string[];
    reported_by_op?: WorksFilterReportedByOperatorType;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for work for the provided stage names. */
    stage_names?: string[];
    staged_info?: StagedInfoFilter;
    /** Filters for work with any of the provided states. */
    state?: string[];
    sync_metadata?: SyncMetadataFilter;
    tag_ids_op?: WorksFilterTagIdsOperatorType;
    /**
     * Filters for work with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for work with the provided tag and value. */
    tags_v2?: TagWithValueFilter[];
    /** Provides ways to specify date ranges on objects. */
    target_close_date?: DateFilter;
    task?: WorksFilterTask;
    ticket?: WorksFilterTicket;
    /** Filters for work of the provided types. */
    type?: WorkType[];
    /**
     * Filters for work belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
/**
 * vistas-create-response
 * The response to vista creation.
 */
export interface VistasCreateResponse {
    /** Represents a collection of DevRev objects. */
    vista: Vista;
}
/**
 * vistas-delete-request
 * The request to delete a vista.
 */
export interface VistasDeleteRequest {
    /**
     * The ID of the vista to delete.
     * @example "VISTA-12345"
     */
    id: string;
}
/**
 * vistas-delete-response
 * The response when deleting a vista.
 */
export type VistasDeleteResponse = object;
export declare enum VistasFilterFlavorOperatorType {
    Any = "any",
    NotAny = "not_any",
    NotNull = "not_null",
    Null = "null"
}
/**
 * vistas-get-request
 * The request to get a vista's information.
 */
export interface VistasGetRequest {
    /**
     * The vista's ID.
     * @example "VISTA-12345"
     */
    id: string;
}
/**
 * vistas-get-response
 * The response to getting a vista's information.
 */
export interface VistasGetResponse {
    /** Represents a collection of DevRev objects. */
    vista: Vista;
}
/**
 * vistas-group-items-move-request
 * The request to move items from a source vista group to a target vista
 * group.
 */
export interface VistasGroupItemsMoveRequest {
    /**
     * The work items to be moved.
     * @example ["ISS-12345"]
     */
    items: string[];
    /** The vista group ID from which the items needs to be moved out. */
    source?: string;
    /** The vista group ID to which the items are moved to. */
    target?: string;
}
/**
 * vistas-group-items-move-response
 * The response to doing a move operation on source-vista's group.
 */
export interface VistasGroupItemsMoveResponse {
    /** Represents a vista group item. */
    source_vista_group?: VistaGroup;
    /** Represents a vista group item. */
    target_vista_group?: VistaGroup;
}
/**
 * vistas-groups-create-request
 * The request to create a vista group item.
 */
export type VistasGroupsCreateRequest = (VistasGroupsCreateRequestConversationsGroupItem | VistasGroupsCreateRequestPartsGroupItem | VistasGroupsCreateRequestWorksGroupItem) & {
    custom_view?: CustomView;
    /** Description of the vista group. */
    description?: string;
    /**
     * Timestamp when the vista group ends.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    end_date?: string;
    /** Icon type for the vista group. */
    icon_type?: string;
    /** Name of the vista group. */
    name: string;
    /** Type of DevRev object for which the grouped vista is applicable. */
    object_type: GroupedVistaFilterType;
    /**
     * Parent ID of the vista group item.
     * @example "VISTA-12345"
     */
    parent_id?: string;
    /**
     * Timestamp when the vista group starts.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    start_date?: string;
    /** Defines the state of the group item. */
    state?: VistaGroupItemState;
    /** View type of vista/vista_group_item. */
    view_type?: ViewType;
};
/** vistas-groups-create-request-conversations-group-item */
export type VistasGroupsCreateRequestConversationsGroupItem = (VistasGroupsCreateRequestConversationsGroupItemCuratedGroup | VistasGroupsCreateRequestConversationsGroupItemDynamicGroup) & {
    /** Type of conversations vista group item. */
    type: ConversationsVistaGroupItemType;
};
/** vistas-groups-create-request-conversations-group-item-curated-group */
export interface VistasGroupsCreateRequestConversationsGroupItemCuratedGroup {
    /** ID of the items. */
    items: string[];
}
/** vistas-groups-create-request-conversations-group-item-dynamic-group */
export interface VistasGroupsCreateRequestConversationsGroupItemDynamicGroup {
    filter?: VistasGroupsCreateRequestConversationsGroupItemDynamicGroupFilter;
    /** ID of the items. */
    items: string[];
}
/** vistas-groups-create-request-conversations-group-item-dynamic-group-filter */
export interface VistasGroupsCreateRequestConversationsGroupItemDynamicGroupFilter {
    /**
     * Filters for conversations belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_parts?: string[];
    created_date?: DateTimeFilter;
    /** Filters for conversation that belong to the given groups. */
    group?: string[];
    /** The field to group the collection by. */
    group_by?: string;
    /** Filters for conversations that are created by verified users. */
    is_creator_verified?: boolean;
    /** Filters for conversations that are spam. */
    is_spam?: boolean;
    /**
     * Filters for conversations where these users are participants.
     * @example ["DEVU-12345"]
     */
    members?: string[];
    modified_date?: DateTimeFilter;
    /**
     * Filters for conversations owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for conversations that are associated with any of the
     * provided Rev organizations.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org?: string[];
    /**
     * Filters for conversations with any of the provided SLAs applying to
     * it.
     */
    sla?: string[];
    /**
     * Filters for conversations with any of the provided SLA stages.
     * @deprecated
     */
    sla_stage?: SlaSummaryStage[];
    /** The filter for SLA summary. */
    sla_summary?: SlaSummaryFilter;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** Filters for conversations with any of the provided source channels. */
    source_channels?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for conversations with any of the provided states. */
    state?: string[];
    /** The filter for survey aggregation. */
    surveys?: SurveyAggregationFilter;
    /**
     * Filters for conversations with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for conversations with any of the provided tags with value. */
    tags_v2?: TagWithValueFilter[];
    /** Filters for conversations with any of the provided ticket IDs. */
    tickets?: string[];
    /** Filters for conversations in which turing is active. */
    turing_active?: boolean;
}
/** vistas-groups-create-request-parts-group-item */
export type VistasGroupsCreateRequestPartsGroupItem = (VistasGroupsCreateRequestPartsGroupItemCuratedGroup | VistasGroupsCreateRequestPartsGroupItemDynamicGroup) & {
    /** Type of parts vista group item. */
    type: PartsVistaGroupItemType;
};
/** vistas-groups-create-request-parts-group-item-curated-group */
export interface VistasGroupsCreateRequestPartsGroupItemCuratedGroup {
    /**
     * ID of the items.
     * @example ["PROD-12345"]
     */
    items: string[];
}
/** vistas-groups-create-request-parts-group-item-dynamic-group */
export interface VistasGroupsCreateRequestPartsGroupItemDynamicGroup {
    filter?: VistasGroupsCreateRequestPartsGroupItemDynamicGroupFilter;
    /**
     * ID of the items.
     * @example ["PROD-12345"]
     */
    items: string[];
}
/** vistas-groups-create-request-parts-group-item-dynamic-group-filter */
export interface VistasGroupsCreateRequestPartsGroupItemDynamicGroupFilter {
    /** Filters for parts of the provided categories. */
    categories?: PartCategory[];
    /**
     * Filters for parts created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: PartsFilterCreatedByOpOperatorType;
    created_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    created_date_v2?: DateFilter;
    /** Filters for custom fields. */
    custom_fields?: object;
    enhancement?: PartsFilterEnhancement;
    /** The field to group the collection by. */
    group_by?: string;
    modified_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    modified_date_v2?: DateFilter;
    /** Filters for parts of the provided name(s). */
    name?: string[];
    /**
     * Filters for parts owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for parts owned by any of the provided users.
     * @deprecated
     * @example ["DEVU-12345"]
     */
    owned_by_ids?: string[];
    owned_by_op?: PartsFilterOwnedByOpOperatorType;
    /** The filter for specifying parent part. */
    parent_part?: ParentPartFilter;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for part with any of the provided states. */
    state?: string[];
    /** Filters for subtypes. */
    subtype?: string[];
    /**
     * Filters for parts with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tag_ids?: string[];
    /**
     * Filters for part with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    tags_op?: PartsFilterTagsOpOperatorType;
    /** Filters for parts of the provided type(s). */
    type?: PartType[];
    /**
     * Filters for parts of the provided type(s).
     * @deprecated
     */
    types?: PartType[];
    /**
     * Filters for parts belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
/** vistas-groups-create-request-works-group-item */
export type VistasGroupsCreateRequestWorksGroupItem = (VistasGroupsCreateRequestWorksGroupItemCuratedGroup | VistasGroupsCreateRequestWorksGroupItemDynamicGroup) & {
    /** Type of works vista group item. */
    type: WorksVistaGroupItemType;
};
/** vistas-groups-create-request-works-group-item-curated-group */
export interface VistasGroupsCreateRequestWorksGroupItemCuratedGroup {
    /**
     * ID of the items.
     * @example ["ISS-12345"]
     */
    items: string[];
}
/** vistas-groups-create-request-works-group-item-dynamic-group */
export interface VistasGroupsCreateRequestWorksGroupItemDynamicGroup {
    filter?: VistasGroupsCreateRequestWorksGroupItemDynamicGroupFilter;
    /**
     * ID of the items.
     * @example ["ISS-12345"]
     */
    items: string[];
}
/** vistas-groups-create-request-works-group-item-dynamic-group-filter */
export interface VistasGroupsCreateRequestWorksGroupItemDynamicGroupFilter {
    /** Provides ways to specify date ranges on objects. */
    actual_close_date?: DateFilter;
    /**
     * Filters for work which have one of the parts present as its
     * ancestor part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /**
     * Filters for work belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_part?: string[];
    /**
     * Filters for work created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: WorksFilterCreatedByOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /** Filters for custom fields. */
    custom_fields?: object;
    /**
     * Filters for work excluding the provided work IDs.
     * @example ["ISS-12345"]
     */
    exclude?: string[];
    external_source_data?: WorksFilterExternalSourceData;
    /** The field to group the collection by. */
    group_by?: string;
    issue?: WorksFilterIssue;
    /** Provides ways to specify date ranges on objects. */
    last_internal_comment_date?: DateFilter;
    /** Filters for work with any of the provided link target objects. */
    link_target_object?: string[];
    link_target_object_op?: WorksFilterLinkTargetObjectOperatorType;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    opportunity?: WorksFilterOpportunity;
    /**
     * Filters for work owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    owned_by_op?: WorksFilterOwnedByOperatorType;
    /**
     * Filters for work reported by any of these users.
     * @example ["DEVU-12345"]
     */
    reported_by?: string[];
    reported_by_op?: WorksFilterReportedByOperatorType;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for work for the provided stage names. */
    stage_names?: string[];
    staged_info?: StagedInfoFilter;
    /** Filters for work with any of the provided states. */
    state?: string[];
    sync_metadata?: SyncMetadataFilter;
    tag_ids_op?: WorksFilterTagIdsOperatorType;
    /**
     * Filters for work with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for work with the provided tag and value. */
    tags_v2?: TagWithValueFilter[];
    /** Provides ways to specify date ranges on objects. */
    target_close_date?: DateFilter;
    task?: WorksFilterTask;
    ticket?: WorksFilterTicket;
    /** Filters for work of the provided types. */
    type?: WorkType[];
    /**
     * Filters for work belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
/**
 * vistas-groups-create-response
 * The response to vista group creation.
 */
export interface VistasGroupsCreateResponse {
    /** Represents a vista group item. */
    vista_group: VistaGroup;
}
/** vistas-groups-delete-request */
export interface VistasGroupsDeleteRequest {
    /** ID of the vista group item to be deleted. */
    id: string;
}
/** vistas-groups-delete-response */
export type VistasGroupsDeleteResponse = object;
/**
 * vistas-groups-get-request
 * The request to get a vista group item's information.
 */
export interface VistasGroupsGetRequest {
    /** The vista group item's ID. */
    id: string;
}
/**
 * vistas-groups-get-response
 * The response to getting a vista group item's information.
 */
export interface VistasGroupsGetResponse {
    /** Represents a vista group item. */
    vista_group: VistaGroup;
}
/** vistas-groups-list-request */
export interface VistasGroupsListRequest {
    /**
     * Filters for vista group items which have one of the parts linked as
     * its ancestor part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /** The filter for applies to part. */
    applies_to_part?: AppliesToPartFilter;
    /**
     * Filter for vistas group item created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** Provides ways to specify date ranges on objects. */
    end_date?: DateFilter;
    /** Filters for vista group items of the specific group object type. */
    group_object_type?: VistaGroupItemGroupObjectType[];
    /**
     * The request to get information about a list of vista groups.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /**
     * Parent ID of the vista group item.
     * @example ["VISTA-12345"]
     */
    parent_id?: string[];
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** Provides ways to specify date ranges on objects. */
    start_date?: DateFilter;
    /** Denotes the state of the vista group item. */
    state?: VistaGroupItemState[];
    /** Filters for vista group items of the specific type. */
    type?: GroupItemType[];
}
/**
 * vistas-groups-list-response
 * The response to listing the vistas group items.
 */
export interface VistasGroupsListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** List of vista group items. */
    vista_group?: VistaGroup[];
}
/**
 * vistas-groups-update-request
 * The request to update a vista's group.
 */
export type VistasGroupsUpdateRequest = (VistasGroupsUpdateRequestConversationsGroupItem | VistasGroupsUpdateRequestPartsGroupItem | VistasGroupsUpdateRequestWorksGroupItem) & {
    custom_view?: VistasGroupsUpdateRequestCustomView;
    /** Updated description of the group. */
    description?: string;
    /**
     * Timestamp when the vista ends.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    end_date?: string;
    /** Updated icon associated with the group in the UI. */
    icon_type?: string;
    /** The ID of the vista group to update. */
    id: string;
    /** Updated name of the group. */
    name?: string;
    /** Type of DevRev object for which the grouped vista is applicable. */
    object_type: GroupedVistaFilterType;
    /**
     * Timestamp when the vista starts.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    start_date?: string;
    /** View type of vista/vista_group_item. */
    view_type?: ViewType;
};
/** vistas-groups-update-request-conversations-group-item */
export type VistasGroupsUpdateRequestConversationsGroupItem = (VistasGroupsUpdateRequestConversationsGroupItemCuratedGroup | VistasGroupsUpdateRequestConversationsGroupItemDynamicGroup) & {
    /** Type of conversations vista group item. */
    type: ConversationsVistaGroupItemType;
};
/** vistas-groups-update-request-conversations-group-item-curated-group */
export interface VistasGroupsUpdateRequestConversationsGroupItemCuratedGroup {
    items?: VistasGroupsUpdateRequestItems;
}
/** vistas-groups-update-request-conversations-group-item-dynamic-group */
export interface VistasGroupsUpdateRequestConversationsGroupItemDynamicGroup {
    filter?: VistasGroupsUpdateRequestConversationsGroupItemDynamicGroupFilter;
    items?: VistasGroupsUpdateRequestItems;
}
/** vistas-groups-update-request-conversations-group-item-dynamic-group-filter */
export interface VistasGroupsUpdateRequestConversationsGroupItemDynamicGroupFilter {
    /**
     * Filters for conversations belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_parts?: string[];
    created_date?: DateTimeFilter;
    /** Filters for conversation that belong to the given groups. */
    group?: string[];
    /** The field to group the collection by. */
    group_by?: string;
    /** Filters for conversations that are created by verified users. */
    is_creator_verified?: boolean;
    /** Filters for conversations that are spam. */
    is_spam?: boolean;
    /**
     * Filters for conversations where these users are participants.
     * @example ["DEVU-12345"]
     */
    members?: string[];
    modified_date?: DateTimeFilter;
    /**
     * Filters for conversations owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for conversations that are associated with any of the
     * provided Rev organizations.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org?: string[];
    /**
     * Filters for conversations with any of the provided SLAs applying to
     * it.
     */
    sla?: string[];
    /**
     * Filters for conversations with any of the provided SLA stages.
     * @deprecated
     */
    sla_stage?: SlaSummaryStage[];
    /** The filter for SLA summary. */
    sla_summary?: SlaSummaryFilter;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** Filters for conversations with any of the provided source channels. */
    source_channels?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for conversations with any of the provided states. */
    state?: string[];
    /** The filter for survey aggregation. */
    surveys?: SurveyAggregationFilter;
    /**
     * Filters for conversations with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for conversations with any of the provided tags with value. */
    tags_v2?: TagWithValueFilter[];
    /** Filters for conversations with any of the provided ticket IDs. */
    tickets?: string[];
    /** Filters for conversations in which turing is active. */
    turing_active?: boolean;
}
/** vistas-groups-update-request-custom-view */
export interface VistasGroupsUpdateRequestCustomView {
    column_properties?: VistasGroupsUpdateRequestCustomViewColumnProperties;
    /** Boolean to specify whether to show groups or not. */
    show_groups?: boolean;
}
/** vistas-groups-update-request-custom-view-column-properties */
export interface VistasGroupsUpdateRequestCustomViewColumnProperties {
    /** Sets the column property items to provided list. */
    set?: VistasGroupsUpdateRequestCustomViewColumnPropertiesColumnProperty[];
}
/** vistas-groups-update-request-custom-view-column-properties-column-property */
export interface VistasGroupsUpdateRequestCustomViewColumnPropertiesColumnProperty {
    /** Name of the column. */
    name: string;
}
/** vistas-groups-update-request-items */
export interface VistasGroupsUpdateRequestItems {
    /** Adds the provided items to the front of the item list. */
    add?: VistasGroupsUpdateRequestItemsItemValue[];
    /** Removes the provided items from the item list. */
    remove?: VistasGroupsUpdateRequestItemsItemValue[];
    reorder?: VistasGroupsUpdateRequestItemsReorder;
    /** Sets the items to the provided items. */
    set?: VistasGroupsUpdateRequestItemsItemValue[];
}
/** vistas-groups-update-request-items-item-value */
export interface VistasGroupsUpdateRequestItemsItemValue {
    /**
     * The ID of the item.
     * @example "ISS-12345"
     */
    id: string;
}
/** vistas-groups-update-request-items-reorder */
export type VistasGroupsUpdateRequestItemsReorder = (VistasGroupsUpdateRequestItemsReorderAfterPosition | VistasGroupsUpdateRequestItemsReorderBeforePosition | VistasGroupsUpdateRequestItemsReorderBottomPosition | VistasGroupsUpdateRequestItemsReorderTopPosition) & {
    /**
     * ID of the items that needs to be reordered.
     * @example ["ISS-12345"]
     */
    items: string[];
    /** Type of reference point positions. */
    position: VistaReferencePointPositionType;
};
/** vistas-groups-update-request-items-reorder-after-position */
export interface VistasGroupsUpdateRequestItemsReorderAfterPosition {
    /**
     * ID of the item after which the dragged items should be placed.
     * @example "ISS-12345"
     */
    reference_point: string;
}
/** vistas-groups-update-request-items-reorder-before-position */
export interface VistasGroupsUpdateRequestItemsReorderBeforePosition {
    /**
     * ID of the item before which the dragged items should be placed.
     * @example "ISS-12345"
     */
    reference_point: string;
}
/** vistas-groups-update-request-items-reorder-bottom-position */
export type VistasGroupsUpdateRequestItemsReorderBottomPosition = object;
/** vistas-groups-update-request-items-reorder-top-position */
export type VistasGroupsUpdateRequestItemsReorderTopPosition = object;
/** vistas-groups-update-request-parts-group-item */
export type VistasGroupsUpdateRequestPartsGroupItem = (VistasGroupsUpdateRequestPartsGroupItemCuratedGroup | VistasGroupsUpdateRequestPartsGroupItemDynamicGroup) & {
    /** Type of parts vista group item. */
    type: PartsVistaGroupItemType;
};
/** vistas-groups-update-request-parts-group-item-curated-group */
export interface VistasGroupsUpdateRequestPartsGroupItemCuratedGroup {
    items?: VistasGroupsUpdateRequestItems;
}
/** vistas-groups-update-request-parts-group-item-dynamic-group */
export interface VistasGroupsUpdateRequestPartsGroupItemDynamicGroup {
    filter?: VistasGroupsUpdateRequestPartsGroupItemDynamicGroupFilter;
    items?: VistasGroupsUpdateRequestItems;
}
/** vistas-groups-update-request-parts-group-item-dynamic-group-filter */
export interface VistasGroupsUpdateRequestPartsGroupItemDynamicGroupFilter {
    /** Filters for parts of the provided categories. */
    categories?: PartCategory[];
    /**
     * Filters for parts created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: PartsFilterCreatedByOpOperatorType;
    created_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    created_date_v2?: DateFilter;
    /** Filters for custom fields. */
    custom_fields?: object;
    enhancement?: PartsFilterEnhancement;
    /** The field to group the collection by. */
    group_by?: string;
    modified_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    modified_date_v2?: DateFilter;
    /** Filters for parts of the provided name(s). */
    name?: string[];
    /**
     * Filters for parts owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for parts owned by any of the provided users.
     * @deprecated
     * @example ["DEVU-12345"]
     */
    owned_by_ids?: string[];
    owned_by_op?: PartsFilterOwnedByOpOperatorType;
    /** The filter for specifying parent part. */
    parent_part?: ParentPartFilter;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for part with any of the provided states. */
    state?: string[];
    /** Filters for subtypes. */
    subtype?: string[];
    /**
     * Filters for parts with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tag_ids?: string[];
    /**
     * Filters for part with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    tags_op?: PartsFilterTagsOpOperatorType;
    /** Filters for parts of the provided type(s). */
    type?: PartType[];
    /**
     * Filters for parts of the provided type(s).
     * @deprecated
     */
    types?: PartType[];
    /**
     * Filters for parts belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
/** vistas-groups-update-request-works-group-item */
export type VistasGroupsUpdateRequestWorksGroupItem = (VistasGroupsUpdateRequestWorksGroupItemCuratedGroup | VistasGroupsUpdateRequestWorksGroupItemDynamicGroup) & {
    /** Type of works vista group item. */
    type: WorksVistaGroupItemType;
};
/** vistas-groups-update-request-works-group-item-curated-group */
export interface VistasGroupsUpdateRequestWorksGroupItemCuratedGroup {
    items?: VistasGroupsUpdateRequestItems;
}
/** vistas-groups-update-request-works-group-item-dynamic-group */
export interface VistasGroupsUpdateRequestWorksGroupItemDynamicGroup {
    filter?: VistasGroupsUpdateRequestWorksGroupItemDynamicGroupFilter;
    items?: VistasGroupsUpdateRequestItems;
}
/** vistas-groups-update-request-works-group-item-dynamic-group-filter */
export interface VistasGroupsUpdateRequestWorksGroupItemDynamicGroupFilter {
    /** Provides ways to specify date ranges on objects. */
    actual_close_date?: DateFilter;
    /**
     * Filters for work which have one of the parts present as its
     * ancestor part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /**
     * Filters for work belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_part?: string[];
    /**
     * Filters for work created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: WorksFilterCreatedByOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /** Filters for custom fields. */
    custom_fields?: object;
    /**
     * Filters for work excluding the provided work IDs.
     * @example ["ISS-12345"]
     */
    exclude?: string[];
    external_source_data?: WorksFilterExternalSourceData;
    /** The field to group the collection by. */
    group_by?: string;
    issue?: WorksFilterIssue;
    /** Provides ways to specify date ranges on objects. */
    last_internal_comment_date?: DateFilter;
    /** Filters for work with any of the provided link target objects. */
    link_target_object?: string[];
    link_target_object_op?: WorksFilterLinkTargetObjectOperatorType;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    opportunity?: WorksFilterOpportunity;
    /**
     * Filters for work owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    owned_by_op?: WorksFilterOwnedByOperatorType;
    /**
     * Filters for work reported by any of these users.
     * @example ["DEVU-12345"]
     */
    reported_by?: string[];
    reported_by_op?: WorksFilterReportedByOperatorType;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for work for the provided stage names. */
    stage_names?: string[];
    staged_info?: StagedInfoFilter;
    /** Filters for work with any of the provided states. */
    state?: string[];
    sync_metadata?: SyncMetadataFilter;
    tag_ids_op?: WorksFilterTagIdsOperatorType;
    /**
     * Filters for work with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for work with the provided tag and value. */
    tags_v2?: TagWithValueFilter[];
    /** Provides ways to specify date ranges on objects. */
    target_close_date?: DateFilter;
    task?: WorksFilterTask;
    ticket?: WorksFilterTicket;
    /** Filters for work of the provided types. */
    type?: WorkType[];
    /**
     * Filters for work belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
/**
 * vistas-groups-update-response
 * The response to updating a vista's group.
 */
export interface VistasGroupsUpdateResponse {
    /** Represents a vista group item. */
    vista_group: VistaGroup;
}
/**
 * vistas-list-request
 * The request to get information about a list of vistas.
 */
export interface VistasListRequest {
    /**
     * Filters for vistas which have one of the parts linked as its
     * ancestor part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /** The filter for applies to part. */
    applies_to_part?: AppliesToPartFilter;
    /**
     * Filters for vistas created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * Filters for vistas which have one of the parts linked as its
     * descendant part or primary part.
     * @example ["PROD-12345"]
     */
    descendant_part?: string[];
    /** Filters for vistas of specific flavor. */
    flavor?: GroupedVistaFlavor[];
    flavor_op?: VistasFilterFlavorOperatorType;
    /** Whether the default vistas should be fetched or not. */
    is_default?: boolean;
    /**
     * The maximum number of vistas to return. The default is '50', the
     * maximum is '100'.
     * @format int32
     */
    limit?: number;
    /**
     * Filters for vistas accessible to the input members.
     * @example ["DEVU-12345"]
     */
    members?: string[];
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Filters for vistas of specific object types like works, parts etc. */
    object_type?: DynamicVistaFilterType[];
    /** Filter for vistas accessible to the input members. */
    shared_with?: SharedWithMembershipFilter[];
    /** Denotes whether to skip items of vista_group_item in response. */
    skip_items?: boolean;
    /** Fields to sort the vistas by and the direction to sort them. */
    sort_by?: string[];
    /** Denotes the state of the vista group item. */
    state?: VistaGroupItemState[];
    /** Filters for vistas of the specific type. */
    type?: VistaType[];
}
/**
 * vistas-list-response
 * The response to listing the vistas.
 */
export interface VistasListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The list of vistas. */
    vistas: Vista[];
}
/**
 * vistas-parts-list-request
 * The request to get information about a list of parts to which the
 * vistas are linked to.
 */
export interface VistasPartsListRequest {
    /**
     * Filters for vistas which have one of the parts linked as its
     * ancestor part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /** The filter for applies to part. */
    applies_to_part?: AppliesToPartFilter;
    /**
     * Filters for vistas created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * Filters for vistas which have one of the parts linked as its
     * descendant part or primary part.
     * @example ["PROD-12345"]
     */
    descendant_part?: string[];
    /** Filters for vistas of specific flavor. */
    flavor?: GroupedVistaFlavor[];
    flavor_op?: VistasFilterFlavorOperatorType;
    /** Whether the default vistas should be fetched or not. */
    is_default?: boolean;
    /**
     * The maximum number of parts to return. The default is '50', the
     * maximum is '100'.
     * @format int32
     */
    limit?: number;
    /**
     * Filters for vistas accessible to the input members.
     * @example ["DEVU-12345"]
     */
    members?: string[];
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Filters for vistas of specific object types like works, parts etc. */
    object_type?: DynamicVistaFilterType[];
    /** Filter for vistas accessible to the input members. */
    shared_with?: SharedWithMembershipFilter[];
    /** Denotes whether to skip items of vista_group_item in response. */
    skip_items?: boolean;
    /** Denotes the state of the vista group item. */
    state?: VistaGroupItemState[];
    /** Filters for vistas of the specific type. */
    type?: VistaType[];
}
/**
 * vistas-parts-list-response
 * The response to listing the parts to which the vistas are linked to.
 */
export interface VistasPartsListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /** The list of parts to which the vistas are linked to. */
    parts: PartSummary[];
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/**
 * vistas-update-request
 * The request to update a vista.
 */
export type VistasUpdateRequest = (VistasUpdateRequestCuratedVista | VistasUpdateRequestDynamicVista | VistasUpdateRequestGroupedVista) & {
    applies_to_parts?: VistasUpdateRequestAppliesToParts;
    custom_view?: VistasUpdateRequestCustomView;
    /** The updated vista's description. */
    description?: string;
    /**
     * Updated timestamp of when the vista ends.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    end_date?: string;
    /** The updated vista's icon type. */
    icon_type?: string;
    /**
     * The ID of the vista to update.
     * @example "VISTA-12345"
     */
    id: string;
    members?: VistasUpdateRequestMembers;
    /** The updated vista's name. */
    name?: string;
    shared_with?: VistasUpdateRequestSharedWith;
    /**
     * Updated timestamp of when the vista starts.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    start_date?: string;
    /** Type of vista object. */
    type: VistaType;
    /** View type of vista/vista_group_item. */
    view_type?: ViewType;
};
/** vistas-update-request-applies-to-parts */
export interface VistasUpdateRequestAppliesToParts {
    /**
     * Updates the list of parts to which the corresponding vista is
     * linked.
     * @example ["PROD-12345"]
     */
    set?: string[];
}
/** vistas-update-request-curated-vista */
export interface VistasUpdateRequestCuratedVista {
    items?: VistasUpdateRequestCuratedVistaItems;
}
/** vistas-update-request-curated-vista-items */
export interface VistasUpdateRequestCuratedVistaItems {
    /** Sets the items to the provided items. */
    set?: VistasUpdateRequestCuratedVistaItemsItemValue[];
}
/** vistas-update-request-curated-vista-items-item-value */
export interface VistasUpdateRequestCuratedVistaItemsItemValue {
    /**
     * The ID of the item.
     * @example "ISS-12345"
     */
    id: string;
}
/** vistas-update-request-custom-view */
export interface VistasUpdateRequestCustomView {
    column_properties?: VistasUpdateRequestCustomViewColumnProperties;
    /** Boolean to specify whether to show groups or not. */
    show_groups?: boolean;
}
/** vistas-update-request-custom-view-column-properties */
export interface VistasUpdateRequestCustomViewColumnProperties {
    /** Sets the column property items to provided list. */
    set?: VistasUpdateRequestCustomViewColumnPropertiesColumnProperty[];
}
/** vistas-update-request-custom-view-column-properties-column-property */
export interface VistasUpdateRequestCustomViewColumnPropertiesColumnProperty {
    /** Name of the column. */
    name: string;
}
/** vistas-update-request-dynamic-vista */
export type VistasUpdateRequestDynamicVista = (VistasUpdateRequestDynamicVistaAccountsVista | VistasUpdateRequestDynamicVistaConversationsVista | VistasUpdateRequestDynamicVistaCreditsVista | VistasUpdateRequestDynamicVistaIncidentsVista | VistasUpdateRequestDynamicVistaInvoicesVista | VistasUpdateRequestDynamicVistaPartsVista | VistasUpdateRequestDynamicVistaQuotesVista | VistasUpdateRequestDynamicVistaRevOrgsVista | VistasUpdateRequestDynamicVistaRevUsersVista | VistasUpdateRequestDynamicVistaWorksVista) & {
    /** Type of DevRev object for which the vista is applicable. */
    filter_type: DynamicVistaFilterType;
};
/** vistas-update-request-dynamic-vista-accounts-vista */
export interface VistasUpdateRequestDynamicVistaAccountsVista {
    filter?: VistasUpdateRequestDynamicVistaAccountsVistaFilter;
    items?: VistasUpdateRequestDynamicVistaAccountsVistaItems;
}
/** vistas-update-request-dynamic-vista-accounts-vista-filter */
export interface VistasUpdateRequestDynamicVistaAccountsVistaFilter {
    /** Filters for accounts created by the specified user(s). */
    created_by?: string[];
    created_by_op?: RevObjectTagsOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** Array of display names of accounts to be filtered. */
    display_name?: string[];
    /** Domains for accounts to be filtered. */
    domains?: string[];
    domains_op?: RevObjectTagsOperatorType;
    /** Environment values to be filtered. */
    environment?: OrgEnvironment[];
    /** Array of references of accounts to be filtered. */
    external_refs?: string[];
    external_refs_op?: RevObjectTagsOperatorType;
    /** The field to group the collection by. */
    group_by?: string;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** Filters for accounts owned by the specified user(s). */
    owned_by?: string[];
    owned_by_op?: RevObjectTagsOperatorType;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** Filters for accounts on specified stages. */
    stage?: string[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    subtype_op?: SubtypeOpOperatorType;
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    tags_op?: RevObjectTagsOperatorType;
    /** Array of tier for accounts to be filtered. */
    tier?: string[];
    tier_op?: RevObjectTagsOperatorType;
    /** Array of websites of accounts to be filtered. */
    websites?: string[];
    websites_op?: RevObjectTagsOperatorType;
}
/** vistas-update-request-dynamic-vista-accounts-vista-items */
export interface VistasUpdateRequestDynamicVistaAccountsVistaItems {
    /** Sets the items to the provided items. */
    set?: VistasUpdateRequestDynamicVistaAccountsVistaItemsItemValue[];
}
/** vistas-update-request-dynamic-vista-accounts-vista-items-item-value */
export interface VistasUpdateRequestDynamicVistaAccountsVistaItemsItemValue {
    /**
     * The ID of the item.
     * @example "ACC-12345"
     */
    id: string;
}
/** vistas-update-request-dynamic-vista-conversations-vista */
export interface VistasUpdateRequestDynamicVistaConversationsVista {
    filter?: VistasUpdateRequestDynamicVistaConversationsVistaFilter;
    items?: VistasUpdateRequestItems;
}
/** vistas-update-request-dynamic-vista-conversations-vista-filter */
export interface VistasUpdateRequestDynamicVistaConversationsVistaFilter {
    /**
     * Filters for conversations belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_parts?: string[];
    created_date?: DateTimeFilter;
    /** Filters for conversation that belong to the given groups. */
    group?: string[];
    /** The field to group the collection by. */
    group_by?: string;
    /** Filters for conversations that are created by verified users. */
    is_creator_verified?: boolean;
    /** Filters for conversations that are spam. */
    is_spam?: boolean;
    /**
     * Filters for conversations where these users are participants.
     * @example ["DEVU-12345"]
     */
    members?: string[];
    modified_date?: DateTimeFilter;
    /**
     * Filters for conversations owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for conversations that are associated with any of the
     * provided Rev organizations.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org?: string[];
    /**
     * Filters for conversations with any of the provided SLAs applying to
     * it.
     */
    sla?: string[];
    /**
     * Filters for conversations with any of the provided SLA stages.
     * @deprecated
     */
    sla_stage?: SlaSummaryStage[];
    /** The filter for SLA summary. */
    sla_summary?: SlaSummaryFilter;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** Filters for conversations with any of the provided source channels. */
    source_channels?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for conversations with any of the provided states. */
    state?: string[];
    /** The filter for survey aggregation. */
    surveys?: SurveyAggregationFilter;
    /**
     * Filters for conversations with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for conversations with any of the provided tags with value. */
    tags_v2?: TagWithValueFilter[];
    /** Filters for conversations with any of the provided ticket IDs. */
    tickets?: string[];
    /** Filters for conversations in which turing is active. */
    turing_active?: boolean;
}
/** vistas-update-request-dynamic-vista-credits-vista */
export interface VistasUpdateRequestDynamicVistaCreditsVista {
    filter?: VistasUpdateRequestDynamicVistaCreditsVistaFilter;
}
/** vistas-update-request-dynamic-vista-credits-vista-filter */
export interface VistasUpdateRequestDynamicVistaCreditsVistaFilter {
    /**
     * Filter credits by account.
     * @example ["ACC-12345"]
     */
    account_ids?: string[];
    /**
     * Filter items which have expiry date after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    after_expiry_date?: string;
    /**
     * Filter items which have expiry date before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    before_expiry_date?: string;
    /** Provides ways to specify date ranges on objects. */
    expiry_date?: DateFilter;
    /** The field to group the collection by. */
    group_by?: string;
    /** The list of credit object DONs which are to be aggregated. */
    ids?: string[];
    /**
     * The list of rev org DONs which are to be aggregated.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org_ids?: string[];
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** The list of status values which are to be aggregated. */
    statuses?: CreditStatus[];
    /** The list of type values which are to be aggregated. */
    types?: CreditType[];
}
/** vistas-update-request-dynamic-vista-incidents-vista */
export interface VistasUpdateRequestDynamicVistaIncidentsVista {
    filter?: VistasUpdateRequestDynamicVistaIncidentsVistaFilter;
}
/** vistas-update-request-dynamic-vista-incidents-vista-filter */
export interface VistasUpdateRequestDynamicVistaIncidentsVistaFilter {
    /** Filters for incidents that apply to any of the provided parts. */
    applies_to_parts?: string[];
    /**
     * Filters for incidents created by any of the provided users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: IncidentsListFiltersCreatedByOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /** The field to group the collection by. */
    group_by?: string;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** Filters for incidents owned by any of the provided users. */
    owned_by?: string[];
    owned_by_op?: IncidentsListFiltersOwnedByOperatorType;
    /** Filters for incidents containing any of the provided severities. */
    severity?: number[];
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** Filters for incidents in any of the provided stages. */
    stage?: string[];
    /** Filters for incidents with any of the provided states. */
    state?: string[];
    /** Filters for incidents with the provided tag and value. */
    tags?: TagWithValueFilter[];
    /** Filters for incidents by the provided titles. */
    title?: string[];
}
/** vistas-update-request-dynamic-vista-invoices-vista */
export interface VistasUpdateRequestDynamicVistaInvoicesVista {
    filter?: VistasUpdateRequestDynamicVistaInvoicesVistaFilter;
}
/** vistas-update-request-dynamic-vista-invoices-vista-filter */
export interface VistasUpdateRequestDynamicVistaInvoicesVistaFilter {
    /**
     * Filter invoices by account.
     * @example ["ACC-12345"]
     */
    account_ids?: string[];
    /**
     * Filter items which have invoice amount due greater than value
     * provided.
     * @format double
     */
    amount_due_greater_than?: number;
    /**
     * Filter items which have invoice amount due less than value
     * provided.
     * @format double
     */
    amount_due_less_than?: number;
    /**
     * Filter items which have invoice amount paid greater than value
     * provided.
     * @format double
     */
    amount_paid_greater_than?: number;
    /**
     * Filter items which have invoice amount paid less than value
     * provided.
     * @format double
     */
    amount_paid_less_than?: number;
    /** Provides ways to specify date ranges on objects. */
    billing_date?: DateFilter;
    /**
     * Filter items which have billing date after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    billing_date_after?: string;
    /**
     * Filter items which have billing date before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    billing_date_before?: string;
    /** Provides ways to specify date ranges on objects. */
    due_date?: DateFilter;
    /**
     * Filter items which have due date after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    due_date_after?: string;
    /**
     * Filter items which have due date before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    due_date_before?: string;
    /** The field to group the collection by. */
    group_by?: string;
    /** The list of Invoice DONs which are to be aggregated. */
    ids?: string[];
    /**
     * Filter items by doing queries on revs. To allow devs filter
     * invoices for specific revs.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org_ids?: string[];
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** The list of Invoice statuses which are to be aggregated. */
    statuses?: InvoiceStatus[];
    /**
     * Filter items which have invoice total greater than value provided.
     * @format double
     */
    total_greater_than?: number;
    /**
     * Filter items which have invoice total less than value provided.
     * @format double
     */
    total_less_than?: number;
    /** The list of invoice types which are to be aggregated. */
    types?: InvoiceType[];
}
/** vistas-update-request-dynamic-vista-parts-vista */
export interface VistasUpdateRequestDynamicVistaPartsVista {
    filter?: VistasUpdateRequestDynamicVistaPartsVistaFilter;
    items?: VistasUpdateRequestItems;
}
/** vistas-update-request-dynamic-vista-parts-vista-filter */
export interface VistasUpdateRequestDynamicVistaPartsVistaFilter {
    /** Filters for parts of the provided categories. */
    categories?: PartCategory[];
    /**
     * Filters for parts created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: PartsFilterCreatedByOpOperatorType;
    created_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    created_date_v2?: DateFilter;
    /** Filters for custom fields. */
    custom_fields?: object;
    enhancement?: PartsFilterEnhancement;
    /** The field to group the collection by. */
    group_by?: string;
    modified_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    modified_date_v2?: DateFilter;
    /** Filters for parts of the provided name(s). */
    name?: string[];
    /**
     * Filters for parts owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for parts owned by any of the provided users.
     * @deprecated
     * @example ["DEVU-12345"]
     */
    owned_by_ids?: string[];
    owned_by_op?: PartsFilterOwnedByOpOperatorType;
    /** The filter for specifying parent part. */
    parent_part?: ParentPartFilter;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for part with any of the provided states. */
    state?: string[];
    /** Filters for subtypes. */
    subtype?: string[];
    /**
     * Filters for parts with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tag_ids?: string[];
    /**
     * Filters for part with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    tags_op?: PartsFilterTagsOpOperatorType;
    /** Filters for parts of the provided type(s). */
    type?: PartType[];
    /**
     * Filters for parts of the provided type(s).
     * @deprecated
     */
    types?: PartType[];
    /**
     * Filters for parts belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
/** vistas-update-request-dynamic-vista-quotes-vista */
export interface VistasUpdateRequestDynamicVistaQuotesVista {
    filter?: VistasUpdateRequestDynamicVistaQuotesVistaFilter;
}
/** vistas-update-request-dynamic-vista-quotes-vista-filter */
export interface VistasUpdateRequestDynamicVistaQuotesVistaFilter {
    /**
     * The list of Account DONs for which quote objects are to be
     * aggregated.
     * @example ["ACC-12345"]
     */
    account_ids?: string[];
    /** Provides ways to specify date ranges on objects. */
    expiration_date?: DateFilter;
    /** The field to group the collection by. */
    group_by?: string;
    /** The list of Quote DONs which are to be aggregated. */
    ids?: string[];
    /**
     * The list of Opportunity DONs for which quote objects are to be
     * aggregated.
     * @example ["OPP-12345"]
     */
    opportunity_ids?: string[];
    /** Filter items which are owned by provided owner IDs. */
    owner_ids?: string[];
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for quote with any of the provided states. */
    state?: string[];
}
/** vistas-update-request-dynamic-vista-rev-orgs-vista */
export interface VistasUpdateRequestDynamicVistaRevOrgsVista {
    filter?: VistasUpdateRequestDynamicVistaRevOrgsVistaFilter;
    items?: VistasUpdateRequestDynamicVistaRevOrgsVistaItems;
}
/** vistas-update-request-dynamic-vista-rev-orgs-vista-filter */
export interface VistasUpdateRequestDynamicVistaRevOrgsVistaFilter {
    /**
     * Filters by account.
     * @example ["ACC-12345"]
     */
    account?: string[];
    account_op?: RevOrgsFiltersAccountOperatorType;
    /** Filters by creator. */
    created_by?: string[];
    created_by_op?: RevObjectTagsOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** Array of display names of Rev orgs to be filtered. */
    display_name?: string[];
    /** Array of domain for Rev organizations to be filtered. */
    domain?: string[];
    /** Environment values to be filtered. */
    environment?: OrgEnvironment[];
    /** List of external refs to filter Rev organizations for. */
    external_ref?: string[];
    /** Array of external ref issuers for Rev organizations to be filtered. */
    external_ref_issuer?: string[];
    /** The field to group the collection by. */
    group_by?: string;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** Filters by owners. */
    owned_by?: string[];
    /**
     * Filters by owners.
     * @deprecated
     */
    owned_by_ids?: string[];
    owned_by_op?: RevObjectTagsOperatorType;
    /** Filter by SLA */
    sla?: string[];
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** State values to be filtered. */
    state?: OrgState[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    subtype_op?: SubtypeOpOperatorType;
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    tags_op?: RevObjectTagsOperatorType;
    /** Array of tier for Rev organizations to be filtered. */
    tier?: string[];
    /** Types of Rev organizations to be filtered. */
    type?: RevOrgType[];
}
/** vistas-update-request-dynamic-vista-rev-orgs-vista-items */
export interface VistasUpdateRequestDynamicVistaRevOrgsVistaItems {
    /** Sets the items to the provided items. */
    set?: VistasUpdateRequestDynamicVistaRevOrgsVistaItemsItemValue[];
}
/** vistas-update-request-dynamic-vista-rev-orgs-vista-items-item-value */
export interface VistasUpdateRequestDynamicVistaRevOrgsVistaItemsItemValue {
    /**
     * The ID of the item.
     * @example "REV-AbCdEfGh"
     */
    id: string;
}
/** vistas-update-request-dynamic-vista-rev-users-vista */
export interface VistasUpdateRequestDynamicVistaRevUsersVista {
    filter?: VistasUpdateRequestDynamicVistaRevUsersVistaFilter;
    items?: VistasUpdateRequestDynamicVistaRevUsersVistaItems;
}
/** vistas-update-request-dynamic-vista-rev-users-vista-filter */
export interface VistasUpdateRequestDynamicVistaRevUsersVistaFilter {
    /**
     * Filters for Rev users belonging to the provided account IDs.
     * @maxItems 1
     * @example ["ACC-12345"]
     */
    account?: string[];
    /** Filters for Rev users that were created by the specified user(s). */
    created_by?: string[];
    created_by_op?: RevObjectTagsOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2)
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** List of emails of Rev users to be filtered. */
    email?: string[];
    email_op?: RevObjectTagsOperatorType;
    /** List of external refs to filter Rev users for. */
    external_ref?: string[];
    /** List of external ref issuers for Rev users to be filtered. */
    external_ref_issuer?: string[];
    external_ref_op?: RevObjectTagsOperatorType;
    /** The field to group the collection by. */
    group_by?: string;
    /** Value of is_verified field to filter the Rev users. */
    is_verified?: boolean;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** List of phone numbers, in E.164 format, to filter Rev users on. */
    phone_numbers?: string[];
    /** Filters for PLuG availability. */
    plug_availability?: RevUserPlugAvailability[];
    /**
     * List of IDs of Rev organizations to be filtered.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org?: string[];
    rev_org_op?: RevUsersFiltersRevOrgOperatorType;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** List of state of Rev users to be filtered. */
    state?: UserState[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    subtype_op?: SubtypeOpOperatorType;
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    tags_op?: RevObjectTagsOperatorType;
}
/** vistas-update-request-dynamic-vista-rev-users-vista-items */
export interface VistasUpdateRequestDynamicVistaRevUsersVistaItems {
    /** Sets the items to the provided items. */
    set?: VistasUpdateRequestDynamicVistaRevUsersVistaItemsItemValue[];
}
/** vistas-update-request-dynamic-vista-rev-users-vista-items-item-value */
export interface VistasUpdateRequestDynamicVistaRevUsersVistaItemsItemValue {
    /** The ID of the item. */
    id: string;
}
/** vistas-update-request-dynamic-vista-works-vista */
export interface VistasUpdateRequestDynamicVistaWorksVista {
    filter?: VistasUpdateRequestDynamicVistaWorksVistaFilter;
    items?: VistasUpdateRequestItems;
}
/** vistas-update-request-dynamic-vista-works-vista-filter */
export interface VistasUpdateRequestDynamicVistaWorksVistaFilter {
    /** Provides ways to specify date ranges on objects. */
    actual_close_date?: DateFilter;
    /**
     * Filters for work which have one of the parts present as its
     * ancestor part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /**
     * Filters for work belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_part?: string[];
    /**
     * Filters for work created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: WorksFilterCreatedByOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /** Filters for custom fields. */
    custom_fields?: object;
    /**
     * Filters for work excluding the provided work IDs.
     * @example ["ISS-12345"]
     */
    exclude?: string[];
    external_source_data?: WorksFilterExternalSourceData;
    /** The field to group the collection by. */
    group_by?: string;
    issue?: WorksFilterIssue;
    /** Provides ways to specify date ranges on objects. */
    last_internal_comment_date?: DateFilter;
    /** Filters for work with any of the provided link target objects. */
    link_target_object?: string[];
    link_target_object_op?: WorksFilterLinkTargetObjectOperatorType;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    opportunity?: WorksFilterOpportunity;
    /**
     * Filters for work owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    owned_by_op?: WorksFilterOwnedByOperatorType;
    /**
     * Filters for work reported by any of these users.
     * @example ["DEVU-12345"]
     */
    reported_by?: string[];
    reported_by_op?: WorksFilterReportedByOperatorType;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for work for the provided stage names. */
    stage_names?: string[];
    staged_info?: StagedInfoFilter;
    /** Filters for work with any of the provided states. */
    state?: string[];
    sync_metadata?: SyncMetadataFilter;
    tag_ids_op?: WorksFilterTagIdsOperatorType;
    /**
     * Filters for work with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for work with the provided tag and value. */
    tags_v2?: TagWithValueFilter[];
    /** Provides ways to specify date ranges on objects. */
    target_close_date?: DateFilter;
    task?: WorksFilterTask;
    ticket?: WorksFilterTicket;
    /** Filters for work of the provided types. */
    type?: WorkType[];
    /**
     * Filters for work belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
/** vistas-update-request-grouped-vista */
export type VistasUpdateRequestGroupedVista = (VistasUpdateRequestGroupedVistaConversationsVista | VistasUpdateRequestGroupedVistaPartsVista | VistasUpdateRequestGroupedVistaWorksVista) & {
    /** Type of DevRev object for which the grouped vista is applicable. */
    filter_type: GroupedVistaFilterType;
};
/** vistas-update-request-grouped-vista-conversations-vista */
export interface VistasUpdateRequestGroupedVistaConversationsVista {
    filter?: VistasUpdateRequestGroupedVistaConversationsVistaFilter;
}
/** vistas-update-request-grouped-vista-conversations-vista-filter */
export interface VistasUpdateRequestGroupedVistaConversationsVistaFilter {
    /**
     * Filters for conversations belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_parts?: string[];
    created_date?: DateTimeFilter;
    /** Filters for conversation that belong to the given groups. */
    group?: string[];
    /** The field to group the collection by. */
    group_by?: string;
    /** Filters for conversations that are created by verified users. */
    is_creator_verified?: boolean;
    /** Filters for conversations that are spam. */
    is_spam?: boolean;
    /**
     * Filters for conversations where these users are participants.
     * @example ["DEVU-12345"]
     */
    members?: string[];
    modified_date?: DateTimeFilter;
    /**
     * Filters for conversations owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for conversations that are associated with any of the
     * provided Rev organizations.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org?: string[];
    /**
     * Filters for conversations with any of the provided SLAs applying to
     * it.
     */
    sla?: string[];
    /**
     * Filters for conversations with any of the provided SLA stages.
     * @deprecated
     */
    sla_stage?: SlaSummaryStage[];
    /** The filter for SLA summary. */
    sla_summary?: SlaSummaryFilter;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** Filters for conversations with any of the provided source channels. */
    source_channels?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for conversations with any of the provided states. */
    state?: string[];
    /** The filter for survey aggregation. */
    surveys?: SurveyAggregationFilter;
    /**
     * Filters for conversations with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for conversations with any of the provided tags with value. */
    tags_v2?: TagWithValueFilter[];
    /** Filters for conversations with any of the provided ticket IDs. */
    tickets?: string[];
    /** Filters for conversations in which turing is active. */
    turing_active?: boolean;
}
/** vistas-update-request-grouped-vista-parts-vista */
export interface VistasUpdateRequestGroupedVistaPartsVista {
    filter?: VistasUpdateRequestGroupedVistaPartsVistaFilter;
}
/** vistas-update-request-grouped-vista-parts-vista-filter */
export interface VistasUpdateRequestGroupedVistaPartsVistaFilter {
    /** Filters for parts of the provided categories. */
    categories?: PartCategory[];
    /**
     * Filters for parts created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: PartsFilterCreatedByOpOperatorType;
    created_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    created_date_v2?: DateFilter;
    /** Filters for custom fields. */
    custom_fields?: object;
    enhancement?: PartsFilterEnhancement;
    /** The field to group the collection by. */
    group_by?: string;
    modified_date?: DateTimeFilter;
    /** Provides ways to specify date ranges on objects. */
    modified_date_v2?: DateFilter;
    /** Filters for parts of the provided name(s). */
    name?: string[];
    /**
     * Filters for parts owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for parts owned by any of the provided users.
     * @deprecated
     * @example ["DEVU-12345"]
     */
    owned_by_ids?: string[];
    owned_by_op?: PartsFilterOwnedByOpOperatorType;
    /** The filter for specifying parent part. */
    parent_part?: ParentPartFilter;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for part with any of the provided states. */
    state?: string[];
    /** Filters for subtypes. */
    subtype?: string[];
    /**
     * Filters for parts with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tag_ids?: string[];
    /**
     * Filters for part with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    tags_op?: PartsFilterTagsOpOperatorType;
    /** Filters for parts of the provided type(s). */
    type?: PartType[];
    /**
     * Filters for parts of the provided type(s).
     * @deprecated
     */
    types?: PartType[];
    /**
     * Filters for parts belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
/** vistas-update-request-grouped-vista-works-vista */
export interface VistasUpdateRequestGroupedVistaWorksVista {
    filter?: VistasUpdateRequestGroupedVistaWorksVistaFilter;
}
/** vistas-update-request-grouped-vista-works-vista-filter */
export interface VistasUpdateRequestGroupedVistaWorksVistaFilter {
    /** Provides ways to specify date ranges on objects. */
    actual_close_date?: DateFilter;
    /**
     * Filters for work which have one of the parts present as its
     * ancestor part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /**
     * Filters for work belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_part?: string[];
    /**
     * Filters for work created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: WorksFilterCreatedByOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /** Filters for custom fields. */
    custom_fields?: object;
    /**
     * Filters for work excluding the provided work IDs.
     * @example ["ISS-12345"]
     */
    exclude?: string[];
    external_source_data?: WorksFilterExternalSourceData;
    /** The field to group the collection by. */
    group_by?: string;
    issue?: WorksFilterIssue;
    /** Provides ways to specify date ranges on objects. */
    last_internal_comment_date?: DateFilter;
    /** Filters for work with any of the provided link target objects. */
    link_target_object?: string[];
    link_target_object_op?: WorksFilterLinkTargetObjectOperatorType;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    opportunity?: WorksFilterOpportunity;
    /**
     * Filters for work owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    owned_by_op?: WorksFilterOwnedByOperatorType;
    /**
     * Filters for work reported by any of these users.
     * @example ["DEVU-12345"]
     */
    reported_by?: string[];
    reported_by_op?: WorksFilterReportedByOperatorType;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for work for the provided stage names. */
    stage_names?: string[];
    staged_info?: StagedInfoFilter;
    /** Filters for work with any of the provided states. */
    state?: string[];
    sync_metadata?: SyncMetadataFilter;
    tag_ids_op?: WorksFilterTagIdsOperatorType;
    /**
     * Filters for work with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for work with the provided tag and value. */
    tags_v2?: TagWithValueFilter[];
    /** Provides ways to specify date ranges on objects. */
    target_close_date?: DateFilter;
    task?: WorksFilterTask;
    ticket?: WorksFilterTicket;
    /** Filters for work of the provided types. */
    type?: WorkType[];
    /**
     * Filters for work belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
/** vistas-update-request-items */
export interface VistasUpdateRequestItems {
    /** Adds the provided items to the front of the item list. */
    add?: VistasUpdateRequestItemsItemValue[];
    /** Removes the provided items from the item list. */
    remove?: VistasUpdateRequestItemsItemValue[];
    reorder?: VistasUpdateRequestItemsReorder;
    /** Sets the items to the provided items. */
    set?: VistasUpdateRequestItemsItemValue[];
}
/** vistas-update-request-items-item-value */
export interface VistasUpdateRequestItemsItemValue {
    /**
     * The ID of the item.
     * @example "ISS-12345"
     */
    id: string;
}
/** vistas-update-request-items-reorder */
export type VistasUpdateRequestItemsReorder = (VistasUpdateRequestItemsReorderAfterPosition | VistasUpdateRequestItemsReorderBeforePosition | VistasUpdateRequestItemsReorderBottomPosition | VistasUpdateRequestItemsReorderTopPosition) & {
    /**
     * ID of the items that needs to be reordered.
     * @example ["ISS-12345"]
     */
    items: string[];
    /** Type of reference point positions. */
    position: VistaReferencePointPositionType;
};
/** vistas-update-request-items-reorder-after-position */
export interface VistasUpdateRequestItemsReorderAfterPosition {
    /**
     * ID of the item after which the dragged items should be placed.
     * @example "ISS-12345"
     */
    reference_point: string;
}
/** vistas-update-request-items-reorder-before-position */
export interface VistasUpdateRequestItemsReorderBeforePosition {
    /**
     * ID of the item before which the dragged items should be placed.
     * @example "ISS-12345"
     */
    reference_point: string;
}
/** vistas-update-request-items-reorder-bottom-position */
export type VistasUpdateRequestItemsReorderBottomPosition = object;
/** vistas-update-request-items-reorder-top-position */
export type VistasUpdateRequestItemsReorderTopPosition = object;
/** vistas-update-request-members */
export interface VistasUpdateRequestMembers {
    /** Sets the members to the provided members. */
    set?: VistaMemberValue[];
}
/** vistas-update-request-shared-with */
export interface VistasUpdateRequestSharedWith {
    /** Sets the field to the provided membership list. */
    set?: SetSharedWithMembership[];
}
/**
 * vistas-update-response
 * The response to updating a vista.
 */
export interface VistasUpdateResponse {
    /** Represents a collection of DevRev objects. */
    vista: Vista;
}
/**
 * visualization-axis-color
 * The color for an axis. This can be a single color or a gradient.
 */
export interface VisualizationAxisColor {
    /** The key lookup color. */
    key_lookup?: VisualizationAxisColorKeyLookup[];
    /** The static color. */
    static?: string;
    /** The type of the color. */
    type: VisualizationAxisColorType;
}
/**
 * visualization-axis-color-key-lookup
 * The key lookup color for an axis. This is used to map a value to a
 * color.
 */
export interface VisualizationAxisColorKeyLookup {
    /** The key to map to a color. */
    key: string;
    /** The color value. */
    value: string;
}
/** The type of the color. */
export declare enum VisualizationAxisColorType {
    KeyLookup = "key_lookup",
    Static = "static"
}
/**
 * visualization-axis-drill-through
 * The drill through configuration for an axis.
 */
export interface VisualizationAxisDrillThrough {
    /** The ID of the dashboard to navigate to when the axis is clicked. */
    dashboard: string;
    /** The label for the drill through. */
    label: string;
}
/** Describes the types of watch events present on an object. */
export declare enum WatchEvent {
    Comments = "comments",
    Mentions = "mentions",
    Updates = "updates"
}
/** watchers-get-request */
export interface WatchersGetRequest {
    /**
     * The object's ID.
     * @example "ISS-12345"
     */
    id: string;
}
/** watchers-get-response */
export interface WatchersGetResponse {
    /** The events that the requesting user is watching. */
    events: WatchEvent[];
}
/** watchers-list-request */
export interface WatchersListRequest {
    /**
     * The cursor to resume iteration from, otherwise if not provided,
     * then iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The watch events that must be present. If empty, all watchers that
     * contain at least one watched event are returned, otherwise watchers
     * that contain at least one of the provided events will be returned.
     */
    events?: WatchEvent[];
    /**
     * The object's ID.
     * @example "ISS-12345"
     */
    id: string;
    /**
     * The maximum number of watchers to return. If not set or `<= 0`,
     * then this defaults to `50`.
     * @format int32
     */
    limit?: number;
}
/** watchers-list-response */
export interface WatchersListResponse {
    /**
     * The cursor that should be used to iterate the next sequence of
     * results, otherwise if not set, then no elements exist after.
     */
    next_cursor?: string;
    /** The list of users set as watchers on the object. */
    users: UserSummary[];
}
/** watchers-update-request */
export interface WatchersUpdateRequest {
    /**
     * The watch events that the users will be updated for on the object.
     * At least one event must be specified for add.
     */
    events: WatchEvent[];
    /**
     * The object's ID.
     * @example "ISS-12345"
     */
    id: string;
    watchers?: WatchersUpdateRequestWatchers;
}
/** watchers-update-request-watchers */
export interface WatchersUpdateRequestWatchers {
    /**
     * The list of users to add as watchers on the object.
     * @example ["DEVU-12345"]
     */
    add?: string[];
    /**
     * The list of users to remove as watchers on the object.
     * @example ["DEVU-12345"]
     */
    remove?: string[];
}
/** watchers-update-response */
export type WatchersUpdateResponse = object;
/** web-crawler-job */
export type WebCrawlerJob = AtomBase & {
    /**
     * URL patterns to accept (an empty value means accept all URLs)
     * subject to explicit rejects (if any).
     */
    accept_regexs?: string[];
    /** Details of the parts relevant to the web crawler job. */
    applies_to_parts: PartSummary[];
    /** Description of the web crawler job. */
    description?: string;
    /**
     * Domain names to crawl URLs for. If this field is not set, it is
     * inferred based on the domain names in the seed set of URLs.
     */
    domain_names?: string[];
    /**
     * Number of days between re-sync job runs.
     * @format int32
     */
    frequency?: number;
    /**
     * Specifies the maximum recursion depth from the seed URL that we
     * will crawl. If this value is -1, there is no limit on recursion
     * depth.
     * @format int32
     */
    max_depth?: number;
    /**
     * Specifies whether we should never ascend to the parent directory
     * when crawling from a seed set URL.
     */
    no_parent?: boolean;
    /**
     * Number of bytes stored.
     * @format int32
     */
    num_bytes?: number;
    /**
     * Number of URLs that timed out.
     * @format int32
     */
    num_timeout_urls?: number;
    /**
     * Number of URLs whose webpage are scraped.
     * @format int32
     */
    num_urls_scraped?: number;
    /**
     * URL patterns to reject (an empty value means no explicit
     * rejections).
     */
    reject_regexs?: string[];
    /**
     * Sitemap index URLs. The URLs in the referenced sitemaps add to the
     * seed set of URLs to crawl from.
     */
    sitemap_index_urls?: string[];
    /**
     * Sitemap URLs. The URLs in the sitemap add to the seed set of URLs
     * to crawl from.
     */
    sitemap_urls?: string[];
    /** State of the web crawler job. */
    state?: WebCrawlerJobState;
    /** URLs to add to the seed set of URLs to crawl from. */
    urls?: string[];
};
/** State of the web crawler job. */
export declare enum WebCrawlerJobState {
    Aborted = "aborted",
    Completed = "completed",
    Running = "running",
    Scheduled = "scheduled",
    Suspended = "suspended"
}
/** web-crawler-job-summary */
export type WebCrawlerJobSummary = AtomBaseSummary;
/**
 * web-crawler-jobs-control-request
 * The request to resume a web crawler job.
 */
export interface WebCrawlerJobsControlRequest {
    action: WebCrawlerJobsControlRequestAction;
    /** The ID of the job. */
    id: string;
}
export declare enum WebCrawlerJobsControlRequestAction {
    Abort = "abort",
    Pause = "pause",
    Resume = "resume"
}
/**
 * web-crawler-jobs-control-response
 * The response to resume a web crawler job.
 */
export interface WebCrawlerJobsControlResponse {
    web_crawler_job: WebCrawlerJob;
}
/**
 * web-crawler-jobs-create-request
 * The request to create a web crawler job which will create webpages as
 * artifacts.
 */
export interface WebCrawlerJobsCreateRequest {
    /** The regex a URL must satisfy to be crawled. */
    accept_regex?: string;
    /**
     * The parts to which created webpage/articles during this crawler job
     * will be linked to.
     * @maxItems 1
     * @minItems 1
     * @example ["PROD-12345"]
     */
    applies_to_parts: string[];
    /** The description of the job. */
    description?: string;
    /** The list of allowed domain names to crawl. */
    domain_names?: string[];
    /**
     * Number of days between re-sync job runs. If 0, the job will run
     * only once.
     * @format int32
     */
    frequency?: number;
    /**
     * The maximum depth to crawl.
     * @format int32
     */
    max_depth?: number;
    /**
     * The regex which if satisfied by a URL results in rejection of the
     * URL. If a URL matches both accept and reject regexes, it is
     * rejected.
     */
    reject_regex?: string;
    /** The list of sitemap index URLs to crawl. */
    sitemap_index_urls?: string[];
    /** The list of sitemap URLs to crawl. */
    sitemap_urls?: string[];
    /** The list of URLs to crawl. */
    urls?: string[];
}
/**
 * web-crawler-jobs-create-response
 * The response to create a web crawler job.
 */
export interface WebCrawlerJobsCreateResponse {
    web_crawler_job: WebCrawlerJob;
}
/**
 * web-crawler-jobs-get-request
 * The request to get a web crawler job.
 */
export interface WebCrawlerJobsGetRequest {
    /** The ID of the job. */
    id: string;
}
/**
 * web-crawler-jobs-get-response
 * The response to get a web crawler job.
 */
export interface WebCrawlerJobsGetResponse {
    web_crawler_job: WebCrawlerJob;
}
/**
 * web-crawler-jobs-list-request
 * The request to list web crawler jobs.
 */
export interface WebCrawlerJobsListRequest {
    /**
     * Filters for web crawler jobs created by any of the provided users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of web crawler jobs to return. The default is
     * '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    /** Filters for status of the web crawler jobs. */
    state?: WebCrawlerJobState[];
}
/**
 * web-crawler-jobs-list-response
 * The response to list web crawler jobs.
 */
export interface WebCrawlerJobsListResponse {
    /**
     * The cursor that should be used to resume iteration, otherwise if
     * not provided, then iteration has completed.
     * @deprecated
     */
    cursor?: string;
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The list of jobs. */
    web_crawler_jobs: WebCrawlerJob[];
}
/** webhook */
export type Webhook = AtomBase & {
    /** The event types that the webhook will receive. */
    event_types?: WebhookEventType[];
    /**
     * The secret to use for verifying webhook events.
     * @format byte
     */
    secret: string;
    /** The status of the webhook. */
    status: WebhookStatus;
    /**
     * The client-provided unique key that's associated with the webhook.
     * @format byte
     */
    unique_key?: string;
    /** The URL of the webhook endpoint. */
    url: string;
};
/** webhook-event-request */
export interface WebhookEventRequest {
    account_created?: EventAccountCreated;
    account_deleted?: EventAccountDeleted;
    account_updated?: EventAccountUpdated;
    article_created?: EventArticleCreated;
    article_deleted?: EventArticleDeleted;
    article_updated?: EventArticleUpdated;
    artifact_created?: EventArtifactCreated;
    artifact_deleted?: EventArtifactDeleted;
    artifact_updated?: EventArtifactUpdated;
    chat_created?: EventChatCreated;
    chat_deleted?: EventChatDeleted;
    chat_updated?: EventChatUpdated;
    conversation_created?: EventConversationCreated;
    conversation_deleted?: EventConversationDeleted;
    conversation_updated?: EventConversationUpdated;
    credit_created?: EventCreditCreated;
    credit_deleted?: EventCreditDeleted;
    credit_updated?: EventCreditUpdated;
    custom_schema_fragment_created?: EventCustomSchemaFragmentCreated;
    custom_schema_fragment_deleted?: EventCustomSchemaFragmentDeleted;
    custom_schema_fragment_updated?: EventCustomSchemaFragmentUpdated;
    custom_stage_created?: EventCustomStageCreated;
    custom_stage_updated?: EventCustomStageUpdated;
    custom_state_created?: EventCustomStateCreated;
    custom_state_updated?: EventCustomStateUpdated;
    dev_user_created?: EventDevUserCreated;
    dev_user_deleted?: EventDevUserDeleted;
    dev_user_updated?: EventDevUserUpdated;
    engagement_created?: EventEngagementCreated;
    engagement_deleted?: EventEngagementDeleted;
    engagement_updated?: EventEngagementUpdated;
    external_sync_unit_discovered?: EventExternalSyncUnitDiscovered;
    flow_created?: EventFlowCreated;
    flow_deleted?: EventFlowDeleted;
    flow_updated?: EventFlowUpdated;
    /** The event's ID. */
    id: string;
    incident_created?: EventIncidentCreated;
    incident_deleted?: EventIncidentDeleted;
    incident_updated?: EventIncidentUpdated;
    invoice_created?: EventInvoiceCreated;
    invoice_deleted?: EventInvoiceDeleted;
    invoice_updated?: EventInvoiceUpdated;
    link_created?: EventLinkCreated;
    link_deleted?: EventLinkDeleted;
    link_updated?: EventLinkUpdated;
    marketplace_item_created?: EventMarketplaceItemCreated;
    marketplace_item_deleted?: EventMarketplaceItemDeleted;
    marketplace_item_updated?: EventMarketplaceItemUpdated;
    meeting_created?: EventMeetingCreated;
    meeting_deleted?: EventMeetingDeleted;
    meeting_updated?: EventMeetingUpdated;
    notification_created?: EventNotificationCreated;
    notification_deleted?: EventNotificationDeleted;
    notification_updated?: EventNotificationUpdated;
    part_created?: EventPartCreated;
    part_deleted?: EventPartDeleted;
    part_updated?: EventPartUpdated;
    quote_created?: EventQuoteCreated;
    quote_deleted?: EventQuoteDeleted;
    quote_updated?: EventQuoteUpdated;
    rev_org_created?: EventRevOrgCreated;
    rev_org_deleted?: EventRevOrgDeleted;
    rev_org_updated?: EventRevOrgUpdated;
    rev_user_created?: EventRevUserCreated;
    rev_user_deleted?: EventRevUserDeleted;
    rev_user_updated?: EventRevUserUpdated;
    sla_tracker_created?: EventSlaTrackerCreated;
    sla_tracker_deleted?: EventSlaTrackerDeleted;
    sla_tracker_updated?: EventSlaTrackerUpdated;
    snap_in_created?: EventSnapInCreated;
    snap_in_deleted?: EventSnapInDeleted;
    snap_in_updated?: EventSnapInUpdated;
    stage_diagram_created?: EventStageDiagramCreated;
    stage_diagram_updated?: EventStageDiagramUpdated;
    stock_schema_fragment_updated?: EventStockSchemaFragmentUpdated;
    survey_response_created?: EventSurveyResponseCreated;
    survey_response_deleted?: EventSurveyResponseDeleted;
    survey_response_updated?: EventSurveyResponseUpdated;
    sync_unit_created?: EventSyncUnitCreated;
    sync_unit_deleted?: EventSyncUnitDeleted;
    sync_unit_updated?: EventSyncUnitUpdated;
    tag_created?: EventTagCreated;
    tag_deleted?: EventTagDeleted;
    tag_updated?: EventTagUpdated;
    timeline_entry_created?: EventTimelineEntryCreated;
    timeline_entry_deleted?: EventTimelineEntryDeleted;
    timeline_entry_updated?: EventTimelineEntryUpdated;
    /**
     * Timestamp of the webhook's invocation for the event. Note this
     * should be used to protect against replay attacks, where the event
     * should only be processed if the timestamp isn't stale by several
     * seconds.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    timestamp?: string;
    /** The event types that the webhook will receive. */
    type?: WebhookEventType;
    /**
     * The unique key that was provided upon the webhook's creation.
     * @format byte
     */
    unique_key?: string;
    verify?: WebhookEventVerify;
    vista_created?: EventVistaCreated;
    vista_deleted?: EventVistaDeleted;
    vista_group_item_created?: EventVistaGroupItemCreated;
    vista_group_item_deleted?: EventVistaGroupItemDeleted;
    vista_group_item_updated?: EventVistaGroupItemUpdated;
    vista_updated?: EventVistaUpdated;
    webhook_created?: EventWebhookCreated;
    webhook_deleted?: EventWebhookDeleted;
    /**
     * ID of the webhook for the event.
     * @example "don:integration:<partition>:devo/<dev-org-id>:webhook/<webhook-id>"
     */
    webhook_id: string;
    webhook_updated?: EventWebhookUpdated;
    work_created?: EventWorkCreated;
    work_deleted?: EventWorkDeleted;
    work_updated?: EventWorkUpdated;
}
/** webhook-event-response */
export interface WebhookEventResponse {
    /**
     * The challenge from the "verify" request, otherwise this should not
     * be set for other request types.
     * @format byte
     */
    challenge?: string;
}
/** The event types that the webhook will receive. */
export declare enum WebhookEventType {
    AccountCreated = "account_created",
    AccountDeleted = "account_deleted",
    AccountUpdated = "account_updated",
    ArticleCreated = "article_created",
    ArticleDeleted = "article_deleted",
    ArticleUpdated = "article_updated",
    ArtifactCreated = "artifact_created",
    ArtifactDeleted = "artifact_deleted",
    ArtifactUpdated = "artifact_updated",
    ChatCreated = "chat_created",
    ChatDeleted = "chat_deleted",
    ChatUpdated = "chat_updated",
    CommandCreated = "command_created",
    CommandDeleted = "command_deleted",
    CommandUpdated = "command_updated",
    ConversationCreated = "conversation_created",
    ConversationDeleted = "conversation_deleted",
    ConversationUpdated = "conversation_updated",
    CreditCreated = "credit_created",
    CreditDeleted = "credit_deleted",
    CreditUpdated = "credit_updated",
    CustomSchemaFragmentCreated = "custom_schema_fragment_created",
    CustomSchemaFragmentDeleted = "custom_schema_fragment_deleted",
    CustomSchemaFragmentUpdated = "custom_schema_fragment_updated",
    CustomStageCreated = "custom_stage_created",
    CustomStageUpdated = "custom_stage_updated",
    CustomStateCreated = "custom_state_created",
    CustomStateUpdated = "custom_state_updated",
    DevUserCreated = "dev_user_created",
    DevUserDeleted = "dev_user_deleted",
    DevUserUpdated = "dev_user_updated",
    EngagementCreated = "engagement_created",
    EngagementDeleted = "engagement_deleted",
    EngagementUpdated = "engagement_updated",
    ExternalSyncUnitDiscovered = "external_sync_unit_discovered",
    FlowCreated = "flow_created",
    FlowDeleted = "flow_deleted",
    FlowUpdated = "flow_updated",
    IncidentCreated = "incident_created",
    IncidentDeleted = "incident_deleted",
    IncidentUpdated = "incident_updated",
    InvoiceCreated = "invoice_created",
    InvoiceDeleted = "invoice_deleted",
    InvoiceUpdated = "invoice_updated",
    JobCreated = "job_created",
    JobDeleted = "job_deleted",
    JobUpdated = "job_updated",
    LinkCreated = "link_created",
    LinkDeleted = "link_deleted",
    LinkUpdated = "link_updated",
    MarketplaceItemCreated = "marketplace_item_created",
    MarketplaceItemDeleted = "marketplace_item_deleted",
    MarketplaceItemUpdated = "marketplace_item_updated",
    MeetingCreated = "meeting_created",
    MeetingDeleted = "meeting_deleted",
    MeetingUpdated = "meeting_updated",
    NotificationCreated = "notification_created",
    NotificationDeleted = "notification_deleted",
    NotificationUpdated = "notification_updated",
    PartCreated = "part_created",
    PartDeleted = "part_deleted",
    PartUpdated = "part_updated",
    QuoteCreated = "quote_created",
    QuoteDeleted = "quote_deleted",
    QuoteUpdated = "quote_updated",
    RevOrgCreated = "rev_org_created",
    RevOrgDeleted = "rev_org_deleted",
    RevOrgUpdated = "rev_org_updated",
    RevUserCreated = "rev_user_created",
    RevUserDeleted = "rev_user_deleted",
    RevUserUpdated = "rev_user_updated",
    SlaTrackerCreated = "sla_tracker_created",
    SlaTrackerDeleted = "sla_tracker_deleted",
    SlaTrackerUpdated = "sla_tracker_updated",
    SnapInCreated = "snap_in_created",
    SnapInDeleted = "snap_in_deleted",
    SnapInUpdated = "snap_in_updated",
    StageDiagramCreated = "stage_diagram_created",
    StageDiagramUpdated = "stage_diagram_updated",
    StockSchemaFragmentUpdated = "stock_schema_fragment_updated",
    SurveyResponseCreated = "survey_response_created",
    SurveyResponseDeleted = "survey_response_deleted",
    SurveyResponseUpdated = "survey_response_updated",
    SyncUnitCreated = "sync_unit_created",
    SyncUnitDeleted = "sync_unit_deleted",
    SyncUnitUpdated = "sync_unit_updated",
    TagCreated = "tag_created",
    TagDeleted = "tag_deleted",
    TagUpdated = "tag_updated",
    TimelineEntryCreated = "timeline_entry_created",
    TimelineEntryDeleted = "timeline_entry_deleted",
    TimelineEntryUpdated = "timeline_entry_updated",
    Verify = "verify",
    VistaCreated = "vista_created",
    VistaDeleted = "vista_deleted",
    VistaGroupItemCreated = "vista_group_item_created",
    VistaGroupItemDeleted = "vista_group_item_deleted",
    VistaGroupItemUpdated = "vista_group_item_updated",
    VistaUpdated = "vista_updated",
    WebhookCreated = "webhook_created",
    WebhookDeleted = "webhook_deleted",
    WebhookUpdated = "webhook_updated",
    WorkCreated = "work_created",
    WorkDeleted = "work_deleted",
    WorkUpdated = "work_updated"
}
/** webhook-event-verify */
export interface WebhookEventVerify {
    /**
     * The challenge that must be echoed in the response.
     * @format byte
     */
    challenge: string;
}
/** The status of the webhook. */
export declare enum WebhookStatus {
    Active = "active",
    Inactive = "inactive",
    Unverified = "unverified"
}
/** webhook-summary */
export type WebhookSummary = AtomBaseSummary;
/**
 * webhooks-create-request
 * The request to create a new webhook.
 */
export interface WebhooksCreateRequest {
    /** The event types that the webhook endpoint will receive. */
    event_types?: WebhookEventType[];
    /**
     * The secret to use when verifying webhook events. If provided, the
     * secret must be between 8 and 32 bytes (inclusive). If not set, a
     * secret will be automatically generated and provided in the
     * response.
     * @format byte
     */
    secret?: string;
    /**
     * A unique key to associate with the webhook. This key can be used to
     * ensure idempotency of webhook creations within a Dev organization,
     * and will be provided in every webhook event. If set, the value must
     * be non-empty. If provided and another webhook in the Dev
     * organization has the same unique key, then status `409 Conflict`
     * will be returned.
     * @format byte
     */
    unique_key?: string;
    /** The URL of the webhook endpoint. */
    url: string;
}
/**
 * webhooks-create-response
 * The response to creating a new webhook.
 */
export interface WebhooksCreateResponse {
    webhook: Webhook;
}
/**
 * webhooks-delete-request
 * The request to delete a webhook.
 */
export interface WebhooksDeleteRequest {
    /**
     * ID for the webhook.
     * @example "don:integration:<partition>:devo/<dev-org-id>:webhook/<webhook-id>"
     */
    id: string;
}
/**
 * webhooks-delete-response
 * The response to deleting the webhook.
 */
export type WebhooksDeleteResponse = object;
/**
 * webhooks-get-request
 * The request to get a webhook's information.
 */
export interface WebhooksGetRequest {
    /**
     * ID for the webhook.
     * @example "don:integration:<partition>:devo/<dev-org-id>:webhook/<webhook-id>"
     */
    id: string;
}
/**
 * webhooks-get-response
 * The response to getting the information for the webhook.
 */
export interface WebhooksGetResponse {
    webhook: Webhook;
}
/**
 * webhooks-list-request
 * The request to list the webhooks.
 */
export type WebhooksListRequest = object;
/**
 * webhooks-list-response
 * The response to listing the webhooks.
 */
export interface WebhooksListResponse {
    /** The list of webhooks. */
    webhooks: Webhook[];
}
/** The action to update the webhook's status. */
export declare enum WebhooksUpdateAction {
    Activate = "activate",
    Deactivate = "deactivate"
}
/**
 * webhooks-update-request
 * The request to update a webhook.
 */
export interface WebhooksUpdateRequest {
    /** The action to update the webhook's status. */
    action?: WebhooksUpdateAction;
    event_types?: WebhooksUpdateRequestEventTypes;
    /**
     * ID for the webhook.
     * @example "don:integration:<partition>:devo/<dev-org-id>:webhook/<webhook-id>"
     */
    id: string;
    /**
     * If provided, updates the secret that's used when verifying webhook
     * events, which must be between 8 and 32 bytes (inclusive). Otherwise
     * if empty, then a new secret is generated. If the webhook is active,
     * then its status will transition to the 'unverified' state and it
     * won't receive any object events until successfully verified.
     * @format byte
     */
    secret?: string;
    /**
     * The webhook's updated URL. If the webhook is active, then the
     * webhook's status will transition to the 'unverified' state and it
     * won't receive any object events until successfully verified.
     */
    url?: string;
}
/** webhooks-update-request-event-types */
export interface WebhooksUpdateRequestEventTypes {
    /**
     * The event types to add. If a provided event type is already set for
     * the webhook, then nothing is done. Note this is mutually exclusive
     * with 'set'.
     */
    add?: WebhookEventType[];
    /**
     * The event types to remove. If a provided event type isn't set for
     * the webhook, then nothing is done. Note this is mutually exclusive
     * with 'set'.
     */
    remove?: WebhookEventType[];
    /**
     * The updated event types, which will replace the webhook's current
     * event types. Note this is mutually exclusive with 'add' and
     * 'remove'.
     */
    set?: WebhookEventType[];
}
/**
 * webhooks-update-response
 * The response to updating the webhook.
 */
export interface WebhooksUpdateResponse {
    webhook: Webhook;
}
/**
 * weekly-org-schedule
 * The schedule for each week.
 */
export interface WeeklyOrgSchedule {
    /** The 'on' intervals of the week. */
    intervals?: WeeklyOrgScheduleInterval[];
    /** Describes in which named period the schedule applies. */
    period_name?: string;
}
/**
 * weekly-org-schedule-interval
 * A time interval within a week when the schedule is 'on'. It is defined
 * in minutes counting from Sunday midnight to Sunday midnight. (that is,
 * 0 is Sunday 00:00).
 */
export interface WeeklyOrgScheduleInterval {
    /**
     * The time (in minutes) when the interval starts.
     * @format int32
     */
    from?: number;
    /**
     * The time (in minutes) when the interval ends. Should be larger than
     * 'from'.
     * @format int32
     */
    to?: number;
}
/** widget */
export type Widget = AtomBase & {
    /** Data sources provide the backing data tables for the widget. */
    data_sources: WidgetDataSource[];
    /** A brief summary of what the widget displays or represents. */
    description: string;
    /** Whether the widget is a system widget. */
    is_system?: boolean;
    /**
     * Layout of the widget. It determines the organization of the sub
     * widgets.
     */
    layout: GridLayout[];
    /** A unique identifying name for the widget (optional). */
    name?: string;
    /**
     * A list of sub-widgets that the widget contains. Each widget can
     * contain  multiple sub-widgets.
     */
    sub_widgets: SubWidget[];
    /** The title of the widget. */
    title: string;
};
/**
 * widget-column-projection
 * A widget column projection.
 */
export interface WidgetColumnProjection {
    /** A custom field widget column projection. */
    custom_field?: CustomFieldWidgetColumnProjection;
    /** Set of field attributes. */
    devrev_schema: SchemaFieldDescriptor;
    /** A meerkat specific column projection. */
    meerkat_schema: MeerkatWidgetColumnProjection;
    /** The reference name of the column. */
    reference_name: string;
    /** The type of the column. */
    type?: WidgetColumnProjectionType;
}
/** The type of the column. */
export declare enum WidgetColumnProjectionType {
    CustomField = "custom_field",
    Native = "native"
}
/**
 * widget-data-source
 * A data source for a widget.
 */
export interface WidgetDataSource {
    /**
     * The ID of the data source. Meant to be set when the type is
     * data_source.
     */
    data_source?: string;
    /**
     * The dimensions (or the extended dimensions) provided by the data
     * source.  These are the categories that can be used to group or
     * segment the measures.
     */
    dimensions?: WidgetColumnProjection[];
    /** An referenced data source for a widget. */
    external_data_source?: WidgetDataSourceReference;
    /**
     * A list of possible joins for the data source. Follows foreign key
     * semantics.
     */
    joins?: DataSourceJoin[];
    /**
     * The measures (or the extended measures) provided by the data
     * source.  These are the numerical values that can be analyzed.
     */
    measures?: WidgetColumnProjection[];
    /** An oasis backed data source. */
    oasis?: WidgetOasisDataSource;
    /** The reference name of the data source. */
    reference_name: string;
    /** The type of the data source. */
    type: WidgetDataSourceType;
}
/**
 * widget-data-source-reference
 * An referenced data source for a widget.
 */
export interface WidgetDataSourceReference {
    /**
     * The column projections for the data source. These are the columns
     * that are  projected from the datasets.
     */
    dataset_projections?: WidgetOasisDatasetColumnProjection[];
    /** The id of the data source. */
    id: string;
}
/** The type of the data source. */
export declare enum WidgetDataSourceType {
    DataSource = "data_source",
    ExternalDataSource = "external_data_source",
    Oasis = "oasis"
}
/** Comparison operator for the display condition. */
export declare enum WidgetDeviceTypeDisplayConditionOperator {
    Eq = "eq",
    Neq = "neq"
}
/** The value against which the device type will be compared */
export declare enum WidgetDeviceTypeDisplayConditionValue {
    DesktopWeb = "desktop_web",
    MobileWeb = "mobile_web"
}
/** Logical operator to use. */
export declare enum WidgetDisplayExpressionOperator {
    And = "and",
    Or = "or"
}
/**
 * widget-oasis-data-source
 * An oasis backed data source.
 */
export interface WidgetOasisDataSource {
    /** List of datasets used by the data source. */
    datasets: string[];
    /**
     * The column projections for the data source. These are the columns
     * that are  projected from the datasets.
     */
    projections?: WidgetOasisDatasetColumnProjection[];
    /**
     * The base SQL query that constructs the view for the data source.
     * The SQL can reference the datasets using their aliases.
     */
    sql_query: string;
}
/**
 * widget-oasis-dataset-column
 * An oasis dataset column.
 */
export interface WidgetOasisDatasetColumn {
    /** A custom field widget column projection. */
    custom_field?: CustomFieldWidgetColumnProjection;
    /** The name of the column. */
    name: string;
}
/**
 * widget-oasis-dataset-column-projection
 * An oasis dataset column projection.
 */
export interface WidgetOasisDatasetColumnProjection {
    /** The column name. */
    columns: WidgetOasisDatasetColumn[];
    /** The dataset id. */
    dataset: string;
}
/** Comparison operator for the display condition. */
export declare enum WidgetPageUrlDisplayConditionOperator {
    Contains = "contains",
    Eq = "eq",
    Neq = "neq",
    NotContains = "not_contains"
}
/**
 * widget-query
 * The query for a widget. This includes measures and dimensions to be
 * visualized.
 */
export interface WidgetQuery {
    /**
     * The dimensions for the query, which are the categories to group or
     * segment the measures. Usually these are the X-axis values in a
     * visualization.
     */
    dimensions?: string[];
    /**
     * Set of filters to apply on the widgets. These filters are applied
     * on top of the dashboard level filters.
     */
    filters?: DashboardFilter[];
    /** Join paths to use for the query. */
    joins?: WidgetQueryJoins[];
    /**
     * The maximum number of records to return. This is used to limit the
     * amount of data  returned by the query.
     * @format int32
     */
    limit?: number;
    /**
     * The measures for the query, which are the numerical values to be
     * analyzed. Usually these are the Y-axis values in a visualization.
     */
    measures?: string[];
    /**
     * The order in which the data should be returned. This is used to
     * sort the data  returned by the query.
     */
    order_by?: WidgetQueryOrderBy[];
}
/**
 * widget-query-joins
 * A list of possible joins for the data source. Follows foreign key
 * semantics.
 */
export interface WidgetQueryJoins {
    /** A list of joins. */
    path: string[];
}
/**
 * widget-query-order-by
 * The order in which the data should be returned. This is used to sort
 * the data  returned by the query.
 */
export interface WidgetQueryOrderBy {
    /** The direction of the sort. */
    direction: WidgetQueryOrderByDirection;
    /** The column to sort by. */
    reference_name: string;
}
/** The direction of the sort. */
export declare enum WidgetQueryOrderByDirection {
    Ascending = "ascending",
    Descending = "descending"
}
/** widget-summary */
export type WidgetSummary = AtomBaseSummary;
/** Comparison operator for the display condition. */
export declare enum WidgetTimeOnPageDisplayConditionOperator {
    Gte = "gte"
}
/** Comparison operator for the display condition. */
export declare enum WidgetViewCountDisplayConditionOperator {
    Lte = "lte"
}
/**
 * widget-visualization
 * The visualization for a widget. This includes the type of visualization
 * and any  configuration specific to that type.
 */
export interface WidgetVisualization {
    /**
     * A bar chart visualization configuration. Includes metadata specific to
     * bar charts.
     */
    bar?: BarWidgetVisualization;
    /**
     * A column chart visualization configuration. Includes metadata specific
     * to column charts.
     */
    column?: ColumnWidgetVisualization;
    /**
     * A donut chart visualization configuration. Includes metadata specific
     * to donut charts.
     */
    donut?: DonutWidgetVisualization;
    /**
     * A line chart visualization configuration. Includes metadata specific to
     * line charts.
     */
    line?: LineWidgetVisualization;
    /**
     * A metric visualization configuration. Includes metadata specific to
     * metrics.
     */
    metric?: MetricWidgetVisualization;
    /**
     * A pie chart visualization configuration. Includes metadata specific to
     * pie charts.
     */
    pie?: PieWidgetVisualization;
    /**
     * A table visualization configuration. Includes metadata specific to
     * tables.
     */
    table?: TableWidgetVisualization;
    /** The type of the visualization, such as line, bar, pie, etc. */
    type: WidgetVisualizationType;
}
/** The type of the visualization, such as line, bar, pie, etc. */
export declare enum WidgetVisualizationType {
    Bar = "bar",
    Column = "column",
    Donut = "donut",
    Line = "line",
    Metric = "metric",
    Pie = "pie",
    Table = "table"
}
/**
 * widgets-create-request
 * The request to create a widget.
 */
export interface WidgetsCreateRequest {
    /** Data sources provide the backing data tables for the widget. */
    data_sources: CreateWidgetDataSource[];
    /** A brief summary of what the widget displays or represents. */
    description: string;
    /** Whether the widget is a system widget. */
    is_system?: boolean;
    /**
     * Layout of the widget. It determines the organization of the sub
     * widgets.
     */
    layout: CreateGridLayout[];
    /** A unique identifying name for the widget (optional). */
    name?: string;
    /**
     * A list of sub-widgets that the widget contains. Each widget can
     * contain  multiple sub-widgets.
     */
    sub_widgets: CreateSubWidget[];
    /** The title of the widget. */
    title: string;
}
/**
 * widgets-create-response
 * The response to a widget create request.
 */
export interface WidgetsCreateResponse {
    widget: Widget;
}
/**
 * widgets-delete-request
 * The request to delete a widget.
 */
export interface WidgetsDeleteRequest {
    /** The ID of the widget to delete. */
    id: string;
}
/**
 * widgets-get-request
 * The request to get a widget.
 */
export interface WidgetsGetRequest {
    /** The requested widget's ID. */
    id: string;
}
/**
 * widgets-get-response
 * The response to a widget get request.
 */
export interface WidgetsGetResponse {
    widget: Widget;
}
/**
 * widgets-list-request
 * The request to list widgets.
 */
export interface WidgetsListRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of widgets to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Fields to sort the widgets by and the direction to sort them. */
    sort_by?: string[];
}
/**
 * widgets-list-response
 * The response to a widget list request.
 */
export interface WidgetsListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The list of widgets. */
    widgets: Widget[];
}
/**
 * widgets-update-request
 * The request to update a widget.
 */
export interface WidgetsUpdateRequest {
    /** Data sources provide the backing data tables for the widget. */
    data_sources?: UpdateWidgetDataSource[];
    /** A brief summary of what the widget displays or represents. */
    description?: string;
    /** The ID of the widget to update. */
    id: string;
    /**
     * Layout of the widget. It determines the organization of the sub
     * widgets.
     */
    layout?: UpdateGridLayout[];
    /** A unique identifying name for the widget (optional). */
    name?: string;
    /**
     * A list of sub-widgets that the widget contains. Each widget can
     * contain  multiple sub-widgets.
     */
    sub_widgets?: UpdateSubWidget[];
    /** The title of the widget. */
    title?: string;
}
/**
 * widgets-update-response
 * The response to a widget update request.
 */
export interface WidgetsUpdateResponse {
    widget: Widget;
}
/** window-based-insight */
export type WindowBasedInsight = InsightBase & {
    /**
     * Threshold of delta beyond which it should be considered bad.
     * @format double
     */
    bad_delta_threshold?: number;
    /**
     * Threshold of delta beyond which it should be considered good.
     * @format double
     */
    good_delta_threshold?: number;
};
/** window-based-insight-summary */
export type WindowBasedInsightSummary = InsightBaseSummary;
/** window-based-insight-value */
export type WindowBasedInsightValue = InsightValueBase & {
    /**
     * Previous value of the insight with one week as the window value.
     * @format double
     */
    previous_value_for_one_week?: number;
    /**
     * Value of the insight with one week as the window value.
     * @format double
     */
    value_for_one_week?: number;
};
/** window-based-insight-value-summary */
export type WindowBasedInsightValueSummary = InsightValueBaseSummary;
/** work */
export type Work = (CustomWork | Issue | Opportunity | Project | Task | Ticket) & {
    type: WorkType;
};
/** work-base */
export type WorkBase = AtomBase & {
    /**
     * Timestamp when the work was actually completed.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    actual_close_date?: string;
    /**
     * Age of the work item in day(s).
     * @format double
     */
    age_days?: number;
    applies_to_part?: PartSummary;
    /** The artifacts attached to the work item. */
    artifacts?: ArtifactSummary[];
    /** Body of the work object. */
    body?: string;
    /** Custom fields. */
    custom_fields?: object;
    /**
     * Custom schema fragments.
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    custom_schema_fragments?: string[];
    /**
     * Information about the source fields that have been airdropped into
     * DevRev.
     */
    external_source_data?: ExternalSourceDataComp;
    /**
     * Timestamp of the last message from a dev user.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    last_internal_comment_date?: string;
    /** Links associated with the object. */
    links?: ArchetypeLinkSummary[];
    /** The users that own the work. */
    owned_by: UserSummary[];
    /** Reactions on the object. */
    reactions?: ObjectReaction[];
    /** The object IDs referenced in the body. */
    references?: AtomSummary[];
    /** Users that reported the work. */
    reported_by?: UserSummary[];
    /**
     * Combination of stock and custom schema fragment IDs.
     * @deprecated
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    schema_fragment_ids?: string[];
    /** Describes the current stage of a work item. */
    stage?: LegacyStage;
    /** Meta information about the staged record. */
    staged_info?: StagedInfo;
    /** State of the object based upon the stage. */
    state?: string;
    /**
     * Stock schema fragment.
     * @example "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"
     */
    stock_schema_fragment?: string;
    /** Subtype corresponding to the custom type fragment. */
    subtype?: string;
    /** Mixin for storing sync metadata. */
    sync_metadata?: SyncMetadata;
    /** Tags associated with the object. */
    tags?: TagWithValue[];
    /**
     * Timestamp when the work is expected to be complete.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    target_close_date?: string;
    /** Title of the work object. */
    title: string;
};
/** work-base-summary */
export type WorkBaseSummary = AtomBaseSummary & {
    /** The users that own the work. */
    owned_by: UserSummary[];
    /** Describes the current stage of a work item. */
    stage?: LegacyStageSummary;
    /** Title of the work object. */
    title: string;
};
/**
 * work-context
 * Work fields required for recommendation.
 */
export interface WorkContext {
    /**
     * The part that the work applies to.
     * @example "PROD-12345"
     */
    applies_to_part?: string;
    /**
     * The part that the work applies to.
     * @deprecated
     * @example "PROD-12345"
     */
    applies_to_part_id?: string;
    /** Body of the work. */
    body?: string;
    /**
     * The users that own the work.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * The users that own the work.
     * @deprecated
     * @example ["DEVU-12345"]
     */
    owned_by_ids?: string[];
    /**
     * List of tag ids.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tag_ids?: string[];
    /**
     * List of tag ids.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Title of the work. */
    title: string;
    type: WorkType;
}
/** work-deflect-base */
export interface WorkDeflectBase {
    /**
     * Confidence score of the deflection recommendation. Range of the
     * confidence must be 0 -> 1.
     * @format float
     */
    confidence: number;
}
/**
 * work-deflect-request
 * Work deflect request.
 */
export interface WorkDeflectRequest {
    /** Work fields required for recommendation. */
    context: WorkContext;
}
/**
 * work-deflect-response
 * Work Deflect response.
 */
export interface WorkDeflectResponse {
    /** The deflection results. */
    results: WorkDeflectResult[];
    /** Version of the deflection model. */
    version?: string;
}
/**
 * work-deflect-result
 * A work deflection result.
 */
export type WorkDeflectResult = WorkDeflectBase & {
    work: WorkSummary;
};
/** work-search-summary */
export type WorkSearchSummary = SearchSummaryBase & {
    work: WorkSummary;
};
/** work-summary */
export type WorkSummary = (CustomWorkSummary | IssueSummary | OpportunitySummary | ProjectSummary | TaskSummary | TicketSummary) & {
    type: WorkType;
};
export declare enum WorkType {
    CustomWork = "custom_work",
    Issue = "issue",
    Opportunity = "opportunity",
    Project = "project",
    Task = "task",
    Ticket = "ticket"
}
/** workflow */
export type Workflow = AtomBase & {
    /** Description of the workflow. */
    description?: string;
    service_account?: UserSummary;
    /** Status of the workflow. */
    status?: WorkflowStatus;
    /** Title of the workflow. */
    title?: string;
    /** Triggers for the workflow. */
    triggers?: WorkflowStepSummary[];
    /** Version of the workflow. */
    version?: string;
};
/** workflow-run */
export type WorkflowRun = AtomBase & {
    /**
     * End time of the workflow run.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    end_time?: string;
    /**
     * Start time of the workflow run.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    start_time?: string;
    /** Status of the workflow run. */
    status?: WorkflowRunStatus;
    /** Version of the associated workflow. */
    version?: string;
    workflow?: WorkflowSummary;
};
/** Status of the workflow run. */
export declare enum WorkflowRunStatus {
    Canceled = "canceled",
    Completed = "completed",
    Errored = "errored",
    Running = "running",
    Waiting = "waiting"
}
/** workflow-run-summary */
export type WorkflowRunSummary = AtomBaseSummary;
/** Status of the workflow. */
export declare enum WorkflowStatus {
    Active = "active",
    Draft = "draft",
    Error = "error",
    Paused = "paused",
    Suspended = "suspended"
}
/** workflow-step */
export type WorkflowStep = AtomBase & {
    /** A detailed explanation of the step's purpose. */
    description?: string;
    /**
     * The input ports and relevant schema(s) for this step. Only relevant
     * for operations which support dynamic ports/schemas like OneOf, HTTP
     * etc.
     */
    input_ports?: OperationPortIoSchema[];
    /** A set of input values for the step. */
    input_values?: WorkflowStepInputValue[];
    /** The human-readable identifier for the step. */
    name?: string;
    /** List of steps which directly depend on the current step. */
    next_steps?: WorkflowStepNextStepSpec[];
    operation?: OperationSummary;
    /**
     * The output ports and relevant schema(s) for this step. Only
     * relevant for operations which support dynamic ports/schemas like
     * Condition, HTTP etc.
     */
    output_ports?: OperationPortIoSchema[];
    /** A unique identifier for the step within the workflow. */
    reference_key?: string;
    /** Version of the workflow to which this step belongs. */
    version?: string;
    workflow?: WorkflowSummary;
};
/**
 * workflow-step-input-value
 * Represents an input value for the step, which can be a fixed value or a
 * dynamic expression evaluated at runtime.
 */
export interface WorkflowStepInputValue {
    /**
     * Specifications for the input values, including methods of
     * provisioning and computation.
     */
    fields?: WorkflowStepInputValueSpec[];
    /** The name of the input port. */
    port_name?: string;
}
/**
 * workflow-step-input-value-definition
 * Provides the specifics of an input value, detailing whether it is a
 * literal constant or a dynamic expression and its corresponding content.
 */
export interface WorkflowStepInputValueDefinition {
    /**
     * Identifies the nature of the input value, distinguishing between a
     * literal constant and a dynamic expression.
     */
    type?: InputValueDefinitionType;
    /** The actual fixed value or expression defining the input. */
    value?: object;
}
/**
 * workflow-step-input-value-spec
 * Specifies how an input value is sourced, whether through a direct fixed
 * value or a computed expression based on other step outputs.
 */
export interface WorkflowStepInputValueSpec {
    /** An identifier for the input value. */
    name?: string;
    /**
     * Provides the specifics of an input value, detailing whether it is a
     * literal constant or a dynamic expression and its corresponding content.
     */
    value?: WorkflowStepInputValueDefinition;
}
/**
 * workflow-step-next-step-spec
 * Describes the relationship between subsequent steps within a workflow.
 */
export interface WorkflowStepNextStepSpec {
    /**
     * The name of the port on the next step that will establish the
     * relationship.
     */
    next_port_name?: string;
    next_step?: WorkflowStepSummary;
    /** The name of the port through which the relationship is established. */
    port_name?: string;
}
/** workflow-step-summary */
export type WorkflowStepSummary = AtomBaseSummary;
/** workflow-summary */
export type WorkflowSummary = AtomBaseSummary;
/**
 * works-cluster
 * A cluster of work items.
 */
export interface WorksCluster {
    /** IDs of enhancements assigned to work items in this cluster. */
    assigned_enhancements: string[];
    /** Description of the cluster. */
    description: string;
    /** ID of the work cluster. */
    id: string;
    /** Whether this cluster is a terminal cluster that has no children. */
    is_terminal: boolean;
    /** Label of the cluster. */
    label: string;
    /** Metrics associated with this cluster. */
    metrics: WorksClusterMetric[];
    /** ID of the parent work cluster, if it exists. */
    parent_works_cluster?: string;
    work_type: WorkType;
}
/**
 * works-cluster-metric
 * A Metric associated with a work cluster.
 */
export interface WorksClusterMetric {
    /** Value of the metric, if it is a class metric. */
    class_value?: string;
    /**
     * Value of the metric, if it is a count metric.
     * @format int64
     */
    count_value?: number;
    /**
     * Value of the metric, if it is a duration metric.
     * @format int64
     */
    duration_value?: number;
    /** Label of the metric. */
    label: string;
    /** Name of the metric. */
    name: string;
    value?: 'class_value' | 'count_value' | 'duration_value';
}
/** works-clusters-gather-request */
export interface WorksClustersGatherRequest {
    /** Provides ways to specify date ranges on objects. */
    actual_close_date?: DateFilter;
    /**
     * Filters for work which have one of the parts present as its
     * ancestor part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /**
     * Filters for work belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_part?: string[];
    /**
     * Filters for work created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: WorksFilterCreatedByOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** Filters for custom fields. */
    custom_fields?: object;
    /**
     * Depth level of the cluster hierarchy to return. If not specified,
     * clusters are returned reardess of their depth_level.
     * @format int32
     */
    depth_level?: number;
    /**
     * Filters for work excluding the provided work IDs.
     * @example ["ISS-12345"]
     */
    exclude?: string[];
    external_source_data?: WorksFilterExternalSourceData;
    issue?: WorksFilterIssue;
    /** Provides ways to specify date ranges on objects. */
    last_internal_comment_date?: DateFilter;
    /**
     * The maximum number of work clusters to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /** Filters for work with any of the provided link target objects. */
    link_target_object?: string[];
    link_target_object_op?: WorksFilterLinkTargetObjectOperatorType;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    opportunity?: WorksFilterOpportunity;
    /**
     * Filters for work owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    owned_by_op?: WorksFilterOwnedByOperatorType;
    /**
     * ID of the parent work cluster. If not specified, clusters are
     * returned regardless of their parent_work_cluster.
     */
    parent_works_cluster?: string;
    /**
     * Filters for work reported by any of these users.
     * @example ["DEVU-12345"]
     */
    reported_by?: string[];
    reported_by_op?: WorksFilterReportedByOperatorType;
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for work for the provided stage names. */
    stage_names?: string[];
    staged_info?: StagedInfoFilter;
    /** Filters for work with any of the provided states. */
    state?: string[];
    sync_metadata?: SyncMetadataFilter;
    tag_ids_op?: WorksFilterTagIdsOperatorType;
    /**
     * Filters for work with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for work with the provided tag and value. */
    tags_v2?: TagWithValueFilter[];
    /** Provides ways to specify date ranges on objects. */
    target_close_date?: DateFilter;
    task?: WorksFilterTask;
    ticket?: WorksFilterTicket;
    /** Filters for work of the provided types. */
    type?: WorkType[];
    /**
     * Filters for work belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
/** works-clusters-gather-response */
export interface WorksClustersGatherResponse {
    /**
     * Count of the number of work clusters after applying filters.
     * @format int32
     */
    count?: number;
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The list of work clusters. */
    works_clusters: WorksCluster[];
}
/** works-clusters-list-request */
export interface WorksClustersListRequest {
    /** Provides ways to specify date ranges on objects. */
    actual_close_date?: DateFilter;
    /**
     * Filters for work which have one of the parts present as its
     * ancestor part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /**
     * Filters for work belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_part?: string[];
    /**
     * Filters for work created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: WorksFilterCreatedByOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** Filters for custom fields. */
    custom_fields?: object;
    /**
     * Filters for work excluding the provided work IDs.
     * @example ["ISS-12345"]
     */
    exclude?: string[];
    external_source_data?: WorksFilterExternalSourceData;
    issue?: WorksFilterIssue;
    /** Provides ways to specify date ranges on objects. */
    last_internal_comment_date?: DateFilter;
    /**
     * The maximum number of work clusters to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /** Filters for work with any of the provided link target objects. */
    link_target_object?: string[];
    link_target_object_op?: WorksFilterLinkTargetObjectOperatorType;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    opportunity?: WorksFilterOpportunity;
    /**
     * Filters for work owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    owned_by_op?: WorksFilterOwnedByOperatorType;
    /**
     * Filters for work reported by any of these users.
     * @example ["DEVU-12345"]
     */
    reported_by?: string[];
    reported_by_op?: WorksFilterReportedByOperatorType;
    /**
     * Whether to return only a list of summaries of work items in the
     * cluster, instead of the actual work items.
     */
    return_summaries_only?: boolean;
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for work for the provided stage names. */
    stage_names?: string[];
    staged_info?: StagedInfoFilter;
    /** Filters for work with any of the provided states. */
    state?: string[];
    sync_metadata?: SyncMetadataFilter;
    tag_ids_op?: WorksFilterTagIdsOperatorType;
    /**
     * Filters for work with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for work with the provided tag and value. */
    tags_v2?: TagWithValueFilter[];
    /** Provides ways to specify date ranges on objects. */
    target_close_date?: DateFilter;
    task?: WorksFilterTask;
    ticket?: WorksFilterTicket;
    /** Filters for work of the provided types. */
    type?: WorkType[];
    /**
     * Filters for work belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
    /**
     * IDs of the work clusters for which work items should be returned.
     * @maxItems 25
     * @minItems 1
     */
    works_clusters: string[];
}
/** works-clusters-list-response */
export interface WorksClustersListResponse {
    /**
     * Count of the number of work items or summaries in the cluster after
     * applying filters.
     * @format int32
     */
    count?: number;
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The list of work items. Only returned if return_only_ids is false */
    works?: Work[];
    /** A cluster of work items. */
    works_cluster: WorksCluster;
    /** Summary work items contained in the cluster. */
    works_summaries?: WorkSummary[];
}
/** works-count-request */
export interface WorksCountRequest {
    /** Provides ways to specify date ranges on objects. */
    actual_close_date?: DateFilter;
    /**
     * Filters for work which have one of the parts present as its
     * ancestor part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /**
     * Filters for work belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_part?: string[];
    /**
     * The connection to count the work items for.
     * @maxLength 1
     */
    connection?: string[];
    /**
     * Filters for work created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: WorksFilterCreatedByOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /** Filters for custom fields. */
    custom_fields?: object;
    /**
     * Filters for work excluding the provided work IDs.
     * @example ["ISS-12345"]
     */
    exclude?: string[];
    external_source_data?: WorksFilterExternalSourceData;
    issue?: WorksFilterIssue;
    /** Provides ways to specify date ranges on objects. */
    last_internal_comment_date?: DateFilter;
    /** Filters for work with any of the provided link target objects. */
    link_target_object?: string[];
    link_target_object_op?: WorksFilterLinkTargetObjectOperatorType;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    opportunity?: WorksFilterOpportunity;
    /**
     * Filters for work owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    owned_by_op?: WorksFilterOwnedByOperatorType;
    /**
     * Filters for work reported by any of these users.
     * @example ["DEVU-12345"]
     */
    reported_by?: string[];
    reported_by_op?: WorksFilterReportedByOperatorType;
    /** The search query to filter the works. */
    search_query?: string;
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for work for the provided stage names. */
    stage_names?: string[];
    staged_info?: StagedInfoFilter;
    /** Filters for work with any of the provided states. */
    state?: string[];
    sync_metadata?: SyncMetadataFilter;
    tag_ids_op?: WorksFilterTagIdsOperatorType;
    /**
     * Filters for work with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for work with the provided tag and value. */
    tags_v2?: TagWithValueFilter[];
    /** Provides ways to specify date ranges on objects. */
    target_close_date?: DateFilter;
    task?: WorksFilterTask;
    ticket?: WorksFilterTicket;
    /** Filters for work of the provided types. */
    type?: WorkType[];
    /**
     * Filters for work belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
/** works-count-response */
export interface WorksCountResponse {
    /**
     * Count of works matching the filter.
     * @format int32
     */
    count: number;
}
/** works-create-request */
export type WorksCreateRequest = (WorksCreateRequestCustomWork | WorksCreateRequestIssue | WorksCreateRequestOpportunity | WorksCreateRequestTask | WorksCreateRequestTicket) & {
    /**
     * The [part](https://devrev.ai/docs/product/parts) that the work
     * applies to. Specifying a part is required when creating tickets and
     * issues.
     * @example "PROD-12345"
     */
    applies_to_part?: string;
    /**
     * The IDs of the artifacts to associate with the work item.
     * @example ["ARTIFACT-12345"]
     */
    artifacts?: string[];
    /** Body of the work object. */
    body?: string;
    /** Custom fields. */
    custom_fields?: object;
    /**
     * The custom schema fragments to use.
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    custom_schema_fragments?: string[];
    /**
     * Requested custom schemas described abstractly. Every provided schema's
     * custom field must be specified, otherwise a bad request error is
     * returned. If a new custom schema specifier is provided, then it will be
     * added to the work, otherwise if a custom schema is omitted from the
     * specifier, it remains unmodified.
     */
    custom_schema_spec?: CustomSchemaSpec;
    /** Links associated with the work item. */
    links?: EmbedLinksCreateRequest[];
    /**
     * The users that own the work.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * The users that reported the work.
     * @example ["DEVU-12345"]
     */
    reported_by?: string[];
    /** Sets an object's initial stage. */
    stage?: StageInit;
    /** The type of stage validations options when creating a work item. */
    stage_validation_options?: StageValidationOptionForCreate[];
    /** Tags associated with the work item. */
    tags?: SetTagWithValue[];
    /**
     * Timestamp for when the work is expected to be complete.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    target_close_date?: string;
    /** Title of the work object. */
    title: string;
    type: WorkType;
    [key: string]: any;
};
/** works-create-request-custom-work */
export type WorksCreateRequestCustomWork = object;
/** works-create-request-issue */
export interface WorksCreateRequestIssue {
    /**
     * The actual effort, in hours, to complete the issue.
     * @format double
     */
    actual_effort?: number;
    /**
     * The IDs of the parts associated with issue.
     * @maxItems 8
     * @example ["PROD-12345"]
     */
    developed_with?: string[];
    /**
     * The estimated effort, in hours, to complete the issue.
     * @format double
     */
    estimated_effort?: number;
    /**
     * Priority enum id of the work based upon impact and criticality.
     * @format int64
     */
    priority_v2?: number;
    /** The sprint that the issue belongs to. */
    sprint?: string;
    /**
     * Timestamp for when the work is expected to start.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    target_start_date?: string;
}
/** works-create-request-opportunity */
export interface WorksCreateRequestOpportunity {
    /**
     * The ID of the account that the opportunity is associated with.
     * @example "ACC-12345"
     */
    account: string;
    /**
     * Total opportunity amount.
     * @format double
     */
    amount?: number;
    /** The money value to create. */
    annual_contract_value?: SetMoney;
    /**
     * ARR of the opportunity.
     * @format double
     */
    annual_recurring_revenue?: number;
    /** The money value to create. */
    budget?: SetMoney;
    /** Contacts involved in the opportunity. */
    contacts?: string[];
    /**
     * Budget of the customer.
     * @format double
     */
    customer_budget?: number;
    /** Forecast category of the opportunity. */
    forecast_category?: OpportunityForecastCategory;
    /** Priority of the opportunity. */
    priority?: OpportunityPriority;
    /**
     * The probability of winning the deal, lies between 0.0 and 1.0.
     * @format double
     */
    probability?: number;
    /** The money value to create. */
    value?: SetMoney;
}
/** works-create-request-task */
export interface WorksCreateRequestTask {
    /**
     * The actual effort, in hours, to complete the issue.
     * @format double
     */
    actual_effort?: number;
    /** Whether the task is embedded in the work. */
    embedded?: boolean;
    /**
     * The estimated effort, in hours, to complete the issue.
     * @format double
     */
    estimated_effort?: number;
    /** Priority of the work based upon impact and criticality. */
    priority?: TaskPriority;
    /**
     * Timestamp when the task was started.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    start_date?: string;
}
/** works-create-request-ticket */
export interface WorksCreateRequestTicket {
    /**
     * The Account that the ticket is associated with.
     * @example "ACC-12345"
     */
    account?: string;
    /** Channels of the ticket. */
    channels?: TicketChannels[];
    /** The group that the ticket is associated with. */
    group?: string;
    /** Whether the ticket is spam. */
    is_spam?: boolean;
    /** Whether the ticket needs a response. */
    needs_response?: boolean;
    /**
     * The Rev organization that the ticket is associated with.
     * @example "REV-AbCdEfGh"
     */
    rev_org?: string;
    /** Severity of the ticket. */
    severity?: TicketSeverity;
    /** The source channel of the ticket. */
    source_channel?: string;
}
/** works-create-response */
export interface WorksCreateResponse {
    work: Work;
}
/** works-delete-request */
export interface WorksDeleteRequest {
    /**
     * The work's ID.
     * @example "ISS-12345"
     */
    id: string;
}
/** works-delete-response */
export type WorksDeleteResponse = object;
/** works-export-request */
export interface WorksExportRequest {
    /** Provides ways to specify date ranges on objects. */
    actual_close_date?: DateFilter;
    /**
     * Filters for work which have one of the parts present as its
     * ancestor part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /**
     * Filters for work belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_part?: string[];
    /**
     * Filters for work created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: WorksFilterCreatedByOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /** Filters for custom fields. */
    custom_fields?: object;
    /**
     * Filters for work excluding the provided work IDs.
     * @example ["ISS-12345"]
     */
    exclude?: string[];
    external_source_data?: WorksFilterExternalSourceData;
    /**
     * The number of work items to return. The default is '50', the
     * maximum is '5000'.
     * @format int32
     */
    first?: number;
    issue?: WorksFilterIssue;
    /** Provides ways to specify date ranges on objects. */
    last_internal_comment_date?: DateFilter;
    /** Filters for work with any of the provided link target objects. */
    link_target_object?: string[];
    link_target_object_op?: WorksFilterLinkTargetObjectOperatorType;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    opportunity?: WorksFilterOpportunity;
    /**
     * Filters for work owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    owned_by_op?: WorksFilterOwnedByOperatorType;
    /**
     * Filters for work reported by any of these users.
     * @example ["DEVU-12345"]
     */
    reported_by?: string[];
    reported_by_op?: WorksFilterReportedByOperatorType;
    /** Fields to sort the work items by and the direction to sort them. */
    sort_by?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for work for the provided stage names. */
    stage_names?: string[];
    staged_info?: StagedInfoFilter;
    /** Filters for work with any of the provided states. */
    state?: string[];
    sync_metadata?: SyncMetadataFilter;
    tag_ids_op?: WorksFilterTagIdsOperatorType;
    /**
     * Filters for work with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for work with the provided tag and value. */
    tags_v2?: TagWithValueFilter[];
    /** Provides ways to specify date ranges on objects. */
    target_close_date?: DateFilter;
    task?: WorksFilterTask;
    ticket?: WorksFilterTicket;
    /** Filters for work of the provided types. */
    type?: WorkType[];
    /**
     * Filters for work belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
/** works-export-response */
export interface WorksExportResponse {
    /** The resulting collection of work items. */
    works: Work[];
}
export declare enum WorksFilterCreatedByOperatorType {
    Any = "any",
    NotAny = "not_any"
}
/** works-filter-external-source-data */
export interface WorksFilterExternalSourceData {
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
}
/** works-filter-issue */
export interface WorksFilterIssue {
    /**
     * Filters for issues with any of the provided Accounts.
     * @example ["ACC-12345"]
     */
    accounts?: string[];
    accounts_op?: WorksFilterIssueAccountsOpOperatorType;
    /** Provides ways to specify date ranges on objects. */
    actual_start_date?: DateFilter;
    /** The filter for applies to part. */
    applies_to_part?: AppliesToPartFilter;
    /** Filters for issues with any of the provided priority enum ids. */
    priority_v2?: number[];
    /**
     * Filters for issues with any of the provided Rev organizations.
     * @example ["REV-AbCdEfGh"]
     */
    rev_orgs?: string[];
    rev_orgs_op?: WorksFilterIssueRevOrgsOpOperatorType;
    /** Filters for issues with any of the sprint. */
    sprint?: string[];
    sprint_op?: WorksFilterIssueSprintOpOperatorType;
    /** Filters for issues with any of the provided subtypes. */
    subtype?: string[];
    subtype_op?: SubtypeOpOperatorType;
    /** Provides ways to specify date ranges on objects. */
    target_start_date?: DateFilter;
}
export declare enum WorksFilterIssueAccountsOpOperatorType {
    All = "all",
    Any = "any",
    Empty = "empty",
    NotEmpty = "not_empty"
}
export declare enum WorksFilterIssueRevOrgsOpOperatorType {
    All = "all",
    Any = "any",
    Empty = "empty",
    NotEmpty = "not_empty"
}
export declare enum WorksFilterIssueSprintOpOperatorType {
    Any = "any",
    Empty = "empty",
    NotEmpty = "not_empty"
}
export declare enum WorksFilterLinkTargetObjectOperatorType {
    Any = "any",
    NotAny = "not_any"
}
/** works-filter-opportunity */
export interface WorksFilterOpportunity {
    /**
     * Filters for opportunities belonging to any of the provided
     * accounts.
     * @example ["ACC-12345"]
     */
    account?: string[];
    /** Filters for opportunities with any of the provided contacts. */
    contacts?: string[];
    contacts_op?: WorksFilterOpportunityContactsOpOperatorType;
    /**
     * Filters for opportunities with any of the provided forecast
     * categories.
     */
    forecast_category?: OpportunityForecastCategory[];
    /** Filters for opportunities with any of the provided priorities. */
    priority?: OpportunityPriority[];
    /** Filters for opportunity with any of the provided subtypes. */
    subtype?: string[];
    subtype_op?: SubtypeOpOperatorType;
}
export declare enum WorksFilterOpportunityContactsOpOperatorType {
    All = "all",
    Any = "any",
    Empty = "empty",
    NotAny = "not_any",
    NotEmpty = "not_empty"
}
export declare enum WorksFilterOwnedByOperatorType {
    Any = "any",
    NotAny = "not_any"
}
export declare enum WorksFilterReportedByOperatorType {
    All = "all",
    Any = "any",
    Empty = "empty",
    NotAny = "not_any",
    NotEmpty = "not_empty"
}
export declare enum WorksFilterTagIdsOperatorType {
    All = "all",
    Any = "any",
    Empty = "empty",
    NotAny = "not_any",
    NotEmpty = "not_empty"
}
/** works-filter-task */
export interface WorksFilterTask {
    /** The filter for applies to part. */
    applies_to_part?: AppliesToPartFilter;
    /** Filter for tasks with any of the provided embedded values. */
    embedded?: boolean[];
    /** Filters for tasks with any of the provided priorities. */
    priority?: TaskPriority[];
    /**
     * Filters for tasks which started after the provided timestamp.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    start_after_date?: string;
    /**
     * Filters for tasks which started before the provided timestamp.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    start_before_date?: string;
}
/** works-filter-ticket */
export interface WorksFilterTicket {
    /** The filter for applies to part. */
    applies_to_part?: AppliesToPartFilter;
    /** Filters for tickets with any of the provided channels. */
    channels?: TicketChannels[];
    channels_op?: WorksFilterTicketChannelsOperatorType;
    /** Filters for tickets belonging to specific groups. */
    group?: string[];
    group_op?: WorksFilterTicketGroupsOpOperatorType;
    /** Filters for tickets that are spam. */
    is_spam?: boolean;
    /** Filters for tickets that need response. */
    needs_response?: boolean;
    /**
     * Filters for tickets that are associated with any of the provided
     * Rev organizations.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org?: string[];
    rev_org_ids_op?: WorksFilterTicketRevOrgIDsOperatorType;
    /** Filters for tickets with any of the provided severities. */
    severity?: TicketSeverity[];
    /** Filters for tickets with any of the provided SLAs applying to it. */
    sla?: string[];
    /** The filter for SLA summary. */
    sla_summary?: SlaSummaryFilter;
    /** Filters for tickets with any of the provided source channels. */
    source_channel?: string[];
    /** Filters for tickets with any of the provided subtypes. */
    subtype?: string[];
    subtype_op?: SubtypeOpOperatorType;
    /** The filter for survey aggregation. */
    surveys?: SurveyAggregationFilter;
}
export declare enum WorksFilterTicketChannelsOperatorType {
    All = "all",
    Any = "any",
    Empty = "empty",
    NotEmpty = "not_empty"
}
export declare enum WorksFilterTicketGroupsOpOperatorType {
    All = "all",
    Any = "any",
    Empty = "empty",
    NotAny = "not_any",
    NotEmpty = "not_empty"
}
export declare enum WorksFilterTicketRevOrgIDsOperatorType {
    Any = "any",
    Empty = "empty",
    NotAny = "not_any",
    NotEmpty = "not_empty"
}
/** works-get-request */
export interface WorksGetRequest {
    /**
     * The work's ID.
     * @example "ISS-12345"
     */
    id: string;
}
/** works-get-response */
export interface WorksGetResponse {
    timeline_info?: TimelineInfo;
    work: Work;
}
/** works-group */
export interface WorksGroup {
    /** Unique key according to which the items are grouped. */
    key: string;
    key_v2: FieldValue;
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The group of works. */
    works: Work[];
}
/** works-group-request */
export interface WorksGroupRequest {
    /** Provides ways to specify date ranges on objects. */
    actual_close_date?: DateFilter;
    /**
     * Filters for work which have one of the parts present as its
     * ancestor part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /**
     * Filters for work belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_part?: string[];
    /**
     * Filters for work created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: WorksFilterCreatedByOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** Filters for custom fields. */
    custom_fields?: object;
    /**
     * Filters for work excluding the provided work IDs.
     * @example ["ISS-12345"]
     */
    exclude?: string[];
    /** Whether to exclude items whose parent adhere to the filter. */
    exclude_child_items?: boolean;
    external_source_data?: WorksFilterExternalSourceData;
    /** The field to group the works by. */
    group_by: string;
    issue?: WorksFilterIssue;
    /** Provides ways to specify date ranges on objects. */
    last_internal_comment_date?: DateFilter;
    /**
     * The maximum number of groups to return. If not set, then the
     * default is '10'.
     * @format int32
     */
    limit?: number;
    /**
     * The maximum number of works to return for an individual group. If
     * not set, then the default is '50'.
     * @format int32
     */
    limit_per_group?: number;
    /** Filters for work with any of the provided link target objects. */
    link_target_object?: string[];
    link_target_object_op?: WorksFilterLinkTargetObjectOperatorType;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    opportunity?: WorksFilterOpportunity;
    /**
     * Filters for work owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    owned_by_op?: WorksFilterOwnedByOperatorType;
    /**
     * Filters for work reported by any of these users.
     * @example ["DEVU-12345"]
     */
    reported_by?: string[];
    reported_by_op?: WorksFilterReportedByOperatorType;
    /** Comma-separated fields to sort the works by. */
    sort_by?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for work for the provided stage names. */
    stage_names?: string[];
    staged_info?: StagedInfoFilter;
    /** Filters for work with any of the provided states. */
    state?: string[];
    sync_metadata?: SyncMetadataFilter;
    tag_ids_op?: WorksFilterTagIdsOperatorType;
    /**
     * Filters for work with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for work with the provided tag and value. */
    tags_v2?: TagWithValueFilter[];
    /** Provides ways to specify date ranges on objects. */
    target_close_date?: DateFilter;
    task?: WorksFilterTask;
    ticket?: WorksFilterTicket;
    /** Filters for work of the provided types. */
    type?: WorkType[];
    /**
     * Filters for work belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
/** works-group-response */
export interface WorksGroupResponse {
    /** The list of groups. */
    groups: WorksGroup[];
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
}
/** works-list-request */
export interface WorksListRequest {
    /** Provides ways to specify date ranges on objects. */
    actual_close_date?: DateFilter;
    /**
     * Filters for work which have one of the parts present as its
     * ancestor part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /**
     * Filters for work belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_part?: string[];
    /**
     * The connection to list the work items for.
     * @maxLength 1
     */
    connection?: string[];
    /**
     * Filters for work created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: WorksFilterCreatedByOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** Filters for custom fields. */
    custom_fields?: object;
    /**
     * Filters for work excluding the provided work IDs.
     * @example ["ISS-12345"]
     */
    exclude?: string[];
    /** Whether to exclude items whose parent adhere to the filter. */
    exclude_child_items?: boolean;
    external_source_data?: WorksFilterExternalSourceData;
    issue?: WorksFilterIssue;
    /** Provides ways to specify date ranges on objects. */
    last_internal_comment_date?: DateFilter;
    /**
     * The maximum number of works to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /** Filters for work with any of the provided link target objects. */
    link_target_object?: string[];
    link_target_object_op?: WorksFilterLinkTargetObjectOperatorType;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    opportunity?: WorksFilterOpportunity;
    /**
     * Filters for work owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    owned_by_op?: WorksFilterOwnedByOperatorType;
    /**
     * Filters for work reported by any of these users.
     * @example ["DEVU-12345"]
     */
    reported_by?: string[];
    reported_by_op?: WorksFilterReportedByOperatorType;
    /** The search query to filter the works. */
    search_query?: string;
    /** Fields to sort the works by and the direction to sort them. */
    sort_by?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for work for the provided stage names. */
    stage_names?: string[];
    staged_info?: StagedInfoFilter;
    /** Filters for work with any of the provided states. */
    state?: string[];
    sync_metadata?: SyncMetadataFilter;
    tag_ids_op?: WorksFilterTagIdsOperatorType;
    /**
     * Filters for work with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for work with the provided tag and value. */
    tags_v2?: TagWithValueFilter[];
    /** Provides ways to specify date ranges on objects. */
    target_close_date?: DateFilter;
    task?: WorksFilterTask;
    ticket?: WorksFilterTicket;
    /** Filters for work of the provided types. */
    type?: WorkType[];
    /**
     * Filters for work belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
/** works-list-response */
export interface WorksListResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /**
     * Maps work ID to its Timeline information, or omitted if not
     * available.
     */
    timeline_info?: Record<string, TimelineInfo>;
    /** The list of works. */
    works: Work[];
}
/** works-suggest-info-request */
export interface WorksSuggestInfoRequest {
    /** List of messages to suggest work title and description from. */
    messages?: string[];
    /**
     * ID of the source conversation object from which work info needs to
     * be suggested.
     */
    source?: string;
    type: WorkType;
}
/** works-suggest-info-response */
export interface WorksSuggestInfoResponse {
    /** Suggested description of the work. */
    description: string;
    /** Suggested title of the work. */
    title: string;
}
/** works-suggest-request */
export interface WorksSuggestRequest {
    /**
     * The cursor to resume iteration from. If not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of works to return. If not set, then the default
     * is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use. If "after", then entries after the provided
     * cursor will be returned, or if no cursor is provided, then from the
     * beginning. If "before", then entries before the provided cursor will be
     * returned, or if no cursor is provided, then from the end. Entries will
     * always be returned in the specified sort-by order.
     */
    mode?: ListMode;
    /** Filters for work of the provided types. */
    type?: WorkType[];
}
/** works-suggest-response */
export interface WorksSuggestResponse {
    /**
     * The cursor used to iterate subsequent results in accordance to the
     * sort order. If not set, then no later elements exist.
     */
    next_cursor?: string;
    /**
     * The cursor used to iterate preceding results in accordance to the
     * sort order. If not set, then no prior elements exist.
     */
    prev_cursor?: string;
    /** The suggested work summaries. */
    works: WorkSummary[];
}
/** works-update-request */
export type WorksUpdateRequest = (Empty | WorksUpdateRequestCustomWork | WorksUpdateRequestIssue | WorksUpdateRequestOpportunity | WorksUpdateRequestTask | WorksUpdateRequestTicket) & {
    /**
     * Updates the part that the work item applies to.
     * @example "PROD-12345"
     */
    applies_to_part?: string;
    artifacts?: WorksUpdateRequestArtifacts;
    /** Updated body of the work object, or unchanged if not provided. */
    body?: string;
    /** Custom fields. */
    custom_fields?: object;
    /**
     * The custom schema fragments to use.
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    custom_schema_fragments?: string[];
    /**
     * Requested custom schemas described abstractly. Every provided schema's
     * custom field must be specified, otherwise a bad request error is
     * returned. If a new custom schema specifier is provided, then it will be
     * added to the work, otherwise if a custom schema is omitted from the
     * specifier, it remains unmodified.
     */
    custom_schema_spec?: CustomSchemaSpec;
    /**
     * The work's ID.
     * @example "ISS-12345"
     */
    id: string;
    owned_by?: WorksUpdateRequestOwnedBy;
    reported_by?: WorksUpdateRequestReportedBy;
    /** Updates an object's stage. */
    stage?: StageUpdate;
    /**
     * The type of stage validations options when updating the stage of an
     * object.
     */
    stage_validation_options?: StageValidationOptionForUpdate[];
    staged_info?: WorksUpdateRequestStagedInfoStagedInfoUpdate;
    tags?: WorksUpdateRequestTags;
    /**
     * Updates the timestamp for when the work is expected to be complete.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    target_close_date?: string | null;
    /** Updated title of the work object, or unchanged if not provided. */
    title?: string;
    type?: WorkType;
    [key: string]: any;
};
/** works-update-request-artifacts */
export interface WorksUpdateRequestArtifacts {
    /**
     * Adds the provided artifacts (if not already present) to the field.
     * @maxItems 50
     * @example ["ARTIFACT-12345"]
     */
    add?: string[];
    /**
     * Removes the provided artifacts (if they exist) from the field.
     * @maxItems 50
     * @example ["ARTIFACT-12345"]
     */
    remove?: string[];
    /**
     * Sets the field to the provided artifacts.
     * @maxItems 50
     * @example ["ARTIFACT-12345"]
     */
    set?: string[];
}
/** works-update-request-custom-work */
export type WorksUpdateRequestCustomWork = object;
/** works-update-request-issue */
export interface WorksUpdateRequestIssue {
    /**
     * Updates the actual effort, in hours, to complete the issue.
     * @format double
     */
    actual_effort?: number | null;
    developed_with?: WorksUpdateRequestIssueDevelopedWith;
    /**
     * Updates the estimated effort, in hours, to complete the issue.
     * @format double
     */
    estimated_effort?: number | null;
    /**
     * Priority enum id of the work based upon impact and criticality.
     * @format int64
     */
    priority_v2?: number;
    /** Updates the sprint that the issue belongs to. */
    sprint?: string | null;
    /**
     * Updates the timestamp for when the work is expected to start.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    target_start_date?: string | null;
}
/** works-update-request-issue-developed-with */
export interface WorksUpdateRequestIssueDevelopedWith {
    /**
     * Sets the IDs of the parts associated with issue.
     * @maxItems 8
     * @example ["PROD-12345"]
     */
    set?: string[];
}
/** works-update-request-opportunity */
export interface WorksUpdateRequestOpportunity {
    /**
     * Updates the account that the opportunity is associated with.
     * @example "ACC-12345"
     */
    account?: string;
    /**
     * Updates the total opportunity amount.
     * @format double
     */
    amount?: number | null;
    /** The money value to create. */
    annual_contract_value?: SetMoney;
    /**
     * Updates the ARR of the opportunity.
     * @format double
     */
    annual_recurring_revenue?: number | null;
    /** The money value to create. */
    budget?: SetMoney;
    contacts?: WorksUpdateRequestOpportunityContacts;
    /**
     * Updates the customer budget.
     * @format double
     */
    customer_budget?: number | null;
    /** Forecast category of the opportunity. */
    forecast_category?: OpportunityForecastCategory;
    /** Priority of the opportunity. */
    priority?: OpportunityPriority;
    /**
     * Updates the probability of winning the deal, lies between 0.0 and
     * 1.0.
     * @format double
     */
    probability?: number | null;
    /** The money value to create. */
    value?: SetMoney;
}
/** works-update-request-opportunity-contacts */
export interface WorksUpdateRequestOpportunityContacts {
    /** Sets the contact IDs to the provided contact IDs. */
    set: string[];
}
/** works-update-request-owned-by */
export interface WorksUpdateRequestOwnedBy {
    /**
     * Sets the owner IDs to the provided user IDs. This must not be
     * empty.
     * @example ["DEVU-12345"]
     */
    set?: string[];
}
/** works-update-request-reported-by */
export interface WorksUpdateRequestReportedBy {
    /**
     * Sets the users that reported the work to the provided user IDs.
     * @example ["DEVU-12345"]
     */
    set?: string[];
}
/** works-update-request-staged-info-staged-info-update */
export interface WorksUpdateRequestStagedInfoStagedInfoUpdate {
    /** Updates the unresolved fields of the staged work. */
    unresolved_fields: string[];
}
/** works-update-request-tags */
export interface WorksUpdateRequestTags {
    /** Sets the provided tags on the work item. */
    set?: SetTagWithValue[];
}
/** works-update-request-task */
export interface WorksUpdateRequestTask {
    /**
     * Updates the actual effort, in hours, to complete the task.
     * @format double
     */
    actual_effort?: number | null;
    /** Whether the task is embedded in the work. */
    embedded?: boolean;
    /**
     * Updates the estimated effort, in hours, to complete the task.
     * @format double
     */
    estimated_effort?: number | null;
    /** Priority of the work based upon impact and criticality. */
    priority?: TaskPriority;
    /**
     * Timestamp when the task was started.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    start_date?: string;
}
/** works-update-request-ticket */
export interface WorksUpdateRequestTicket {
    /**
     * Updates the Account that the ticket is associated with.
     * @example "ACC-12345"
     */
    account?: string | null;
    channels?: WorksUpdateRequestTicketChannels;
    /** Updates the group that the ticket is associated with. */
    group?: string | null;
    /** Updates whether the ticket is spam. */
    is_spam?: boolean;
    /** Updates whether the ticket needs a response. */
    needs_response?: boolean;
    /**
     * Updates the Rev organization that the ticket is associated with.
     * @example "REV-AbCdEfGh"
     */
    rev_org?: string | null;
    /** Severity of the ticket. */
    severity?: TicketSeverity;
}
/** works-update-request-ticket-channels */
export interface WorksUpdateRequestTicketChannels {
    /** Sets the channels to the provided channels. */
    set?: TicketChannels[];
}
/** works-update-response */
export interface WorksUpdateResponse {
    work: Work;
}
/**
 * works-vista-group-item
 * Represents a nested works vista group object.
 */
export type WorksVistaGroupItem = VistaGroupBase & (WorksVistaGroupItemCuratedGroup | WorksVistaGroupItemDynamicGroup) & {
    /** Type of works vista group item. */
    type: WorksVistaGroupItemType;
};
/** works-vista-group-item-curated-group */
export interface WorksVistaGroupItemCuratedGroup {
    /** List of parts inferred from work-items present in sprint. */
    inferred_parts?: PartSummary[];
    /** Static list of work items. */
    items?: WorkSummary[];
}
/** works-vista-group-item-dynamic-group */
export interface WorksVistaGroupItemDynamicGroup {
    filter: WorksVistaGroupItemDynamicGroupFilter;
    /** Static list of work items. */
    items?: WorkSummary[];
}
/** works-vista-group-item-dynamic-group-filter */
export interface WorksVistaGroupItemDynamicGroupFilter {
    /** Provides ways to specify date ranges on objects. */
    actual_close_date?: DateFilter;
    /**
     * Filters for work which have one of the parts present as its
     * ancestor part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /**
     * Filters for work belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_part?: string[];
    /**
     * Filters for work created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    created_by_op?: WorksFilterCreatedByOperatorType;
    /** Provides ways to specify date ranges on objects. */
    created_date?: DateFilter;
    /** Filters for custom fields. */
    custom_fields?: object;
    /**
     * Filters for work excluding the provided work IDs.
     * @example ["ISS-12345"]
     */
    exclude?: string[];
    external_source_data?: WorksFilterExternalSourceData;
    /** The field to group the collection by. */
    group_by?: string;
    issue?: WorksFilterIssue;
    /** Provides ways to specify date ranges on objects. */
    last_internal_comment_date?: DateFilter;
    /** Filters for work with any of the provided link target objects. */
    link_target_object?: string[];
    link_target_object_op?: WorksFilterLinkTargetObjectOperatorType;
    /** Provides ways to specify date ranges on objects. */
    modified_date?: DateFilter;
    opportunity?: WorksFilterOpportunity;
    /**
     * Filters for work owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    owned_by_op?: WorksFilterOwnedByOperatorType;
    /**
     * Filters for work reported by any of these users.
     * @example ["DEVU-12345"]
     */
    reported_by?: string[];
    reported_by_op?: WorksFilterReportedByOperatorType;
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** The filter for stages. */
    stage?: StageFilter;
    /** Filters for work for the provided stage names. */
    stage_names?: string[];
    staged_info?: StagedInfoFilter;
    /** Filters for work with any of the provided states. */
    state?: string[];
    sync_metadata?: SyncMetadataFilter;
    tag_ids_op?: WorksFilterTagIdsOperatorType;
    /**
     * Filters for work with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for work with the provided tag and value. */
    tags_v2?: TagWithValueFilter[];
    /** Provides ways to specify date ranges on objects. */
    target_close_date?: DateFilter;
    task?: WorksFilterTask;
    ticket?: WorksFilterTicket;
    /** Filters for work of the provided types. */
    type?: WorkType[];
    /**
     * Filters for work belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
/** Type of works vista group item. */
export declare enum WorksVistaGroupItemType {
    Curated = "curated",
    Dynamic = "dynamic"
}
export interface AccountsCommerceDetailsGetParams {
    /**
     * The account's DON.
     * @example "ACC-12345"
     */
    id?: string;
}
export interface AccountsCommerceDetailsListParams {
    /**
     * The list of account DONs which are to be aggregated.
     * @example ["ACC-12345"]
     */
    account_ids?: string[];
    /**
     * Filter accounts by created date after.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_date_after?: string;
    /**
     * Filter accounts by created date before.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_date_before?: string;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of accounts to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Filter accounts with pin code. */
    pin_code?: string;
    /**
     * List of fields to sort the accounts, by and how to sort them. Default
     * is to sort by created_date in descending order.
     */
    sort_by?: string[];
}
export interface AccountsCountParams {
    /** Filters for accounts created by the specified user(s). */
    created_by?: string[];
    /** The filter operator to be applied on created by. */
    created_by_op?: RevObjectTagsOperatorType;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** Array of display names of accounts to be filtered. */
    display_name?: string[];
    /** Domains for accounts to be filtered. */
    domains?: string[];
    /** The filter operator to be applied on domains. */
    domains_op?: RevObjectTagsOperatorType;
    /** Environment values to be filtered. */
    environment?: OrgEnvironment[];
    /** Array of references of accounts to be filtered. */
    external_refs?: string[];
    /** The filter operator to be applied on external refs. */
    external_refs_op?: RevObjectTagsOperatorType;
    /** Filters for accounts owned by the specified user(s). */
    owned_by?: string[];
    /** The filter operator to be applied on owned by. */
    owned_by_op?: RevObjectTagsOperatorType;
    /** Filters for accounts on specified stages. */
    stage?: string[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    /** The filter operator to be applied on subtypes. */
    subtype_op?: SubtypeOpOperatorType;
    /** The filter operator to be applied on tags. */
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    /** The filter operator to be applied on tags. */
    tags_op?: RevObjectTagsOperatorType;
    /** Array of tier for accounts to be filtered. */
    tier?: string[];
    /** The filter operator to be applied on tier. */
    tier_op?: RevObjectTagsOperatorType;
    /** Array of websites of accounts to be filtered. */
    websites?: string[];
    /** The filter operator to be applied on websites. */
    websites_op?: RevObjectTagsOperatorType;
}
export interface DuplicateAccountPairsListParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of object members to return. If not set, then the
     * default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
}
export interface AccountsExportParams {
    /** Filters for accounts created by the specified user(s). */
    created_by?: string[];
    /** The filter operator to be applied on created by. */
    created_by_op?: RevObjectTagsOperatorType;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** Array of display names of accounts to be filtered. */
    display_name?: string[];
    /** Domains for accounts to be filtered. */
    domains?: string[];
    /** The filter operator to be applied on domains. */
    domains_op?: RevObjectTagsOperatorType;
    /** Environment values to be filtered. */
    environment?: OrgEnvironment[];
    /** Array of references of accounts to be filtered. */
    external_refs?: string[];
    /** The filter operator to be applied on external refs. */
    external_refs_op?: RevObjectTagsOperatorType;
    /**
     * The number of accounts to return. The default is '50'.
     * @format int32
     * @min 1
     * @max 500
     */
    first?: number;
    /** Filters for accounts owned by the specified user(s). */
    owned_by?: string[];
    /** The filter operator to be applied on owned by. */
    owned_by_op?: RevObjectTagsOperatorType;
    /** Fields to sort the accounts by and the direction to sort them in. */
    sort_by?: string[];
    /** Filters for accounts on specified stages. */
    stage?: string[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    /** The filter operator to be applied on subtypes. */
    subtype_op?: SubtypeOpOperatorType;
    /** The filter operator to be applied on tags. */
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    /** The filter operator to be applied on tags. */
    tags_op?: RevObjectTagsOperatorType;
    /** Array of tier for accounts to be filtered. */
    tier?: string[];
    /** The filter operator to be applied on tier. */
    tier_op?: RevObjectTagsOperatorType;
    /** Array of websites of accounts to be filtered. */
    websites?: string[];
    /** The filter operator to be applied on websites. */
    websites_op?: RevObjectTagsOperatorType;
}
export interface AccountsGetParams {
    /**
     * The ID of the account to be retrieved.
     * @example "ACC-12345"
     */
    id: string;
}
export interface AccountsGetSlaParams {
    /**
     * The account's id for which the SLA applying to it is to be fetched.
     * @example "ACC-12345"
     */
    id: string;
}
export interface AccountsGroupParams {
    /** The field to group the accounts by. */
    group_by: string;
    /** Filters for accounts created by the specified user(s). */
    created_by?: string[];
    /** The filter operator to be applied on created by. */
    created_by_op?: RevObjectTagsOperatorType;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** Array of display names of accounts to be filtered. */
    display_name?: string[];
    /** Domains for accounts to be filtered. */
    domains?: string[];
    /** The filter operator to be applied on domains. */
    domains_op?: RevObjectTagsOperatorType;
    /** Environment values to be filtered. */
    environment?: OrgEnvironment[];
    /** Array of references of accounts to be filtered. */
    external_refs?: string[];
    /** The filter operator to be applied on external refs. */
    external_refs_op?: RevObjectTagsOperatorType;
    /**
     * The maximum number of groups to return. If not set, then the default
     * is '10'.
     * @format int32
     */
    limit?: number;
    /**
     * The maximum number of accounts to return for an individual group. If
     * not set, then the default is '50'.
     * @format int32
     */
    limit_per_group?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Filters for accounts owned by the specified user(s). */
    owned_by?: string[];
    /** The filter operator to be applied on owned by. */
    owned_by_op?: RevObjectTagsOperatorType;
    /** Fields to sort the accounts by and the direction to sort them in. */
    sort_by?: string[];
    /** Filters for accounts on specified stages. */
    stage?: string[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    /** The filter operator to be applied on subtypes. */
    subtype_op?: SubtypeOpOperatorType;
    /** The filter operator to be applied on tags. */
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    /** The filter operator to be applied on tags. */
    tags_op?: RevObjectTagsOperatorType;
    /** Array of tier for accounts to be filtered. */
    tier?: string[];
    /** The filter operator to be applied on tier. */
    tier_op?: RevObjectTagsOperatorType;
    /** Array of websites of accounts to be filtered. */
    websites?: string[];
    /** The filter operator to be applied on websites. */
    websites_op?: RevObjectTagsOperatorType;
}
export interface AccountsListParams {
    /** Filters for accounts created by the specified user(s). */
    created_by?: string[];
    /** The filter operator to be applied on created by. */
    created_by_op?: RevObjectTagsOperatorType;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** Array of display names of accounts to be filtered. */
    display_name?: string[];
    /** Domains for accounts to be filtered. */
    domains?: string[];
    /** The filter operator to be applied on domains. */
    domains_op?: RevObjectTagsOperatorType;
    /** Environment values to be filtered. */
    environment?: OrgEnvironment[];
    /** Array of references of accounts to be filtered. */
    external_refs?: string[];
    /** The filter operator to be applied on external refs. */
    external_refs_op?: RevObjectTagsOperatorType;
    /**
     * The maximum number of accounts to return per page. The default is
     * '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Filters for accounts owned by the specified user(s). */
    owned_by?: string[];
    /** The filter operator to be applied on owned by. */
    owned_by_op?: RevObjectTagsOperatorType;
    /** Fields to sort the accounts by and the direction to sort them in. */
    sort_by?: string[];
    /** Filters for accounts on specified stages. */
    stage?: string[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    /** The filter operator to be applied on subtypes. */
    subtype_op?: SubtypeOpOperatorType;
    /** The filter operator to be applied on tags. */
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    /** The filter operator to be applied on tags. */
    tags_op?: RevObjectTagsOperatorType;
    /** Array of tier for accounts to be filtered. */
    tier?: string[];
    /** The filter operator to be applied on tier. */
    tier_op?: RevObjectTagsOperatorType;
    /** Array of websites of accounts to be filtered. */
    websites?: string[];
    /** The filter operator to be applied on websites. */
    websites_op?: RevObjectTagsOperatorType;
}
export interface AddonRulesGetParams {
    /** The addon rule object's DON. */
    id: string;
}
export interface AddonRulesListParams {
    /** The list of addon SKU DONs for which addon rulesare to be aggregated. */
    addon_ids?: string[];
    /** The associativity for which the addon rules need to be aggregated */
    associativity?: AddonRuleAssociativity[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** The list of addon rule DONs which are to be aggregated. */
    ids?: string[];
    /**
     * The maximum number of addon rules to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * The list of product DONs for which addon rulesare to be aggregated.
     * @example ["PROD-12345"]
     */
    product_ids?: string[];
    /**
     * List of fields to sort the addon rules, by and how to sort them.
     * Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
    /**
     * The list of subscription SKU DONs for which addon rulesare to be
     * aggregated.
     */
    subscription_sku_ids?: string[];
}
export interface AiAgentsGetParams {
    /** The ID of the AI agent to get. */
    id: string;
}
export interface AiAgentsListParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of AI agents to return per page. The default is
     * '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
}
export interface AiAgentSessionsGetParams {
    /** The ID of the AI agent session to get. */
    id: string;
}
export interface AiAgentSessionsListParams {
    /** The ID of the AI agent for which the sessions are filtered. */
    agent?: string;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of AI agent sessions to return per page. The
     * default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * The ID of DevRev object where agent interactions are happening.
     * @minLength 1
     * @maxLength 128
     */
    session_object?: string;
}
export interface AirdropExternalSyncUnitsListParams {
    /** Keyring that will be used for external sync unit listing. */
    keyring: string;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** External sync unit name. */
    'filter.external_sync_unit_name'?: string;
    /** External system type. */
    'filter.external_system_type'?: ExternalSystemType;
    /**
     * The maximum number of items to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
}
export interface AssociatedFiltersCurrentGetParams {
    /** The sync unit for which the current filters are retrieved. */
    sync_unit: string;
}
export interface AssociatedFiltersGetParams {
    /** The external type name. */
    'target.external_type': string;
    /** The sync unit of which the external type is part of. */
    'target.sync_unit': string;
    /**
     * The run for which to find the filter. If omitted, the current filter
     * will be provided.
     */
    sync_history?: string;
    /** The subtype of the external type, if it is a subtype. */
    'target.subtype'?: string;
}
export interface FilterOptionsGetParams {
    /** The external type name. */
    'target.external_type': string;
    /** The sync unit of which the external type is part of. */
    'target.sync_unit': string;
    /** The subtype of the external type, if it is a subtype. */
    'target.subtype'?: string;
}
export interface FiltersGetParams {
    /** Requested sync recipe filter ID. */
    id: string;
}
export interface AirdropSyncModificationRecordGetParams {
    /** Requested sync modification record ID. */
    id: string;
}
export interface AirdropSyncModificationRecordGetByTargetParams {
    /** Requested sync modification record's target object ID. */
    target_object: string;
}
export interface AirdropSyncUnitsGetParams {
    /** Requested sync unit ID. */
    id: string;
}
export interface AirdropSyncUnitsHistoryParams {
    /** Sync unit that will be used for sync history listing. */
    id: string;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of items to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
}
export interface AirdropSyncUnitsListParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** External system type. */
    'filter.external_system_type'?: ExternalSystemType;
    /** ID of the user who imported the sync unit. */
    'filter.imported_by_id'?: string;
    /** Keyring ID associated with the import */
    'filter.keyring_id'?: string;
    /** State of the sync unit. */
    'filter.state'?: SyncProgressState;
    /** Sync unit name. */
    'filter.sync_unit_name'?: string;
    /**
     * The maximum number of sync units to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
}
export interface ArticleAncestorsParams {
    /**
     * The ID of the article to get ancestors.
     * @example "ARTICLE-12345"
     */
    id: string;
}
export interface ArticlesCountParams {
    /** Filters for access level of the articles. */
    access_level?: AccessLevel[];
    /** The ancestor directory of the articles. */
    ancestor?: string;
    /**
     * Filters for article which have one of the parts present as its
     * ancestor part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /**
     * Filters for articles belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_parts?: string[];
    /**
     * Filters for articles authored by any of the provided users.
     * @example ["DEVU-12345"]
     */
    authored_by?: string[];
    /**
     * Filters for articles created after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_after_date?: string;
    /**
     * Filters for articles created before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_before_date?: string;
    /**
     * Filters for articles created by any of the provided users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /**
     * Filters for articles modified by any of the provided users.
     * @example ["DEVU-12345"]
     */
    modified_by?: string[];
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.before'?: string;
    /**
     * Filters for articles owned by any of the provided users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for article which have one of the parent directories as its
     * parent.
     */
    parent?: string[];
    /** The filter operator to be applied on parents. */
    parent_op?: ArticlesFilterParentOpOperatorType;
    /**
     * Filters for articles published after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    published_after_date?: string;
    /**
     * Filters for articles published before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    published_before_date?: string;
    /**
     * Filters for objects with a value lexicographically less than or equal
     * to the provided value.
     */
    'rank.max'?: string;
    /**
     * Filters for objects with a value lexicographically greater than or
     * equal to the provided value.
     */
    'rank.min'?: string;
    /** ID of the group/member with whom the item is shared. */
    'shared_with.member'?: string;
    /** Role ID of the group/member with whom the item is shared. */
    'shared_with.role'?: string;
    /** Filters for status of the articles. */
    status?: ArticleStatus[];
    /**
     * Filters for article with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
}
export interface GetArticleParams {
    /**
     * The ID of the required article.
     * @deprecated
     * @example "ARTICLE-12345"
     */
    article_id?: string;
    /**
     * The ID of the required article.
     * @example "ARTICLE-12345"
     */
    id?: string;
}
export interface ListArticlesParams {
    /** Filters for access level of the articles. */
    access_level?: AccessLevel[];
    /**
     * Filters for article which have one of the parts present as its
     * ancestor part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /**
     * Filters for articles belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_parts?: string[];
    /**
     * Filters for articles authored by any of the provided users.
     * @example ["DEVU-12345"]
     */
    authored_by?: string[];
    /**
     * Filters for articles created after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_after_date?: string;
    /**
     * Filters for articles created before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_before_date?: string;
    /**
     * Filters for articles created by any of the provided users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of articles to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * Filters for articles modified by any of the provided users.
     * @example ["DEVU-12345"]
     */
    modified_by?: string[];
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.before'?: string;
    /**
     * Filters for articles owned by any of the provided users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for article which have one of the parent directories as its
     * parent.
     */
    parent?: string[];
    /** The filter operator to be applied on parents. */
    parent_op?: ArticlesFilterParentOpOperatorType;
    /**
     * Filters for articles published after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    published_after_date?: string;
    /**
     * Filters for articles published before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    published_before_date?: string;
    /**
     * Filters for objects with a value lexicographically less than or equal
     * to the provided value.
     */
    'rank.max'?: string;
    /**
     * Filters for objects with a value lexicographically greater than or
     * equal to the provided value.
     */
    'rank.min'?: string;
    /** ID of the group/member with whom the item is shared. */
    'shared_with.member'?: string;
    /** Role ID of the group/member with whom the item is shared. */
    'shared_with.role'?: string;
    /** Fields to sort the articles by and the direction to sort them. */
    sort_by?: string[];
    /** Filters for status of the articles. */
    status?: ArticleStatus[];
    /**
     * Filters for article with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
}
export interface ArticlesVotersGetParams {
    /**
     * The ID of the article.
     * @example "ARTICLE-12345"
     */
    id: string;
}
export interface ArticlesVotersListParams {
    /**
     * The ID of the article.
     * @example "ARTICLE-12345"
     */
    id: string;
    /** The kind of vote for which the voters are to be listed. */
    vote: ArticlesListVote;
    /**
     * The cursor to resume iteration from, otherwise if not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of voters to return.
     * @format int32
     */
    limit?: number;
}
export interface ArtifactsGetParams {
    /**
     * The requested artifact's ID.
     * @example "ARTIFACT-12345"
     */
    id: string;
    /** The version of the artifact that needs to be fetched. */
    version?: string;
}
export interface ArtifactsListParams {
    /**
     * The ID of the parent's parent object to filter artifacts in case of
     * superset match.
     * @example "ISS-12345"
     */
    ancestor?: string;
    /** The object types to include in the search in case of superset match. */
    include_child_object_types?: ObjectTypeProto[];
    /** The ID of the object to filter artifacts. */
    parent_id?: string;
}
export interface ArtifactsLocateParams {
    /**
     * The ID of the artifact to get the URL for.
     * @example "ARTIFACT-12345"
     */
    id: string;
    /** The preference to have a downloadable url or to have an inline url. */
    prefer_download?: boolean;
    /**
     * The required variant of the file. By default, it returns the original
     * file.
     */
    variant?: string;
    /** The version of the artifact that needs to be fetched. */
    version?: string;
}
export interface ArtifactsVersionsListParams {
    /**
     * The ID of the artifact to list versions for.
     * @example "ARTIFACT-12345"
     */
    id: string;
}
export interface AtomsGetParams {
    /** The ID of the object to get. */
    id: string;
}
export interface AtomsSummaryParams {
    /** The ID of the object to get the summary for. */
    id: string;
}
export interface AuthTokensGetParams {
    /** The unique identifier of the token under a given Dev organization. */
    token_id: string;
}
export interface AuthTokensListParams {
    /**
     * An identifier that represents the application, which requested the
     * token. Only relevant for application access tokens.
     */
    client_id?: string;
    /**
     * The type of the requested token. If no value is specified, the
     * response will include tokens of all the types.
     */
    requested_token_type?: AuthTokenRequestedTokenType;
    /**
     * The subject associated with the token. In the absence of this
     * parameter, the ID of the authenticated entity is treated as the
     * subject.
     */
    subject?: string;
}
export interface BotStatusGetParams {
    /** The bot id. */
    id: string;
}
export interface ChatsGetParams {
    /** The chat's ID. */
    id?: string;
}
export interface ChatsListParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of chats to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Fields to sort the chats by and the direction to sort them. */
    sort_by?: string[];
    /** Filters for chats with the provided type(s). */
    type?: ChatType[];
}
export interface CodeChangesGetParams {
    /** The code change object ID. */
    id: string;
}
export interface CodeChangesListParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * Filters for code change objects with the provided external
     * identifier.
     */
    external_identifier?: string[];
    /**
     * The maximum number of code change objects to return. The default is
     * '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Filters for code change objects with the provided repo URL. */
    repo_url?: string[];
    /**
     * Fields to sort the code change objects by and the direction to sort
     * them.
     */
    sort_by?: string[];
    /** Filters for code change objects by its source */
    source?: CodeChangeSourceValue[];
}
export interface CommandsGetParams {
    /** The command's ID. */
    id: string;
}
export interface CommandsListParams {
    /**
     * ID of the user who created the command.
     * @example ["DEVU-12345"]
     */
    created_by_id?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** Filtering based on executor_type */
    executor_type?: CommandActionExecutorType[];
    /**
     * The maximum number of commands to return per page. The default is
     * '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * ID of the user who modified the command.
     * @example ["DEVU-12345"]
     */
    modified_by_id?: string[];
    /** Filter commands based on namespace. */
    namespace?: string[];
    /** List of fields to sort the commands items by and how to sort them. */
    sort_by?: string[];
    /** ID of the object where command is invoked (work/part/conversation). */
    source_object_id?: string;
    /** Filter commands based on status. */
    status?: CommandStatus[];
}
export interface ConnectionsGetParams {
    /** The connection's ID. */
    id: string;
}
export interface ConnectionsListParams {
    /**
     * Filters for connections created by any of the provided users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of connections to return.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * Filters for the Dev organizations on the other side of the
     * connection.
     */
    remote_dev_org?: string[];
    /** Fields to sort the connections by and the direction to sort them. */
    sort_by?: string[];
    /** Filters for source connections with the provided statuses. */
    'source.status'?: ConnectionSourceStatus[];
    /** Filters for target connections with the provided statuses. */
    'target.status'?: ConnectionTargetStatus[];
}
export interface ContentTemplateGetParams {
    /** The content template's ID. */
    id: string;
}
export interface ContentTemplateListParams {
    /**
     * Filters for content template created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of works to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Filters for content template based on name. */
    name?: string[];
    /** Fields to sort the works by and the direction to sort them. */
    sort_by?: string[];
    /** Filters for content template of the provided types. */
    type?: ContentTemplateType[];
}
export interface ConversationAssistParams {
    /** ID of the conversation for which assistance is requested. */
    id: string;
    /** List of requested objects. */
    requested_objects: ConversationAssistRequestedObject[];
}
export interface ConversationsCountParams {
    /**
     * Filters for conversations belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_parts?: string[];
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'created_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'created_date.before'?: string;
    /** Filters for conversation that belong to the given groups. */
    group?: string[];
    /** Filters for conversations that are created by verified users. */
    is_creator_verified?: boolean;
    /** Filters for conversations that are spam. */
    is_spam?: boolean;
    /**
     * Filters for conversations where these users are participants.
     * @example ["DEVU-12345"]
     */
    members?: string[];
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.before'?: string;
    /**
     * Filters for conversations owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for conversations that are associated with any of the
     * provided Rev organizations.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org?: string[];
    /**
     * Filters for conversations with any of the provided SLAs applying to
     * it.
     */
    sla?: string[];
    /**
     * Filters for conversations with any of the provided SLA stages.
     * @deprecated
     */
    sla_stage?: SlaSummaryStage[];
    /** Filters for records with any of the provided SLA stages. */
    'sla_summary.stage'?: SlaSummaryStage[];
    /** Filters for conversations with any of the provided source channels. */
    source_channels?: string[];
    /** Filters for records in the provided stage(s) by name. */
    'stage.name'?: string[];
    /** List of IDs of the custom stages which will be used for filtering. */
    'stage.stages'?: string[];
    /** Filters for conversations with any of the provided states. */
    state?: string[];
    /**
     * Minimum value for an object aggregation. Required if any surveys.*
     * fields are provided.
     */
    'surveys.minimum'?: string[];
    /**
     * Filters for conversations with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /**
     * The ID of the tag.
     * @example "TAG-12345"
     */
    'tags_v2.id'?: string;
    /**
     * The value for the object's association with the tag. If specified,
     * the value must be one that's specified in the tag's allowed values.
     */
    'tags_v2.value'?: string;
    /** Filters for conversations with any of the provided ticket IDs. */
    tickets?: string[];
    /** Filters for conversations in which turing is active. */
    turing_active?: boolean;
}
export interface ConversationsExportParams {
    /**
     * Filters for conversations belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_parts?: string[];
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'created_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'created_date.before'?: string;
    /**
     * The number of conversation items to return. The default is '50', the
     * maximum is '5000'.
     * @format int32
     */
    first?: number;
    /** Filters for conversation that belong to the given groups. */
    group?: string[];
    /** Filters for conversations that are created by verified users. */
    is_creator_verified?: boolean;
    /** Filters for conversations that are spam. */
    is_spam?: boolean;
    /**
     * Filters for conversations where these users are participants.
     * @example ["DEVU-12345"]
     */
    members?: string[];
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.before'?: string;
    /**
     * Filters for conversations owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for conversations that are associated with any of the
     * provided Rev organizations.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org?: string[];
    /**
     * Filters for conversations with any of the provided SLAs applying to
     * it.
     */
    sla?: string[];
    /**
     * Filters for conversations with any of the provided SLA stages.
     * @deprecated
     */
    sla_stage?: SlaSummaryStage[];
    /** Filters for records with any of the provided SLA stages. */
    'sla_summary.stage'?: SlaSummaryStage[];
    /**
     * Fields to sort the conversation items by and the direction to sort
     * them.
     */
    sort_by?: string[];
    /** Filters for conversations with any of the provided source channels. */
    source_channels?: string[];
    /** Filters for records in the provided stage(s) by name. */
    'stage.name'?: string[];
    /** List of IDs of the custom stages which will be used for filtering. */
    'stage.stages'?: string[];
    /** Filters for conversations with any of the provided states. */
    state?: string[];
    /**
     * Minimum value for an object aggregation. Required if any surveys.*
     * fields are provided.
     */
    'surveys.minimum'?: string[];
    /**
     * Filters for conversations with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /**
     * The ID of the tag.
     * @example "TAG-12345"
     */
    'tags_v2.id'?: string;
    /**
     * The value for the object's association with the tag. If specified,
     * the value must be one that's specified in the tag's allowed values.
     */
    'tags_v2.value'?: string;
    /** Filters for conversations with any of the provided ticket IDs. */
    tickets?: string[];
    /** Filters for conversations in which turing is active. */
    turing_active?: boolean;
}
export interface ConversationsGetParams {
    /** The requested conversation's ID. */
    id: string;
}
export interface ConversationsGroupParams {
    /** The field to group the conversations by. */
    group_by: string;
    /**
     * Filters for conversations belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_parts?: string[];
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'created_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'created_date.before'?: string;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** Filters for conversation that belong to the given groups. */
    group?: string[];
    /** Filters for conversations that are created by verified users. */
    is_creator_verified?: boolean;
    /** Filters for conversations that are spam. */
    is_spam?: boolean;
    /**
     * The maximum number of groups to return. If not set, then the default
     * is '10'.
     * @format int32
     */
    limit?: number;
    /**
     * The maximum number of conversations to return for an individual
     * group. The default is '50'.
     * @format int32
     */
    limit_per_group?: number;
    /**
     * Filters for conversations where these users are participants.
     * @example ["DEVU-12345"]
     */
    members?: string[];
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.before'?: string;
    /**
     * Filters for conversations owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for conversations that are associated with any of the
     * provided Rev organizations.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org?: string[];
    /**
     * Filters for conversations with any of the provided SLAs applying to
     * it.
     */
    sla?: string[];
    /**
     * Filters for conversations with any of the provided SLA stages.
     * @deprecated
     */
    sla_stage?: SlaSummaryStage[];
    /** Filters for records with any of the provided SLA stages. */
    'sla_summary.stage'?: SlaSummaryStage[];
    /** Comma-separated fields to sort the conversations by. */
    sort_by?: string[];
    /** Filters for conversations with any of the provided source channels. */
    source_channels?: string[];
    /** Filters for records in the provided stage(s) by name. */
    'stage.name'?: string[];
    /** List of IDs of the custom stages which will be used for filtering. */
    'stage.stages'?: string[];
    /** Filters for conversations with any of the provided states. */
    state?: string[];
    /**
     * Minimum value for an object aggregation. Required if any surveys.*
     * fields are provided.
     */
    'surveys.minimum'?: string[];
    /**
     * Filters for conversations with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /**
     * The ID of the tag.
     * @example "TAG-12345"
     */
    'tags_v2.id'?: string;
    /**
     * The value for the object's association with the tag. If specified,
     * the value must be one that's specified in the tag's allowed values.
     */
    'tags_v2.value'?: string;
    /** Filters for conversations with any of the provided ticket IDs. */
    tickets?: string[];
    /** Filters for conversations in which turing is active. */
    turing_active?: boolean;
}
export interface ConversationsListParams {
    /**
     * Filters for conversations belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_parts?: string[];
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'created_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'created_date.before'?: string;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** Filters for conversation that belong to the given groups. */
    group?: string[];
    /** Filters for conversations that are created by verified users. */
    is_creator_verified?: boolean;
    /** Filters for conversations that are spam. */
    is_spam?: boolean;
    /**
     * The maximum number of conversations to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * Filters for conversations where these users are participants.
     * @example ["DEVU-12345"]
     */
    members?: string[];
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.before'?: string;
    /**
     * Filters for conversations owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for conversations that are associated with any of the
     * provided Rev organizations.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org?: string[];
    /**
     * Filters for conversations with any of the provided SLAs applying to
     * it.
     */
    sla?: string[];
    /**
     * Filters for conversations with any of the provided SLA stages.
     * @deprecated
     */
    sla_stage?: SlaSummaryStage[];
    /** Filters for records with any of the provided SLA stages. */
    'sla_summary.stage'?: SlaSummaryStage[];
    /** Fields to sort the conversations by and the direction to sort them. */
    sort_by?: string[];
    /** Filters for conversations with any of the provided source channels. */
    source_channels?: string[];
    /** Filters for records in the provided stage(s) by name. */
    'stage.name'?: string[];
    /** List of IDs of the custom stages which will be used for filtering. */
    'stage.stages'?: string[];
    /** Filters for conversations with any of the provided states. */
    state?: string[];
    /**
     * Minimum value for an object aggregation. Required if any surveys.*
     * fields are provided.
     */
    'surveys.minimum'?: string[];
    /**
     * Filters for conversations with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /**
     * The ID of the tag.
     * @example "TAG-12345"
     */
    'tags_v2.id'?: string;
    /**
     * The value for the object's association with the tag. If specified,
     * the value must be one that's specified in the tag's allowed values.
     */
    'tags_v2.value'?: string;
    /** Filters for conversations with any of the provided ticket IDs. */
    tickets?: string[];
    /** Filters for conversations in which turing is active. */
    turing_active?: boolean;
}
export interface CreditCouponsGetParams {
    /** The coupon's code. */
    coupon_code: string;
}
export interface CreditsGetParams {
    /** The credit object's DON */
    id: string;
}
export interface CreditsListParams {
    /**
     * Filter credits by account.
     * @example ["ACC-12345"]
     */
    account_ids?: string[];
    /**
     * Filter items which have expiry date after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    after_expiry_date?: string;
    /**
     * Filter items which have expiry date before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    before_expiry_date?: string;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** The list of credit object DONs which are to be aggregated. */
    ids?: string[];
    /**
     * The maximum number of credit items to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * The list of rev org DONs which are to be aggregated.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org_ids?: string[];
    /**
     * List of fields to sort the credit objects, by and how to sort them.
     * Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
    /** The list of status values which are to be aggregated. */
    statuses?: CreditStatus[];
    /** The list of type values which are to be aggregated. */
    types?: CreditType[];
}
export interface CustomObjectsGetParams {
    /** The ID of the custom object to get. */
    id?: string;
    /** The unique key of the custom object to get. */
    unique_key?: string;
}
export interface CustomObjectsListParams {
    /** Leaf type to filter. */
    leaf_type: string;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**  Required if any filter.* fields are provided. */
    'filter.values'?: object[];
    /**
     * The maximum number of items.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** The list of fields to sort the items by and how to sort them. */
    sort_by?: string[];
}
export interface TranslationsListParams {
    /** Filters translations with associated languages. */
    languages: string[];
    /** Filters translations with associated namespaces. */
    namespaces: string[];
}
export interface DashboardsGetParams {
    /** The requested dashboard's ID. */
    id: string;
}
export interface DashboardsListParams {
    /**
     * Filters for the dashboards created by the user.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /** The filter operator to be applied on created by for dashboards. */
    created_by_op?: DashboardsListFilterCreatedByOpOperatorType;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** Identifiers of the dashboard. */
    identifier?: DashboardIdentifier[];
    /**
     * The maximum number of dashboards to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /** Filters for link type in links associated with the dashboard. */
    'links.link_type'?: string;
    /**
     * Filters for target id in links associated with the dashboard.
     * @example "VISTA-12345"
     */
    'links.target'?: string;
    /**
     * Filters for target object type in links associated with the
     * dashboard.
     */
    'links.target_object_type'?: string;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Filters for dashboards based on scope. */
    scope?: DashboardsListFilterScopeValue;
    /** Fields to sort the dashboards by and the direction to sort them. */
    sort_by?: string[];
}
export interface DataSourcesGetParams {
    /** The requested data source's ID. */
    id: string;
}
export interface DataSourcesListParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of data sources to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Filters for data sources based on scope. */
    scope?: DataSourcesListFilterScopeValue;
    /** Fields to sort the data sources by and the direction to sort them. */
    sort_by?: string[];
}
export interface DevOrgAuthConnectionsGetParams {
    /** ID of the authentication connection. */
    id: string;
}
export interface DevOrgsGlobalGetParams {
    /** Customer chosen URL slug. */
    dev_slug: string;
}
export interface DevOrgsGlobalListParams {
    /** Email of the Dev user. */
    email: string;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * Whether to list the Dev organizations available to join without
     * invitation.
     */
    is_available?: boolean;
    /**
     * The number of Dev organizations to be retrieved.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * Fields to sort the Dev organizations by and the direction to sort
     * them.
     */
    sort_by?: string[];
}
export interface DevOrgsGlobalPublicInfoParams {
    /** Auth0 organization id of the Dev organization. */
    auth0_org_id?: string;
    /** Slug of the Dev organization. */
    slug?: string;
}
export interface DevOrgsInvitesListParams {
    /** Filters invitations to those created by the specified users. */
    created_by_ids?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** Filters invitations to those assigned to the specified groups. */
    group_ids?: string[];
    /**
     * The maximum number of invited users to be retrieved.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Fields to sort the invites by and the direction to sort them. */
    sort_by?: string[];
    /** Array of state values to be filtered. */
    state?: DevuInviteState[];
}
export interface DevOrgsJoinParams {
    /**
     * The globally unique ID of the DevRev organization.
     * @example "DEV-AbCdEfGh"
     */
    id: string;
}
export interface DevOrgsListParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * Whether to list the Dev organizations available to join without
     * invitation.
     */
    is_available?: boolean;
    /**
     * The number of Dev organizations to be retrieved.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * Fields to sort the Dev organizations by and the direction to sort
     * them.
     */
    sort_by?: string[];
}
export interface DevOrgPublicInfoParams {
    /** Auth0 organization id of the Dev organization. */
    auth0_org_id?: string;
    /** Slug of the Dev organization. */
    slug?: string;
}
export interface DevUsersCountParams {
    /**
     * Filters list of Dev users which are created by specified list of Dev
     * user IDs.
     */
    created_by?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** Filters Dev users based on email addresses. */
    email?: string[];
    /** Unique ID of the user in the external source. */
    'external_identity.id'?: string;
    /** Issuer of the external identity of the user. */
    'external_identity.issuer'?: string;
    /** Filters Dev users based on job titles. */
    job_title?: DevUserJobTitle[];
    /** Filters Dev users based on state. */
    state?: UserState[];
    /** Subtypes of devusers to be filtered. */
    subtype?: string[];
    /** The filter operator to be applied on subtype. */
    subtype_op?: SubtypeOpOperatorType;
}
export interface DevUsersIsDisplayHandleAvailableParams {
    /**
     * Display handle to be checked for availability.
     * @deprecated
     */
    display_handle?: string;
    /** Display name to be checked for availability. */
    display_name?: string;
}
export interface DevUsersGetParams {
    /** User ID of the requested Dev user. */
    id: string;
}
export interface DevUsersListParams {
    /**
     * Filters list of Dev users which are created by specified list of Dev
     * user IDs.
     */
    created_by?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** Filters for custom fields. */
    custom_fields?: object;
    /** Filters Dev users based on email addresses. */
    email?: string[];
    /** Unique ID of the user in the external source. */
    'external_identity.id'?: string;
    /** Issuer of the external identity of the user. */
    'external_identity.issuer'?: string;
    /** Filters Dev users based on job titles. */
    job_title?: DevUserJobTitle[];
    /**
     * The maximum number of Dev users to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Fields to sort the Dev users by and the direction to sort them. */
    sort_by?: string[];
    /** Filters Dev users based on state. */
    state?: UserState[];
    /** Subtypes of devusers to be filtered. */
    subtype?: string[];
    /** The filter operator to be applied on subtype. */
    subtype_op?: SubtypeOpOperatorType;
}
export interface DirectoryAncestorsParams {
    /** The ID of the directory to get ancestors. */
    id: string;
}
export interface DirectoriesCountParams {
    /**
     * Filters for directories created by any of the provided users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'created_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'created_date.before'?: string;
    /**
     * Filters for directories modified by any of the provided users.
     * @example ["DEVU-12345"]
     */
    modified_by?: string[];
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.before'?: string;
    /** Filters for directories with the provided parent. */
    parent?: string[];
    /** The filter operator to be applied on parents. */
    parent_op?: DirectoriesFilterParentOpOperatorType;
    /**
     * Filters for objects with a value lexicographically less than or equal
     * to the provided value.
     */
    'rank.max'?: string;
    /**
     * Filters for objects with a value lexicographically greater than or
     * equal to the provided value.
     */
    'rank.min'?: string;
    /**
     * Filters for directories with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
}
export interface DirectoriesGetParams {
    /** The ID of the requested directory. */
    id: string;
}
export interface DirectoriesListParams {
    /**
     * Filters for directories created by any of the provided users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'created_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'created_date.before'?: string;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of directories to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * Filters for directories modified by any of the provided users.
     * @example ["DEVU-12345"]
     */
    modified_by?: string[];
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.before'?: string;
    /** Filters for directories with the provided parent. */
    parent?: string[];
    /** The filter operator to be applied on parents. */
    parent_op?: DirectoriesFilterParentOpOperatorType;
    /**
     * Filters for objects with a value lexicographically less than or equal
     * to the provided value.
     */
    'rank.max'?: string;
    /**
     * Filters for objects with a value lexicographically greater than or
     * equal to the provided value.
     */
    'rank.min'?: string;
    /** Fields to sort the directories by and the direction to sort them. */
    sort_by?: string[];
    /**
     * Filters for directories with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
}
export interface DirectoriesTreeParams {
    /**
     * If true, directories with no article descendants will be excluded
     * from the response.
     */
    exclude_directories_with_no_article_descendants?: boolean;
    /** The ID of the directory whose subtree needs to be fetched. */
    id?: string;
}
export interface ListDiscoveryProfilesParams {
    /**
     * Filters for discovery profile created after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_after_date?: string;
    /**
     * Filters for discovery profile created before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_before_date?: string;
    /**
     * Filters for discovery profile created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by_ids?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of discovery profiles to return. If not set, then
     * the default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * Filters for discovery profile modified after the provided timestamp.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    modified_after_date?: string;
    /**
     * Filters for discovery profile modified before the provided timestamp.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    modified_before_date?: string;
    /**
     * Optional Dev organization ID. This allows running on another Dev
     * organization, as long as the logged in user has access to it.
     * @example "DEV-AbCdEfGh"
     */
    other_dev_org?: string;
    /** Filters for discovery profile with any of these names. */
    profile_name?: string[];
    /** Fields to sort the works by and the direction to sort them. */
    sort_by?: string[];
}
export interface GetDiscoveryRunParams {
    /** Discovery run unique ID. */
    id: string;
}
export interface GetDiscoverySettingsParams {
    /**
     * Optional Dev organization ID. This allows running on another Dev
     * organization, as long as the logged in user has access to it.
     * @example "DEV-AbCdEfGh"
     */
    other_dev_org?: string;
}
export interface ListDiscoverySourcesParams {
    /**
     * Optional Dev organization ID. This allows running on another Dev
     * organization, as long as the logged in user has access to it.
     * @example "DEV-AbCdEfGh"
     */
    other_dev_org?: string;
}
export interface EmojisGetParams {
    /** The ID of the emoji to get. */
    id: string;
}
export interface EmojisListParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of emojis to return.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
}
export interface EmojisSearchParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of emojis to return.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
}
export interface EngagementsCountParams {
    /** Filters for meetings with the provided external_refs. */
    external_ref?: string[];
    /**
     * Filters for engagement of the provided members.
     * @example ["DEVU-12345"]
     */
    members?: string[];
    /**
     * Filters for engagements with the provided parent.
     * @example ["ACC-12345"]
     */
    parent?: string[];
    /** Filters for engagement of the provided types. */
    type?: EngagementType[];
}
export interface EngagementsGetParams {
    /** The engagement ID. */
    id: string;
}
export interface EngagementsListParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** Filters for meetings with the provided external_refs. */
    external_ref?: string[];
    /**
     * The maximum number of engagements to return.
     * @format int32
     */
    limit?: number;
    /**
     * Filters for engagement of the provided members.
     * @example ["DEVU-12345"]
     */
    members?: string[];
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * Filters for engagements with the provided parent.
     * @example ["ACC-12345"]
     */
    parent?: string[];
    /** Fields to sort the engagements by and the direction to sort them. */
    sort_by?: string[];
    /** Filters for engagement of the provided types. */
    type?: EngagementType[];
}
export interface EventSourcesGetParams {
    /** The event source's ID. */
    id: string;
}
export interface EventSourcesListParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Fields to sort the event sources by and the direction to sort them. */
    sort_by?: string[];
    /** ID of the source snap-in which created this event source. */
    source_id?: string[];
    /**
     * type describes which event source is being instantiated from list of
     * event sources we support. It would contain values like
     * pd/github/new-or-updated-pull-request, etc.
     */
    type?: string[];
}
export interface ExperienceTogglesGetParams {
    /** The toggles to get. */
    toggles: string[];
    /**
     * The actor to get the toggles for, otherwise if omitted, then the
     * authenticated user.
     * @example "DEVU-12345"
     */
    actor?: string;
}
export interface ExploreViewsListParams {
    /** Section for which views are to be fetched. */
    section: ExploreSection;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of views to return. If not set, then the default
     * is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Filter on view type. */
    view_types?: ExploreFilterViewType[];
}
export interface FlowGetParams {
    /** The flow's ID. */
    id: string;
}
export interface FlowsListParams {
    /** The cursor to begin iteration from. */
    cursor?: string;
    /** ID of Marketplace Item which installed this flow. */
    marketplace_item?: string[];
    /** Parameter to indicate if the response must omit the raw_template. */
    omit_raw_template?: boolean;
    /** Fields to sort the flows by and the direction to sort them. */
    sort_by?: string[];
    /** Deployment status of the flow. */
    status?: FlowStatus[];
}
export interface GlobalKeyringGetParams {
    /** The ID of the keyring. */
    id: string;
}
export interface GlobalStoreMarketplaceCategoriesGetParams {
    /** The marketplace category ID. */
    id: string;
}
export interface GlobalStoreMarketplaceCategoriesListParams {
    /** Actor ID who is listing the marketplace categories. */
    actor: string;
    /** Whether to exclude empty categories. */
    exclude_empty_categories?: boolean;
    /** The marketplace ID. */
    marketplace?: string;
}
export interface GlobalStoreMarketplaceItemsGetParams {
    /** Actor ID who is getting the marketplace item. */
    actor: string;
    /** The marketplace item ID. */
    id?: string;
    /** Marketplace ID where to search a marketplace item by slug. */
    marketplace_id?: string;
    /** The marketplace item's slug. */
    slug?: string;
}
export interface GlobalStoreMarketplaceItemsListParams {
    /** Actor ID who requested to list the marketplace items. */
    actor: string;
    /** Filters marketplace items relevant for these categories. */
    categories?: string[];
    /**
     * Filters for marketplace items created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /** The filter operator to be applied on created_by. */
    created_by_op?: GlobalStoreListMarketplaceItemsFilterCreatedByOperatorType;
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'created_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'created_date.before'?: string;
    /**
     * To start listing marketplace items cursor field should not be
     * provided. Set cursor to value returned by the previous call to list
     * items in the next page.
     */
    cursor?: string;
    /**
     * Limit for how many items to be retrieved per page. Default is 50.
     * @format int32
     */
    limit?: number;
    /** Markteplace ID where to list marketplace items. */
    marketplace?: string;
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.before'?: string;
    /**
     * Filters for marketplace items owned by some organization.
     * @example "DEV-AbCdEfGh"
     */
    owned_by?: string;
    /** Search query to search marketplace items. */
    search_query?: string;
    /** Filters marketplace items relevant for these snap-in packages. */
    snap_in_package?: string[];
    /** Filters marketplace items relevant for these snap-in versions. */
    snap_in_version?: string[];
    /**
     * List of fields to sort the marketplace item object, by and how to
     * sort them. Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
    /** Filters on state for marketplace items. */
    state?: MarketplaceItemState[];
}
export interface GlobalStoreMarketplaceItemsSearchParams {
    /** Actor ID who is searching the marketplace item. */
    actor: string;
    /** Search query to search marketplace items. */
    search_query: string;
    /** Markteplace ID where to search marketplace items. */
    marketplace?: string;
}
export interface GlobalStoreMarketplacesGetParams {
    /** The marketplace ID. */
    id: string;
}
export interface GroupsGetParams {
    /** The ID of the group to get. */
    id: string;
}
export interface GroupsListParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** Filters the groups based on the group type. */
    group_type?: GroupType[];
    /**
     * The maximum number of groups to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /** Filters the groups on basis of member type. */
    member_type?: GroupMemberType[];
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Comma-separated fields to sort the groups by. */
    sort_by?: string[];
}
export interface GroupMembersListParams {
    /** ID of the group for which to list members. */
    group: string;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of members to return. If not set, then the default
     * is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
}
export interface IncidentsCountParams {
    /** Filters for incidents that apply to any of the provided parts. */
    applies_to_parts?: string[];
    /**
     * Filters for incidents created by any of the provided users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /** The filter operator to be applied on created_by. */
    created_by_op?: IncidentsListFiltersCreatedByOperatorType;
    /** Filters for incidents owned by any of the provided users. */
    owned_by?: string[];
    /** The filter operator to be applied on owned_by. */
    owned_by_op?: IncidentsListFiltersOwnedByOperatorType;
    /** Filters for incidents containing any of the provided severities. */
    severity?: number[];
    /** Filters for incidents in any of the provided stages. */
    stage?: string[];
    /** Filters for incidents with any of the provided states. */
    state?: string[];
    /**
     * The ID of the tag.
     * @example "TAG-12345"
     */
    'tags.id'?: string;
    /**
     * The value for the object's association with the tag. If specified,
     * the value must be one that's specified in the tag's allowed values.
     */
    'tags.value'?: string;
    /** Filters for incidents by the provided titles. */
    title?: string[];
}
export interface IncidentsGetParams {
    /** The ID of the incident to get. */
    id: string;
}
export interface IncidentsGroupParams {
    /** The field to group the incidents by. */
    group_by: string;
    /** Filters for incidents that apply to any of the provided parts. */
    applies_to_parts?: string[];
    /**
     * Filters for incidents created by any of the provided users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /** The filter operator to be applied on created_by. */
    created_by_op?: IncidentsListFiltersCreatedByOperatorType;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of groups to return. If not set, then the default
     * is '10'.
     * @format int32
     */
    limit?: number;
    /**
     * The maximum number of incidents to return for an individual group.
     * The default is '50'.
     * @format int32
     */
    limit_per_group?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Filters for incidents owned by any of the provided users. */
    owned_by?: string[];
    /** The filter operator to be applied on owned_by. */
    owned_by_op?: IncidentsListFiltersOwnedByOperatorType;
    /** Filters for incidents containing any of the provided severities. */
    severity?: number[];
    /** Comma-separated fields to sort the incidents by. */
    sort_by?: string[];
    /** Filters for incidents in any of the provided stages. */
    stage?: string[];
    /** Filters for incidents with any of the provided states. */
    state?: string[];
    /**
     * The ID of the tag.
     * @example "TAG-12345"
     */
    'tags.id'?: string;
    /**
     * The value for the object's association with the tag. If specified,
     * the value must be one that's specified in the tag's allowed values.
     */
    'tags.value'?: string;
    /** Filters for incidents by the provided titles. */
    title?: string[];
}
export interface IncidentsListParams {
    /** Filters for incidents that apply to any of the provided parts. */
    applies_to_parts?: string[];
    /**
     * Filters for incidents created by any of the provided users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /** The filter operator to be applied on created_by. */
    created_by_op?: IncidentsListFiltersCreatedByOperatorType;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of items.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Filters for incidents owned by any of the provided users. */
    owned_by?: string[];
    /** The filter operator to be applied on owned_by. */
    owned_by_op?: IncidentsListFiltersOwnedByOperatorType;
    /** Filters for incidents containing any of the provided severities. */
    severity?: number[];
    /** The list of fields to sort the items by and how to sort them. */
    sort_by?: string[];
    /** Filters for incidents in any of the provided stages. */
    stage?: string[];
    /** Filters for incidents with any of the provided states. */
    state?: string[];
    /**
     * The ID of the tag.
     * @example "TAG-12345"
     */
    'tags.id'?: string;
    /**
     * The value for the object's association with the tag. If specified,
     * the value must be one that's specified in the tag's allowed values.
     */
    'tags.value'?: string;
    /** Filters for incidents by the provided titles. */
    title?: string[];
}
export interface InsightsGetParams {
    /** The insights's ID. */
    id: string;
}
export interface InsightsListParams {
    /**
     * The cursor to begin iteration from, otherwise if not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of insights to return. If not set, then the
     * default is '50'.
     * @format int32
     */
    limit?: number;
}
export interface InsightsValuesListParams {
    /**
     * The cursor to begin iteration from, otherwise if not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * Filter based on for_object_id.
     * @example ["PROD-12345"]
     */
    for_object_ids?: string[];
    /** Filter based on insight ids. */
    insight_ids?: string[];
    /**
     * The maximum number of insights to return. If not set, then the
     * default is '50'.
     * @format int32
     */
    limit?: number;
}
export interface InteractionsGetParams {
    /** The requested interaction's ID. */
    id: string;
    /** Whether to include the latest messages on the interaction. */
    include_latest_messages?: boolean;
}
export interface InteractionsListParams {
    /**
     * Filters for interactions that apply to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_parts?: string[];
    /** The filter operator to be applied on applies_to_parts. */
    applies_to_parts_op?: InteractionsFilterAppliesToPartsOpOperatorType;
    /** Filters for interactions closed by any of the provided users. */
    closed_by?: string[];
    /** The filter operator to be applied on closed_by. */
    closed_by_op?: InteractionsFilterClosedByOpOperatorType;
    /**
     * Filters for interactions created by any of the provided users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /** The filter operator to be applied on created_by. */
    created_by_op?: InteractionsFilterCreatedByOpOperatorType;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * Filters for interactions embedded by any of the provided users in
     * parent object.
     */
    embedded_by?: string[];
    /** The filter operator to be applied on embedded_by. */
    embedded_by_op?: InteractionsFilterEmbeddedByOpOperatorType;
    /** Filters for interactions that are spam. */
    is_spam?: boolean;
    /**
     * The maximum number of interactions to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * Filters for interactions where these users are participants.
     * @example ["DEVU-12345"]
     */
    members?: string[];
    /** The filter operator to be applied on members. */
    members_op?: InteractionsFilterMembersOpOperatorType;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Filters for interactions owned by any of the provided users. */
    owned_by?: string[];
    /** The filter operator to be applied on owned_by. */
    owned_by_op?: InteractionsFilterOwnedByOpOperatorType;
    /** Filters for interactions by its parent. */
    parent?: string[];
    /** The filter operator to be applied on parent. */
    parent_op?: InteractionsFilterParentOpOperatorType;
    /** Filters for records with any of the provided SLA stages. */
    'sla_summary.stage'?: SlaSummaryStage[];
    /** Fields to sort the interactions by and the direction to sort them. */
    sort_by?: string[];
    /**
     * Filters for interactions with any of the provided source channel enum
     * ids.
     */
    source_channel?: number[];
    /** Filters for interactions in any of the provided stages. */
    stage?: string[];
    /** Filters for interactions with any of the provided states. */
    state?: string[];
    /**
     * Minimum value for an object aggregation. Required if any surveys.*
     * fields are provided.
     */
    'surveys.minimum'?: string[];
    /**
     * Filters for interactions with any of the provided sync channel enum
     * ids.
     */
    sync_channels?: number[];
}
export interface InvoicesCountParams {
    /**
     * Filter invoices by account.
     * @example ["ACC-12345"]
     */
    account_ids?: string[];
    /**
     * Filter items which have invoice amount due greater than value
     * provided.
     * @format double
     */
    amount_due_greater_than?: number;
    /**
     * Filter items which have invoice amount due less than value provided.
     * @format double
     */
    amount_due_less_than?: number;
    /**
     * Filter items which have invoice amount paid greater than value
     * provided.
     * @format double
     */
    amount_paid_greater_than?: number;
    /**
     * Filter items which have invoice amount paid less than value provided.
     * @format double
     */
    amount_paid_less_than?: number;
    /**
     * Filter items which have billing date after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    billing_date_after?: string;
    /**
     * Filter items which have billing date before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    billing_date_before?: string;
    /**
     * Filter items which have due date after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    due_date_after?: string;
    /**
     * Filter items which have due date before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    due_date_before?: string;
    /** The list of Invoice DONs which are to be aggregated. */
    ids?: string[];
    /**
     * Filter items by doing queries on revs. To allow devs filter invoices
     * for specific revs.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org_ids?: string[];
    /** The list of Invoice statuses which are to be aggregated. */
    statuses?: InvoiceStatus[];
    /**
     * Filter items which have invoice total greater than value provided.
     * @format double
     */
    total_greater_than?: number;
    /**
     * Filter items which have invoice total less than value provided.
     * @format double
     */
    total_less_than?: number;
    /** The list of invoice types which are to be aggregated. */
    types?: InvoiceType[];
}
export interface InvoicesDownloadParams {
    /** The invoice object's DON. */
    id: string;
}
export interface InvoicesGetParams {
    /** The invoice object's DON. */
    id: string;
}
export interface InvoicesListParams {
    /**
     * Filter invoices by account.
     * @example ["ACC-12345"]
     */
    account_ids?: string[];
    /**
     * Filter items which have invoice amount due greater than value
     * provided.
     * @format double
     */
    amount_due_greater_than?: number;
    /**
     * Filter items which have invoice amount due less than value provided.
     * @format double
     */
    amount_due_less_than?: number;
    /**
     * Filter items which have invoice amount paid greater than value
     * provided.
     * @format double
     */
    amount_paid_greater_than?: number;
    /**
     * Filter items which have invoice amount paid less than value provided.
     * @format double
     */
    amount_paid_less_than?: number;
    /**
     * Filter items which have billing date after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    billing_date_after?: string;
    /**
     * Filter items which have billing date before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    billing_date_before?: string;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * Filter items which have due date after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    due_date_after?: string;
    /**
     * Filter items which have due date before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    due_date_before?: string;
    /** The list of Invoice DONs which are to be aggregated. */
    ids?: string[];
    /**
     * The maximum number of invoices to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * Filter items by doing queries on revs. To allow devs filter invoices
     * for specific revs.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org_ids?: string[];
    /**
     * List of fields to sort the Invoice object, by and how to sort them.
     * Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
    /** The list of Invoice statuses which are to be aggregated. */
    statuses?: InvoiceStatus[];
    /**
     * Filter items which have invoice total greater than value provided.
     * @format double
     */
    total_greater_than?: number;
    /**
     * Filter items which have invoice total less than value provided.
     * @format double
     */
    total_less_than?: number;
    /** The list of invoice types which are to be aggregated. */
    types?: InvoiceType[];
}
export interface InvoicesPayParams {
    /** The invoice object's DON. */
    id: string;
}
export interface GetJobParams {
    /** The ID of the job to be retrieved. */
    id: string;
}
export interface KeyringsCreateCallbackParams {
    /** Request for user sign-in authentication */
    authuser?: string;
    /** Channel IDs [for 360Dialog] */
    channels?: string;
    /** Client ID [for 360Dialog] */
    client?: string;
    /** Code to exchange for an access token */
    code?: string;
    /** OAuth2 short error */
    error?: string;
    /** OAuth2 error description */
    error_description?: string;
    /** Server ID where the application is authorized [for discord] */
    guild_id?: string;
    /** The hosted domain of the user account */
    hd?: string;
    /** Github installation ID */
    installation_id?: string;
    /** OAuth2 permissions for an application */
    permissions?: string;
    /** User consent dialog */
    prompt?: string;
    /** OAuth2 scope */
    scope?: string;
    /** Github action information */
    setup_action?: string;
    /** State value given to the authorization request */
    state?: string;
}
export interface ExternalOrgsListParams {
    /** The keyring's ID. */
    id: string;
}
export interface KeyringsGetParams {
    /** The keyring's ID. */
    id: string;
}
export interface KeyringsListParams {
    /** Filters keyrings with associated categories. */
    categories?: string[];
    /** The cursor to begin iteration from */
    cursor?: string;
    include_private?: boolean;
    /**
     * Comma separated fields to sort the items by and how to sort them
     * (field_name1:[asc/desc],field_name2:[asc/desc]).
     */
    sort_by?: string;
    /** Filters for keyring of the provided type IDs. */
    type_ids?: string[];
    /** Filters for keyring of the provided types. */
    types?: KeyringTypeEnum[];
}
export interface LicenseAssignmentsGetParams {
    /** The ID of the license assignment to get. */
    id: string;
}
export interface LicenseAssignmentsListParams {
    /** Filter license assignments by assigned to emails. */
    assigned_to_emails?: string[];
    /** Filter license assignments by assigned to ids. */
    assigned_to_ids?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** Filter license assignments by external ref identifiers. */
    external_refs?: string[];
    /** Filter license assignments by ids. */
    ids?: string[];
    /**
     * The maximum number of license assignments to return. The default is
     * '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Filter license assignments by SKUs. */
    sku_ids?: string[];
    /**
     * List of fields to sort the license assignment object, by and how to
     * sort them. Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
}
export interface LinksGetParams {
    /** The requested link's ID. */
    id: string;
}
export interface LinksGroupParams {
    /** The field to group the links by. */
    group_by: string;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The direction of the links to list, otherwise if not present, then
     * links in both directions (source and target) are included.
     */
    direction?: LinksDirection;
    /**
     * The maximum number of groups to return. If not set, then the default
     * is '10'.
     * @format int32
     */
    limit?: number;
    /**
     * The maximum number of links to return for an individual group. If not
     * set, then the default is '50'.
     * @format int32
     */
    limit_per_group?: number;
    /**
     * The link type(s) to filter for, otherwise if not present, all link
     * types are included.
     */
    link_type?: LinkType[];
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** The ID of the object to list the link groups for. */
    object?: string;
    /**
     * The ID of the object to list the link groups for.
     * @deprecated
     */
    object_id?: string;
    /**
     * The link types to filter for, otherwise if not present, all link
     * types are included.
     * @deprecated
     */
    types?: LinkType[];
}
export interface LinksListParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The direction of the links to list, otherwise if not present, then
     * links in both directions (source and target) are included.
     */
    direction?: LinksDirection;
    /**
     * The maximum number of links to return. If not set, then the default
     * is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The link type(s) to filter for, otherwise if not present, all link
     * types are included.
     */
    link_type?: LinkType[];
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** The ID of the object to list the links for. */
    object?: string;
    /**
     * The ID of the object to list the links for.
     * @deprecated
     */
    object_id?: string;
    /**
     * The link types to filter for, otherwise if not present, all link
     * types are included.
     * @deprecated
     */
    types?: LinkType[];
}
export interface LobbiesListParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of lobbies to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
}
export interface MarketplaceCategoriesGetParams {
    /** The marketplace category ID. */
    id: string;
}
export interface MarketplaceCategoriesListParams {
    /** Whether to exclude empty categories. */
    exclude_empty_categories?: boolean;
    /** The marketplace ID. */
    marketplace_id?: string;
}
export interface MarketplaceItemsGetParams {
    /** The marketplace item's ID. */
    id?: string;
    /** Markteplace ID where to search a marketplace item by slug. */
    marketplace_id?: string;
    /** The marketplace item's slug. */
    slug?: string;
}
export interface MarketplaceItemsListParams {
    /** Filters marketplace items relevant for these categories. */
    categories?: string[];
    /**
     * Filters for marketplace items created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /** The filter operator to be applied on created_by. */
    created_by_op?: ListMarketplaceItemsFilterCreatedByOperatorType;
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'created_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'created_date.before'?: string;
    /**
     * To start listing marketplace items cursor field should not be
     * provided. Set cursor to value returned by the previous call to list
     * items in the next page.
     */
    cursor?: string;
    /**
     * Limit for how many items to be retrieved per page. Default is 50.
     * @format int32
     */
    limit?: number;
    /** Markteplace ID where to list marketplace items. */
    marketplace_id?: string;
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.before'?: string;
    /**
     * Filters for marketplace items owned by some organization.
     * @example "DEV-AbCdEfGh"
     */
    owned_by?: string;
    /** Search query to search marketplace items. */
    search_query?: string;
    /** Filters marketplace items relevant for these snap-in packages. */
    snap_in_package?: string[];
    /** Filters marketplace items relevant for these snap-in versions. */
    snap_in_version?: string[];
    /**
     * List of fields to sort the marketplace item object, by and how to
     * sort them. Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
    /** Filters on state for marketplace items. */
    state?: MarketplaceItemState[];
}
export interface MarketplaceItemsSearchParams {
    /** Search query to search marketplace items. */
    search_query: string;
    /** Markteplace ID where to search marketplace items. */
    marketplace?: string;
}
export interface MarketplaceSubmissionsGetParams {
    /** The marketplace submissions's ID. */
    id: string;
}
export interface MarketplaceSubmissionsListParams {
    /**
     * Filters for marketplace submissions created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /** The filter operator to be applied on created_by. */
    created_by_op?: ListMarketplaceSubmissionsFilterCreatedByOperatorType;
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'created_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'created_date.before'?: string;
    /**
     * To start listing marketplace submissions cursor field should not be
     * provided. Set cursor to value returned by the previous call to list
     * submissions in the next page.
     */
    cursor?: string;
    /**
     * Flag indicating to list only submissions in review and is applicable
     * only to the members of the organization owning the marketplace.
     */
    in_review_only?: boolean;
    /**
     * Limit for how many submissions to be retrieved per page. Default is
     * 50.
     * @format int32
     */
    limit?: number;
    /** Markteplace ID where to list marketplace submissions. */
    marketplace?: string;
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.before'?: string;
    /** Filters on slugs for marketplace submissions. */
    slugs?: string[];
    /** Filters on snap-in packages for marketplace submissions. */
    snap_in_package?: string[];
    /** Filters on snap-in versions for marketplace submissions. */
    snap_in_version?: string[];
    /**
     * List of fields to sort the marketplace submission object, by and how
     * to sort them. Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
    /** Filters on state for marketplace submissions. */
    state?: MarketplaceSubmissionState[];
}
export interface MarketplaceSlugRegistrationsIsAvailableParams {
    /** Actor ID who is requesting the lock. */
    actor: string;
    /** Object type for which the slug is registered. */
    object_type: SlugRegistrationObjectType;
    /**
     * Slug to be registered. Slugs are unique within a marketplace or a
     * marketplace listing.
     */
    slug: string;
    /**
     * ID of the marketplace for which the marketplace listing slug is
     * registered to. This field is only applicable for marketplace listing
     * slug registrations.
     */
    marketplace?: string;
}
export interface MarketplacesGetParams {
    /** The marketplace DON. */
    id: string;
}
export interface MeetingsCountParams {
    /** Filters for meetings with the provided external_ref. */
    external_ref?: string[];
    /**
     * Filters for meetings with the provided parent.
     * @example ["ACC-12345"]
     */
    parent?: string[];
}
export interface MeetingsGetParams {
    /** The meeting's ID. */
    id: string;
}
export interface MeetingsListParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** Filters for meetings with the provided external_ref. */
    external_ref?: string[];
    /**
     * The maximum number of meetings to return.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * Filters for meetings with the provided parent.
     * @example ["ACC-12345"]
     */
    parent?: string[];
    /** Fields to sort the meetings by and the direction to sort them. */
    sort_by?: string[];
}
export interface MenuGetParams {
    /** The menu object's ID. */
    id: string;
}
export interface MenuListParams {
    /** The job title of the Dev user. */
    persona: DevUserJobTitle;
}
export interface MetricDefinitionsGetParams {
    /** The ID of the metric definition to get. */
    id: string;
}
export interface MetricDefinitionsListParams {
    /** The type of objects the metric definition applies to. */
    applies_to_type?: MetricDefinitionAppliesTo[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * Whether to include custom metrics in the response. If not set, then
     * custom metrics are excluded.
     */
    include_custom_metrics?: boolean;
    /**
     * The maximum number of records to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Fields to sort the records by and the direction to sort them. */
    sort_by?: string[];
    /** The status of the metric definition. */
    status?: MetricDefinitionStatus[];
    /** The type of metric definitions sought. */
    type?: MetricDefinitionMetricType[];
}
export interface MetricSetsGetParams {
    /** ID of the metric set to get. */
    id: string;
}
export interface MetricsGetParams {
    /** ID of the metric to get. */
    id: string;
}
export interface NewsGetParams {
    /** The ID of the requested news item. */
    id: string;
}
export interface NewsListParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of news items to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
}
export interface NotificationsChannelsParams {
    /** The type of mobile device. */
    device_type?: string;
}
export interface NotificationsGroupParams {
    /** The field to group the notifications by. */
    group_by: string;
    /**
     * Actor user IDs by which to filter the response.
     * @example ["DEVU-12345"]
     */
    actor_ids?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** Notification IDs by which to filter the response. */
    ids?: string[];
    /**
     * The maximum number of groups to return. If not set, then the default
     * is '10'.
     * @format int32
     */
    limit?: number;
    /**
     * The maximum number of notifications to return for an individual
     * group. Default is '50'.
     * @format int32
     */
    limit_per_group?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Parent IDs by which to filter the response. */
    parent_ids?: string[];
    /** Parent object types by which to filter the response. */
    parent_types?: NotificationParentType[];
    /** Priorities by which to filter the response. */
    priorities?: NotificationPriority[];
    /** Comma-separated fields to sort the notifications by. */
    sort_by?: string[];
    /** Notification states by which to filter the response. */
    states?: NotificationState[];
    /** Notification types by which to filter the response. */
    types?: NotificationType[];
}
export interface NotificationsListParams {
    /**
     * Actor user IDs by which to filter the response.
     * @example ["DEVU-12345"]
     */
    actor_ids?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** Notification IDs by which to filter the response. */
    ids?: string[];
    /**
     * The maximum number of notifications to return. Default is 50.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Parent IDs by which to filter the response. */
    parent_ids?: string[];
    /** Parent object types by which to filter the response. */
    parent_types?: NotificationParentType[];
    /** Priorities by which to filter the response. */
    priorities?: NotificationPriority[];
    /** Comma-separated fields to sort the notifications by. */
    sort_by?: string[];
    /** Notification states by which to filter the response. */
    states?: NotificationState[];
    /** Notification types by which to filter the response. */
    types?: NotificationType[];
}
export interface OasisDataFetchParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** The dataset id for which the data is requested. */
    dataset_id?: string;
    /**
     * The dataset name for which the data is requested.
     * @deprecated
     */
    dataset_name?: string;
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'date_range.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'date_range.before'?: string;
    /**
     * The maximum number of data items to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
}
export interface PartitionFilterParams {
    /**
     * The masked token that contains the details of the partition and
     * filter query.
     */
    token: string;
    /**
     * The encoded metadata received in response of prepare data for data
     * chunk.
     */
    chunk?: string;
}
export interface PartitionFilterNoCacheParams {
    /**
     * The masked token that contains the details of the partition and
     * filter query.
     */
    token: string;
    /**
     * The encoded metadata received in response of prepare data for data
     * chunk.
     */
    chunk?: string;
}
export interface OasisDataPrepareParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** The dataset id for which the data is requested. */
    dataset_id?: string;
    /**
     * The dataset name for which the data is requested.
     * @deprecated
     */
    dataset_name?: string;
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'date_range.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'date_range.before'?: string;
    /**
     * The maximum number of data items to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
}
export interface OasisDatasetGetParams {
    /**
     * The dataset ID of the dataset. If ID and dataset_id are both present
     * ID will be preferred.
     */
    dataset_id?: string;
    /** The requested dataset's ID. */
    id?: string;
    /**
     * The name of the dataset. If ID and name are both present ID will be
     * preferred.
     * @deprecated
     */
    name?: string;
}
export interface DatasetListParams {
    /**
     * Filters for datasets created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** Filters for datasets with any of the provided data formats. */
    data_format?: string[];
    /** Filters for datasets with any of the provided dataset names. */
    dataset_name?: string[];
    /**
     * The maximum number of datasets to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Filters for datasets based on scope. */
    scope?: OasisDatasetListFilterScopeValue;
    /** Fields to sort the datasets by and the direction to sort them. */
    sort_by?: string[];
    /**
     * Filters for datasets with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filters for datasets with any of the provided types. */
    type?: string[];
}
export interface OasisJobGetParams {
    /** The ID of the oasis job to get. */
    id: string;
}
export interface OasisSocketsConnectParams {
    /** The ID for the open socket to connect to. */
    id: string;
}
export interface ObjectMembersCountParams {
    /**
     * The ID of the users or groups that must be a member of one of the
     * specified objects. If empty, then the result sums the total number of
     * members for each object.
     */
    member_ids?: string[];
    /**
     * The ID of the objects to count the members for. If empty, then the
     * result sums the total number of objects that each member is a part
     * of.
     */
    object_ids?: string[];
}
export interface ObjectMembersGetParams {
    /** Globally unique DevRev Object Name (DON) for the Object Member. */
    object_member_id: string;
}
export interface ObjectMembersListParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of object members to return. If not set, then the
     * default is '50'.
     * @format int32
     */
    limit?: number;
    /** ID of the user or group. */
    member_ids?: string[];
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * Globally unique DevRev Object Name (DON) for the object where the
     * member is being added.
     */
    object_ids?: string[];
}
export interface OneTimeItemsListParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** The list of one time line item DONs which are to be aggregated. */
    ids?: string[];
    /** Filter, invoiced vs un-invoiced service plan objects. */
    is_invoiced?: boolean;
    /**
     * The maximum number of one time items to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * The list of rev org DONs which are to be aggregated.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org_ids?: string[];
    /** The list of service plan DONs which are to be aggregated. */
    service_plan_ids?: string[];
    /**
     * List of fields to sort the one time line item object, by and how to
     * sort them. Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
}
export interface ListOperationsParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of operations to return. The default is '50', the
     * maximum is '100'
     * @format int32
     * @max 100
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Fields to sort the operations by and the direction to sort them in. */
    sort_by?: string[];
    /** Filters on type for operations. */
    type?: OperationTypeEnum[];
}
export interface GetSchemaOperationParams {
    /** The ID of the operation to get the schema for. */
    operation: string;
}
export interface OrgScheduleFragmentsGetParams {
    /** Organization schedule Fragment ID. */
    id: string;
}
export interface OrgSchedulesGetParams {
    /** Organization schedule ID. */
    id: string;
}
export interface OrgSchedulesListParams {
    /** Creator ID the filter matches. */
    created_by_id?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * Max number of organization schedules returned in a page. Default is
     * 50.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * Fields to sort the organization schedules by and the direction to
     * sort them.
     */
    sort_by?: string[];
    /** The organization schedule statuses the filter matches. */
    status?: OrgScheduleStatus[];
}
export interface PartsContributorsListParams {
    /**
     * The part's ID.
     * @example "PROD-12345"
     */
    id: string;
    /**
     * The maximum number of contributors to return. If not set, then the
     * default is '10'.
     * @format int32
     */
    limit?: number;
}
export interface PartsCountParams {
    /** Filters for parts of the provided categories. */
    categories?: PartCategory[];
    /**
     * Filters for parts created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /** The filter operator to be applied on created_by. */
    created_by_op?: PartsFilterCreatedByOpOperatorType;
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'created_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'created_date.before'?: string;
    /** Filters for custom fields. */
    custom_fields?: object;
    /**
     * Filters for enhancement by its accounts.
     * @example ["ACC-12345"]
     */
    'enhancement.accounts'?: string[];
    /** The filter operator to be applied on accounts. */
    'enhancement.accounts_op'?: PartsFilterEnhancementAccountsOpOperatorType;
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'enhancement.actual_close_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'enhancement.actual_close_date.before'?: string;
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'enhancement.actual_start_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'enhancement.actual_start_date.before'?: string;
    /**
     * Filters for enhancement by its opportunities.
     * @example ["OPP-12345"]
     */
    'enhancement.opportunities'?: string[];
    /** The filter operator to be applied on opportunities. */
    'enhancement.opportunities_op'?: PartsFilterEnhancementOpportunitiesOpOperatorType;
    /** Filters for enhancement by its rev score tier. */
    'enhancement.rev_score_tier'?: EnhancementRevScoreTier[];
    /** The filter operator to be applied on rev_score_tier. */
    'enhancement.rev_score_tier_op'?: PartsFilterEnhancementRevScoreTierOpOperatorType;
    /** List of IDs of the custom stages which will be used for filtering. */
    'enhancement.stage_v2'?: string[];
    /** Filters for part with any of the provided custom states. */
    'enhancement.state_v2'?: string[];
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'enhancement.target_close_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'enhancement.target_close_date.before'?: string;
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'enhancement.target_start_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'enhancement.target_start_date.before'?: string;
    /** Filters for enhancement by its tickets. */
    'enhancement.tickets'?: string[];
    /** The filter operator to be applied on tickets. */
    'enhancement.tickets_op'?: PartsFilterEnhancementTicketsOpOperatorType;
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.before'?: string;
    /** Filters for parts of the provided name(s). */
    name?: string[];
    /**
     * Filters for parts owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for parts owned by any of the provided users.
     * @deprecated
     * @example ["DEVU-12345"]
     */
    owned_by_ids?: string[];
    /** The filter operator to be applied on owned_by. */
    owned_by_op?: PartsFilterOwnedByOpOperatorType;
    /**
     * Number of levels to fetch the part hierarchy up to.
     * @format int32
     * @min 1
     */
    'parent_part.level'?: number;
    /**
     * Part IDs to fetch the hierarchy for. Required if any parent_part.*
     * fields are provided.
     * @minItems 1
     * @example ["PROD-12345"]
     */
    'parent_part.parts'?: string[];
    /** Filters for records in the provided stage(s) by name. */
    'stage.name'?: string[];
    /** List of IDs of the custom stages which will be used for filtering. */
    'stage.stages'?: string[];
    /** Filters for part with any of the provided states. */
    state?: string[];
    /** Filters for subtypes. */
    subtype?: string[];
    /**
     * Filters for parts with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tag_ids?: string[];
    /**
     * Filters for part with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** The filter operator to be applied on tags. */
    tags_op?: PartsFilterTagsOpOperatorType;
    /** Filters for parts of the provided type(s). */
    type?: PartType[];
    /**
     * Filters for parts of the provided type(s).
     * @deprecated
     */
    types?: PartType[];
    /**
     * Filters for parts belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
export interface PartsCustomersListParams {
    /**
     * The part's ID.
     * @example "PROD-12345"
     */
    id: string;
    /**
     * The maximum number of customers to return. If not set, then the
     * default is '10'.
     * @format int32
     */
    limit?: number;
}
export interface PartsDescendantLinksTraverseParams {
    /**
     * ID of the part tree root to traverse links to descendant nodes from.
     * @example "PROD-12345"
     */
    root: string;
    /**
     * Cursor to begin iteration from. If empty, iteration will begin from
     * the beginning of the result set
     */
    cursor?: string;
    /**
     * Maximum number of link items to return. Default is 50.
     * @format int32
     */
    limit?: number;
    /**
     * If > 0, the maximum depth of the tree to traverse links from the
     * root.
     * @format int32
     */
    max_depth?: number;
}
export interface PartsGetParams {
    /**
     * The ID of the part to retrieve.
     * @example "PROD-12345"
     */
    id: string;
}
export interface PartsGroupParams {
    /** The field to group the parts by. */
    group_by: string;
    /** Filters for parts of the provided categories. */
    categories?: PartCategory[];
    /**
     * Filters for parts created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /** The filter operator to be applied on created_by. */
    created_by_op?: PartsFilterCreatedByOpOperatorType;
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'created_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'created_date.before'?: string;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** Filters for custom fields. */
    custom_fields?: object;
    /**
     * Filters for enhancement by its accounts.
     * @example ["ACC-12345"]
     */
    'enhancement.accounts'?: string[];
    /** The filter operator to be applied on accounts. */
    'enhancement.accounts_op'?: PartsFilterEnhancementAccountsOpOperatorType;
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'enhancement.actual_close_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'enhancement.actual_close_date.before'?: string;
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'enhancement.actual_start_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'enhancement.actual_start_date.before'?: string;
    /**
     * Filters for enhancement by its opportunities.
     * @example ["OPP-12345"]
     */
    'enhancement.opportunities'?: string[];
    /** The filter operator to be applied on opportunities. */
    'enhancement.opportunities_op'?: PartsFilterEnhancementOpportunitiesOpOperatorType;
    /** Filters for enhancement by its rev score tier. */
    'enhancement.rev_score_tier'?: EnhancementRevScoreTier[];
    /** The filter operator to be applied on rev_score_tier. */
    'enhancement.rev_score_tier_op'?: PartsFilterEnhancementRevScoreTierOpOperatorType;
    /** List of IDs of the custom stages which will be used for filtering. */
    'enhancement.stage_v2'?: string[];
    /** Filters for part with any of the provided custom states. */
    'enhancement.state_v2'?: string[];
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'enhancement.target_close_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'enhancement.target_close_date.before'?: string;
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'enhancement.target_start_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'enhancement.target_start_date.before'?: string;
    /** Filters for enhancement by its tickets. */
    'enhancement.tickets'?: string[];
    /** The filter operator to be applied on tickets. */
    'enhancement.tickets_op'?: PartsFilterEnhancementTicketsOpOperatorType;
    /**
     * The maximum number of groups to return. If not set, then the default
     * is '10'.
     * @format int32
     */
    limit?: number;
    /**
     * The maximum number of parts to return for an individual group. If not
     * set, then the default is '50'.
     * @format int32
     */
    limit_per_group?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.before'?: string;
    /** Filters for parts of the provided name(s). */
    name?: string[];
    /**
     * Filters for parts owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for parts owned by any of the provided users.
     * @deprecated
     * @example ["DEVU-12345"]
     */
    owned_by_ids?: string[];
    /** The filter operator to be applied on owned_by. */
    owned_by_op?: PartsFilterOwnedByOpOperatorType;
    /**
     * Number of levels to fetch the part hierarchy up to.
     * @format int32
     * @min 1
     */
    'parent_part.level'?: number;
    /**
     * Part IDs to fetch the hierarchy for. Required if any parent_part.*
     * fields are provided.
     * @minItems 1
     * @example ["PROD-12345"]
     */
    'parent_part.parts'?: string[];
    /** Comma-separated fields to sort the parts by. */
    sort_by?: string[];
    /** Filters for records in the provided stage(s) by name. */
    'stage.name'?: string[];
    /** List of IDs of the custom stages which will be used for filtering. */
    'stage.stages'?: string[];
    /** Filters for part with any of the provided states. */
    state?: string[];
    /** Filters for subtypes. */
    subtype?: string[];
    /**
     * Filters for parts with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tag_ids?: string[];
    /**
     * Filters for part with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** The filter operator to be applied on tags. */
    tags_op?: PartsFilterTagsOpOperatorType;
    /** Filters for parts of the provided type(s). */
    type?: PartType[];
    /**
     * Filters for parts of the provided type(s).
     * @deprecated
     */
    types?: PartType[];
    /**
     * Filters for parts belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
export interface PartsListParams {
    /** Filters for parts of the provided categories. */
    categories?: PartCategory[];
    /**
     * Filters for parts created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /** The filter operator to be applied on created_by. */
    created_by_op?: PartsFilterCreatedByOpOperatorType;
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'created_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'created_date.before'?: string;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** Filters for custom fields. */
    custom_fields?: object;
    /**
     * Filters for enhancement by its accounts.
     * @example ["ACC-12345"]
     */
    'enhancement.accounts'?: string[];
    /** The filter operator to be applied on accounts. */
    'enhancement.accounts_op'?: PartsFilterEnhancementAccountsOpOperatorType;
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'enhancement.actual_close_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'enhancement.actual_close_date.before'?: string;
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'enhancement.actual_start_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'enhancement.actual_start_date.before'?: string;
    /**
     * Filters for enhancement by its opportunities.
     * @example ["OPP-12345"]
     */
    'enhancement.opportunities'?: string[];
    /** The filter operator to be applied on opportunities. */
    'enhancement.opportunities_op'?: PartsFilterEnhancementOpportunitiesOpOperatorType;
    /** Filters for enhancement by its rev score tier. */
    'enhancement.rev_score_tier'?: EnhancementRevScoreTier[];
    /** The filter operator to be applied on rev_score_tier. */
    'enhancement.rev_score_tier_op'?: PartsFilterEnhancementRevScoreTierOpOperatorType;
    /** List of IDs of the custom stages which will be used for filtering. */
    'enhancement.stage_v2'?: string[];
    /** Filters for part with any of the provided custom states. */
    'enhancement.state_v2'?: string[];
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'enhancement.target_close_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'enhancement.target_close_date.before'?: string;
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'enhancement.target_start_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'enhancement.target_start_date.before'?: string;
    /** Filters for enhancement by its tickets. */
    'enhancement.tickets'?: string[];
    /** The filter operator to be applied on tickets. */
    'enhancement.tickets_op'?: PartsFilterEnhancementTicketsOpOperatorType;
    /**
     * The maximum number of parts to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.before'?: string;
    /** Filters for parts of the provided name(s). */
    name?: string[];
    /**
     * Filters for parts owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /**
     * Filters for parts owned by any of the provided users.
     * @deprecated
     * @example ["DEVU-12345"]
     */
    owned_by_ids?: string[];
    /** The filter operator to be applied on owned_by. */
    owned_by_op?: PartsFilterOwnedByOpOperatorType;
    /**
     * Number of levels to fetch the part hierarchy up to.
     * @format int32
     * @min 1
     */
    'parent_part.level'?: number;
    /**
     * Part IDs to fetch the hierarchy for. Required if any parent_part.*
     * fields are provided.
     * @minItems 1
     * @example ["PROD-12345"]
     */
    'parent_part.parts'?: string[];
    /** Fields to sort the parts by and the direction to sort them. */
    sort_by?: string[];
    /** Filters for records in the provided stage(s) by name. */
    'stage.name'?: string[];
    /** List of IDs of the custom stages which will be used for filtering. */
    'stage.stages'?: string[];
    /** Filters for part with any of the provided states. */
    state?: string[];
    /** Filters for subtypes. */
    subtype?: string[];
    /**
     * Filters for parts with any of the provided tags.
     * @deprecated
     * @example ["TAG-12345"]
     */
    tag_ids?: string[];
    /**
     * Filters for part with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** The filter operator to be applied on tags. */
    tags_op?: PartsFilterTagsOpOperatorType;
    /** Filters for parts of the provided type(s). */
    type?: PartType[];
    /**
     * Filters for parts of the provided type(s).
     * @deprecated
     */
    types?: PartType[];
    /**
     * Filters for parts belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
export interface PartsMutateParams {
    /**
     * ID of the part to be mutated.
     * @example "PROD-12345"
     */
    id: string;
}
export interface PartsSupportersListParams {
    /**
     * The part's ID.
     * @example "PROD-12345"
     */
    id: string;
    /**
     * The maximum number of supporters to return. If not set, then the
     * default is '10'.
     * @format int32
     */
    limit?: number;
}
export interface PaymentMethodsGetParams {
    /** The payment method's DON */
    id: string;
}
export interface PaymentMethodsListParams {
    /**
     * Filter payment methods for account.
     * @example "ACC-12345"
     */
    account_id?: string;
}
export interface PlugSettingsGetParams {
    /** The plug settings object ID. */
    id: string;
}
export interface PlugSettingsListParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of plug setting objects to return. The default is
     * '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * Fields to sort the plug settings object by and the direction to sort
     * them.
     */
    sort_by?: string[];
}
export interface PreferencesGetParams {
    /**
     * The ID of the target object for which preferences object is to be
     * fetched.
     * @example "DEV-AbCdEfGh"
     */
    object: string;
    /** Type of the preference object to be fetched. */
    type: PreferencesType;
}
export interface PreferencesListParams {
    /**
     * The ID of the object for which the preferences are to be listed.
     * @example "DEV-AbCdEfGh"
     */
    object: string;
}
export interface PreferencesSnapKitListParams {
    /**
     * The ID of the object for which the preferences snap kit is to be
     * fetched.
     * @example "DEV-AbCdEfGh"
     */
    object: string;
}
export interface PriceBooksCountParams {
    /** The list of price book DONs which are to be aggregated. */
    ids?: string[];
    /** Filter, active vs inactive price book objects. */
    is_active?: boolean;
    /** Filter, default vs non-default price book objects. */
    is_default?: boolean;
}
export interface PriceBooksGetParams {
    /** The price book object's DON. */
    id: string;
}
export interface PriceBooksListParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** The list of price book DONs which are to be aggregated. */
    ids?: string[];
    /** Filter, active vs inactive price book objects. */
    is_active?: boolean;
    /** Filter, default vs non-default price book objects. */
    is_default?: boolean;
    /**
     * The maximum number of price books to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * List of fields to sort the Price book object, by and how to sort
     * them. Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
}
export interface PricingsCountParams {
    /**
     * Filter custom pricings defined for accounts.
     * @example ["ACC-12345"]
     */
    accounts?: string[];
    /** Filter pricings on currency. */
    currency?: string[];
    /** The list of pricing DONs which are to be aggregated. */
    ids?: string[];
    /** Filter, active vs inactive pricing objects. */
    is_active?: boolean;
    /** Filter pricings defined under price books. */
    price_book_ids?: string[];
    /** The list of sku DONs which are to be aggregated. */
    sku_ids?: string[];
}
export interface PricingsGetParams {
    /** The pricing object's DON. */
    id: string;
}
export interface PricingsListParams {
    /**
     * Filter custom pricings defined for accounts.
     * @example ["ACC-12345"]
     */
    accounts?: string[];
    /** Filter pricings on currency. */
    currency?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** The list of pricing DONs which are to be aggregated. */
    ids?: string[];
    /** Filter, active vs inactive pricing objects. */
    is_active?: boolean;
    /**
     * The maximum number of pricings to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Filter pricings defined under price books. */
    price_book_ids?: string[];
    /** The list of sku DONs which are to be aggregated. */
    sku_ids?: string[];
    /**
     * List of fields to sort the pricing object, by and how to sort them.
     * Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
}
export interface ProfilesGetByHandleParams {
    /** The display handle of the profile to get. */
    display_handle: string;
}
export interface ProfilesIsDisplayHandleAvailableParams {
    /** Display handles are used to uniquely identify the users. */
    display_handle: string;
}
export interface GetQuestionAnswerParams {
    /** The ID of the required question-answer. */
    id?: string;
    /**
     * The ID of the required question-answer.
     * @deprecated
     */
    question_answer_id?: string;
}
export interface ListQuestionAnswersParams {
    /**
     * Filters for question-answer belonging to any of the provided
     * articles.
     * @example ["ARTICLE-12345"]
     */
    applies_to_articles?: string[];
    /**
     * Filters for question-answer belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_parts?: string[];
    /**
     * Filters for question-answers created after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_after_date?: string;
    /**
     * Filters for question-answers created before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_before_date?: string;
    /**
     * Filters for question-answers created by any of the provided users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of question-answers to return. The default is
     * '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * Filters for question-answers owned by any of the provided users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /** Filters for status of the question-answers. */
    status?: QuestionAnswerStatus[];
    /**
     * Filters for question-answer with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /** Filter for verified (or unverified) question-answers. */
    verified?: boolean;
}
export interface QuotesCountParams {
    /**
     * The list of Account DONs for which quote objects are to be
     * aggregated.
     * @example ["ACC-12345"]
     */
    account_ids?: string[];
    /** The list of Quote DONs which are to be aggregated. */
    ids?: string[];
    /**
     * The list of Opportunity DONs for which quote objects are to be
     * aggregated.
     * @example ["OPP-12345"]
     */
    opportunity_ids?: string[];
    /** Filter items which are owned by provided owner IDs. */
    owner_ids?: string[];
    /** Filters for records in the provided stage(s) by name. */
    'stage.name'?: string[];
    /** List of IDs of the custom stages which will be used for filtering. */
    'stage.stages'?: string[];
    /** Filters for quote with any of the provided states. */
    state?: string[];
}
export interface QuotesGetParams {
    /** The quote object's DON. */
    id: string;
}
export interface QuotesListParams {
    /**
     * The list of Account DONs for which quote objects are to be
     * aggregated.
     * @example ["ACC-12345"]
     */
    account_ids?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** The list of Quote DONs which are to be aggregated. */
    ids?: string[];
    /**
     * The maximum number of quotes to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * The list of Opportunity DONs for which quote objects are to be
     * aggregated.
     * @example ["OPP-12345"]
     */
    opportunity_ids?: string[];
    /** Filter items which are owned by provided owner IDs. */
    owner_ids?: string[];
    /**
     * List of fields to sort the Quote object, by and how to sort them.
     * Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
    /** Filters for records in the provided stage(s) by name. */
    'stage.name'?: string[];
    /** List of IDs of the custom stages which will be used for filtering. */
    'stage.stages'?: string[];
    /** Filters for quote with any of the provided states. */
    state?: string[];
}
export interface ReactionsListParams {
    /** The name of the emoji to list reactions for. */
    emoji: string;
    /**
     * The ID of the object to list reactions to.
     * @example "don:core:<partition>:devo/<dev-org-id>:ticket/123:timeline_event/<timeline-event-id>"
     */
    object: string;
    /**
     * The cursor to resume iteration from, otherwise if not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of reactors to return.
     * @format int32
     */
    limit?: number;
}
export interface GetRelevantContextParams {
    /** The query for which relevant context is requested. */
    query: string;
    /**
     * List of source types for which relevant context is requested.
     * @maxItems 2
     * @minItems 1
     */
    source_types: RelevantContextRequestRelevantContextSourceType[];
    /**
     * Maximum number of results to return. The default value is 5.
     * @format int32
     * @min 1
     * @max 20
     */
    limit?: number;
}
export interface GetSimilarObjectsParams {
    /** The ID of the object to find similar objects for. */
    id: string;
    /**
     * List of target objects for which similar objects are requested.
     * @maxItems 5
     * @minItems 1
     */
    object_types: SuggestObjectsObjectType[];
    /**
     * Maximum number of results to return for each object type. The default
     * value is 5.
     * @format int32
     * @min 1
     * @max 20
     */
    limit_per_object_type?: number;
}
export interface RecordTemplateGetParams {
    /** The id of the record template. */
    id: string;
}
export interface RecordTemplateListParams {
    /**
     * The creator of the record template.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** The leaf type of the record template. */
    leaf_type?: string[];
    /**
     * The limit of record templates to return.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** The name of the record template. */
    name?: string[];
    /** Fields to sort the record templates by. */
    sort_by?: string[];
    /** The state of the record template. */
    state?: RecordTemplateState[];
    /**
     * The custom schema fragment id of the subtype of the record template.
     * @example ["don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>"]
     */
    subtype?: string[];
}
export interface RevOrgsCommerceDetailsGetParams {
    /**
     * The rev org's DON.
     * @example "REV-AbCdEfGh"
     */
    id?: string;
}
export interface RevOrgsCommerceDetailsListParams {
    /**
     * Filter items which have created date after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_date_after?: string;
    /**
     * Filter items which have created date before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_date_before?: string;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of items to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Filter items with pin code. */
    pin_code?: string;
    /**
     * The list of rev org DONs which are to be aggregated.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org_ids?: string[];
    /**
     * List of fields to sort the items, by and how to sort them. Default is
     * to sort by created_date in descending order.
     */
    sort_by?: string[];
}
export interface RevOrgsCountParams {
    /**
     * Filters by account.
     * @example ["ACC-12345"]
     */
    account?: string[];
    /** The filter operator to be applied on account. */
    account_op?: RevOrgsFiltersAccountOperatorType;
    /** Filters by creator. */
    created_by?: string[];
    /** The filter operator to be applied on created by. */
    created_by_op?: RevObjectTagsOperatorType;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** Array of display names of Rev orgs to be filtered. */
    display_name?: string[];
    /** Array of domain for Rev organizations to be filtered. */
    domain?: string[];
    /** Environment values to be filtered. */
    environment?: OrgEnvironment[];
    /** List of external refs to filter Rev organizations for. */
    external_ref?: string[];
    /** Array of external ref issuers for Rev organizations to be filtered. */
    external_ref_issuer?: string[];
    /** Filters by owners. */
    owned_by?: string[];
    /**
     * Filters by owners.
     * @deprecated
     */
    owned_by_ids?: string[];
    /** The filter operator to be applied on owned by. */
    owned_by_op?: RevObjectTagsOperatorType;
    /** Filter by SLA */
    sla?: string[];
    /** State values to be filtered. */
    state?: OrgState[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    /** The filter operator to be applied on subtype. */
    subtype_op?: SubtypeOpOperatorType;
    /** The filter operator to be applied on tags. */
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    /** The filter operator to be applied on tags. */
    tags_op?: RevObjectTagsOperatorType;
    /** Array of tier for Rev organizations to be filtered. */
    tier?: string[];
    /** Types of Rev organizations to be filtered. */
    type?: RevOrgType[];
}
export interface RevOrgsGetParams {
    /**
     * The ID of account for which default Rev organization is to be
     * fetched.
     * @example "ACC-12345"
     */
    account?: string;
    /**
     * The ID of the required Rev organization.
     * @example "REV-AbCdEfGh"
     */
    id?: string;
}
export interface RevOrgsGroupParams {
    /** The field to group the rev orgs by. */
    group_by: string;
    /**
     * Filters by account.
     * @example ["ACC-12345"]
     */
    account?: string[];
    /** The filter operator to be applied on account. */
    account_op?: RevOrgsFiltersAccountOperatorType;
    /** Filters by creator. */
    created_by?: string[];
    /** The filter operator to be applied on created by. */
    created_by_op?: RevObjectTagsOperatorType;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** Array of display names of Rev orgs to be filtered. */
    display_name?: string[];
    /** Array of domain for Rev organizations to be filtered. */
    domain?: string[];
    /** Environment values to be filtered. */
    environment?: OrgEnvironment[];
    /** List of external refs to filter Rev organizations for. */
    external_ref?: string[];
    /** Array of external ref issuers for Rev organizations to be filtered. */
    external_ref_issuer?: string[];
    /**
     * The maximum number of groups to return. If not set, then the default
     * is '10'.
     * @format int32
     */
    limit?: number;
    /**
     * The maximum number of rev orgs to return for an individual group. If
     * not set, then the default is '50'.
     * @format int32
     */
    limit_per_group?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Filters by owners. */
    owned_by?: string[];
    /**
     * Filters by owners.
     * @deprecated
     */
    owned_by_ids?: string[];
    /** The filter operator to be applied on owned by. */
    owned_by_op?: RevObjectTagsOperatorType;
    /** Filter by SLA */
    sla?: string[];
    /** Fields to sort the rev orgs by. */
    sort_by?: string[];
    /** State values to be filtered. */
    state?: OrgState[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    /** The filter operator to be applied on subtype. */
    subtype_op?: SubtypeOpOperatorType;
    /** The filter operator to be applied on tags. */
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    /** The filter operator to be applied on tags. */
    tags_op?: RevObjectTagsOperatorType;
    /** Array of tier for Rev organizations to be filtered. */
    tier?: string[];
    /** Types of Rev organizations to be filtered. */
    type?: RevOrgType[];
}
export interface RevOrgsListParams {
    /**
     * Filters by account.
     * @example ["ACC-12345"]
     */
    account?: string[];
    /** The filter operator to be applied on account. */
    account_op?: RevOrgsFiltersAccountOperatorType;
    /** Filters by creator. */
    created_by?: string[];
    /** The filter operator to be applied on created by. */
    created_by_op?: RevObjectTagsOperatorType;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** Array of display names of Rev orgs to be filtered. */
    display_name?: string[];
    /** Array of domain for Rev organizations to be filtered. */
    domain?: string[];
    /** Environment values to be filtered. */
    environment?: OrgEnvironment[];
    /** List of external refs to filter Rev organizations for. */
    external_ref?: string[];
    /** Array of external ref issuers for Rev organizations to be filtered. */
    external_ref_issuer?: string[];
    /**
     * The maximum number of Rev organizations to be retrieved per page.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Filters by owners. */
    owned_by?: string[];
    /**
     * Filters by owners.
     * @deprecated
     */
    owned_by_ids?: string[];
    /** The filter operator to be applied on owned by. */
    owned_by_op?: RevObjectTagsOperatorType;
    /** Filter by SLA */
    sla?: string[];
    /**
     * Fields to sort the Rev organizations by and the direction to sort
     * them.
     */
    sort_by?: string[];
    /** State values to be filtered. */
    state?: OrgState[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    /** The filter operator to be applied on subtype. */
    subtype_op?: SubtypeOpOperatorType;
    /** The filter operator to be applied on tags. */
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    /** The filter operator to be applied on tags. */
    tags_op?: RevObjectTagsOperatorType;
    /** Array of tier for Rev organizations to be filtered. */
    tier?: string[];
    /** Types of Rev organizations to be filtered. */
    type?: RevOrgType[];
}
export interface RevUsersListAllParams {
    /**
     * Filters for Rev users belonging to the provided account IDs.
     * @maxItems 1
     * @example ["ACC-12345"]
     */
    account?: string[];
    /** Filters for Rev users that were created by the specified user(s). */
    created_by?: string[];
    /** The filter operator to be applied on created by. */
    created_by_op?: RevObjectTagsOperatorType;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2)
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** List of emails of Rev users to be filtered. */
    email?: string[];
    /** The filter operator to be applied on email. */
    email_op?: RevObjectTagsOperatorType;
    /** List of external refs to filter Rev users for. */
    external_ref?: string[];
    /** List of external ref issuers for Rev users to be filtered. */
    external_ref_issuer?: string[];
    /** The filter operator to be applied on external_ref. */
    external_ref_op?: RevObjectTagsOperatorType;
    /** Value of is_verified field to filter the Rev users. */
    is_verified?: boolean;
    /**
     * The maximum number of Rev users to return per page. The default is
     * '50', the maximum is '100'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** List of phone numbers, in E.164 format, to filter Rev users on. */
    phone_numbers?: string[];
    /** Filters for PLuG availability. */
    plug_availability?: RevUserPlugAvailability[];
    /**
     * Array of display id's of Rev orgs to be filtered.
     * @deprecated
     * @example ["REV-AbCdEfGh"]
     */
    rev_oid?: string[];
    /**
     * List of IDs of Rev organizations to be filtered.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org?: string[];
    /** The filter operator to be applied on rev_org. */
    rev_org_op?: RevUsersFiltersRevOrgOperatorType;
    /** Fields to sort the Rev users by and the direction to sort them. */
    sort_by?: string[];
    /** List of state of Rev users to be filtered. */
    state?: UserState[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    /** The filter operator to be applied on subtype. */
    subtype_op?: SubtypeOpOperatorType;
    /** The filter operator to be applied on tags. */
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    /** The filter operator to be applied on tags. */
    tags_op?: RevObjectTagsOperatorType;
}
export interface RevUsersCountParams {
    /**
     * Filters for Rev users belonging to the provided account IDs.
     * @maxItems 1
     * @example ["ACC-12345"]
     */
    account?: string[];
    /** Filters for Rev users that were created by the specified user(s). */
    created_by?: string[];
    /** The filter operator to be applied on created by. */
    created_by_op?: RevObjectTagsOperatorType;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2)
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** List of emails of Rev users to be filtered. */
    email?: string[];
    /** The filter operator to be applied on email. */
    email_op?: RevObjectTagsOperatorType;
    /** List of external refs to filter Rev users for. */
    external_ref?: string[];
    /** List of external ref issuers for Rev users to be filtered. */
    external_ref_issuer?: string[];
    /** The filter operator to be applied on external_ref. */
    external_ref_op?: RevObjectTagsOperatorType;
    /** Value of is_verified field to filter the Rev users. */
    is_verified?: boolean;
    /** List of phone numbers, in E.164 format, to filter Rev users on. */
    phone_numbers?: string[];
    /** Filters for PLuG availability. */
    plug_availability?: RevUserPlugAvailability[];
    /**
     * List of IDs of Rev organizations to be filtered.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org?: string[];
    /** The filter operator to be applied on rev_org. */
    rev_org_op?: RevUsersFiltersRevOrgOperatorType;
    /** List of state of Rev users to be filtered. */
    state?: UserState[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    /** The filter operator to be applied on subtype. */
    subtype_op?: SubtypeOpOperatorType;
    /** The filter operator to be applied on tags. */
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    /** The filter operator to be applied on tags. */
    tags_op?: RevObjectTagsOperatorType;
}
export interface RevUsersGetParams {
    /** The ID of Rev user to be retrieved. */
    id: string;
}
export interface RevUsersGroupParams {
    /** The field to group the rev users by. */
    group_by: string;
    /**
     * Filters for Rev users belonging to the provided account IDs.
     * @maxItems 1
     * @example ["ACC-12345"]
     */
    account?: string[];
    /** Filters for Rev users that were created by the specified user(s). */
    created_by?: string[];
    /** The filter operator to be applied on created by. */
    created_by_op?: RevObjectTagsOperatorType;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2)
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** List of emails of Rev users to be filtered. */
    email?: string[];
    /** The filter operator to be applied on email. */
    email_op?: RevObjectTagsOperatorType;
    /** List of external refs to filter Rev users for. */
    external_ref?: string[];
    /** List of external ref issuers for Rev users to be filtered. */
    external_ref_issuer?: string[];
    /** The filter operator to be applied on external_ref. */
    external_ref_op?: RevObjectTagsOperatorType;
    /** Value of is_verified field to filter the Rev users. */
    is_verified?: boolean;
    /**
     * The maximum number of groups to return. If not set, then the default
     * is '10'.
     * @format int32
     */
    limit?: number;
    /**
     * The maximum number of rev users to return for an individual group. If
     * not set, then the default is '50'.
     * @format int32
     */
    limit_per_group?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** List of phone numbers, in E.164 format, to filter Rev users on. */
    phone_numbers?: string[];
    /** Filters for PLuG availability. */
    plug_availability?: RevUserPlugAvailability[];
    /** Array of display id's of Rev organizations to be filtered. */
    rev_oid?: string[];
    /**
     * List of IDs of Rev organizations to be filtered.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org?: string[];
    /** The filter operator to be applied on rev_org. */
    rev_org_op?: RevUsersFiltersRevOrgOperatorType;
    /** Fields to sort the Rev users by. */
    sort_by?: string[];
    /** List of state of Rev users to be filtered. */
    state?: UserState[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    /** The filter operator to be applied on subtype. */
    subtype_op?: SubtypeOpOperatorType;
    /** The filter operator to be applied on tags. */
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    /** The filter operator to be applied on tags. */
    tags_op?: RevObjectTagsOperatorType;
}
export interface RevUsersListParams {
    /**
     * Filters for Rev users belonging to the provided account IDs.
     * @maxItems 1
     * @example ["ACC-12345"]
     */
    account?: string[];
    /** Filters for Rev users that were created by the specified user(s). */
    created_by?: string[];
    /** The filter operator to be applied on created by. */
    created_by_op?: RevObjectTagsOperatorType;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * Filters on custom fields. Input will be of the format
     * (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2)
     */
    custom_field_filter?: string[];
    /** Filters for custom fields. */
    custom_fields?: object;
    /** List of emails of Rev users to be filtered. */
    email?: string[];
    /** The filter operator to be applied on email. */
    email_op?: RevObjectTagsOperatorType;
    /** List of external refs to filter Rev users for. */
    external_ref?: string[];
    /** List of external ref issuers for Rev users to be filtered. */
    external_ref_issuer?: string[];
    /** The filter operator to be applied on external_ref. */
    external_ref_op?: RevObjectTagsOperatorType;
    /** Value of is_verified field to filter the Rev users. */
    is_verified?: boolean;
    /**
     * The maximum number of Rev users to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * The ID of Rev organization to list all Rev users of.
     * @deprecated
     * @example "REV-AbCdEfGh"
     */
    org_id?: string;
    /** List of phone numbers, in E.164 format, to filter Rev users on. */
    phone_numbers?: string[];
    /** Filters for PLuG availability. */
    plug_availability?: RevUserPlugAvailability[];
    /**
     * List of IDs of Rev organizations to be filtered.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org?: string[];
    /** The filter operator to be applied on rev_org. */
    rev_org_op?: RevUsersFiltersRevOrgOperatorType;
    /** Fields to sort the Rev users by and the direction to sort them. */
    sort_by?: string[];
    /** List of state of Rev users to be filtered. */
    state?: UserState[];
    /** Subtypes of accounts to be filtered. */
    subtype?: string[];
    /** The filter operator to be applied on subtype. */
    subtype_op?: SubtypeOpOperatorType;
    /** The filter operator to be applied on tags. */
    tag_ids_op?: RevObjectTagsOperatorType;
    /** List of tags to be filtered. */
    tags?: string[];
    /** The filter operator to be applied on tags. */
    tags_op?: RevObjectTagsOperatorType;
}
export interface RewardTransactionsListParams {
    /**
     * The transaction date from which to aggregate reward transaction
     * objects.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    from_transaction_date?: string;
    /**
     * List of fields to sort the reward transaction object, by and how to
     * sort them. Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
    /**
     * The transaction date till which to aggregate reward transaction
     * objects.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    to_transaction_date?: string;
}
export interface RewardsGetParams {
    /** The reward object's DON. */
    id: string;
}
export interface RewardsListParams {
    /**
     * The expiry date from which to aggregate reward objects.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    from_expiry_date?: string;
    /**
     * List of fields to sort the reward object, by and how to sort them.
     * Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
    /**
     * The expiry date till which to aggregate reward objects.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    to_expiry_date?: string;
}
export interface RolesGetParams {
    /** ID for the role. */
    id: string;
}
export interface RolesListParams {
    /** Whether to fetch roles that target all subtypes of the leaf type. */
    include_all_subtypes?: boolean;
    /** Whether to fetch default or custom roles. */
    is_default?: boolean;
    /** Filter the object member type roles. */
    is_object_member_type?: boolean;
    /**
     * Filters roles by principal.
     * @example "DEV-AbCdEfGh"
     */
    principal?: string;
    /** Filter roles by role type(s). */
    role_type?: RoleType[];
    /** Filter roles by target object type(s). */
    target?: RoleTarget[];
    /** Filter roles by subtype(s). */
    target_subtype?: string[];
    /** The filter operator to be applied on target subtype. */
    target_subtype_op?: RolesFilterTargetSubtypeOperatorType;
}
export interface PrincipalsListParams {
    role_id: string;
    /**  Required if any filter.* fields are provided. */
    'filter.principal_types'?: PrincipalsListFilterPrinicipalTypeEnum[];
}
export interface RuleNodesGetParams {
    /** The display ID of the requested rule node. */
    display_id?: string;
    /** The ID of the requested rule node. */
    id?: string;
}
export interface RuleNodesListParams {
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'created_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'created_date.before'?: string;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** Filters on id of rule node. */
    display_ids?: string[];
    /** Filters on id of rule node. */
    ids?: string[];
    /**
     * Filters for rule nodes that contain at least one of the specified
     * labels.
     */
    labels?: string[];
    /**
     * The maximum number of rule nodes to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.before'?: string;
    /** Fields to sort the rule nodes by and the direction to sort them. */
    sort_by?: string[];
    /** Filters only active trigger rule nodes. */
    'trigger_filter.active'?: boolean;
    /** Filters on events of trigger rule nodes. */
    'trigger_filter.events'?: string[];
    /** Filters on type of rule node. */
    types?: string[];
}
export interface RulesGetParams {
    /** The ID of the requested rule. */
    id: string;
}
export interface RulesListParams {
    /**
     * Filters created by user for rule.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'created_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'created_date.before'?: string;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of rules to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.before'?: string;
    /** Fields to sort the rules by and the direction to sort them. */
    sort_by?: string[];
    /** Filters on state for rule. */
    states?: string[];
    /** Filters on trigger display id for rule. */
    trigger_display_ids?: string[];
    /** Filters on trigger id for rule. */
    trigger_ids?: string[];
}
export interface AggregatedSchemaGetParams {
    /** The list of custom schema fragment DONs which are to be aggregated. */
    custom_schema_fragment_ids: string[];
    /**
     * The leaf type. Used for inferring the default stage diagram and
     * tenant fragment ID.
     */
    leaf_type?: string;
    /** The default value for this field. */
    'per_object_schema.default_value'?: object;
    /** Description of the field. */
    'per_object_schema.description'?: string;
    /** Composite type. */
    'per_object_schema.devrev_composite_type'?: string;
    /** Allowed values for an enum field type. */
    'per_object_schema.devrev_enum'?: string[];
    /** DevRev field type. */
    'per_object_schema.devrev_field_type'?: string;
    /** Object ID types. */
    'per_object_schema.devrev_id_type'?: string[];
    /** Gateway api name of the field. */
    'per_object_schema.gateway.api_name'?: string;
    /** Whether this field is filterable, groupable and sortable. */
    'per_object_schema.is_filterable'?: boolean;
    /** Whether this field is immutable or not. */
    'per_object_schema.is_immutable'?: boolean;
    /** Whether a stock unified enum is overridable. */
    'per_object_schema.is_overridable'?: boolean;
    /** Whether this field can hold PII. */
    'per_object_schema.is_pii'?: boolean;
    /** Whether this field is required or not. */
    'per_object_schema.is_required'?: boolean;
    /**
     * Whether this field can hold PII or sensitive information that should
     * not be logged.
     */
    'per_object_schema.is_sensitive'?: boolean;
    /** Whether this field is a system field or not. */
    'per_object_schema.is_system'?: boolean;
    /** Whether users are allowed to write MFZ caveats with this field. */
    'per_object_schema.mfz.caveats_permitted'?: boolean;
    /** Name of the field. */
    'per_object_schema.name'?: string;
    /** Oasis name of the field. */
    'per_object_schema.oasis.name'?: string;
    /** Oasis field type. */
    'per_object_schema.oasis.oasis_field_type'?: string;
    /** Field origin type. */
    'per_object_schema.origin'?: string;
    /**
     * The immutable id of the enum value. Required if any
     * per_object_schema.uenum_values.* fields are provided.
     * @format int64
     */
    'per_object_schema.uenum_values.id'?: number;
    /** True if this value is deprecated. */
    'per_object_schema.uenum_values.is_deprecated'?: boolean;
    /**
     * The human readable name of the enum value. Required if any
     * per_object_schema.uenum_values.* fields are provided.
     */
    'per_object_schema.uenum_values.label'?: string;
    /**
     * The order value of the enum. Required if any
     * per_object_schema.uenum_values.* fields are provided.
     * @format int64
     */
    'per_object_schema.uenum_values.ordinal'?: number;
    /** Tooltip shown in the UI for this value. */
    'per_object_schema.uenum_values.tooltip'?: string;
    /** Allowed values of the field. */
    'per_object_schema.ui.allowed_values'?: string[];
    /** Whether field is hidden in the UI create view. */
    'per_object_schema.ui.create_view.is_hidden'?: boolean;
    /** Fields on which this field depends on. */
    'per_object_schema.ui.dependent_fields'?: string[];
    /** Whether the field is hidden in the UI detail view. */
    'per_object_schema.ui.detail_view.is_hidden'?: boolean;
    /** enum group key. */
    'per_object_schema.ui.devrev_enum_groups.group_key'?: string;
    /** true if header is visible. */
    'per_object_schema.ui.devrev_enum_groups.is_header_visible'?: boolean;
    /** label of the field. */
    'per_object_schema.ui.devrev_enum_groups.label'?: string;
    /** The display name of the field. */
    'per_object_schema.ui.display_name'?: string;
    /** Whether field is hidden in the UI filter view. */
    'per_object_schema.ui.filter_view.is_hidden'?: boolean;
    /** An optional group name for the field. */
    'per_object_schema.ui.group_name'?: string;
    /** Whether the field is active in the UI detail view. */
    'per_object_schema.ui.is_active_in_detail_view'?: boolean;
    /** Whether stock field is rendered at top. */
    'per_object_schema.ui.is_base_field'?: boolean;
    /** Whether the field supports bulk action. */
    'per_object_schema.ui.is_bulk_action_enabled'?: boolean;
    /** Indicates if the field holds a currency value in USD. */
    'per_object_schema.ui.is_currency_field'?: boolean;
    /** Whether the field is groupable in the UI. */
    'per_object_schema.ui.is_groupable'?: boolean;
    /** Whether the field is hidden in the UI. */
    'per_object_schema.ui.is_hidden'?: boolean;
    /** Whether the field is hidden in the UI during creation. */
    'per_object_schema.ui.is_hidden_during_create'?: boolean;
    /** Whether the field is read-only in the UI. */
    'per_object_schema.ui.is_read_only'?: boolean;
    /** Whether the field is shown in the UI summary view. */
    'per_object_schema.ui.is_shown_in_summary'?: boolean;
    /** Whether the field is sortable in the UI. */
    'per_object_schema.ui.is_sortable'?: boolean;
    /** Whether the field is hidden in the UI list view. */
    'per_object_schema.ui.list_view.is_hidden'?: boolean;
    /**
     * Order in which field is shown.
     * @format int32
     */
    'per_object_schema.ui.order'?: number;
    /** A placeholder for the field. */
    'per_object_schema.ui.placeholder'?: string;
    /** Whether field is hidden in the UI summary view. */
    'per_object_schema.ui.summary_view.is_hidden'?: boolean;
    /** Tooltip for the field. */
    'per_object_schema.ui.tooltip'?: string;
    /** Unit of measurment. */
    'per_object_schema.ui.unit'?: string;
    /** string contains. */
    'per_object_schema.validation.contains'?: string;
    /** disables validations for this field. */
    'per_object_schema.validation.disabled'?: boolean;
    /**
     * exact array length.
     * @format int32
     */
    'per_object_schema.validation.eq_items'?: number;
    /**
     * exact string length.
     * @format int32
     */
    'per_object_schema.validation.eq_len'?: number;
    /**
     * int must be greater than this.
     * @format int32
     */
    'per_object_schema.validation.gt'?: number;
    /**
     * int must be greater or equal than this.
     * @format int32
     */
    'per_object_schema.validation.gte'?: number;
    /**
     * int must be less than this.
     * @format int32
     */
    'per_object_schema.validation.lt'?: number;
    /**
     * int must be less or equal than this.
     * @format int32
     */
    'per_object_schema.validation.lte'?: number;
    /**
     * maximum array length.
     * @format int32
     */
    'per_object_schema.validation.max_items'?: number;
    /**
     * maximum string length.
     * @format int32
     */
    'per_object_schema.validation.max_len'?: number;
    /**
     * minimum array length.
     * @format int32
     */
    'per_object_schema.validation.min_items'?: number;
    /**
     * minimum string length.
     * @format int32
     */
    'per_object_schema.validation.min_len'?: number;
    /** string pattern (re). */
    'per_object_schema.validation.pattern'?: string;
    /** string prefix. */
    'per_object_schema.validation.prefix'?: string;
    /** string suffix. */
    'per_object_schema.validation.suffix'?: string;
    /** The stock schema fragment which is to be aggregated. */
    stock_schema_fragment_id?: string;
}
export interface AggregatedSchemaGetPrivateParams {
    /** The list of custom schema fragment DONs which are to be aggregated. */
    custom_schema_fragment_ids: string[];
    /** The default value for this field. */
    'per_object_schema.default_value'?: object;
    /** Description of the field. */
    'per_object_schema.description'?: string;
    /** Composite type. */
    'per_object_schema.devrev_composite_type'?: string;
    /** Allowed values for an enum field type. */
    'per_object_schema.devrev_enum'?: string[];
    /** DevRev field type. */
    'per_object_schema.devrev_field_type'?: string;
    /** Object ID types. */
    'per_object_schema.devrev_id_type'?: string[];
    /** Gateway api name of the field. */
    'per_object_schema.gateway.api_name'?: string;
    /** Whether this field is filterable, groupable and sortable. */
    'per_object_schema.is_filterable'?: boolean;
    /** Whether this field is immutable or not. */
    'per_object_schema.is_immutable'?: boolean;
    /** Whether a stock unified enum is overridable. */
    'per_object_schema.is_overridable'?: boolean;
    /** Whether this field can hold PII. */
    'per_object_schema.is_pii'?: boolean;
    /** Whether this field is required or not. */
    'per_object_schema.is_required'?: boolean;
    /**
     * Whether this field can hold PII or sensitive information that should
     * not be logged.
     */
    'per_object_schema.is_sensitive'?: boolean;
    /** Whether this field is a system field or not. */
    'per_object_schema.is_system'?: boolean;
    /** Whether users are allowed to write MFZ caveats with this field. */
    'per_object_schema.mfz.caveats_permitted'?: boolean;
    /** Name of the field. */
    'per_object_schema.name'?: string;
    /** Oasis name of the field. */
    'per_object_schema.oasis.name'?: string;
    /** Oasis field type. */
    'per_object_schema.oasis.oasis_field_type'?: string;
    /** Field origin type. */
    'per_object_schema.origin'?: string;
    /**
     * The immutable id of the enum value. Required if any
     * per_object_schema.uenum_values.* fields are provided.
     * @format int64
     */
    'per_object_schema.uenum_values.id'?: number;
    /** True if this value is deprecated. */
    'per_object_schema.uenum_values.is_deprecated'?: boolean;
    /**
     * The human readable name of the enum value. Required if any
     * per_object_schema.uenum_values.* fields are provided.
     */
    'per_object_schema.uenum_values.label'?: string;
    /**
     * The order value of the enum. Required if any
     * per_object_schema.uenum_values.* fields are provided.
     * @format int64
     */
    'per_object_schema.uenum_values.ordinal'?: number;
    /** Tooltip shown in the UI for this value. */
    'per_object_schema.uenum_values.tooltip'?: string;
    /** Allowed values of the field. */
    'per_object_schema.ui.allowed_values'?: string[];
    /** Whether field is hidden in the UI create view. */
    'per_object_schema.ui.create_view.is_hidden'?: boolean;
    /** Fields on which this field depends on. */
    'per_object_schema.ui.dependent_fields'?: string[];
    /** Whether the field is hidden in the UI detail view. */
    'per_object_schema.ui.detail_view.is_hidden'?: boolean;
    /** enum group key. */
    'per_object_schema.ui.devrev_enum_groups.group_key'?: string;
    /** true if header is visible. */
    'per_object_schema.ui.devrev_enum_groups.is_header_visible'?: boolean;
    /** label of the field. */
    'per_object_schema.ui.devrev_enum_groups.label'?: string;
    /** The display name of the field. */
    'per_object_schema.ui.display_name'?: string;
    /** Whether field is hidden in the UI filter view. */
    'per_object_schema.ui.filter_view.is_hidden'?: boolean;
    /** An optional group name for the field. */
    'per_object_schema.ui.group_name'?: string;
    /** Whether the field is active in the UI detail view. */
    'per_object_schema.ui.is_active_in_detail_view'?: boolean;
    /** Whether stock field is rendered at top. */
    'per_object_schema.ui.is_base_field'?: boolean;
    /** Whether the field supports bulk action. */
    'per_object_schema.ui.is_bulk_action_enabled'?: boolean;
    /** Indicates if the field holds a currency value in USD. */
    'per_object_schema.ui.is_currency_field'?: boolean;
    /** Whether the field is groupable in the UI. */
    'per_object_schema.ui.is_groupable'?: boolean;
    /** Whether the field is hidden in the UI. */
    'per_object_schema.ui.is_hidden'?: boolean;
    /** Whether the field is hidden in the UI during creation. */
    'per_object_schema.ui.is_hidden_during_create'?: boolean;
    /** Whether the field is read-only in the UI. */
    'per_object_schema.ui.is_read_only'?: boolean;
    /** Whether the field is shown in the UI summary view. */
    'per_object_schema.ui.is_shown_in_summary'?: boolean;
    /** Whether the field is sortable in the UI. */
    'per_object_schema.ui.is_sortable'?: boolean;
    /** Whether the field is hidden in the UI list view. */
    'per_object_schema.ui.list_view.is_hidden'?: boolean;
    /**
     * Order in which field is shown.
     * @format int32
     */
    'per_object_schema.ui.order'?: number;
    /** A placeholder for the field. */
    'per_object_schema.ui.placeholder'?: string;
    /** Whether field is hidden in the UI summary view. */
    'per_object_schema.ui.summary_view.is_hidden'?: boolean;
    /** Tooltip for the field. */
    'per_object_schema.ui.tooltip'?: string;
    /** Unit of measurment. */
    'per_object_schema.ui.unit'?: string;
    /** string contains. */
    'per_object_schema.validation.contains'?: string;
    /** disables validations for this field. */
    'per_object_schema.validation.disabled'?: boolean;
    /**
     * exact array length.
     * @format int32
     */
    'per_object_schema.validation.eq_items'?: number;
    /**
     * exact string length.
     * @format int32
     */
    'per_object_schema.validation.eq_len'?: number;
    /**
     * int must be greater than this.
     * @format int32
     */
    'per_object_schema.validation.gt'?: number;
    /**
     * int must be greater or equal than this.
     * @format int32
     */
    'per_object_schema.validation.gte'?: number;
    /**
     * int must be less than this.
     * @format int32
     */
    'per_object_schema.validation.lt'?: number;
    /**
     * int must be less or equal than this.
     * @format int32
     */
    'per_object_schema.validation.lte'?: number;
    /**
     * maximum array length.
     * @format int32
     */
    'per_object_schema.validation.max_items'?: number;
    /**
     * maximum string length.
     * @format int32
     */
    'per_object_schema.validation.max_len'?: number;
    /**
     * minimum array length.
     * @format int32
     */
    'per_object_schema.validation.min_items'?: number;
    /**
     * minimum string length.
     * @format int32
     */
    'per_object_schema.validation.min_len'?: number;
    /** string pattern (re). */
    'per_object_schema.validation.pattern'?: string;
    /** string prefix. */
    'per_object_schema.validation.prefix'?: string;
    /** string suffix. */
    'per_object_schema.validation.suffix'?: string;
    /** The stock schema fragment which is to be aggregated. */
    stock_schema_fragment_id?: string;
}
export interface CustomSchemaFragmentsGetParams {
    /** The ID of the custom schema fragment. */
    id: string;
}
export interface CustomSchemaFragmentsGetPrivateParams {
    /** The ID of the custom schema fragment. */
    id: string;
}
export interface CustomSchemaFragmentsListParams {
    /** The list of app names. */
    app?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** Whether only deprecated fragments should be filtered. */
    deprecated?: boolean;
    /** Whether the leaf type corresponds to a custom object */
    is_custom_leaf_type?: boolean;
    /** The list of leaf types. */
    leaf_type?: string[];
    /**
     * The maximum number of items.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * List of fields which are not required in the payload and can be
     * pruned away.
     */
    prune?: CustomSchemaFragmentsListRequestPrune[];
    /** The list of fields to sort the items by and how to sort them. */
    sort_by?: string[];
    /** The list of subtypes. */
    subtype?: string[];
    /** Filters for custom schema fragment of the provided types. */
    types?: CustomSchemaFragmentType[];
}
export interface CustomSchemaFragmentsListPrivateParams {
    /** The list of app names. */
    app?: string[];
    /**
     * The cursor to resume iteration from, otherwise if not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** Whether only deprecated fragments should be filtered. */
    deprecated?: boolean;
    /** The list of leaf types. */
    leaf_type?: string[];
    /**
     * The maximum number of items.
     * @format int32
     */
    limit?: number;
    /** The list of fields to sort the items by and how to sort them. */
    sort_by?: string[];
    /** The list of subtypes. */
    subtype?: string[];
    /** Filters for custom schema fragment of the provided types. */
    types?: CustomSchemaFragmentPrivateType[];
}
export interface StockSchemaFragmentsGetParams {
    /** The ID of the stock schema fragment. */
    id?: string;
    /** The leaf type this fragment applies to. */
    leaf_type?: string;
}
export interface StockSchemaFragmentsGetPrivateParams {
    /** The ID of the stock schema fragment. */
    id?: string;
    /** The leaf type this fragment applies to. */
    leaf_type?: string;
}
export interface StockSchemaFragmentsListParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * Filter preset to specify whether to filter only customization enabled
     * leaf types.
     */
    filter_preset?: StockSchemaFragmentsListRequestFilterPreset;
    /** The list of leaf types. */
    leaf_type?: string[];
    /**
     * The maximum number of items.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * List of fields which are not required in the payload and can be
     * pruned away.
     */
    prune?: StockSchemaFragmentsListRequestPrune[];
    /** The list of fields to sort the items by and how to sort them. */
    sort_by?: string[];
}
export interface StockSchemaFragmentsListPrivateParams {
    /**
     * The cursor to resume iteration from, otherwise if not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** The list of leaf types. */
    leaf_type?: string[];
    /**
     * The maximum number of items.
     * @format int32
     */
    limit?: number;
    /** The list of fields to sort the items by and how to sort them. */
    sort_by?: string[];
}
export interface SubtypesListParams {
    /**
     * Leaf type for which subtypes are required.
     * @deprecated
     */
    leaf_type?: string;
    /** List of leaf types for which subtypes are required. */
    leaf_types?: string[];
}
export interface ScoresGetParams {
    /** ID of the score to get. */
    id: string;
}
export interface SearchArticlesParams {
    /** The query string. */
    query: string;
    /** Whether to include an answer along with the search results. */
    include_answer?: boolean;
    /**
     * The maximum number of search results to return. The default is '5'.
     * @format int32
     */
    limit?: number;
}
export interface SearchCoreParams {
    /**
     * The query string. Search query language:
     * https://docs.devrev.ai/product/search#fields
     */
    query: string;
    /**
     * The cursor from where to begin iteration. Start from beginning if not
     * provided.
     */
    cursor?: string;
    /**
     * The maximum number of items to return in a page. The default is '10'.
     * @format int32
     */
    limit?: number;
    /** The namespaces to search in. */
    namespaces?: SearchNamespace[];
    /**
     * Filters for items that are associated with any of the provided Rev
     * organizations.
     * @example ["REV-AbCdEfGh"]
     */
    rev_orgs?: string[];
    /**
     * The property on which to sort the search results. The default is
     * RELEVANCE.
     */
    sort_by?: SearchSortByParam;
    /** Sorting order. The default is DESCENDING. */
    sort_order?: SearchSortOrderParam;
}
export interface SearchHybridParams {
    /** The hybrid namespace to search in. */
    namespace: SearchHybridNamespace;
    /**
     * The query string.
     * @minLength 1
     * @maxLength 400
     */
    query: string;
    /**
     * The maximum number of items to return in a page. The default is '10'.
     * @format int32
     * @min 0
     * @max 50
     */
    limit?: number;
    /**
     * The weightage for semantic search. Values between 0 and 1 are
     * accepted.
     * @format float
     * @min 0
     * @max 1
     */
    semantic_weight?: number;
}
export interface SearchSuggestParams {
    /** The query string. */
    query: string;
    /**
     * The cursor from where to begin iteration. Start from beginning if not
     * provided.
     */
    cursor?: string;
    /**
     * The maximum number of items to return in a page. The default is '10'.
     * @format int32
     */
    limit?: number;
    /** The namespaces to search in. */
    namespaces?: SearchNamespace[];
    /**
     * Filters for items that are associated with any of the provided Rev
     * organizations.
     * @example ["REV-AbCdEfGh"]
     */
    rev_orgs?: string[];
    /**
     * The property on which to sort the search results. The default is
     * RELEVANCE.
     */
    sort_by?: SearchSortByParam;
    /** Sorting order. The default is DESCENDING. */
    sort_order?: SearchSortOrderParam;
}
export interface SearchTypeaheadParams {
    /** The fields to search on. */
    fields: string[];
    /** The namespaces to search in. */
    namespaces: SearchNamespace[];
    /** The query string. */
    query: string;
    /**
     * The cursor from where to begin iteration. Start from beginning if not
     * provided.
     */
    cursor?: string;
    /**
     * The maximum number of items to return in a page. The default is '10'.
     * @format int32
     */
    limit?: number;
    /**
     * Filters for items that are associated with any of the provided Rev
     * organizations.
     * @example ["REV-AbCdEfGh"]
     */
    rev_orgs?: string[];
    /**
     * The property on which to sort the search results. The default is
     * RELEVANCE.
     */
    sort_by?: SearchSortByParam;
    /** Sorting order. The default is DESCENDING. */
    sort_order?: SearchSortOrderParam;
}
export interface ServiceAccountsGetParams {
    /** The ID of the requested service account. */
    id: string;
}
export interface ServiceAccountsKeyringsGetParams {
    /** The ID of the keyring. */
    key_id: string;
    /** The ID corresponding to the requested keyring. */
    service_account_id: string;
}
export interface ServiceAccountsListParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of service accounts to return. The default is
     * '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
}
export interface ServicePlansCountParams {
    /**
     * Filter service plans by account.
     * @example ["ACC-12345"]
     */
    account_ids?: string[];
    /** The list of service plan DONs which are to be aggregated. */
    ids?: string[];
    /**
     * The list of rev org DONs which are to be aggregated.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org_ids?: string[];
    /** The list of states which are to be aggregated. */
    states?: string[];
}
export interface ServicePlansGetParams {
    /** The service plan's DON. */
    id: string;
}
export interface ServicePlansGetCompatibleSkusParams {
    /** The service plan's DON. */
    id?: string;
    /**
     * The product ID for which to get the compatible SKUs.
     * @example "PROD-12345"
     */
    product_id?: string;
}
export interface ServicePlansListParams {
    /**
     * Filter service plans by account.
     * @example ["ACC-12345"]
     */
    account_ids?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** The list of service plan DONs which are to be aggregated. */
    ids?: string[];
    /**
     * The maximum number of service plans to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * The list of rev org DONs which are to be aggregated.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org_ids?: string[];
    /**
     * List of fields to sort the service plan object, by and how to sort
     * them. Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
    /** The list of states which are to be aggregated. */
    states?: string[];
}
export interface SkuRulesGetParams {
    /** The sku rule's DON */
    id: string;
}
export interface SkuRulesListParams {
    /** The list of allowed sku names which are to be aggregated. */
    allowed_sku_names?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** The list of sku rule DONs which are to be aggregated. */
    ids?: string[];
    /**
     * The maximum number of sku rules to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * The list of product DONs which are to be aggregated.
     * @example ["PROD-12345"]
     */
    product_ids?: string[];
    /**
     * List of fields to sort the sku rules, by and how to sort them.
     * Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
}
export interface SkusCountParams {
    /** The list of SKU DONs which are to be aggregated. */
    ids?: string[];
    /** The list of SKU names which are to be aggregated. */
    names?: string[];
    /**
     * The list of product DONs which are to be aggregated.
     * @example ["PROD-12345"]
     */
    product_ids?: string[];
    /**
     * The list of rev org DONs which are to be aggregated.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org_ids?: string[];
    /** The list of SKU types which are to be aggregated. */
    sku_types?: SkuType[];
    /** The list of SKU versions which are to be aggregated. */
    sku_versions?: number[];
    /** The list of SKU states which are to be aggregated. */
    states?: SkuState[];
    /** Filter skus by uom. */
    uom_ids?: string[];
}
export interface SkusGetParams {
    /** The SKU object's DON. */
    id: string;
}
export interface SkusListParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** The list of SKU DONs which are to be aggregated. */
    ids?: string[];
    /**
     * The maximum number of SKUs to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** The list of SKU names which are to be aggregated. */
    names?: string[];
    /**
     * The list of product DONs which are to be aggregated.
     * @example ["PROD-12345"]
     */
    product_ids?: string[];
    /**
     * The list of rev org DONs which are to be aggregated.
     * @example ["REV-AbCdEfGh"]
     */
    rev_org_ids?: string[];
    /** The list of SKU types which are to be aggregated. */
    sku_types?: SkuType[];
    /** The list of SKU versions which are to be aggregated. */
    sku_versions?: number[];
    /**
     * List of fields to sort the SKU object, by and how to sort them.
     * Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
    /** The list of SKU states which are to be aggregated. */
    states?: SkuState[];
    /** Filter skus by uom. */
    uom_ids?: string[];
}
export interface SlaAssignmentRulesGetParams {
    /** SLA assignment rule ID. */
    id: string;
}
export interface SlaAssignmentRulesListParams {
    /**
     * Filters to assignment rules created by the specified user(s).
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * Maximum number of SLA assignment rules returned in a page. Default is
     * 50.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Filters to assignment rules created for the specified SLA(s). */
    sla?: string[];
    /** Fields and direction by which to sort the SLA assignment rules. */
    sort_by?: string[];
}
export interface SlaTrackersGetParams {
    /** The ID of the SLA tracker to get. */
    id: string;
}
export interface SlasGetParams {
    /** The ID of the SLA to get. */
    id: string;
}
export interface SlasListParams {
    /** The object types the SLA applies to. */
    applies_to?: SlaAppliesTo[];
    /**
     * The Filter operator to be applied on the applies to object types
     * filter.
     */
    applies_to_op?: SlasFilterAppliesToOperatorType;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of SLAs to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** The SLA types the filter matches. */
    sla_type?: SlaType[];
    /** Fields to sort the SLAs by and the direction to sort them. */
    sort_by?: string[];
    /** The SLA statuses the filter matches. */
    status?: SlaStatus[];
}
export interface ListSnapComponentsParams {
    /**
     * Filters for snap component created after the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_after_date?: string;
    /**
     * Filters for snap component created before the timestamp provided.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_before_date?: string;
    /**
     * Filters for snap component created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by_ids?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * Ordered list of snap component ids such that the response is sorted
     * by ids from this set.
     */
    include_snap_component_ids?: string[];
    /**
     * The maximum number of snap components profiles to return. If not set,
     * then the default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * Filters for snap component modified after the provided timestamp.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    modified_after_date?: string;
    /**
     * Filters for snap component modified before the provided timestamp.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    modified_before_date?: string;
    /** Filters for snap components with any of these names. */
    name?: string[];
    /**
     * Fields to sort the snap components by and the direction to sort them.
     * This is used only if
     */
    sort_by?: string[];
}
export interface SnapInPackagesGetParams {
    /** The ID of the snap-in package to get. */
    id?: string;
    /** The slug of the snap-in package to get. */
    slug?: string;
}
export interface SnapInPackagesListParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of snap-in packages to return. The default is
     * '50', the maximum is '100'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * Fields to sort the snap-in packages by and the direction to sort
     * them.
     */
    sort_by?: string[];
}
export interface SnapInPackagesLogsFetchParams {
    /** Cursor for set of logs. */
    cursor?: string;
    /**
     * Exclude the specified values instead of (default behaviour) including
     * them.
     */
    'filters.dev_org.exclude'?: boolean;
    /**
     * The values to filter on. If empty, filter is ignored. "" is a valid
     * value meaning field is not set. Required if any filters.dev_org.*
     * fields are provided.
     */
    'filters.dev_org.values'?: string[];
    /**
     * Exclude the specified values instead of (default behaviour) including
     * them.
     */
    'filters.event_id.exclude'?: boolean;
    /**
     * The values to filter on. If empty, filter is ignored. "" is a valid
     * value meaning field is not set. Required if any filters.event_id.*
     * fields are provided.
     */
    'filters.event_id.values'?: string[];
    /**
     * Exclude the specified values instead of (default behaviour) including
     * them.
     */
    'filters.event_type.exclude'?: boolean;
    /**
     * The values to filter on. If empty, filter is ignored. "" is a valid
     * value meaning field is not set. Required if any filters.event_type.*
     * fields are provided.
     */
    'filters.event_type.values'?: string[];
    /**
     * Exclude the specified values instead of (default behaviour) including
     * them.
     */
    'filters.level.exclude'?: boolean;
    /**
     * List of values to include/exclude. Required if any filters.level.*
     * fields are provided.
     */
    'filters.level.values'?: SnapInPackagesLogLevelFilterLogLevelEnum[];
    /**
     * Exclude the specified values instead of (default behaviour) including
     * them.
     */
    'filters.process.exclude'?: boolean;
    /**
     * List of values to include/exclude. Required if any filters.process.*
     * fields are provided.
     */
    'filters.process.values'?: SnapInPackagesLogProcessFilterLogProcessEnum[];
    /**
     * Exclude the specified values instead of (default behaviour) including
     * them.
     */
    'filters.snap_in_package.exclude'?: boolean;
    /**
     * The values to filter on. If empty, filter is ignored. "" is a valid
     * value meaning field is not set. Required if any
     * filters.snap_in_package.* fields are provided.
     */
    'filters.snap_in_package.values'?: string[];
    /**
     * Exclude the specified values instead of (default behaviour) including
     * them.
     */
    'filters.snap_in_version.exclude'?: boolean;
    /**
     * The values to filter on. If empty, filter is ignored. "" is a valid
     * value meaning field is not set. Required if any
     * filters.snap_in_version.* fields are provided.
     */
    'filters.snap_in_version.values'?: string[];
    /**
     * Exclude the specified values instead of (default behaviour) including
     * them.
     */
    'filters.source_name.exclude'?: boolean;
    /**
     * The values to filter on. If empty, filter is ignored. "" is a valid
     * value meaning field is not set. Required if any filters.source_name.*
     * fields are provided.
     */
    'filters.source_name.values'?: string[];
    /**
     * Exclude the specified values instead of (default behaviour) including
     * them.
     */
    'filters.source_type.exclude'?: boolean;
    /**
     * List of values to include/exclude. Required if any
     * filters.source_type.* fields are provided.
     */
    'filters.source_type.values'?: SnapInPackagesLogSourceTypeFilterLogSourceTypeEnum[];
    /**
     * Exclude the specified values instead of (default behaviour) including
     * them.
     */
    'filters.target.exclude'?: boolean;
    /**
     * List of values to include/exclude. Required if any filters.target.*
     * fields are provided.
     */
    'filters.target.values'?: SnapInPackagesLogTargetFilterLogTargetEnum[];
    /**
     * Number of logs to fetch. Defaults to 50.
     * @format int64
     */
    limit?: number;
    /** Query for message text. */
    query?: string;
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'timestamp.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'timestamp.before'?: string;
}
export interface SnapInPreferencesGetParams {
    /** The ID of the snap-in to get preferences for. */
    snap_in_id: string;
}
export interface SnapInVersionsGetParams {
    /** The ID of the snap-in version to get. */
    id: string;
}
export interface SnapInVersionsListParams {
    /**
     * Filters for snap-in-versions created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'created_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'created_date.before'?: string;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of snap-in versions to return. The default is
     * '50', the maximum is '100'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * Filters for objects created after the provided timestamp (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.after'?: string;
    /**
     * Filters for objects created before the provided timestamp
     * (inclusive).
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'modified_date.before'?: string;
    /** Filters for snap-in-versions part of any of these packages. */
    snap_in_package?: string[];
    /**
     * Fields to sort the snap-in versions by and the direction to sort
     * them.
     */
    sort_by?: string[];
    /** Filters for snap-in-versions in any of these states. */
    state?: SnapInVersionState[];
}
export interface SnapInsGetParams {
    /** The ID of the snap-in to get. */
    id: string;
}
export interface SnapInsListParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of snap-ins to return. The default is '50', the
     * maximum is '100'.
     * @format int32
     */
    limit?: number;
    /** The marketplace to filter by. */
    'marketplace_item.marketplace'?: string;
    /** The marketplace item slug to filter by. */
    'marketplace_item.marketplace_item_slug'?: string;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Filter for service account associated with snap-in. */
    service_account_id?: string[];
    /** Fields to sort the snap-ins by and the direction to sort them. */
    sort_by?: string[];
}
export interface SnapInsResourcesParams {
    /** The ID of the snap-in to get resources for. */
    id: string;
    /** The ID of the user to get resources for. */
    user: string;
}
export interface SnapWidgetsGetParams {
    /**
     * The snap widget object ID.
     * @example "don:core:<partition>:devo/<dev-org-id>:snap_widget/<snap-widget-id>"
     */
    id: string;
}
export interface SnapWidgetsListParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The message_id of the email. Required if any email_preview.* fields
     * are provided.
     */
    'email_preview.message_id'?: string[];
    /**
     * The maximum number of snap widget objects to return. The default is
     * '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Logical grouping of snap widgets. */
    namespace?: SnapWidgetNamespace[];
    /**
     * Fields to sort the snap widget objects by and the direction to sort
     * them.
     */
    sort_by?: string[];
    /** The status of the snap widget. */
    status?: SnapWidgetStatus[];
}
export interface SocketsConnectParams {
    /** The ID for the open socket to connect to. */
    id: string;
}
export interface StageDiagramsGetParams {
    /** The ID of the stage diagram to get. */
    id?: string;
    /**
     * The leaf type. Should be specified to retrieve the default stage
     * diagram for the leaf type. If not provided, then id is used.
     */
    leaf_type?: string;
}
export interface StageDiagramsListParams {
    /**
     * The cursor to resume iteration from, otherwise if not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** The list of leaf types. */
    leaf_type?: string[];
    /**
     * The maximum number of items.
     * @format int32
     */
    limit?: number;
    /** The list of stage diagram names. */
    name?: string[];
    /** The list of fields to sort the items by and how to sort them. */
    sort_by?: string[];
}
export interface CustomStagesGetParams {
    /** The ID of the custom stage to get. */
    id: string;
}
export interface CustomStagesListParams {
    /**
     * The cursor to resume iteration from, otherwise if not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of items.
     * @format int32
     */
    limit?: number;
    /** The list of marketplace ref. */
    marketplace_ref?: string[];
    /** The list of stage names. */
    name?: string[];
    /** The list of stage ordinals. */
    ordinal?: number[];
    /** The list of fields to sort the items by and how to sort them. */
    sort_by?: string[];
    /** The list of state IDs. */
    state?: string[];
}
export interface CustomStatesGetParams {
    /** The ID of the custom state to get. */
    id: string;
}
export interface CustomStatesListParams {
    /**
     * The cursor to resume iteration from, otherwise if not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /** Whether only final states should be filtered. */
    is_final?: boolean;
    /**
     * The maximum number of items.
     * @format int32
     */
    limit?: number;
    /** The list of state names. */
    name?: string[];
    /** The list of state ordinals. */
    ordinal?: number[];
    /** The list of fields to sort the items by and how to sort them. */
    sort_by?: string[];
}
export interface SurveysGetParams {
    /** The ID of the survey to get. */
    id: string;
}
export interface SurveysListParams {
    /**
     * Filters for surveys created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of surveys to return. If not set, then the default
     * is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Filters for surveys by name(s). */
    name?: string[];
    /** Fields to sort the surveys by and the direction to sort them. */
    sort_by?: string[];
}
export interface SurveysResponsesListParams {
    /**
     * Filters for survey responses created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of survey responses to return. If not set, then
     * the default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * Filters for survey responses created for the objects.
     * @example ["ACC-12345"]
     */
    objects?: string[];
    /**
     * Fields to sort the survey responses by and the direction to sort
     * them.
     */
    sort_by?: string[];
    /** Filters for survey response stages. */
    stages?: number[];
    /** Filters for survey responses for the provided survey IDs. */
    surveys?: string[];
}
export interface SysUsersGetParams {
    /** User ID of the requested system user. */
    id: string;
}
export interface SysUsersListParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of system users to return. Value can range from
     * '1' to '100', with a default of '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Fields to sort the system users by and the direction to sort them. */
    sort_by?: string[];
}
export interface TagsGetParams {
    /**
     * The requested tag's ID.
     * @example "TAG-12345"
     */
    id: string;
}
export interface TagsListParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of tags to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Filters for tags with the provided names. */
    name?: string[];
    /** Fields to sort tags by and the direction to sort them. */
    sort_by?: string[];
}
export interface QuoteTermTemplatesListParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** The list of Quote term template DONs which are to be aggregated. */
    ids?: string[];
    /**
     * The maximum number of quote term templates to return. The default is
     * '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Filter items which are in provided section types. */
    section_types?: TermDetailSectionType[];
    /**
     * List of fields to sort the Quote term template object, by and how to
     * sort them. Default is to sort by created_date in descending order.
     */
    sort_by?: string[];
}
export interface TimelineEntriesGetParams {
    /**
     * The ID of the timeline entry to get.
     * @example "don:core:<partition>:devo/<dev-org-id>:ticket/123:timeline_event/<timeline-event-id>"
     */
    id: string;
    /**
     * If set, then gets the entry with the given external reference for the
     * provided entry ID's timeline.
     */
    external_ref?: string;
}
export interface TimelineEntriesListParams {
    /**
     * The collection(s) to list entries from, otherwise if not provided,
     * all entries are returned.
     */
    collections?: TimelineEntriesCollection[];
    /**
     * The created date to start iteration from. If not provided, then
     * iteration starts from the beginning. Mutually exclusive with
     * `cursor`.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    created_date_cursor?: string;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The entry to begin iteration from (inclusive). If provided, then no
     * cursor should be set.
     * @example "don:core:<partition>:devo/<dev-org-id>:ticket/123:timeline_event/<timeline-event-id>"
     */
    entry?: string;
    /**
     * Filters for entries containing at least one of the provided labels,
     * otherwise if no labels are provided, then no label filtering is done.
     * @minLength 1
     * @maxLength 64
     */
    labels?: string[];
    /**
     * The maximum number of entries to return. If not set, then this
     * defaults to `50`.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * The ID of the object to list timeline entries for.
     * @example "PROD-12345"
     */
    object?: string;
    /** Filters for entries to be displayed on the provided panel(s). */
    panels?: TimelineEntryPanel[];
    /**
     * The visibility of the timeline entries to filter for. Note this is a
     * strict filter, such that only entries with the exact visibilities
     * specified will be returned.
     */
    visibility?: TimelineEntryVisibility[];
}
export interface TranslationLanguagesListParams {
    /**
     * The language to use to return localized, human readable names of
     * supported languages.
     */
    target_language?: string;
}
export interface UomsCountParams {
    /** List of aggregation types for filtering list of UOMs. */
    aggregation_types?: AggregationDetailAggregationType[];
    /**
     * List of Unit of Measurement (UOM) DONs to be used in filtering
     * complete list of UOMs defined in a Dev Org.
     */
    ids?: string[];
    /** List of metric names for filtering list of UOMs. */
    metric_names?: string[];
    /**
     * List of part IDs for filtering list of UOMs.
     * @example ["PROD-12345"]
     */
    part_ids?: string[];
    /**
     * List of product IDs for filtering list of UOMs.
     * @example ["PROD-12345"]
     */
    product_ids?: string[];
    /** List of unit types for filtering list of UOMs. */
    unit_types?: UnitType[];
}
export interface UomsGetParams {
    /** The Unit of Measurement (UOM)'s DON. */
    id: string;
}
export interface UomsListParams {
    /** List of aggregation types for filtering list of UOMs. */
    aggregation_types?: AggregationDetailAggregationType[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * List of Unit of Measurement (UOM) DONs to be used in filtering
     * complete list of UOMs defined in a Dev Org.
     */
    ids?: string[];
    /**
     * The maximum number of UOMs to be returned in a response. The default
     * is '50'.
     * @format int32
     */
    limit?: number;
    /** List of metric names for filtering list of UOMs. */
    metric_names?: string[];
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * List of part IDs for filtering list of UOMs.
     * @example ["PROD-12345"]
     */
    part_ids?: string[];
    /**
     * List of product IDs for filtering list of UOMs.
     * @example ["PROD-12345"]
     */
    product_ids?: string[];
    /**
     * Fields to sort the Unit Of Measuments (UOMs) by and the direction to
     * sort them.
     */
    sort_by?: string[];
    /** List of unit types for filtering list of UOMs. */
    unit_types?: UnitType[];
}
export interface UserSessionGetParams {
    /** The user session object ID. */
    id: string;
}
export interface UserSessionListParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of user session objects to return. The default is
     * '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * Fields to sort the user session object by and the direction to sort
     * them.
     */
    sort_by?: string[];
    /**
     * Filter for user session objects with the given user ID.
     * @example ["DEVU-12345"]
     */
    user?: string[];
}
export interface UserPrivilegesParams {
    /** Whether to include partial privileges in the response. */
    include_partial_privileges?: boolean;
    /**
     * The ID of the target object for which user privileges are requested.
     * @deprecated
     */
    'target.id'?: string;
    /** The type of the target for which user privileges are requested. */
    'target.object_type'?: ObjectTypeProto;
    /**
     * The subtype of the target for which user privileges are requested.
     * @deprecated
     */
    'target.subtype'?: string;
}
export interface DevUserGlobalInvitationsListParams {
    /** Email of the Dev user. */
    email: string;
}
export interface UxStoreGetParams {
    /** The namespace of the document. */
    namespace: string;
    /**
     * The key of the document.
     * @deprecated
     */
    key?: string;
    /** The keys of the documents. */
    keys?: string[];
}
export interface VistasGetParams {
    /**
     * The vista's ID.
     * @example "VISTA-12345"
     */
    id: string;
}
export interface VistasGroupsGetParams {
    /** The vista group item's ID. */
    id: string;
}
export interface VistasGroupsListParams {
    /**
     * Filters for vista group items which have one of the parts linked as
     * its ancestor part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /**
     * Whether to include items belonging to children of any of the provided
     * parts.
     */
    'applies_to_part.include_child_parts'?: boolean;
    /**
     * Part IDs to filter on. Required if any applies_to_part.* fields are
     * provided.
     * @example ["PROD-12345"]
     */
    'applies_to_part.parts'?: string[];
    /** Operation type for applies to part filter. */
    'applies_to_part.parts_op'?: AppliesToPartFilterPartsOpOperatorType;
    /**
     * Filter for vistas group item created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** Filters for vista group items of the specific group object type. */
    group_object_type?: VistaGroupItemGroupObjectType[];
    /**
     * The request to get information about a list of vista groups.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * Parent ID of the vista group item.
     * @example ["VISTA-12345"]
     */
    parent_id?: string[];
    /** Comma-separated fields to sort the objects by. */
    sort_by?: string[];
    /** Denotes the state of the vista group item. */
    state?: VistaGroupItemState[];
    /** Filters for vista group items of the specific type. */
    type?: GroupItemType[];
}
export interface VistasListParams {
    /**
     * Filters for vistas which have one of the parts linked as its ancestor
     * part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /**
     * Whether to include items belonging to children of any of the provided
     * parts.
     */
    'applies_to_part.include_child_parts'?: boolean;
    /**
     * Part IDs to filter on. Required if any applies_to_part.* fields are
     * provided.
     * @example ["PROD-12345"]
     */
    'applies_to_part.parts'?: string[];
    /** Operation type for applies to part filter. */
    'applies_to_part.parts_op'?: AppliesToPartFilterPartsOpOperatorType;
    /**
     * Filters for vistas created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * Filters for vistas which have one of the parts linked as its
     * descendant part or primary part.
     * @example ["PROD-12345"]
     */
    descendant_part?: string[];
    /** Filters for vistas of specific flavor. */
    flavor?: GroupedVistaFlavor[];
    /** The filter operator to be applied on flavor. */
    flavor_op?: VistasFilterFlavorOperatorType;
    /** Whether the default vistas should be fetched or not. */
    is_default?: boolean;
    /**
     * The maximum number of vistas to return. The default is '50', the
     * maximum is '100'.
     * @format int32
     */
    limit?: number;
    /**
     * Filters for vistas accessible to the input members.
     * @example ["DEVU-12345"]
     */
    members?: string[];
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Filters for vistas of specific object types like works, parts etc. */
    object_type?: DynamicVistaFilterType[];
    /** ID of the group/member with whom the item is shared. */
    'shared_with.member'?: string;
    /** Role ID of the group/member with whom the item is shared. */
    'shared_with.role'?: string;
    /** Denotes whether to skip items of vista_group_item in response. */
    skip_items?: boolean;
    /** Fields to sort the vistas by and the direction to sort them. */
    sort_by?: string[];
    /** Denotes the state of the vista group item. */
    state?: VistaGroupItemState[];
    /** Filters for vistas of the specific type. */
    type?: VistaType[];
}
export interface VistasPartsListParams {
    /**
     * Filters for vistas which have one of the parts linked as its ancestor
     * part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /**
     * Whether to include items belonging to children of any of the provided
     * parts.
     */
    'applies_to_part.include_child_parts'?: boolean;
    /**
     * Part IDs to filter on. Required if any applies_to_part.* fields are
     * provided.
     * @example ["PROD-12345"]
     */
    'applies_to_part.parts'?: string[];
    /** Operation type for applies to part filter. */
    'applies_to_part.parts_op'?: AppliesToPartFilterPartsOpOperatorType;
    /**
     * Filters for vistas created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * Filters for vistas which have one of the parts linked as its
     * descendant part or primary part.
     * @example ["PROD-12345"]
     */
    descendant_part?: string[];
    /** Filters for vistas of specific flavor. */
    flavor?: GroupedVistaFlavor[];
    /** The filter operator to be applied on flavor. */
    flavor_op?: VistasFilterFlavorOperatorType;
    /** Whether the default vistas should be fetched or not. */
    is_default?: boolean;
    /**
     * The maximum number of parts to return. The default is '50', the
     * maximum is '100'.
     * @format int32
     */
    limit?: number;
    /**
     * Filters for vistas accessible to the input members.
     * @example ["DEVU-12345"]
     */
    members?: string[];
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Filters for vistas of specific object types like works, parts etc. */
    object_type?: DynamicVistaFilterType[];
    /** ID of the group/member with whom the item is shared. */
    'shared_with.member'?: string;
    /** Role ID of the group/member with whom the item is shared. */
    'shared_with.role'?: string;
    /** Denotes whether to skip items of vista_group_item in response. */
    skip_items?: boolean;
    /** Denotes the state of the vista group item. */
    state?: VistaGroupItemState[];
    /** Filters for vistas of the specific type. */
    type?: VistaType[];
}
export interface WatchersGetParams {
    /**
     * The object's ID.
     * @example "ISS-12345"
     */
    id: string;
}
export interface WatchersListParams {
    /**
     * The object's ID.
     * @example "ISS-12345"
     */
    id: string;
    /**
     * The cursor to resume iteration from, otherwise if not provided, then
     * iteration starts from the beginning.
     */
    cursor?: string;
    /**
     * The watch events that must be present. If empty, all watchers that
     * contain at least one watched event are returned, otherwise watchers
     * that contain at least one of the provided events will be returned.
     */
    events?: WatchEvent[];
    /**
     * The maximum number of watchers to return. If not set or `<= 0`, then
     * this defaults to `50`.
     * @format int32
     */
    limit?: number;
}
export interface GetWebCrawlerJobParams {
    /** The ID of the job. */
    id: string;
}
export interface ListWebCrawlerJobsParams {
    /**
     * Filters for web crawler jobs created by any of the provided users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of web crawler jobs to return. The default is
     * '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Filters for status of the web crawler jobs. */
    state?: WebCrawlerJobState[];
}
export interface WebhooksGetParams {
    /**
     * ID for the webhook.
     * @example "don:integration:<partition>:devo/<dev-org-id>:webhook/<webhook-id>"
     */
    id: string;
}
export interface WidgetsGetParams {
    /** The requested widget's ID. */
    id: string;
}
export interface WidgetsListParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of widgets to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Fields to sort the widgets by and the direction to sort them. */
    sort_by?: string[];
}
export interface GetWorkflowRunParams {
    /** The requested workflow run's ID. */
    id: string;
}
export interface ListWorkflowRunsParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of workflow runs to return. The default is '50',
     * the maximum is '100'
     * @format int32
     * @max 100
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * Fields to sort the workflow runs by and the direction to sort them
     * in.
     */
    sort_by?: string[];
    /** Filters on status for workflow runs. */
    status?: WorkflowRunStatus[];
    /** Filters for workflow runs for any of these workflows. */
    workflow?: string[];
}
export interface GetWorkflowStepParams {
    /** The requested workflow step's ID. */
    id: string;
}
export interface ListWorkflowStepsParams {
    /**
     * Filters for workflow steps created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of workflow steps to return. The default is '50',
     * the maximum is '100'
     * @format int32
     * @max 100
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * Fields to sort the workflow steps by and the direction to sort them
     * in.
     */
    sort_by?: string[];
    /** Filters for workflow steps for any of these workflows. */
    workflow?: string[];
}
export interface GetSchemaWorkflowStepsParams {
    /** The IDs of the workflow steps to get the schema for. */
    ids: string[];
}
export interface GetWorkflowParams {
    /** The requested workflow's ID. */
    id: string;
}
export interface ListWorkflowsParams {
    /**
     * Filters for workflows created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of workflows to return. The default is '50', the
     * maximum is '100'
     * @format int32
     * @max 100
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Fields to sort the workflows by and the direction to sort them in. */
    sort_by?: string[];
    /** Filters on status for workflows. */
    status?: WorkflowStatus[];
}
export interface WorksClustersGatherParams {
    /**
     * Filters for work which have one of the parts present as its ancestor
     * part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /**
     * Filters for work belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_part?: string[];
    /**
     * Filters for work created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /** The filter operator to be applied on created_by. */
    created_by_op?: WorksFilterCreatedByOperatorType;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** Filters for custom fields. */
    custom_fields?: object;
    /**
     * Depth level of the cluster hierarchy to return. If not specified,
     * clusters are returned reardess of their depth_level.
     * @format int32
     */
    depth_level?: number;
    /**
     * Filters for work excluding the provided work IDs.
     * @example ["ISS-12345"]
     */
    exclude?: string[];
    /**
     * Filters for issues with any of the provided Accounts.
     * @example ["ACC-12345"]
     */
    'issue.accounts'?: string[];
    /** The filter operator to be applied on accounts. */
    'issue.accounts_op'?: WorksFilterIssueAccountsOpOperatorType;
    /**
     * Whether to include items belonging to children of any of the provided
     * parts.
     */
    'issue.applies_to_part.include_child_parts'?: boolean;
    /**
     * Part IDs to filter on. Required if any issue.applies_to_part.* fields
     * are provided.
     * @example ["PROD-12345"]
     */
    'issue.applies_to_part.parts'?: string[];
    /** Operation type for applies to part filter. */
    'issue.applies_to_part.parts_op'?: AppliesToPartFilterPartsOpOperatorType;
    /** Filters for issues with any of the provided priority enum ids. */
    'issue.priority_v2'?: number[];
    /**
     * Filters for issues with any of the provided Rev organizations.
     * @example ["REV-AbCdEfGh"]
     */
    'issue.rev_orgs'?: string[];
    /** The filter operator to be applied on rev_orgs. */
    'issue.rev_orgs_op'?: WorksFilterIssueRevOrgsOpOperatorType;
    /** Filters for issues with any of the sprint. */
    'issue.sprint'?: string[];
    /** The filter operator to be applied on sprint. */
    'issue.sprint_op'?: WorksFilterIssueSprintOpOperatorType;
    /** Filters for issues with any of the provided subtypes. */
    'issue.subtype'?: string[];
    /** The filter operator to be applied on subtype. */
    'issue.subtype_op'?: SubtypeOpOperatorType;
    /**
     * The maximum number of work clusters to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /** Filters for work with any of the provided link target objects. */
    link_target_object?: string[];
    /** The filter operator to be applied. */
    link_target_object_op?: WorksFilterLinkTargetObjectOperatorType;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * Filters for opportunities belonging to any of the provided accounts.
     * @example ["ACC-12345"]
     */
    'opportunity.account'?: string[];
    /** Filters for opportunities with any of the provided contacts. */
    'opportunity.contacts'?: string[];
    /** The filter operator to be applied on contacts. */
    'opportunity.contacts_op'?: WorksFilterOpportunityContactsOpOperatorType;
    /**
     * Filters for opportunities with any of the provided forecast
     * categories.
     */
    'opportunity.forecast_category'?: OpportunityForecastCategory[];
    /** Filters for opportunities with any of the provided priorities. */
    'opportunity.priority'?: OpportunityPriority[];
    /** Filters for opportunity with any of the provided subtypes. */
    'opportunity.subtype'?: string[];
    /** The filter operator to be applied on subtype. */
    'opportunity.subtype_op'?: SubtypeOpOperatorType;
    /**
     * Filters for work owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /** The filter operator to be applied on owned_by. */
    owned_by_op?: WorksFilterOwnedByOperatorType;
    /**
     * ID of the parent work cluster. If not specified, clusters are
     * returned regardless of their parent_work_cluster.
     */
    parent_works_cluster?: string;
    /**
     * Filters for work reported by any of these users.
     * @example ["DEVU-12345"]
     */
    reported_by?: string[];
    /** The filter operator to be applied on reported_by. */
    reported_by_op?: WorksFilterReportedByOperatorType;
    /** Filters for records in the provided stage(s) by name. */
    'stage.name'?: string[];
    /** List of IDs of the custom stages which will be used for filtering. */
    'stage.stages'?: string[];
    /** Filters for work for the provided stage names. */
    stage_names?: string[];
    /** Filters for issues that are staged. */
    'staged_info.is_staged'?: boolean;
    /** Filters for work with any of the provided states. */
    state?: string[];
    /** Filters for works with selected sync statuses. */
    'sync_metadata.last_sync_in.status'?: SyncMetadataFilterSyncInFilterStatus[];
    /** Filters for works modified with selected sync units. */
    'sync_metadata.last_sync_in.sync_unit'?: string[];
    /** Filters for works with selected sync statuses. */
    'sync_metadata.last_sync_out.status'?: SyncMetadataFilterSyncOutFilterStatus[];
    /** Filters for works modified with selected sync units. */
    'sync_metadata.last_sync_out.sync_unit'?: string[];
    /** Filters for issues synced from this specific origin system. */
    'sync_metadata.origin_system'?: string[];
    /** The filter operator to be applied. */
    tag_ids_op?: WorksFilterTagIdsOperatorType;
    /**
     * Filters for work with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /**
     * The ID of the tag.
     * @example "TAG-12345"
     */
    'tags_v2.id'?: string;
    /**
     * The value for the object's association with the tag. If specified,
     * the value must be one that's specified in the tag's allowed values.
     */
    'tags_v2.value'?: string;
    /**
     * Whether to include items belonging to children of any of the provided
     * parts.
     */
    'task.applies_to_part.include_child_parts'?: boolean;
    /**
     * Part IDs to filter on. Required if any task.applies_to_part.* fields
     * are provided.
     * @example ["PROD-12345"]
     */
    'task.applies_to_part.parts'?: string[];
    /** Operation type for applies to part filter. */
    'task.applies_to_part.parts_op'?: AppliesToPartFilterPartsOpOperatorType;
    /** Filter for tasks with any of the provided embedded values. */
    'task.embedded'?: boolean[];
    /** Filters for tasks with any of the provided priorities. */
    'task.priority'?: TaskPriority[];
    /**
     * Filters for tasks which started after the provided timestamp.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'task.start_after_date'?: string;
    /**
     * Filters for tasks which started before the provided timestamp.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'task.start_before_date'?: string;
    /**
     * Whether to include items belonging to children of any of the provided
     * parts.
     */
    'ticket.applies_to_part.include_child_parts'?: boolean;
    /**
     * Part IDs to filter on. Required if any ticket.applies_to_part.*
     * fields are provided.
     * @example ["PROD-12345"]
     */
    'ticket.applies_to_part.parts'?: string[];
    /** Operation type for applies to part filter. */
    'ticket.applies_to_part.parts_op'?: AppliesToPartFilterPartsOpOperatorType;
    /** Filters for tickets with any of the provided channels. */
    'ticket.channels'?: TicketChannels[];
    /** The Filter operator to be applied on channels filter for tickets. */
    'ticket.channels_op'?: WorksFilterTicketChannelsOperatorType;
    /** Filters for tickets belonging to specific groups. */
    'ticket.group'?: string[];
    /** The filter operator to be applied on group filter for tickets. */
    'ticket.group_op'?: WorksFilterTicketGroupsOpOperatorType;
    /** Filters for tickets that are spam. */
    'ticket.is_spam'?: boolean;
    /** Filters for tickets that need response. */
    'ticket.needs_response'?: boolean;
    /**
     * Filters for tickets that are associated with any of the provided Rev
     * organizations.
     * @example ["REV-AbCdEfGh"]
     */
    'ticket.rev_org'?: string[];
    /** The filter operator to be applied. */
    'ticket.rev_org_ids_op'?: WorksFilterTicketRevOrgIDsOperatorType;
    /** Filters for tickets with any of the provided severities. */
    'ticket.severity'?: TicketSeverity[];
    /** Filters for tickets with any of the provided SLAs applying to it. */
    'ticket.sla'?: string[];
    /** Filters for records with any of the provided SLA stages. */
    'ticket.sla_summary.stage'?: SlaSummaryStage[];
    /** Filters for tickets with any of the provided source channels. */
    'ticket.source_channel'?: string[];
    /** Filters for tickets with any of the provided subtypes. */
    'ticket.subtype'?: string[];
    /** The filter operator to be applied on subtype. */
    'ticket.subtype_op'?: SubtypeOpOperatorType;
    /**
     * Minimum value for an object aggregation. Required if any
     * ticket.surveys.* fields are provided.
     */
    'ticket.surveys.minimum'?: string[];
    /** Filters for work of the provided types. */
    type?: WorkType[];
    /**
     * Filters for work belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
export interface WorksClustersListParams {
    /**
     * IDs of the work clusters for which work items should be returned.
     * @maxItems 25
     * @minItems 1
     */
    works_clusters: string[];
    /**
     * Filters for work which have one of the parts present as its ancestor
     * part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /**
     * Filters for work belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_part?: string[];
    /**
     * Filters for work created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /** The filter operator to be applied on created_by. */
    created_by_op?: WorksFilterCreatedByOperatorType;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** Filters for custom fields. */
    custom_fields?: object;
    /**
     * Filters for work excluding the provided work IDs.
     * @example ["ISS-12345"]
     */
    exclude?: string[];
    /**
     * Filters for issues with any of the provided Accounts.
     * @example ["ACC-12345"]
     */
    'issue.accounts'?: string[];
    /** The filter operator to be applied on accounts. */
    'issue.accounts_op'?: WorksFilterIssueAccountsOpOperatorType;
    /**
     * Whether to include items belonging to children of any of the provided
     * parts.
     */
    'issue.applies_to_part.include_child_parts'?: boolean;
    /**
     * Part IDs to filter on. Required if any issue.applies_to_part.* fields
     * are provided.
     * @example ["PROD-12345"]
     */
    'issue.applies_to_part.parts'?: string[];
    /** Operation type for applies to part filter. */
    'issue.applies_to_part.parts_op'?: AppliesToPartFilterPartsOpOperatorType;
    /** Filters for issues with any of the provided priority enum ids. */
    'issue.priority_v2'?: number[];
    /**
     * Filters for issues with any of the provided Rev organizations.
     * @example ["REV-AbCdEfGh"]
     */
    'issue.rev_orgs'?: string[];
    /** The filter operator to be applied on rev_orgs. */
    'issue.rev_orgs_op'?: WorksFilterIssueRevOrgsOpOperatorType;
    /** Filters for issues with any of the sprint. */
    'issue.sprint'?: string[];
    /** The filter operator to be applied on sprint. */
    'issue.sprint_op'?: WorksFilterIssueSprintOpOperatorType;
    /** Filters for issues with any of the provided subtypes. */
    'issue.subtype'?: string[];
    /** The filter operator to be applied on subtype. */
    'issue.subtype_op'?: SubtypeOpOperatorType;
    /**
     * The maximum number of work clusters to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /** Filters for work with any of the provided link target objects. */
    link_target_object?: string[];
    /** The filter operator to be applied. */
    link_target_object_op?: WorksFilterLinkTargetObjectOperatorType;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * Filters for opportunities belonging to any of the provided accounts.
     * @example ["ACC-12345"]
     */
    'opportunity.account'?: string[];
    /** Filters for opportunities with any of the provided contacts. */
    'opportunity.contacts'?: string[];
    /** The filter operator to be applied on contacts. */
    'opportunity.contacts_op'?: WorksFilterOpportunityContactsOpOperatorType;
    /**
     * Filters for opportunities with any of the provided forecast
     * categories.
     */
    'opportunity.forecast_category'?: OpportunityForecastCategory[];
    /** Filters for opportunities with any of the provided priorities. */
    'opportunity.priority'?: OpportunityPriority[];
    /** Filters for opportunity with any of the provided subtypes. */
    'opportunity.subtype'?: string[];
    /** The filter operator to be applied on subtype. */
    'opportunity.subtype_op'?: SubtypeOpOperatorType;
    /**
     * Filters for work owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /** The filter operator to be applied on owned_by. */
    owned_by_op?: WorksFilterOwnedByOperatorType;
    /**
     * Filters for work reported by any of these users.
     * @example ["DEVU-12345"]
     */
    reported_by?: string[];
    /** The filter operator to be applied on reported_by. */
    reported_by_op?: WorksFilterReportedByOperatorType;
    /**
     * Whether to return only a list of summaries of work items in the
     * cluster, instead of the actual work items.
     */
    return_summaries_only?: boolean;
    /** Filters for records in the provided stage(s) by name. */
    'stage.name'?: string[];
    /** List of IDs of the custom stages which will be used for filtering. */
    'stage.stages'?: string[];
    /** Filters for work for the provided stage names. */
    stage_names?: string[];
    /** Filters for issues that are staged. */
    'staged_info.is_staged'?: boolean;
    /** Filters for work with any of the provided states. */
    state?: string[];
    /** Filters for works with selected sync statuses. */
    'sync_metadata.last_sync_in.status'?: SyncMetadataFilterSyncInFilterStatus[];
    /** Filters for works modified with selected sync units. */
    'sync_metadata.last_sync_in.sync_unit'?: string[];
    /** Filters for works with selected sync statuses. */
    'sync_metadata.last_sync_out.status'?: SyncMetadataFilterSyncOutFilterStatus[];
    /** Filters for works modified with selected sync units. */
    'sync_metadata.last_sync_out.sync_unit'?: string[];
    /** Filters for issues synced from this specific origin system. */
    'sync_metadata.origin_system'?: string[];
    /** The filter operator to be applied. */
    tag_ids_op?: WorksFilterTagIdsOperatorType;
    /**
     * Filters for work with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /**
     * The ID of the tag.
     * @example "TAG-12345"
     */
    'tags_v2.id'?: string;
    /**
     * The value for the object's association with the tag. If specified,
     * the value must be one that's specified in the tag's allowed values.
     */
    'tags_v2.value'?: string;
    /**
     * Whether to include items belonging to children of any of the provided
     * parts.
     */
    'task.applies_to_part.include_child_parts'?: boolean;
    /**
     * Part IDs to filter on. Required if any task.applies_to_part.* fields
     * are provided.
     * @example ["PROD-12345"]
     */
    'task.applies_to_part.parts'?: string[];
    /** Operation type for applies to part filter. */
    'task.applies_to_part.parts_op'?: AppliesToPartFilterPartsOpOperatorType;
    /** Filter for tasks with any of the provided embedded values. */
    'task.embedded'?: boolean[];
    /** Filters for tasks with any of the provided priorities. */
    'task.priority'?: TaskPriority[];
    /**
     * Filters for tasks which started after the provided timestamp.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'task.start_after_date'?: string;
    /**
     * Filters for tasks which started before the provided timestamp.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'task.start_before_date'?: string;
    /**
     * Whether to include items belonging to children of any of the provided
     * parts.
     */
    'ticket.applies_to_part.include_child_parts'?: boolean;
    /**
     * Part IDs to filter on. Required if any ticket.applies_to_part.*
     * fields are provided.
     * @example ["PROD-12345"]
     */
    'ticket.applies_to_part.parts'?: string[];
    /** Operation type for applies to part filter. */
    'ticket.applies_to_part.parts_op'?: AppliesToPartFilterPartsOpOperatorType;
    /** Filters for tickets with any of the provided channels. */
    'ticket.channels'?: TicketChannels[];
    /** The Filter operator to be applied on channels filter for tickets. */
    'ticket.channels_op'?: WorksFilterTicketChannelsOperatorType;
    /** Filters for tickets belonging to specific groups. */
    'ticket.group'?: string[];
    /** The filter operator to be applied on group filter for tickets. */
    'ticket.group_op'?: WorksFilterTicketGroupsOpOperatorType;
    /** Filters for tickets that are spam. */
    'ticket.is_spam'?: boolean;
    /** Filters for tickets that need response. */
    'ticket.needs_response'?: boolean;
    /**
     * Filters for tickets that are associated with any of the provided Rev
     * organizations.
     * @example ["REV-AbCdEfGh"]
     */
    'ticket.rev_org'?: string[];
    /** The filter operator to be applied. */
    'ticket.rev_org_ids_op'?: WorksFilterTicketRevOrgIDsOperatorType;
    /** Filters for tickets with any of the provided severities. */
    'ticket.severity'?: TicketSeverity[];
    /** Filters for tickets with any of the provided SLAs applying to it. */
    'ticket.sla'?: string[];
    /** Filters for records with any of the provided SLA stages. */
    'ticket.sla_summary.stage'?: SlaSummaryStage[];
    /** Filters for tickets with any of the provided source channels. */
    'ticket.source_channel'?: string[];
    /** Filters for tickets with any of the provided subtypes. */
    'ticket.subtype'?: string[];
    /** The filter operator to be applied on subtype. */
    'ticket.subtype_op'?: SubtypeOpOperatorType;
    /**
     * Minimum value for an object aggregation. Required if any
     * ticket.surveys.* fields are provided.
     */
    'ticket.surveys.minimum'?: string[];
    /** Filters for work of the provided types. */
    type?: WorkType[];
    /**
     * Filters for work belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
export interface WorksCountParams {
    /**
     * Filters for work which have one of the parts present as its ancestor
     * part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /**
     * Filters for work belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_part?: string[];
    /**
     * The connection to count the work items for.
     * @maxLength 1
     */
    connection?: string[];
    /**
     * Filters for work created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /** The filter operator to be applied on created_by. */
    created_by_op?: WorksFilterCreatedByOperatorType;
    /** Filters for custom fields. */
    custom_fields?: object;
    /**
     * Filters for work excluding the provided work IDs.
     * @example ["ISS-12345"]
     */
    exclude?: string[];
    /**
     * Filters for issues with any of the provided Accounts.
     * @example ["ACC-12345"]
     */
    'issue.accounts'?: string[];
    /** The filter operator to be applied on accounts. */
    'issue.accounts_op'?: WorksFilterIssueAccountsOpOperatorType;
    /**
     * Whether to include items belonging to children of any of the provided
     * parts.
     */
    'issue.applies_to_part.include_child_parts'?: boolean;
    /**
     * Part IDs to filter on. Required if any issue.applies_to_part.* fields
     * are provided.
     * @example ["PROD-12345"]
     */
    'issue.applies_to_part.parts'?: string[];
    /** Operation type for applies to part filter. */
    'issue.applies_to_part.parts_op'?: AppliesToPartFilterPartsOpOperatorType;
    /** Filters for issues with any of the provided priority enum ids. */
    'issue.priority_v2'?: number[];
    /**
     * Filters for issues with any of the provided Rev organizations.
     * @example ["REV-AbCdEfGh"]
     */
    'issue.rev_orgs'?: string[];
    /** The filter operator to be applied on rev_orgs. */
    'issue.rev_orgs_op'?: WorksFilterIssueRevOrgsOpOperatorType;
    /** Filters for issues with any of the sprint. */
    'issue.sprint'?: string[];
    /** The filter operator to be applied on sprint. */
    'issue.sprint_op'?: WorksFilterIssueSprintOpOperatorType;
    /** Filters for issues with any of the provided subtypes. */
    'issue.subtype'?: string[];
    /** The filter operator to be applied on subtype. */
    'issue.subtype_op'?: SubtypeOpOperatorType;
    /** Filters for work with any of the provided link target objects. */
    link_target_object?: string[];
    /** The filter operator to be applied. */
    link_target_object_op?: WorksFilterLinkTargetObjectOperatorType;
    /**
     * Filters for opportunities belonging to any of the provided accounts.
     * @example ["ACC-12345"]
     */
    'opportunity.account'?: string[];
    /** Filters for opportunities with any of the provided contacts. */
    'opportunity.contacts'?: string[];
    /** The filter operator to be applied on contacts. */
    'opportunity.contacts_op'?: WorksFilterOpportunityContactsOpOperatorType;
    /**
     * Filters for opportunities with any of the provided forecast
     * categories.
     */
    'opportunity.forecast_category'?: OpportunityForecastCategory[];
    /** Filters for opportunities with any of the provided priorities. */
    'opportunity.priority'?: OpportunityPriority[];
    /** Filters for opportunity with any of the provided subtypes. */
    'opportunity.subtype'?: string[];
    /** The filter operator to be applied on subtype. */
    'opportunity.subtype_op'?: SubtypeOpOperatorType;
    /**
     * Filters for work owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /** The filter operator to be applied on owned_by. */
    owned_by_op?: WorksFilterOwnedByOperatorType;
    /**
     * Filters for work reported by any of these users.
     * @example ["DEVU-12345"]
     */
    reported_by?: string[];
    /** The filter operator to be applied on reported_by. */
    reported_by_op?: WorksFilterReportedByOperatorType;
    /** The search query to filter the works. */
    search_query?: string;
    /** Filters for records in the provided stage(s) by name. */
    'stage.name'?: string[];
    /** List of IDs of the custom stages which will be used for filtering. */
    'stage.stages'?: string[];
    /** Filters for work for the provided stage names. */
    stage_names?: string[];
    /** Filters for issues that are staged. */
    'staged_info.is_staged'?: boolean;
    /** Filters for work with any of the provided states. */
    state?: string[];
    /** Filters for works with selected sync statuses. */
    'sync_metadata.last_sync_in.status'?: SyncMetadataFilterSyncInFilterStatus[];
    /** Filters for works modified with selected sync units. */
    'sync_metadata.last_sync_in.sync_unit'?: string[];
    /** Filters for works with selected sync statuses. */
    'sync_metadata.last_sync_out.status'?: SyncMetadataFilterSyncOutFilterStatus[];
    /** Filters for works modified with selected sync units. */
    'sync_metadata.last_sync_out.sync_unit'?: string[];
    /** Filters for issues synced from this specific origin system. */
    'sync_metadata.origin_system'?: string[];
    /** The filter operator to be applied. */
    tag_ids_op?: WorksFilterTagIdsOperatorType;
    /**
     * Filters for work with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /**
     * The ID of the tag.
     * @example "TAG-12345"
     */
    'tags_v2.id'?: string;
    /**
     * The value for the object's association with the tag. If specified,
     * the value must be one that's specified in the tag's allowed values.
     */
    'tags_v2.value'?: string;
    /**
     * Whether to include items belonging to children of any of the provided
     * parts.
     */
    'task.applies_to_part.include_child_parts'?: boolean;
    /**
     * Part IDs to filter on. Required if any task.applies_to_part.* fields
     * are provided.
     * @example ["PROD-12345"]
     */
    'task.applies_to_part.parts'?: string[];
    /** Operation type for applies to part filter. */
    'task.applies_to_part.parts_op'?: AppliesToPartFilterPartsOpOperatorType;
    /** Filter for tasks with any of the provided embedded values. */
    'task.embedded'?: boolean[];
    /** Filters for tasks with any of the provided priorities. */
    'task.priority'?: TaskPriority[];
    /**
     * Filters for tasks which started after the provided timestamp.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'task.start_after_date'?: string;
    /**
     * Filters for tasks which started before the provided timestamp.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'task.start_before_date'?: string;
    /**
     * Whether to include items belonging to children of any of the provided
     * parts.
     */
    'ticket.applies_to_part.include_child_parts'?: boolean;
    /**
     * Part IDs to filter on. Required if any ticket.applies_to_part.*
     * fields are provided.
     * @example ["PROD-12345"]
     */
    'ticket.applies_to_part.parts'?: string[];
    /** Operation type for applies to part filter. */
    'ticket.applies_to_part.parts_op'?: AppliesToPartFilterPartsOpOperatorType;
    /** Filters for tickets with any of the provided channels. */
    'ticket.channels'?: TicketChannels[];
    /** The Filter operator to be applied on channels filter for tickets. */
    'ticket.channels_op'?: WorksFilterTicketChannelsOperatorType;
    /** Filters for tickets belonging to specific groups. */
    'ticket.group'?: string[];
    /** The filter operator to be applied on group filter for tickets. */
    'ticket.group_op'?: WorksFilterTicketGroupsOpOperatorType;
    /** Filters for tickets that are spam. */
    'ticket.is_spam'?: boolean;
    /** Filters for tickets that need response. */
    'ticket.needs_response'?: boolean;
    /**
     * Filters for tickets that are associated with any of the provided Rev
     * organizations.
     * @example ["REV-AbCdEfGh"]
     */
    'ticket.rev_org'?: string[];
    /** The filter operator to be applied. */
    'ticket.rev_org_ids_op'?: WorksFilterTicketRevOrgIDsOperatorType;
    /** Filters for tickets with any of the provided severities. */
    'ticket.severity'?: TicketSeverity[];
    /** Filters for tickets with any of the provided SLAs applying to it. */
    'ticket.sla'?: string[];
    /** Filters for records with any of the provided SLA stages. */
    'ticket.sla_summary.stage'?: SlaSummaryStage[];
    /** Filters for tickets with any of the provided source channels. */
    'ticket.source_channel'?: string[];
    /** Filters for tickets with any of the provided subtypes. */
    'ticket.subtype'?: string[];
    /** The filter operator to be applied on subtype. */
    'ticket.subtype_op'?: SubtypeOpOperatorType;
    /**
     * Minimum value for an object aggregation. Required if any
     * ticket.surveys.* fields are provided.
     */
    'ticket.surveys.minimum'?: string[];
    /** Filters for work of the provided types. */
    type?: WorkType[];
    /**
     * Filters for work belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
export interface WorksExportParams {
    /**
     * Filters for work which have one of the parts present as its ancestor
     * part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /**
     * Filters for work belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_part?: string[];
    /**
     * Filters for work created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /** The filter operator to be applied on created_by. */
    created_by_op?: WorksFilterCreatedByOperatorType;
    /** Filters for custom fields. */
    custom_fields?: object;
    /**
     * Filters for work excluding the provided work IDs.
     * @example ["ISS-12345"]
     */
    exclude?: string[];
    /**
     * The number of work items to return. The default is '50', the maximum
     * is '5000'.
     * @format int32
     */
    first?: number;
    /**
     * Filters for issues with any of the provided Accounts.
     * @example ["ACC-12345"]
     */
    'issue.accounts'?: string[];
    /** The filter operator to be applied on accounts. */
    'issue.accounts_op'?: WorksFilterIssueAccountsOpOperatorType;
    /**
     * Whether to include items belonging to children of any of the provided
     * parts.
     */
    'issue.applies_to_part.include_child_parts'?: boolean;
    /**
     * Part IDs to filter on. Required if any issue.applies_to_part.* fields
     * are provided.
     * @example ["PROD-12345"]
     */
    'issue.applies_to_part.parts'?: string[];
    /** Operation type for applies to part filter. */
    'issue.applies_to_part.parts_op'?: AppliesToPartFilterPartsOpOperatorType;
    /** Filters for issues with any of the provided priority enum ids. */
    'issue.priority_v2'?: number[];
    /**
     * Filters for issues with any of the provided Rev organizations.
     * @example ["REV-AbCdEfGh"]
     */
    'issue.rev_orgs'?: string[];
    /** The filter operator to be applied on rev_orgs. */
    'issue.rev_orgs_op'?: WorksFilterIssueRevOrgsOpOperatorType;
    /** Filters for issues with any of the sprint. */
    'issue.sprint'?: string[];
    /** The filter operator to be applied on sprint. */
    'issue.sprint_op'?: WorksFilterIssueSprintOpOperatorType;
    /** Filters for issues with any of the provided subtypes. */
    'issue.subtype'?: string[];
    /** The filter operator to be applied on subtype. */
    'issue.subtype_op'?: SubtypeOpOperatorType;
    /** Filters for work with any of the provided link target objects. */
    link_target_object?: string[];
    /** The filter operator to be applied. */
    link_target_object_op?: WorksFilterLinkTargetObjectOperatorType;
    /**
     * Filters for opportunities belonging to any of the provided accounts.
     * @example ["ACC-12345"]
     */
    'opportunity.account'?: string[];
    /** Filters for opportunities with any of the provided contacts. */
    'opportunity.contacts'?: string[];
    /** The filter operator to be applied on contacts. */
    'opportunity.contacts_op'?: WorksFilterOpportunityContactsOpOperatorType;
    /**
     * Filters for opportunities with any of the provided forecast
     * categories.
     */
    'opportunity.forecast_category'?: OpportunityForecastCategory[];
    /** Filters for opportunities with any of the provided priorities. */
    'opportunity.priority'?: OpportunityPriority[];
    /** Filters for opportunity with any of the provided subtypes. */
    'opportunity.subtype'?: string[];
    /** The filter operator to be applied on subtype. */
    'opportunity.subtype_op'?: SubtypeOpOperatorType;
    /**
     * Filters for work owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /** The filter operator to be applied on owned_by. */
    owned_by_op?: WorksFilterOwnedByOperatorType;
    /**
     * Filters for work reported by any of these users.
     * @example ["DEVU-12345"]
     */
    reported_by?: string[];
    /** The filter operator to be applied on reported_by. */
    reported_by_op?: WorksFilterReportedByOperatorType;
    /** Fields to sort the work items by and the direction to sort them. */
    sort_by?: string[];
    /** Filters for records in the provided stage(s) by name. */
    'stage.name'?: string[];
    /** List of IDs of the custom stages which will be used for filtering. */
    'stage.stages'?: string[];
    /** Filters for work for the provided stage names. */
    stage_names?: string[];
    /** Filters for issues that are staged. */
    'staged_info.is_staged'?: boolean;
    /** Filters for work with any of the provided states. */
    state?: string[];
    /** Filters for works with selected sync statuses. */
    'sync_metadata.last_sync_in.status'?: SyncMetadataFilterSyncInFilterStatus[];
    /** Filters for works modified with selected sync units. */
    'sync_metadata.last_sync_in.sync_unit'?: string[];
    /** Filters for works with selected sync statuses. */
    'sync_metadata.last_sync_out.status'?: SyncMetadataFilterSyncOutFilterStatus[];
    /** Filters for works modified with selected sync units. */
    'sync_metadata.last_sync_out.sync_unit'?: string[];
    /** Filters for issues synced from this specific origin system. */
    'sync_metadata.origin_system'?: string[];
    /** The filter operator to be applied. */
    tag_ids_op?: WorksFilterTagIdsOperatorType;
    /**
     * Filters for work with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /**
     * The ID of the tag.
     * @example "TAG-12345"
     */
    'tags_v2.id'?: string;
    /**
     * The value for the object's association with the tag. If specified,
     * the value must be one that's specified in the tag's allowed values.
     */
    'tags_v2.value'?: string;
    /**
     * Whether to include items belonging to children of any of the provided
     * parts.
     */
    'task.applies_to_part.include_child_parts'?: boolean;
    /**
     * Part IDs to filter on. Required if any task.applies_to_part.* fields
     * are provided.
     * @example ["PROD-12345"]
     */
    'task.applies_to_part.parts'?: string[];
    /** Operation type for applies to part filter. */
    'task.applies_to_part.parts_op'?: AppliesToPartFilterPartsOpOperatorType;
    /** Filter for tasks with any of the provided embedded values. */
    'task.embedded'?: boolean[];
    /** Filters for tasks with any of the provided priorities. */
    'task.priority'?: TaskPriority[];
    /**
     * Filters for tasks which started after the provided timestamp.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'task.start_after_date'?: string;
    /**
     * Filters for tasks which started before the provided timestamp.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'task.start_before_date'?: string;
    /**
     * Whether to include items belonging to children of any of the provided
     * parts.
     */
    'ticket.applies_to_part.include_child_parts'?: boolean;
    /**
     * Part IDs to filter on. Required if any ticket.applies_to_part.*
     * fields are provided.
     * @example ["PROD-12345"]
     */
    'ticket.applies_to_part.parts'?: string[];
    /** Operation type for applies to part filter. */
    'ticket.applies_to_part.parts_op'?: AppliesToPartFilterPartsOpOperatorType;
    /** Filters for tickets with any of the provided channels. */
    'ticket.channels'?: TicketChannels[];
    /** The Filter operator to be applied on channels filter for tickets. */
    'ticket.channels_op'?: WorksFilterTicketChannelsOperatorType;
    /** Filters for tickets belonging to specific groups. */
    'ticket.group'?: string[];
    /** The filter operator to be applied on group filter for tickets. */
    'ticket.group_op'?: WorksFilterTicketGroupsOpOperatorType;
    /** Filters for tickets that are spam. */
    'ticket.is_spam'?: boolean;
    /** Filters for tickets that need response. */
    'ticket.needs_response'?: boolean;
    /**
     * Filters for tickets that are associated with any of the provided Rev
     * organizations.
     * @example ["REV-AbCdEfGh"]
     */
    'ticket.rev_org'?: string[];
    /** The filter operator to be applied. */
    'ticket.rev_org_ids_op'?: WorksFilterTicketRevOrgIDsOperatorType;
    /** Filters for tickets with any of the provided severities. */
    'ticket.severity'?: TicketSeverity[];
    /** Filters for tickets with any of the provided SLAs applying to it. */
    'ticket.sla'?: string[];
    /** Filters for records with any of the provided SLA stages. */
    'ticket.sla_summary.stage'?: SlaSummaryStage[];
    /** Filters for tickets with any of the provided source channels. */
    'ticket.source_channel'?: string[];
    /** Filters for tickets with any of the provided subtypes. */
    'ticket.subtype'?: string[];
    /** The filter operator to be applied on subtype. */
    'ticket.subtype_op'?: SubtypeOpOperatorType;
    /**
     * Minimum value for an object aggregation. Required if any
     * ticket.surveys.* fields are provided.
     */
    'ticket.surveys.minimum'?: string[];
    /** Filters for work of the provided types. */
    type?: WorkType[];
    /**
     * Filters for work belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
export interface WorksGetParams {
    /**
     * The work's ID.
     * @example "ISS-12345"
     */
    id: string;
}
export interface WorksGroupParams {
    /** The field to group the works by. */
    group_by: string;
    /**
     * Filters for work which have one of the parts present as its ancestor
     * part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /**
     * Filters for work belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_part?: string[];
    /**
     * Filters for work created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /** The filter operator to be applied on created_by. */
    created_by_op?: WorksFilterCreatedByOperatorType;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** Filters for custom fields. */
    custom_fields?: object;
    /**
     * Filters for work excluding the provided work IDs.
     * @example ["ISS-12345"]
     */
    exclude?: string[];
    /** Whether to exclude items whose parent adhere to the filter. */
    exclude_child_items?: boolean;
    /**
     * Filters for issues with any of the provided Accounts.
     * @example ["ACC-12345"]
     */
    'issue.accounts'?: string[];
    /** The filter operator to be applied on accounts. */
    'issue.accounts_op'?: WorksFilterIssueAccountsOpOperatorType;
    /**
     * Whether to include items belonging to children of any of the provided
     * parts.
     */
    'issue.applies_to_part.include_child_parts'?: boolean;
    /**
     * Part IDs to filter on. Required if any issue.applies_to_part.* fields
     * are provided.
     * @example ["PROD-12345"]
     */
    'issue.applies_to_part.parts'?: string[];
    /** Operation type for applies to part filter. */
    'issue.applies_to_part.parts_op'?: AppliesToPartFilterPartsOpOperatorType;
    /** Filters for issues with any of the provided priority enum ids. */
    'issue.priority_v2'?: number[];
    /**
     * Filters for issues with any of the provided Rev organizations.
     * @example ["REV-AbCdEfGh"]
     */
    'issue.rev_orgs'?: string[];
    /** The filter operator to be applied on rev_orgs. */
    'issue.rev_orgs_op'?: WorksFilterIssueRevOrgsOpOperatorType;
    /** Filters for issues with any of the sprint. */
    'issue.sprint'?: string[];
    /** The filter operator to be applied on sprint. */
    'issue.sprint_op'?: WorksFilterIssueSprintOpOperatorType;
    /** Filters for issues with any of the provided subtypes. */
    'issue.subtype'?: string[];
    /** The filter operator to be applied on subtype. */
    'issue.subtype_op'?: SubtypeOpOperatorType;
    /**
     * The maximum number of groups to return. If not set, then the default
     * is '10'.
     * @format int32
     */
    limit?: number;
    /**
     * The maximum number of works to return for an individual group. If not
     * set, then the default is '50'.
     * @format int32
     */
    limit_per_group?: number;
    /** Filters for work with any of the provided link target objects. */
    link_target_object?: string[];
    /** The filter operator to be applied. */
    link_target_object_op?: WorksFilterLinkTargetObjectOperatorType;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * Filters for opportunities belonging to any of the provided accounts.
     * @example ["ACC-12345"]
     */
    'opportunity.account'?: string[];
    /** Filters for opportunities with any of the provided contacts. */
    'opportunity.contacts'?: string[];
    /** The filter operator to be applied on contacts. */
    'opportunity.contacts_op'?: WorksFilterOpportunityContactsOpOperatorType;
    /**
     * Filters for opportunities with any of the provided forecast
     * categories.
     */
    'opportunity.forecast_category'?: OpportunityForecastCategory[];
    /** Filters for opportunities with any of the provided priorities. */
    'opportunity.priority'?: OpportunityPriority[];
    /** Filters for opportunity with any of the provided subtypes. */
    'opportunity.subtype'?: string[];
    /** The filter operator to be applied on subtype. */
    'opportunity.subtype_op'?: SubtypeOpOperatorType;
    /**
     * Filters for work owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /** The filter operator to be applied on owned_by. */
    owned_by_op?: WorksFilterOwnedByOperatorType;
    /**
     * Filters for work reported by any of these users.
     * @example ["DEVU-12345"]
     */
    reported_by?: string[];
    /** The filter operator to be applied on reported_by. */
    reported_by_op?: WorksFilterReportedByOperatorType;
    /** Comma-separated fields to sort the works by. */
    sort_by?: string[];
    /** Filters for records in the provided stage(s) by name. */
    'stage.name'?: string[];
    /** List of IDs of the custom stages which will be used for filtering. */
    'stage.stages'?: string[];
    /** Filters for work for the provided stage names. */
    stage_names?: string[];
    /** Filters for issues that are staged. */
    'staged_info.is_staged'?: boolean;
    /** Filters for work with any of the provided states. */
    state?: string[];
    /** Filters for works with selected sync statuses. */
    'sync_metadata.last_sync_in.status'?: SyncMetadataFilterSyncInFilterStatus[];
    /** Filters for works modified with selected sync units. */
    'sync_metadata.last_sync_in.sync_unit'?: string[];
    /** Filters for works with selected sync statuses. */
    'sync_metadata.last_sync_out.status'?: SyncMetadataFilterSyncOutFilterStatus[];
    /** Filters for works modified with selected sync units. */
    'sync_metadata.last_sync_out.sync_unit'?: string[];
    /** Filters for issues synced from this specific origin system. */
    'sync_metadata.origin_system'?: string[];
    /** The filter operator to be applied. */
    tag_ids_op?: WorksFilterTagIdsOperatorType;
    /**
     * Filters for work with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /**
     * The ID of the tag.
     * @example "TAG-12345"
     */
    'tags_v2.id'?: string;
    /**
     * The value for the object's association with the tag. If specified,
     * the value must be one that's specified in the tag's allowed values.
     */
    'tags_v2.value'?: string;
    /**
     * Whether to include items belonging to children of any of the provided
     * parts.
     */
    'task.applies_to_part.include_child_parts'?: boolean;
    /**
     * Part IDs to filter on. Required if any task.applies_to_part.* fields
     * are provided.
     * @example ["PROD-12345"]
     */
    'task.applies_to_part.parts'?: string[];
    /** Operation type for applies to part filter. */
    'task.applies_to_part.parts_op'?: AppliesToPartFilterPartsOpOperatorType;
    /** Filter for tasks with any of the provided embedded values. */
    'task.embedded'?: boolean[];
    /** Filters for tasks with any of the provided priorities. */
    'task.priority'?: TaskPriority[];
    /**
     * Filters for tasks which started after the provided timestamp.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'task.start_after_date'?: string;
    /**
     * Filters for tasks which started before the provided timestamp.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'task.start_before_date'?: string;
    /**
     * Whether to include items belonging to children of any of the provided
     * parts.
     */
    'ticket.applies_to_part.include_child_parts'?: boolean;
    /**
     * Part IDs to filter on. Required if any ticket.applies_to_part.*
     * fields are provided.
     * @example ["PROD-12345"]
     */
    'ticket.applies_to_part.parts'?: string[];
    /** Operation type for applies to part filter. */
    'ticket.applies_to_part.parts_op'?: AppliesToPartFilterPartsOpOperatorType;
    /** Filters for tickets with any of the provided channels. */
    'ticket.channels'?: TicketChannels[];
    /** The Filter operator to be applied on channels filter for tickets. */
    'ticket.channels_op'?: WorksFilterTicketChannelsOperatorType;
    /** Filters for tickets belonging to specific groups. */
    'ticket.group'?: string[];
    /** The filter operator to be applied on group filter for tickets. */
    'ticket.group_op'?: WorksFilterTicketGroupsOpOperatorType;
    /** Filters for tickets that are spam. */
    'ticket.is_spam'?: boolean;
    /** Filters for tickets that need response. */
    'ticket.needs_response'?: boolean;
    /**
     * Filters for tickets that are associated with any of the provided Rev
     * organizations.
     * @example ["REV-AbCdEfGh"]
     */
    'ticket.rev_org'?: string[];
    /** The filter operator to be applied. */
    'ticket.rev_org_ids_op'?: WorksFilterTicketRevOrgIDsOperatorType;
    /** Filters for tickets with any of the provided severities. */
    'ticket.severity'?: TicketSeverity[];
    /** Filters for tickets with any of the provided SLAs applying to it. */
    'ticket.sla'?: string[];
    /** Filters for records with any of the provided SLA stages. */
    'ticket.sla_summary.stage'?: SlaSummaryStage[];
    /** Filters for tickets with any of the provided source channels. */
    'ticket.source_channel'?: string[];
    /** Filters for tickets with any of the provided subtypes. */
    'ticket.subtype'?: string[];
    /** The filter operator to be applied on subtype. */
    'ticket.subtype_op'?: SubtypeOpOperatorType;
    /**
     * Minimum value for an object aggregation. Required if any
     * ticket.surveys.* fields are provided.
     */
    'ticket.surveys.minimum'?: string[];
    /** Filters for work of the provided types. */
    type?: WorkType[];
    /**
     * Filters for work belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
export interface WorksListParams {
    /**
     * Filters for work which have one of the parts present as its ancestor
     * part or primary part.
     * @example ["PROD-12345"]
     */
    ancestor_part?: string[];
    /**
     * Filters for work belonging to any of the provided parts.
     * @example ["PROD-12345"]
     */
    applies_to_part?: string[];
    /**
     * The connection to list the work items for.
     * @maxLength 1
     */
    connection?: string[];
    /**
     * Filters for work created by any of these users.
     * @example ["DEVU-12345"]
     */
    created_by?: string[];
    /** The filter operator to be applied on created_by. */
    created_by_op?: WorksFilterCreatedByOperatorType;
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /** Filters for custom fields. */
    custom_fields?: object;
    /**
     * Filters for work excluding the provided work IDs.
     * @example ["ISS-12345"]
     */
    exclude?: string[];
    /** Whether to exclude items whose parent adhere to the filter. */
    exclude_child_items?: boolean;
    /**
     * Filters for issues with any of the provided Accounts.
     * @example ["ACC-12345"]
     */
    'issue.accounts'?: string[];
    /** The filter operator to be applied on accounts. */
    'issue.accounts_op'?: WorksFilterIssueAccountsOpOperatorType;
    /**
     * Whether to include items belonging to children of any of the provided
     * parts.
     */
    'issue.applies_to_part.include_child_parts'?: boolean;
    /**
     * Part IDs to filter on. Required if any issue.applies_to_part.* fields
     * are provided.
     * @example ["PROD-12345"]
     */
    'issue.applies_to_part.parts'?: string[];
    /** Operation type for applies to part filter. */
    'issue.applies_to_part.parts_op'?: AppliesToPartFilterPartsOpOperatorType;
    /** Filters for issues with any of the provided priority enum ids. */
    'issue.priority_v2'?: number[];
    /**
     * Filters for issues with any of the provided Rev organizations.
     * @example ["REV-AbCdEfGh"]
     */
    'issue.rev_orgs'?: string[];
    /** The filter operator to be applied on rev_orgs. */
    'issue.rev_orgs_op'?: WorksFilterIssueRevOrgsOpOperatorType;
    /** Filters for issues with any of the sprint. */
    'issue.sprint'?: string[];
    /** The filter operator to be applied on sprint. */
    'issue.sprint_op'?: WorksFilterIssueSprintOpOperatorType;
    /** Filters for issues with any of the provided subtypes. */
    'issue.subtype'?: string[];
    /** The filter operator to be applied on subtype. */
    'issue.subtype_op'?: SubtypeOpOperatorType;
    /**
     * The maximum number of works to return. The default is '50'.
     * @format int32
     */
    limit?: number;
    /** Filters for work with any of the provided link target objects. */
    link_target_object?: string[];
    /** The filter operator to be applied. */
    link_target_object_op?: WorksFilterLinkTargetObjectOperatorType;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /**
     * Filters for opportunities belonging to any of the provided accounts.
     * @example ["ACC-12345"]
     */
    'opportunity.account'?: string[];
    /** Filters for opportunities with any of the provided contacts. */
    'opportunity.contacts'?: string[];
    /** The filter operator to be applied on contacts. */
    'opportunity.contacts_op'?: WorksFilterOpportunityContactsOpOperatorType;
    /**
     * Filters for opportunities with any of the provided forecast
     * categories.
     */
    'opportunity.forecast_category'?: OpportunityForecastCategory[];
    /** Filters for opportunities with any of the provided priorities. */
    'opportunity.priority'?: OpportunityPriority[];
    /** Filters for opportunity with any of the provided subtypes. */
    'opportunity.subtype'?: string[];
    /** The filter operator to be applied on subtype. */
    'opportunity.subtype_op'?: SubtypeOpOperatorType;
    /**
     * Filters for work owned by any of these users.
     * @example ["DEVU-12345"]
     */
    owned_by?: string[];
    /** The filter operator to be applied on owned_by. */
    owned_by_op?: WorksFilterOwnedByOperatorType;
    /**
     * Filters for work reported by any of these users.
     * @example ["DEVU-12345"]
     */
    reported_by?: string[];
    /** The filter operator to be applied on reported_by. */
    reported_by_op?: WorksFilterReportedByOperatorType;
    /** The search query to filter the works. */
    search_query?: string;
    /** Fields to sort the works by and the direction to sort them. */
    sort_by?: string[];
    /** Filters for records in the provided stage(s) by name. */
    'stage.name'?: string[];
    /** List of IDs of the custom stages which will be used for filtering. */
    'stage.stages'?: string[];
    /** Filters for work for the provided stage names. */
    stage_names?: string[];
    /** Filters for issues that are staged. */
    'staged_info.is_staged'?: boolean;
    /** Filters for work with any of the provided states. */
    state?: string[];
    /** Filters for works with selected sync statuses. */
    'sync_metadata.last_sync_in.status'?: SyncMetadataFilterSyncInFilterStatus[];
    /** Filters for works modified with selected sync units. */
    'sync_metadata.last_sync_in.sync_unit'?: string[];
    /** Filters for works with selected sync statuses. */
    'sync_metadata.last_sync_out.status'?: SyncMetadataFilterSyncOutFilterStatus[];
    /** Filters for works modified with selected sync units. */
    'sync_metadata.last_sync_out.sync_unit'?: string[];
    /** Filters for issues synced from this specific origin system. */
    'sync_metadata.origin_system'?: string[];
    /** The filter operator to be applied. */
    tag_ids_op?: WorksFilterTagIdsOperatorType;
    /**
     * Filters for work with any of the provided tags.
     * @example ["TAG-12345"]
     */
    tags?: string[];
    /**
     * The ID of the tag.
     * @example "TAG-12345"
     */
    'tags_v2.id'?: string;
    /**
     * The value for the object's association with the tag. If specified,
     * the value must be one that's specified in the tag's allowed values.
     */
    'tags_v2.value'?: string;
    /**
     * Whether to include items belonging to children of any of the provided
     * parts.
     */
    'task.applies_to_part.include_child_parts'?: boolean;
    /**
     * Part IDs to filter on. Required if any task.applies_to_part.* fields
     * are provided.
     * @example ["PROD-12345"]
     */
    'task.applies_to_part.parts'?: string[];
    /** Operation type for applies to part filter. */
    'task.applies_to_part.parts_op'?: AppliesToPartFilterPartsOpOperatorType;
    /** Filter for tasks with any of the provided embedded values. */
    'task.embedded'?: boolean[];
    /** Filters for tasks with any of the provided priorities. */
    'task.priority'?: TaskPriority[];
    /**
     * Filters for tasks which started after the provided timestamp.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'task.start_after_date'?: string;
    /**
     * Filters for tasks which started before the provided timestamp.
     * @format date-time
     * @example "2023-01-01T12:00:00.000Z"
     */
    'task.start_before_date'?: string;
    /**
     * Whether to include items belonging to children of any of the provided
     * parts.
     */
    'ticket.applies_to_part.include_child_parts'?: boolean;
    /**
     * Part IDs to filter on. Required if any ticket.applies_to_part.*
     * fields are provided.
     * @example ["PROD-12345"]
     */
    'ticket.applies_to_part.parts'?: string[];
    /** Operation type for applies to part filter. */
    'ticket.applies_to_part.parts_op'?: AppliesToPartFilterPartsOpOperatorType;
    /** Filters for tickets with any of the provided channels. */
    'ticket.channels'?: TicketChannels[];
    /** The Filter operator to be applied on channels filter for tickets. */
    'ticket.channels_op'?: WorksFilterTicketChannelsOperatorType;
    /** Filters for tickets belonging to specific groups. */
    'ticket.group'?: string[];
    /** The filter operator to be applied on group filter for tickets. */
    'ticket.group_op'?: WorksFilterTicketGroupsOpOperatorType;
    /** Filters for tickets that are spam. */
    'ticket.is_spam'?: boolean;
    /** Filters for tickets that need response. */
    'ticket.needs_response'?: boolean;
    /**
     * Filters for tickets that are associated with any of the provided Rev
     * organizations.
     * @example ["REV-AbCdEfGh"]
     */
    'ticket.rev_org'?: string[];
    /** The filter operator to be applied. */
    'ticket.rev_org_ids_op'?: WorksFilterTicketRevOrgIDsOperatorType;
    /** Filters for tickets with any of the provided severities. */
    'ticket.severity'?: TicketSeverity[];
    /** Filters for tickets with any of the provided SLAs applying to it. */
    'ticket.sla'?: string[];
    /** Filters for records with any of the provided SLA stages. */
    'ticket.sla_summary.stage'?: SlaSummaryStage[];
    /** Filters for tickets with any of the provided source channels. */
    'ticket.source_channel'?: string[];
    /** Filters for tickets with any of the provided subtypes. */
    'ticket.subtype'?: string[];
    /** The filter operator to be applied on subtype. */
    'ticket.subtype_op'?: SubtypeOpOperatorType;
    /**
     * Minimum value for an object aggregation. Required if any
     * ticket.surveys.* fields are provided.
     */
    'ticket.surveys.minimum'?: string[];
    /** Filters for work of the provided types. */
    type?: WorkType[];
    /**
     * Filters for work belonging to the given vista.
     * @example "VISTA-12345"
     */
    vista?: string;
}
export interface WorksSuggestParams {
    /**
     * The cursor to resume iteration from. If not provided, then iteration
     * starts from the beginning.
     */
    cursor?: string;
    /**
     * The maximum number of works to return. If not set, then the default
     * is '50'.
     * @format int32
     */
    limit?: number;
    /**
     * The iteration mode to use, otherwise if not set, then "after" is
     * used.
     */
    mode?: ListMode;
    /** Filters for work of the provided types. */
    type?: WorkType[];
}
export interface WorksSuggestInfoParams {
    /** Type of work whose info need to be suggested. */
    type: WorkType;
    /** List of messages to suggest work title and description from. */
    messages?: string[];
    /**
     * ID of the source conversation object from which work info needs to be
     * suggested.
     */
    source?: string;
}
import { AxiosInstance, AxiosRequestConfig, AxiosResponse, ResponseType } from 'axios';
export type QueryParamsType = Record<string | number, any>;
export interface FullRequestParams extends Omit<AxiosRequestConfig, 'data' | 'params' | 'url' | 'responseType'> {
    /** set parameter to `true` for call `securityWorker` for this request */
    secure?: boolean;
    /** request path */
    path: string;
    /** content type of request body */
    type?: ContentType;
    /** query params */
    query?: QueryParamsType;
    /** format of response (i.e. response.json() -> format: "json") */
    format?: ResponseType;
    /** request body */
    body?: unknown;
}
export type RequestParams = Omit<FullRequestParams, 'body' | 'method' | 'query' | 'path'>;
export interface ApiConfig<SecurityDataType = unknown> extends Omit<AxiosRequestConfig, 'data' | 'cancelToken'> {
    securityWorker?: (securityData: SecurityDataType | null) => Promise<AxiosRequestConfig | void> | AxiosRequestConfig | void;
    secure?: boolean;
    format?: ResponseType;
}
export declare enum ContentType {
    Json = "application/json",
    FormData = "multipart/form-data",
    UrlEncoded = "application/x-www-form-urlencoded",
    Text = "text/plain"
}
export declare class HttpClient<SecurityDataType = unknown> {
    instance: AxiosInstance;
    private securityData;
    private securityWorker?;
    private secure?;
    private format?;
    constructor({ securityWorker, secure, format, ...axiosConfig }?: ApiConfig<SecurityDataType>);
    setSecurityData: (data: SecurityDataType | null) => void;
    protected mergeRequestParams(params1: AxiosRequestConfig, params2?: AxiosRequestConfig): AxiosRequestConfig;
    protected stringifyFormItem(formItem: unknown): string;
    protected createFormData(input: Record<string, unknown>): FormData;
    request: <T = any, _E = any>({ secure, path, type, query, format, body, ...params }: FullRequestParams) => Promise<AxiosResponse<T, any>>;
}
/**
 * @title DevRev REST API
 * @version NEXT
 * @baseUrl {protocol}://{hostname}
 *
 * DevRev's REST API.
 */
export declare class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
    /**
     * @description Gets Account's commerce details.
     *
     * @tags commerce
     * @name AccountsCommerceDetailsGet
     * @request GET:/internal/accounts.commerce-details.get
     * @secure
     */
    accountsCommerceDetailsGet: (query: AccountsCommerceDetailsGetParams, params?: RequestParams) => Promise<AxiosResponse<AccountsCommerceDetailsGetResponse, any>>;
    /**
     * @description Gets Account's commerce details.
     *
     * @tags commerce
     * @name AccountsCommerceDetailsGetPost
     * @request POST:/internal/accounts.commerce-details.get
     * @secure
     */
    accountsCommerceDetailsGetPost: (data: AccountsCommerceDetailsGetRequest, params?: RequestParams) => Promise<AxiosResponse<AccountsCommerceDetailsGetResponse, any>>;
    /**
     * @description List Account's commerce details.
     *
     * @tags commerce
     * @name AccountsCommerceDetailsList
     * @request GET:/internal/accounts.commerce-details.list
     * @secure
     */
    accountsCommerceDetailsList: (query: AccountsCommerceDetailsListParams, params?: RequestParams) => Promise<AxiosResponse<AccountsCommerceDetailsListResponse, any>>;
    /**
     * @description List Account's commerce details.
     *
     * @tags commerce
     * @name AccountsCommerceDetailsList
     * @request GET:/internal/accounts.commerce-details.list
     * @secure */
    accountsCommerceDetailsListPaginator(query: AccountsCommerceDetailsListParams, params?: RequestParams): AsyncGenerator<AccountsCommerceDetailsListResponse, void, unknown>;
    /**
     * @description List Account's commerce details.
     *
     * @tags commerce
     * @name AccountsCommerceDetailsListPost
     * @request POST:/internal/accounts.commerce-details.list
     * @secure
     */
    accountsCommerceDetailsListPost: (data: AccountsCommerceDetailsListRequest, params?: RequestParams) => Promise<AxiosResponse<AccountsCommerceDetailsListResponse, any>>;
    /**
     * @description Updates Account's commerce details.
     *
     * @tags commerce
     * @name AccountsCommerceDetailsUpdate
     * @request POST:/internal/accounts.commerce-details.update
     * @secure
     */
    accountsCommerceDetailsUpdate: (data: AccountsCommerceDetailsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<AccountsCommerceDetailsUpdateResponse, any>>;
    /**
     * @description ### Owner: akanksha.deswal@devrev.ai ### Gets the count of accounts matching given filter.
     *
     * @tags accounts
     * @name AccountsCount
     * @request GET:/internal/accounts.count
     * @secure
     */
    accountsCount: (query: AccountsCountParams, params?: RequestParams) => Promise<AxiosResponse<AccountsCountResponse, any>>;
    /**
     * @description Gets the count of accounts matching given filter.
     *
     * @tags accounts
     * @name AccountsCountPost
     * @request POST:/internal/accounts.count
     * @secure
     */
    accountsCountPost: (data: AccountsCountRequest, params?: RequestParams) => Promise<AxiosResponse<AccountsCountResponse, any>>;
    /**
     * @description Creates an account, which is a record representing a customer or an organization.
     *
     * @tags accounts
     * @name AccountsCreate
     * @request POST:/internal/accounts.create
     * @secure
     */
    accountsCreate: (data: AccountsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<AccountsCreateResponse, any>>;
    /**
     * @description Creates bulk accounts.
     *
     * @tags accounts
     * @name AccountsBulkCreate
     * @request POST:/internal/accounts.create.bulk.csv
     * @secure
     */
    accountsBulkCreate: (data: AccountsBulkCreateRequest, params?: RequestParams) => Promise<AxiosResponse<AccountsBulkCreateResponse, any>>;
    /**
     * @description Deletes an account.
     *
     * @tags accounts
     * @name AccountsDelete
     * @request POST:/internal/accounts.delete
     * @secure
     */
    accountsDelete: (data: AccountsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Checks if an account can be deleted.
     *
     * @tags accounts
     * @name AccountsDeleteValidate
     * @request POST:/internal/accounts.delete.validate
     * @secure
     */
    accountsDeleteValidate: (data: AccountsDeleteValidateRequest, params?: RequestParams) => Promise<AxiosResponse<AccountsDeleteValidateResponse, any>>;
    /**
     * @description Counts duplicate accounts.
     *
     * @tags accounts
     * @name DuplicateAccountPairsCount
     * @request GET:/internal/accounts.duplicates.count
     * @secure
     */
    duplicateAccountPairsCount: (params?: RequestParams) => Promise<AxiosResponse<DuplicateAccountPairsCountResponse, any>>;
    /**
     * @description Counts duplicate accounts.
     *
     * @tags accounts
     * @name DuplicateAccountPairsCountPost
     * @request POST:/internal/accounts.duplicates.count
     * @secure
     */
    duplicateAccountPairsCountPost: (data: DuplicateAccountPairsCountRequest, params?: RequestParams) => Promise<AxiosResponse<DuplicateAccountPairsCountResponse, any>>;
    /**
     * @description Creates an object member.
     *
     * @tags accounts
     * @name DuplicateAccountPairsIgnore
     * @request POST:/internal/accounts.duplicates.ignore
     * @secure
     */
    duplicateAccountPairsIgnore: (data: DuplicateAccountPairsIgnoreRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Lists duplicate accounts.
     *
     * @tags accounts
     * @name DuplicateAccountPairsList
     * @request GET:/internal/accounts.duplicates.list
     * @secure
     */
    duplicateAccountPairsList: (query: DuplicateAccountPairsListParams, params?: RequestParams) => Promise<AxiosResponse<DuplicateAccountPairsListResponse, any>>;
    /**
     * @description Lists duplicate accounts.
     *
     * @tags accounts
     * @name DuplicateAccountPairsList
     * @request GET:/internal/accounts.duplicates.list
     * @secure */
    duplicateAccountPairsListPaginator(query: DuplicateAccountPairsListParams, params?: RequestParams): AsyncGenerator<DuplicateAccountPairsListResponse, void, unknown>;
    /**
     * @description Lists duplicate accounts.
     *
     * @tags accounts
     * @name DuplicateAccountPairsListPost
     * @request POST:/internal/accounts.duplicates.list
     * @secure
     */
    duplicateAccountPairsListPost: (data: DuplicateAccountPairsListRequest, params?: RequestParams) => Promise<AxiosResponse<DuplicateAccountPairsListResponse, any>>;
    /**
     * @description ### Owner: akanksha.deswal@devrev.ai ### Exports a collection of accounts.
     *
     * @tags accounts
     * @name AccountsExport
     * @request GET:/internal/accounts.export
     * @secure
     */
    accountsExport: (query: AccountsExportParams, params?: RequestParams) => Promise<AxiosResponse<AccountsExportResponse, any>>;
    /**
     * @description Exports a collection of accounts.
     *
     * @tags accounts
     * @name AccountsExportPost
     * @request POST:/internal/accounts.export
     * @secure
     */
    accountsExportPost: (data: AccountsExportRequest, params?: RequestParams) => Promise<AxiosResponse<AccountsExportResponse, any>>;
    /**
     * @description ### Owner: akanksha.deswal@devrev.ai ### Retrieves an account's information.
     *
     * @tags accounts
     * @name AccountsGet
     * @request GET:/internal/accounts.get
     * @secure
     */
    accountsGet: (query: AccountsGetParams, params?: RequestParams) => Promise<AxiosResponse<AccountsGetResponse, any>>;
    /**
     * @description Retrieves an account's information.
     *
     * @tags accounts
     * @name AccountsGetPost
     * @request POST:/internal/accounts.get
     * @secure
     */
    accountsGetPost: (data: AccountsGetRequest, params?: RequestParams) => Promise<AxiosResponse<AccountsGetResponse, any>>;
    /**
     * @description ### Owner: adwait.kulkarni@devrev.ai ### Gets the SLA that will apply on supported objects for this account, if any.
     *
     * @tags accounts, slas
     * @name AccountsGetSla
     * @request GET:/internal/accounts.get-sla
     * @secure
     */
    accountsGetSla: (query: AccountsGetSlaParams, params?: RequestParams) => Promise<AxiosResponse<AccountsGetSlaResponse, any>>;
    /**
     * @description Gets the SLA that will apply on supported objects for this account, if any.
     *
     * @tags accounts, slas
     * @name AccountsGetSlaPost
     * @request POST:/internal/accounts.get-sla
     * @secure
     */
    accountsGetSlaPost: (data: AccountsGetSlaRequest, params?: RequestParams) => Promise<AxiosResponse<AccountsGetSlaResponse, any>>;
    /**
     * @description ### Owner: akanksha.deswal@devrev.ai ### Lists collections of accounts by groups.
     *
     * @tags accounts
     * @name AccountsGroup
     * @request GET:/internal/accounts.group
     * @secure
     */
    accountsGroup: (query: AccountsGroupParams, params?: RequestParams) => Promise<AxiosResponse<AccountsGroupResponse, any>>;
    /**
     * @description ### Owner: akanksha.deswal@devrev.ai ### Lists collections of accounts by groups.
     *
     * @tags accounts
     * @name AccountsGroup
     * @request GET:/internal/accounts.group
     * @secure */
    accountsGroupPaginator(query: AccountsGroupParams, params?: RequestParams): AsyncGenerator<AccountsGroupResponse, void, unknown>;
    /**
     * @description Lists collections of accounts by groups.
     *
     * @tags accounts
     * @name AccountsGroupPost
     * @request POST:/internal/accounts.group
     * @secure
     */
    accountsGroupPost: (data: AccountsGroupRequest, params?: RequestParams) => Promise<AxiosResponse<AccountsGroupResponse, any>>;
    /**
     * @description ### Owner: akanksha.deswal@devrev.ai ### Gets a list of accounts.
     *
     * @tags accounts
     * @name AccountsList
     * @request GET:/internal/accounts.list
     * @secure
     */
    accountsList: (query: AccountsListParams, params?: RequestParams) => Promise<AxiosResponse<AccountsListResponse, any>>;
    /**
     * @description ### Owner: akanksha.deswal@devrev.ai ### Gets a list of accounts.
     *
     * @tags accounts
     * @name AccountsList
     * @request GET:/internal/accounts.list
     * @secure */
    accountsListPaginator(query: AccountsListParams, params?: RequestParams): AsyncGenerator<AccountsListResponse, void, unknown>;
    /**
     * @description Gets a list of accounts.
     *
     * @tags accounts
     * @name AccountsListPost
     * @request POST:/internal/accounts.list
     * @secure
     */
    accountsListPost: (data: AccountsListRequest, params?: RequestParams) => Promise<AxiosResponse<AccountsListResponse, any>>;
    /**
     * @description Merges two accounts.
     *
     * @tags accounts
     * @name AccountsMerge
     * @request POST:/internal/accounts.merge
     * @secure
     */
    accountsMerge: (data: AccountsMergeRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: akanksha.deswal@devrev.ai ### Fetches sample CSV for bulk import.
     *
     * @tags accounts
     * @name GetAccountsSampleCsv
     * @request GET:/internal/accounts.sample-csv.get
     * @secure
     */
    getAccountsSampleCsv: (params?: RequestParams) => Promise<AxiosResponse<GetAccountSampleCsvResponse, any>>;
    /**
     * @description Fetches sample CSV for bulk import.
     *
     * @tags accounts
     * @name GetAccountsSampleCsvPost
     * @request POST:/internal/accounts.sample-csv.get
     * @secure
     */
    getAccountsSampleCsvPost: (data: GetAccountSampleCsvRequest, params?: RequestParams) => Promise<AxiosResponse<GetAccountSampleCsvResponse, any>>;
    /**
     * @description Updates an account's information.
     *
     * @tags accounts
     * @name AccountsUpdate
     * @request POST:/internal/accounts.update
     * @secure
     */
    accountsUpdate: (data: AccountsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<AccountsUpdateResponse, any>>;
    /**
     * @description Upgrades all accounts schema.
     *
     * @tags accounts
     * @name AccountsUpgrade
     * @request POST:/internal/accounts.upgrade
     * @secure
     */
    accountsUpgrade: (data: AccountsUpgradeRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Creates an addon rule
     *
     * @tags commerce
     * @name AddonRulesCreate
     * @request POST:/internal/addon-rules.create
     * @secure
     */
    addonRulesCreate: (data: AddonRulesCreateRequest, params?: RequestParams) => Promise<AxiosResponse<AddonRulesCreateResponse, any>>;
    /**
     * @description Deletes an addon rule object.
     *
     * @tags commerce
     * @name AddonRulesDelete
     * @request POST:/internal/addon-rules.delete
     * @secure
     */
    addonRulesDelete: (data: AddonRulesDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Gets an addon rule
     *
     * @tags commerce
     * @name AddonRulesGet
     * @request GET:/internal/addon-rules.get
     * @secure
     */
    addonRulesGet: (query: AddonRulesGetParams, params?: RequestParams) => Promise<AxiosResponse<AddonRulesGetResponse, any>>;
    /**
     * @description Gets an addon rule
     *
     * @tags commerce
     * @name AddonRulesGetPost
     * @request POST:/internal/addon-rules.get
     * @secure
     */
    addonRulesGetPost: (data: AddonRulesGetRequest, params?: RequestParams) => Promise<AxiosResponse<AddonRulesGetResponse, any>>;
    /**
     * @description Gets the addon rule objects based on the given filters.
     *
     * @tags commerce
     * @name AddonRulesList
     * @request GET:/internal/addon-rules.list
     * @secure
     */
    addonRulesList: (query: AddonRulesListParams, params?: RequestParams) => Promise<AxiosResponse<AddonRulesListResponse, any>>;
    /**
     * @description Gets the addon rule objects based on the given filters.
     *
     * @tags commerce
     * @name AddonRulesList
     * @request GET:/internal/addon-rules.list
     * @secure */
    addonRulesListPaginator(query: AddonRulesListParams, params?: RequestParams): AsyncGenerator<AddonRulesListResponse, void, unknown>;
    /**
     * @description Gets the addon rule objects based on the given filters.
     *
     * @tags commerce
     * @name AddonRulesListPost
     * @request POST:/internal/addon-rules.list
     * @secure
     */
    addonRulesListPost: (data: AddonRulesListRequest, params?: RequestParams) => Promise<AxiosResponse<AddonRulesListResponse, any>>;
    /**
     * @description Updates an addon rule
     *
     * @tags commerce
     * @name AddonRulesUpdate
     * @request POST:/internal/addon-rules.update
     * @secure
     */
    addonRulesUpdate: (data: AddonRulesUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<AddonRulesUpdateResponse, any>>;
    /**
     * @description Creates a new AI agent.
     *
     * @tags ai-agents
     * @name AiAgentsCreate
     * @request POST:/internal/ai-agents.create
     * @secure
     */
    aiAgentsCreate: (data: AiAgentsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<AiAgentsCreateResponse, any>>;
    /**
     * @description Deletes an AI agent.
     *
     * @tags ai-agents
     * @name AiAgentsDelete
     * @request POST:/internal/ai-agents.delete
     * @secure
     */
    aiAgentsDelete: (data: AiAgentsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Consume an AI agent event asynchronously.
     *
     * @tags ai-agents
     * @name AiAgentEventsExecuteAsync
     * @request POST:/internal/ai-agents.events.execute-async
     * @secure
     */
    aiAgentEventsExecuteAsync: (data: AiAgentEventsExecuteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Consume an AI agent event synchronously.
     *
     * @tags ai-agents
     * @name AiAgentEventsExecuteSync
     * @request POST:/internal/ai-agents.events.execute-sync
     * @secure
     */
    aiAgentEventsExecuteSync: (data: AiAgentEventsExecuteRequest, params?: RequestParams) => Promise<AxiosResponse<AiAgentEventsExecuteSyncResponse, any>>;
    /**
     * @description ### Owner: i-sankalp.kulkarni@devrev.ai ### Gets an AI agent.
     *
     * @tags ai-agents
     * @name AiAgentsGet
     * @request GET:/internal/ai-agents.get
     * @secure
     */
    aiAgentsGet: (query: AiAgentsGetParams, params?: RequestParams) => Promise<AxiosResponse<AiAgentsGetResponse, any>>;
    /**
     * @description Gets an AI agent.
     *
     * @tags ai-agents
     * @name AiAgentsGetPost
     * @request POST:/internal/ai-agents.get
     * @secure
     */
    aiAgentsGetPost: (data: AiAgentsGetRequest, params?: RequestParams) => Promise<AxiosResponse<AiAgentsGetResponse, any>>;
    /**
     * @description ### Owner: i-sankalp.kulkarni@devrev.ai ### Lists AI agents.
     *
     * @tags ai-agents
     * @name AiAgentsList
     * @request GET:/internal/ai-agents.list
     * @secure
     */
    aiAgentsList: (query: AiAgentsListParams, params?: RequestParams) => Promise<AxiosResponse<AiAgentsListResponse, any>>;
    /**
     * @description ### Owner: i-sankalp.kulkarni@devrev.ai ### Lists AI agents.
     *
     * @tags ai-agents
     * @name AiAgentsList
     * @request GET:/internal/ai-agents.list
     * @secure */
    aiAgentsListPaginator(query: AiAgentsListParams, params?: RequestParams): AsyncGenerator<AiAgentsListResponse, void, unknown>;
    /**
     * @description Lists AI agents.
     *
     * @tags ai-agents
     * @name AiAgentsListPost
     * @request POST:/internal/ai-agents.list
     * @secure
     */
    aiAgentsListPost: (data: AiAgentsListRequest, params?: RequestParams) => Promise<AxiosResponse<AiAgentsListResponse, any>>;
    /**
     * @description ### Owner: i-sankalp.kulkarni@devrev.ai ### Get an AI agent session.
     *
     * @tags ai-agents
     * @name AiAgentSessionsGet
     * @request GET:/internal/ai-agents.sessions.get
     * @secure
     */
    aiAgentSessionsGet: (query: AiAgentSessionsGetParams, params?: RequestParams) => Promise<AxiosResponse<AiAgentSessionsGetResponse, any>>;
    /**
     * @description Get an AI agent session.
     *
     * @tags ai-agents
     * @name AiAgentSessionsGetPost
     * @request POST:/internal/ai-agents.sessions.get
     * @secure
     */
    aiAgentSessionsGetPost: (data: AiAgentSessionsGetRequest, params?: RequestParams) => Promise<AxiosResponse<AiAgentSessionsGetResponse, any>>;
    /**
     * @description ### Owner: i-sankalp.kulkarni@devrev.ai ### List AI agent sessions.
     *
     * @tags ai-agents
     * @name AiAgentSessionsList
     * @request GET:/internal/ai-agents.sessions.list
     * @secure
     */
    aiAgentSessionsList: (query: AiAgentSessionsListParams, params?: RequestParams) => Promise<AxiosResponse<AiAgentSessionsListResponse, any>>;
    /**
     * @description ### Owner: i-sankalp.kulkarni@devrev.ai ### List AI agent sessions.
     *
     * @tags ai-agents
     * @name AiAgentSessionsList
     * @request GET:/internal/ai-agents.sessions.list
     * @secure */
    aiAgentSessionsListPaginator(query: AiAgentSessionsListParams, params?: RequestParams): AsyncGenerator<AiAgentSessionsListResponse, void, unknown>;
    /**
     * @description List AI agent sessions.
     *
     * @tags ai-agents
     * @name AiAgentSessionsListPost
     * @request POST:/internal/ai-agents.sessions.list
     * @secure
     */
    aiAgentSessionsListPost: (data: AiAgentSessionsListRequest, params?: RequestParams) => Promise<AxiosResponse<AiAgentSessionsListResponse, any>>;
    /**
     * @description Updates an  AI agent.
     *
     * @tags ai-agents
     * @name AiAgentsUpdate
     * @request POST:/internal/ai-agents.update
     * @secure
     */
    aiAgentsUpdate: (data: AiAgentsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<AiAgentsUpdateResponse, any>>;
    /**
     * @description ### Owner: dario.gavranovic@devrev.ai ### Gets the capabilities of airdrop.
     *
     * @tags airdrop
     * @name AirdropCapabilitiesGet
     * @request GET:/internal/airdrop.capabilities.get
     * @secure
     */
    airdropCapabilitiesGet: (params?: RequestParams) => Promise<AxiosResponse<AirdropCapabilitiesGetResponse, any>>;
    /**
     * @description Gets the capabilities of airdrop.
     *
     * @tags airdrop
     * @name AirdropCapabilitiesGetPost
     * @request POST:/internal/airdrop.capabilities.get
     * @secure
     */
    airdropCapabilitiesGetPost: (data: AirdropCapabilitiesGetRequest, params?: RequestParams) => Promise<AxiosResponse<AirdropCapabilitiesGetResponse, any>>;
    /**
     * @description Resource for external extractor messages.
     *
     * @tags airdrop
     * @name AirdropExternalExtractorMessage
     * @request POST:/internal/airdrop.external-extractor.message
     * @secure
     */
    airdropExternalExtractorMessage: (data: AirdropExternalExtractorMessageRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Request to discover external sync units on a given external system of record.
     *
     * @tags airdrop
     * @name AirdropExternalSyncUnitsDiscover
     * @request POST:/internal/airdrop.external-sync-units.discover
     * @secure
     */
    airdropExternalSyncUnitsDiscover: (data: AirdropExternalSyncUnitsDiscoverRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: dario.gavranovic@devrev.ai ### Lists external sync units.
     *
     * @tags airdrop
     * @name AirdropExternalSyncUnitsList
     * @request GET:/internal/airdrop.external-sync-units.list
     * @secure
     */
    airdropExternalSyncUnitsList: (query: AirdropExternalSyncUnitsListParams, params?: RequestParams) => Promise<AxiosResponse<AirdropExternalSyncUnitsListResponse, any>>;
    /**
     * @description ### Owner: dario.gavranovic@devrev.ai ### Lists external sync units.
     *
     * @tags airdrop
     * @name AirdropExternalSyncUnitsList
     * @request GET:/internal/airdrop.external-sync-units.list
     * @secure */
    airdropExternalSyncUnitsListPaginator(query: AirdropExternalSyncUnitsListParams, params?: RequestParams): AsyncGenerator<AirdropExternalSyncUnitsListResponse, void, unknown>;
    /**
     * @description Lists external sync units.
     *
     * @tags airdrop
     * @name AirdropExternalSyncUnitsListPost
     * @request POST:/internal/airdrop.external-sync-units.list
     * @secure
     */
    airdropExternalSyncUnitsListPost: (data: AirdropExternalSyncUnitsListRequest, params?: RequestParams) => Promise<AxiosResponse<AirdropExternalSyncUnitsListResponse, any>>;
    /**
     * @description ### Owner: lorinc.body@devrev.ai ### Gets all the filters that are currently associated with the given sync unit.
     *
     * @tags airdrop
     * @name AssociatedFiltersCurrentGet
     * @request GET:/internal/airdrop.recipe.associated-filters.all-current-get
     * @secure
     */
    associatedFiltersCurrentGet: (query: AssociatedFiltersCurrentGetParams, params?: RequestParams) => Promise<AxiosResponse<AirdropRecipeAssociatedFiltersCurrentGetResponse, any>>;
    /**
     * @description Gets all the filters that are currently associated with the given sync unit.
     *
     * @tags airdrop
     * @name AssociatedFiltersCurrentGetPost
     * @request POST:/internal/airdrop.recipe.associated-filters.all-current-get
     * @secure
     */
    associatedFiltersCurrentGetPost: (data: AirdropRecipeAssociatedFiltersCurrentGetRequest, params?: RequestParams) => Promise<AxiosResponse<AirdropRecipeAssociatedFiltersCurrentGetResponse, any>>;
    /**
     * @description Associates a filter with a given sync unit and external item type, applying it in any future runs.
     *
     * @tags airdrop
     * @name FiltersAssociate
     * @request POST:/internal/airdrop.recipe.associated-filters.create
     * @secure
     */
    filtersAssociate: (data: AirdropRecipeFiltersAssociateRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: lorinc.body@devrev.ai ### Gets the filter that was associated with the given sync unit at the given sync history ID.
     *
     * @tags airdrop
     * @name AssociatedFiltersGet
     * @request GET:/internal/airdrop.recipe.associated-filters.get
     * @secure
     */
    associatedFiltersGet: (query: AssociatedFiltersGetParams, params?: RequestParams) => Promise<AxiosResponse<AirdropRecipeAssociatedFiltersGetResponse, any>>;
    /**
     * @description Gets the filter that was associated with the given sync unit at the given sync history ID.
     *
     * @tags airdrop
     * @name AssociatedFiltersGetPost
     * @request POST:/internal/airdrop.recipe.associated-filters.get
     * @secure
     */
    associatedFiltersGetPost: (data: AirdropRecipeAssociatedFiltersGetRequest, params?: RequestParams) => Promise<AxiosResponse<AirdropRecipeAssociatedFiltersGetResponse, any>>;
    /**
     * @description ### Owner: lorinc.body@devrev.ai ### Retrieves the filtering options (which fields can be used to setup filters), for the given sync unit and external item type.
     *
     * @tags airdrop
     * @name FilterOptionsGet
     * @request GET:/internal/airdrop.recipe.filter-options.get
     * @secure
     */
    filterOptionsGet: (query: FilterOptionsGetParams, params?: RequestParams) => Promise<AxiosResponse<AirdropRecipeFilterOptionsGetResponse, any>>;
    /**
     * @description Retrieves the filtering options (which fields can be used to setup filters), for the given sync unit and external item type.
     *
     * @tags airdrop
     * @name FilterOptionsGetPost
     * @request POST:/internal/airdrop.recipe.filter-options.get
     * @secure
     */
    filterOptionsGetPost: (data: AirdropRecipeFilterOptionsGetRequest, params?: RequestParams) => Promise<AxiosResponse<AirdropRecipeFilterOptionsGetResponse, any>>;
    /**
     * @description Creates a filter (useable for filtering out a subset of items from an import/sync), unattached to any particular recipe or sync unit.
     *
     * @tags airdrop
     * @name FiltersCreate
     * @request POST:/internal/airdrop.recipe.filters.create
     * @secure
     */
    filtersCreate: (data: AirdropRecipeFiltersCreateRequest, params?: RequestParams) => Promise<AxiosResponse<AirdropRecipeFiltersCreateResponse, any>>;
    /**
     * @description ### Owner: lorinc.body@devrev.ai ### Retrieves a filter by ID, irrespective of whether it is in any current import/snyc.
     *
     * @tags airdrop
     * @name FiltersGet
     * @request GET:/internal/airdrop.recipe.filters.get
     * @secure
     */
    filtersGet: (query: FiltersGetParams, params?: RequestParams) => Promise<AxiosResponse<AirdropRecipeFiltersGetResponse, any>>;
    /**
     * @description Retrieves a filter by ID, irrespective of whether it is in any current import/snyc.
     *
     * @tags airdrop
     * @name FiltersGetPost
     * @request POST:/internal/airdrop.recipe.filters.get
     * @secure
     */
    filtersGetPost: (data: AirdropRecipeFiltersGetRequest, params?: RequestParams) => Promise<AxiosResponse<AirdropRecipeFiltersGetResponse, any>>;
    /**
     * @description ### Owner: gasper.senk@devrev.ai ### Gets a single sync modification record.
     *
     * @tags airdrop
     * @name AirdropSyncModificationRecordGet
     * @request GET:/internal/airdrop.sync-modification-record.get
     * @secure
     */
    airdropSyncModificationRecordGet: (query: AirdropSyncModificationRecordGetParams, params?: RequestParams) => Promise<AxiosResponse<AirdropSyncModificationRecordGetResponse, any>>;
    /**
     * @description Gets a single sync modification record.
     *
     * @tags airdrop
     * @name AirdropSyncModificationRecordGetPost
     * @request POST:/internal/airdrop.sync-modification-record.get
     * @secure
     */
    airdropSyncModificationRecordGetPost: (data: AirdropSyncModificationRecordGetRequest, params?: RequestParams) => Promise<AxiosResponse<AirdropSyncModificationRecordGetResponse, any>>;
    /**
     * @description ### Owner: gasper.senk@devrev.ai ### Gets a single sync modification record.
     *
     * @tags airdrop
     * @name AirdropSyncModificationRecordGetByTarget
     * @request GET:/internal/airdrop.sync-modification-record.get-by-target
     * @secure
     */
    airdropSyncModificationRecordGetByTarget: (query: AirdropSyncModificationRecordGetByTargetParams, params?: RequestParams) => Promise<AxiosResponse<AirdropSyncModificationRecordGetByTargetResponse, any>>;
    /**
     * @description Gets a single sync modification record.
     *
     * @tags airdrop
     * @name AirdropSyncModificationRecordGetByTargetPost
     * @request POST:/internal/airdrop.sync-modification-record.get-by-target
     * @secure
     */
    airdropSyncModificationRecordGetByTargetPost: (data: AirdropSyncModificationRecordGetByTargetRequest, params?: RequestParams) => Promise<AxiosResponse<AirdropSyncModificationRecordGetByTargetResponse, any>>;
    /**
     * @description Requests an action on a single sync unit.
     *
     * @tags airdrop
     * @name AirdropTriggerSyncUnitsAction
     * @request POST:/internal/airdrop.sync-units.action
     * @secure
     */
    airdropTriggerSyncUnitsAction: (data: AirdropTriggerSyncUnitsActionRequest, params?: RequestParams) => Promise<AxiosResponse<AirdropTriggerSyncUnitsActionResponse, any>>;
    /**
     * @description Creates sync unit that is used for syncs between DevRev and external system of records.
     *
     * @tags airdrop
     * @name AirdropSyncUnitsCreate
     * @request POST:/internal/airdrop.sync-units.create
     * @secure
     */
    airdropSyncUnitsCreate: (data: AirdropSyncUnitsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<AirdropSyncUnitsCreateResponse, any>>;
    /**
     * @description Creates sync units that are used for syncs between DevRev and external systems of record.
     *
     * @tags airdrop
     * @name AirdropSyncUnitsBulkCreate
     * @request POST:/internal/airdrop.sync-units.create.bulk
     * @secure
     */
    airdropSyncUnitsBulkCreate: (data: AirdropSyncUnitsCreateBulkRequest, params?: RequestParams) => Promise<AxiosResponse<AirdropSyncUnitsCreateBulkResponse, any>>;
    /**
     * @description ### Owner: dario.gavranovic@devrev.ai ### Gets a single sync unit's information.
     *
     * @tags airdrop
     * @name AirdropSyncUnitsGet
     * @request GET:/internal/airdrop.sync-units.get
     * @secure
     */
    airdropSyncUnitsGet: (query: AirdropSyncUnitsGetParams, params?: RequestParams) => Promise<AxiosResponse<AirdropSyncUnitsGetResponse, any>>;
    /**
     * @description Gets a single sync unit's information.
     *
     * @tags airdrop
     * @name AirdropSyncUnitsGetPost
     * @request POST:/internal/airdrop.sync-units.get
     * @secure
     */
    airdropSyncUnitsGetPost: (data: AirdropSyncUnitsGetRequest, params?: RequestParams) => Promise<AxiosResponse<AirdropSyncUnitsGetResponse, any>>;
    /**
     * @description ### Owner: dario.gavranovic@devrev.ai ### Gets a list of sync unit historical records.
     *
     * @tags airdrop
     * @name AirdropSyncUnitsHistory
     * @request GET:/internal/airdrop.sync-units.history
     * @secure
     */
    airdropSyncUnitsHistory: (query: AirdropSyncUnitsHistoryParams, params?: RequestParams) => Promise<AxiosResponse<AirdropSyncUnitsHistoryResponse, any>>;
    /**
     * @description ### Owner: dario.gavranovic@devrev.ai ### Gets a list of sync unit historical records.
     *
     * @tags airdrop
     * @name AirdropSyncUnitsHistory
     * @request GET:/internal/airdrop.sync-units.history
     * @secure */
    airdropSyncUnitsHistoryPaginator(query: AirdropSyncUnitsHistoryParams, params?: RequestParams): AsyncGenerator<AirdropSyncUnitsHistoryResponse, void, unknown>;
    /**
     * @description Gets a list of sync unit historical records.
     *
     * @tags airdrop
     * @name AirdropSyncUnitsHistoryPost
     * @request POST:/internal/airdrop.sync-units.history
     * @secure
     */
    airdropSyncUnitsHistoryPost: (data: AirdropSyncUnitsHistoryRequest, params?: RequestParams) => Promise<AxiosResponse<AirdropSyncUnitsHistoryResponse, any>>;
    /**
     * @description ### Owner: dario.gavranovic@devrev.ai ### Gets a list of sync units.
     *
     * @tags airdrop
     * @name AirdropSyncUnitsList
     * @request GET:/internal/airdrop.sync-units.list
     * @secure
     */
    airdropSyncUnitsList: (query: AirdropSyncUnitsListParams, params?: RequestParams) => Promise<AxiosResponse<AirdropSyncUnitsListResponse, any>>;
    /**
     * @description ### Owner: dario.gavranovic@devrev.ai ### Gets a list of sync units.
     *
     * @tags airdrop
     * @name AirdropSyncUnitsList
     * @request GET:/internal/airdrop.sync-units.list
     * @secure */
    airdropSyncUnitsListPaginator(query: AirdropSyncUnitsListParams, params?: RequestParams): AsyncGenerator<AirdropSyncUnitsListResponse, void, unknown>;
    /**
     * @description Gets a list of sync units.
     *
     * @tags airdrop
     * @name AirdropSyncUnitsListPost
     * @request POST:/internal/airdrop.sync-units.list
     * @secure
     */
    airdropSyncUnitsListPost: (data: AirdropSyncUnitsListRequest, params?: RequestParams) => Promise<AxiosResponse<AirdropSyncUnitsListResponse, any>>;
    /**
     * @description Updates a single sync unit.
     *
     * @tags airdrop
     * @name AirdropSyncUnitsUpdate
     * @request POST:/internal/airdrop.sync-units.update
     * @secure
     */
    airdropSyncUnitsUpdate: (data: AirdropSyncUnitsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<AirdropSyncUnitsUpdateResponse, any>>;
    /**
     * @description Gets the specified article's ancestors.
     *
     * @tags articles
     * @name ArticleAncestors
     * @request GET:/internal/articles.ancestors
     * @secure
     */
    articleAncestors: (query: ArticleAncestorsParams, params?: RequestParams) => Promise<AxiosResponse<ArticleAncestorsResponse, any>>;
    /**
     * @description Gets the specified article's ancestors.
     *
     * @tags articles
     * @name ArticleAncestorsPost
     * @request POST:/internal/articles.ancestors
     * @secure
     */
    articleAncestorsPost: (data: ArticleAncestorsRequest, params?: RequestParams) => Promise<AxiosResponse<ArticleAncestorsResponse, any>>;
    /**
     * @description Creates multiple articles.
     *
     * @tags articles
     * @name CreateArticles
     * @request POST:/internal/articles.bulk.create
     * @secure
     */
    createArticles: (data: ArticlesBulkCreateRequest, params?: RequestParams) => Promise<AxiosResponse<ArticlesBulkCreateResponse, any>>;
    /**
     * @description ### Owner: prabhat.tiwari@devrev.ai ### Get count of articles matching given filter.
     *
     * @tags articles
     * @name ArticlesCount
     * @request GET:/internal/articles.count
     * @secure
     */
    articlesCount: (query: ArticlesCountParams, params?: RequestParams) => Promise<AxiosResponse<ArticlesCountResponse, any>>;
    /**
     * @description Get count of articles matching given filter.
     *
     * @tags articles
     * @name ArticlesCountPost
     * @request POST:/internal/articles.count
     * @secure
     */
    articlesCountPost: (data: ArticlesCountRequest, params?: RequestParams) => Promise<AxiosResponse<ArticlesCountResponse, any>>;
    /**
     * @description Article is an object which can contain a URL or artifacts in the resource. It also contains the data regarding the owner, author, status and published date of the object. This call creates an article.
     *
     * @tags articles
     * @name CreateArticle
     * @request POST:/internal/articles.create
     * @secure
     */
    createArticle: (data: ArticlesCreateRequest, params?: RequestParams) => Promise<AxiosResponse<ArticlesCreateResponse, any>>;
    /**
     * @description Deletes an article.
     *
     * @tags articles
     * @name DeleteArticle
     * @request POST:/internal/articles.delete
     * @secure
     */
    deleteArticle: (data: ArticlesDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: prabhat.tiwari@devrev.ai ### Gets an article.
     *
     * @tags articles
     * @name GetArticle
     * @request GET:/internal/articles.get
     * @secure
     */
    getArticle: (query: GetArticleParams, params?: RequestParams) => Promise<AxiosResponse<ArticlesGetResponse, any>>;
    /**
     * @description Gets an article.
     *
     * @tags articles
     * @name GetArticlePost
     * @request POST:/internal/articles.get
     * @secure
     */
    getArticlePost: (data: ArticlesGetRequest, params?: RequestParams) => Promise<AxiosResponse<ArticlesGetResponse, any>>;
    /**
     * @description Lists collections of articles by groups.
     *
     * @tags articles
     * @name GroupArticles
     * @request POST:/internal/articles.group
     * @secure
     */
    groupArticles: (data: ArticlesGroupRequest, params?: RequestParams) => Promise<AxiosResponse<ArticlesGroupResponse, any>>;
    /**
     * @description ### Owner: prabhat.tiwari@devrev.ai ### Lists a collection of articles.
     *
     * @tags articles
     * @name ListArticles
     * @request GET:/internal/articles.list
     * @secure
     */
    listArticles: (query: ListArticlesParams, params?: RequestParams) => Promise<AxiosResponse<ArticlesListResponse, any>>;
    /**
     * @description ### Owner: prabhat.tiwari@devrev.ai ### Lists a collection of articles.
     *
     * @tags articles
     * @name ListArticles
     * @request GET:/internal/articles.list
     * @secure */
    listArticlesPaginator(query: ListArticlesParams, params?: RequestParams): AsyncGenerator<ArticlesListResponse, void, unknown>;
    /**
     * @description Lists a collection of articles.
     *
     * @tags articles
     * @name ListArticlesPost
     * @request POST:/internal/articles.list
     * @secure
     */
    listArticlesPost: (data: ArticlesListRequest, params?: RequestParams) => Promise<AxiosResponse<ArticlesListResponse, any>>;
    /**
     * @description Updates an article.
     *
     * @tags articles
     * @name UpdateArticle
     * @request POST:/internal/articles.update
     * @secure
     */
    updateArticle: (data: ArticlesUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<ArticlesUpdateResponse, any>>;
    /**
     * @description Gets the vote of a Rev user on an article.
     *
     * @tags articles
     * @name ArticlesVotersGet
     * @request GET:/internal/articles.voters.get
     * @secure
     */
    articlesVotersGet: (query: ArticlesVotersGetParams, params?: RequestParams) => Promise<AxiosResponse<ArticlesVotersGetResponse, any>>;
    /**
     * @description Gets the vote of a Rev user on an article.
     *
     * @tags articles
     * @name ArticlesVotersGetPost
     * @request POST:/internal/articles.voters.get
     * @secure
     */
    articlesVotersGetPost: (data: ArticlesVotersGetRequest, params?: RequestParams) => Promise<AxiosResponse<ArticlesVotersGetResponse, any>>;
    /**
     * @description Lists the voters of an article.
     *
     * @tags articles
     * @name ArticlesVotersList
     * @request GET:/internal/articles.voters.list
     * @secure
     */
    articlesVotersList: (query: ArticlesVotersListParams, params?: RequestParams) => Promise<AxiosResponse<ArticlesVotersListResponse, any>>;
    /**
     * @description Lists the voters of an article.
     *
     * @tags articles
     * @name ArticlesVotersList
     * @request GET:/internal/articles.voters.list
     * @secure */
    articlesVotersListPaginator(query: ArticlesVotersListParams, params?: RequestParams): AsyncGenerator<ArticlesVotersListResponse, void, unknown>;
    /**
     * @description Lists the voters of an article.
     *
     * @tags articles
     * @name ArticlesVotersListPost
     * @request POST:/internal/articles.voters.list
     * @secure
     */
    articlesVotersListPost: (data: ArticlesVotersListRequest, params?: RequestParams) => Promise<AxiosResponse<ArticlesVotersListResponse, any>>;
    /**
     * @description Updates the vote of a Rev user on an article.
     *
     * @tags articles
     * @name ArticlesVotersUpdate
     * @request POST:/internal/articles.voters.update
     * @secure
     */
    articlesVotersUpdate: (data: ArticlesVotersUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Creates a copy of an artifact.
     *
     * @tags artifacts
     * @name ArtifactsCopy
     * @request POST:/internal/artifacts.copy
     * @secure
     */
    artifactsCopy: (data: ArtifactsCopyRequest, params?: RequestParams) => Promise<AxiosResponse<ArtifactsCopyResponse, any>>;
    /**
     * @description Gets the requested artifact's information.
     *
     * @tags artifacts
     * @name ArtifactsGet
     * @request GET:/internal/artifacts.get
     * @secure
     */
    artifactsGet: (query: ArtifactsGetParams, params?: RequestParams) => Promise<AxiosResponse<ArtifactsGetResponse, any>>;
    /**
     * @description Gets the requested artifact's information.
     *
     * @tags artifacts
     * @name ArtifactsGetPost
     * @request POST:/internal/artifacts.get
     * @secure
     */
    artifactsGetPost: (data: ArtifactsGetRequest, params?: RequestParams) => Promise<AxiosResponse<ArtifactsGetResponse, any>>;
    /**
     * @description List the artifacts attached to an object.
     *
     * @tags artifacts
     * @name ArtifactsList
     * @request GET:/internal/artifacts.list
     * @secure
     */
    artifactsList: (query: ArtifactsListParams, params?: RequestParams) => Promise<AxiosResponse<ArtifactsListResponse, any>>;
    /**
     * @description List the artifacts attached to an object.
     *
     * @tags artifacts
     * @name ArtifactsListPost
     * @request POST:/internal/artifacts.list
     * @secure
     */
    artifactsListPost: (data: ArtifactsListRequest, params?: RequestParams) => Promise<AxiosResponse<ArtifactsListResponse, any>>;
    /**
     * @description Gets the download URL for the artifact.
     *
     * @tags artifacts
     * @name ArtifactsLocate
     * @request GET:/internal/artifacts.locate
     * @secure
     */
    artifactsLocate: (query: ArtifactsLocateParams, params?: RequestParams) => Promise<AxiosResponse<ArtifactsLocateResponse, any>>;
    /**
     * @description Gets the download URL for the artifact.
     *
     * @tags artifacts
     * @name ArtifactsLocatePost
     * @request POST:/internal/artifacts.locate
     * @secure
     */
    artifactsLocatePost: (data: ArtifactsLocateRequest, params?: RequestParams) => Promise<AxiosResponse<ArtifactsLocateResponse, any>>;
    /**
     * @description Creates an artifact and generates an upload URL for its data.
     *
     * @tags artifacts
     * @name ArtifactsPrepare
     * @request POST:/internal/artifacts.prepare
     * @secure
     */
    artifactsPrepare: (data: ArtifactsPrepareRequest, params?: RequestParams) => Promise<AxiosResponse<ArtifactsPrepareResponse, any>>;
    /**
     * @description Permanently deletes a version of an artifact.
     *
     * @tags artifacts
     * @name ArtifactsHardDeleteVersion
     * @request POST:/internal/artifacts.versions.delete
     * @secure
     */
    artifactsHardDeleteVersion: (data: ArtifactsHardDeleteVersionRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description List the versions of an artifact.
     *
     * @tags artifacts
     * @name ArtifactsVersionsList
     * @request GET:/internal/artifacts.versions.list
     * @secure
     */
    artifactsVersionsList: (query: ArtifactsVersionsListParams, params?: RequestParams) => Promise<AxiosResponse<ArtifactsVersionsListResponse, any>>;
    /**
     * @description List the versions of an artifact.
     *
     * @tags artifacts
     * @name ArtifactsVersionsListPost
     * @request POST:/internal/artifacts.versions.list
     * @secure
     */
    artifactsVersionsListPost: (data: ArtifactsVersionsListRequest, params?: RequestParams) => Promise<AxiosResponse<ArtifactsVersionsListResponse, any>>;
    /**
     * @description Prepares a new version for an artifact, returning the URL and form data to upload the updated file.
     *
     * @tags artifacts
     * @name ArtifactsVersionsPrepare
     * @request POST:/internal/artifacts.versions.prepare
     * @secure
     */
    artifactsVersionsPrepare: (data: ArtifactsVersionsPrepareRequest, params?: RequestParams) => Promise<AxiosResponse<ArtifactsVersionsPrepareResponse, any>>;
    /**
     * @description ### Owner: brian.byrne@devrev.ai ### Gets the data for an object.
     *
     * @name AtomsGet
     * @request GET:/internal/atoms.get
     * @secure
     */
    atomsGet: (query: AtomsGetParams, params?: RequestParams) => Promise<AxiosResponse<AtomsGetResponse, any>>;
    /**
     * @description Gets the data for an object.
     *
     * @name AtomsGetPost
     * @request POST:/internal/atoms.get
     * @secure
     */
    atomsGetPost: (data: AtomsGetRequest, params?: RequestParams) => Promise<AxiosResponse<AtomsGetResponse, any>>;
    /**
     * @description ### Owner: brian.byrne@devrev.ai ### Gets the summary for an object.
     *
     * @name AtomsSummary
     * @request GET:/internal/atoms.summary
     * @secure
     */
    atomsSummary: (query: AtomsSummaryParams, params?: RequestParams) => Promise<AxiosResponse<AtomsSummaryResponse, any>>;
    /**
     * @description Gets the summary for an object.
     *
     * @name AtomsSummaryPost
     * @request POST:/internal/atoms.summary
     * @secure
     */
    atomsSummaryPost: (data: AtomsSummaryRequest, params?: RequestParams) => Promise<AxiosResponse<AtomsSummaryResponse, any>>;
    /**
     * @description Creates a JWT corresponding to the requested token type for the authenticated user.
     *
     * @tags auth-tokens
     * @name AuthTokensCreate
     * @request POST:/internal/auth-tokens.create
     * @secure
     */
    authTokensCreate: (data: AuthTokensCreateRequest, params?: RequestParams) => Promise<AxiosResponse<AuthTokensCreateResponse, any>>;
    /**
     * @description Revokes the token that matches the given token ID issued under the given Dev organization.
     *
     * @tags auth-tokens
     * @name AuthTokensDelete
     * @request POST:/internal/auth-tokens.delete
     * @secure
     */
    authTokensDelete: (data: AuthTokensDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Gets the token metadata corresponding to the given token ID under the given Dev organization.
     *
     * @tags auth-tokens
     * @name AuthTokensGet
     * @request GET:/internal/auth-tokens.get
     * @secure
     */
    authTokensGet: (query: AuthTokensGetParams, params?: RequestParams) => Promise<AxiosResponse<AuthTokensGetResponse, any>>;
    /**
     * @description Gets the token metadata corresponding to the given token ID under the given Dev organization.
     *
     * @tags auth-tokens
     * @name AuthTokensGetPost
     * @request POST:/internal/auth-tokens.get
     * @secure
     */
    authTokensGetPost: (data: AuthTokensGetRequest, params?: RequestParams) => Promise<AxiosResponse<AuthTokensGetResponse, any>>;
    /**
     * @description Gets the token metadata for all the tokens corresponding to the given token type issued for a given subject.
     *
     * @tags auth-tokens
     * @name AuthTokensList
     * @request GET:/internal/auth-tokens.list
     * @secure
     */
    authTokensList: (query: AuthTokensListParams, params?: RequestParams) => Promise<AxiosResponse<AuthTokensListResponse, any>>;
    /**
     * @description Gets the token metadata for all the tokens corresponding to the given token type issued for a given subject.
     *
     * @tags auth-tokens
     * @name AuthTokensListPost
     * @request POST:/internal/auth-tokens.list
     * @secure
     */
    authTokensListPost: (data: AuthTokensListRequest, params?: RequestParams) => Promise<AxiosResponse<AuthTokensListResponse, any>>;
    /**
     * @description Revokes all the tokens that matches the given token type created by the authenticated user.
     *
     * @tags auth-tokens
     * @name AuthTokensSelfDelete
     * @request POST:/internal/auth-tokens.self.delete
     * @secure
     */
    authTokensSelfDelete: (data: AuthTokensSelfDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Updates token metadata of a token issued under a given Dev organization.
     *
     * @tags auth-tokens
     * @name AuthTokensUpdate
     * @request POST:/internal/auth-tokens.update
     * @secure
     */
    authTokensUpdate: (data: AuthTokensUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<AuthTokensUpdateResponse, any>>;
    /**
     * @description Performs a batch of operations.
     *
     * @name BatchApply
     * @request POST:/internal/batch.apply
     * @secure
     */
    batchApply: (data: BatchApplyRequest, params?: RequestParams) => Promise<AxiosResponse<BatchApplyResponse, any>>;
    /**
     * @description ### Owner: i-sankalp.kulkarni@devrev.ai ### Get the bot status.
     *
     * @name BotStatusGet
     * @request GET:/internal/bot.status
     * @secure
     */
    botStatusGet: (query: BotStatusGetParams, params?: RequestParams) => Promise<AxiosResponse<BotStatusGetResponse, any>>;
    /**
     * @description Get the bot status.
     *
     * @name BotStatusGetPost
     * @request POST:/internal/bot.status
     * @secure
     */
    botStatusGetPost: (data: BotStatusGetRequest, params?: RequestParams) => Promise<AxiosResponse<BotStatusGetResponse, any>>;
    /**
     * @description Updates the bot.
     *
     * @name UpdateBotFromYaml
     * @request POST:/internal/bot.update
     * @secure
     */
    updateBotFromYaml: (data: UpdateBotFromYamlRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Creates a new chat.
     *
     * @tags chats
     * @name ChatsCreate
     * @request POST:/internal/chats.create
     * @secure
     */
    chatsCreate: (data: ChatsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<ChatsCreateResponse, any>>;
    /**
     * @description Deletes a chat.
     *
     * @tags chats
     * @name ChatsDelete
     * @request POST:/internal/chats.delete
     * @secure
     */
    chatsDelete: (data: ChatsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: brian.byrne@devrev.ai ### Gets a chat's information.
     *
     * @tags chats
     * @name ChatsGet
     * @request GET:/internal/chats.get
     * @secure
     */
    chatsGet: (query: ChatsGetParams, params?: RequestParams) => Promise<AxiosResponse<ChatsGetResponse, any>>;
    /**
     * @description Gets a chat's information.
     *
     * @tags chats
     * @name ChatsGetPost
     * @request POST:/internal/chats.get
     * @secure
     */
    chatsGetPost: (data: ChatsGetRequest, params?: RequestParams) => Promise<AxiosResponse<ChatsGetResponse, any>>;
    /**
     * @description ### Owner: brian.byrne@devrev.ai ### Lists a collection of chats.
     *
     * @tags chats
     * @name ChatsList
     * @request GET:/internal/chats.list
     * @secure
     */
    chatsList: (query: ChatsListParams, params?: RequestParams) => Promise<AxiosResponse<ChatsListResponse, any>>;
    /**
     * @description ### Owner: brian.byrne@devrev.ai ### Lists a collection of chats.
     *
     * @tags chats
     * @name ChatsList
     * @request GET:/internal/chats.list
     * @secure */
    chatsListPaginator(query: ChatsListParams, params?: RequestParams): AsyncGenerator<ChatsListResponse, void, unknown>;
    /**
     * @description Lists a collection of chats.
     *
     * @tags chats
     * @name ChatsListPost
     * @request POST:/internal/chats.list
     * @secure
     */
    chatsListPost: (data: ChatsListRequest, params?: RequestParams) => Promise<AxiosResponse<ChatsListResponse, any>>;
    /**
     * @description Updates a chat's information.
     *
     * @tags chats
     * @name ChatsUpdate
     * @request POST:/internal/chats.update
     * @secure
     */
    chatsUpdate: (data: ChatsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<ChatsUpdateResponse, any>>;
    /**
     * @description Creates a code change object.
     *
     * @tags code-changes
     * @name CodeChangesCreate
     * @request POST:/internal/code-changes.create
     * @secure
     */
    codeChangesCreate: (data: CodeChangesCreateRequest, params?: RequestParams) => Promise<AxiosResponse<CodeChangesCreateResponse, any>>;
    /**
     * @description Deletes a code change object.
     *
     * @tags code-changes
     * @name CodeChangesDelete
     * @request POST:/internal/code-changes.delete
     * @secure
     */
    codeChangesDelete: (data: CodeChangesDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: srividya.tata@devrev.ai ### Gets a code change object.
     *
     * @tags code-changes
     * @name CodeChangesGet
     * @request GET:/internal/code-changes.get
     * @secure
     */
    codeChangesGet: (query: CodeChangesGetParams, params?: RequestParams) => Promise<AxiosResponse<CodeChangesGetResponse, any>>;
    /**
     * @description Gets a code change object.
     *
     * @tags code-changes
     * @name CodeChangesGetPost
     * @request POST:/internal/code-changes.get
     * @secure
     */
    codeChangesGetPost: (data: CodeChangesGetRequest, params?: RequestParams) => Promise<AxiosResponse<CodeChangesGetResponse, any>>;
    /**
     * @description ### Owner: srividya.tata@devrev.ai ### Lists code change objects.
     *
     * @tags code-changes
     * @name CodeChangesList
     * @request GET:/internal/code-changes.list
     * @secure
     */
    codeChangesList: (query: CodeChangesListParams, params?: RequestParams) => Promise<AxiosResponse<CodeChangesListResponse, any>>;
    /**
     * @description ### Owner: srividya.tata@devrev.ai ### Lists code change objects.
     *
     * @tags code-changes
     * @name CodeChangesList
     * @request GET:/internal/code-changes.list
     * @secure */
    codeChangesListPaginator(query: CodeChangesListParams, params?: RequestParams): AsyncGenerator<CodeChangesListResponse, void, unknown>;
    /**
     * @description Lists code change objects.
     *
     * @tags code-changes
     * @name CodeChangesListPost
     * @request POST:/internal/code-changes.list
     * @secure
     */
    codeChangesListPost: (data: CodeChangesListRequest, params?: RequestParams) => Promise<AxiosResponse<CodeChangesListResponse, any>>;
    /**
     * @description Updates a code change object.
     *
     * @tags code-changes
     * @name CodeChangesUpdate
     * @request POST:/internal/code-changes.update
     * @secure
     */
    codeChangesUpdate: (data: CodeChangesUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<CodeChangesUpdateResponse, any>>;
    /**
     * @description Creates a command.
     *
     * @tags command
     * @name CommandsCreate
     * @request POST:/internal/commands.create
     * @secure
     */
    commandsCreate: (data: CommandCreateRequest, params?: RequestParams) => Promise<AxiosResponse<CommandCreateResponse, any>>;
    /**
     * @description Deletes a command.
     *
     * @tags command
     * @name CommandsDelete
     * @request POST:/internal/commands.delete
     * @secure
     */
    commandsDelete: (data: CommandDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Executes a command.
     *
     * @tags command
     * @name CommandsExecute
     * @request POST:/internal/commands.execute
     * @secure
     */
    commandsExecute: (data: CommandExecuteRequest, params?: RequestParams) => Promise<AxiosResponse<CommandExecuteResponse, any>>;
    /**
     * @description Gets a command.
     *
     * @tags command
     * @name CommandsGet
     * @request GET:/internal/commands.get
     * @secure
     */
    commandsGet: (query: CommandsGetParams, params?: RequestParams) => Promise<AxiosResponse<CommandGetResponse, any>>;
    /**
     * @description Gets a command.
     *
     * @tags command
     * @name CommandsGetPost
     * @request POST:/internal/commands.get
     * @secure
     */
    commandsGetPost: (data: CommandGetRequest, params?: RequestParams) => Promise<AxiosResponse<CommandGetResponse, any>>;
    /**
     * @description Lists commands for a Dev organization.
     *
     * @tags command
     * @name CommandsList
     * @request GET:/internal/commands.list
     * @secure
     */
    commandsList: (query: CommandsListParams, params?: RequestParams) => Promise<AxiosResponse<CommandsListResponse, any>>;
    /**
     * @description Lists commands for a Dev organization.
     *
     * @tags command
     * @name CommandsList
     * @request GET:/internal/commands.list
     * @secure */
    commandsListPaginator(query: CommandsListParams, params?: RequestParams): AsyncGenerator<CommandsListResponse, void, unknown>;
    /**
     * @description Lists commands for a Dev organization.
     *
     * @tags command
     * @name CommandsListPost
     * @request POST:/internal/commands.list
     * @secure
     */
    commandsListPost: (data: CommandsListRequest, params?: RequestParams) => Promise<AxiosResponse<CommandsListResponse, any>>;
    /**
     * @description Updates a command.
     *
     * @tags command
     * @name CommandsUpdate
     * @request POST:/internal/commands.update
     * @secure
     */
    commandsUpdate: (data: CommandUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<CommandUpdateResponse, any>>;
    /**
     * @description Creates a new connection.
     *
     * @tags connections
     * @name ConnectionsCreate
     * @request POST:/internal/connections.create
     * @secure
     */
    connectionsCreate: (data: ConnectionsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<ConnectionsCreateResponse, any>>;
    /**
     * @description Deletes a connection.
     *
     * @tags connections
     * @name ConnectionsDelete
     * @request POST:/internal/connections.delete
     * @secure
     */
    connectionsDelete: (data: ConnectionsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: brian.byrne@devrev.ai ### Gets a connection's information.
     *
     * @tags connections
     * @name ConnectionsGet
     * @request GET:/internal/connections.get
     * @secure
     */
    connectionsGet: (query: ConnectionsGetParams, params?: RequestParams) => Promise<AxiosResponse<ConnectionsGetResponse, any>>;
    /**
     * @description Gets a connection's information.
     *
     * @tags connections
     * @name ConnectionsGetPost
     * @request POST:/internal/connections.get
     * @secure
     */
    connectionsGetPost: (data: ConnectionsGetRequest, params?: RequestParams) => Promise<AxiosResponse<ConnectionsGetResponse, any>>;
    /**
     * @description ### Owner: brian.byrne@devrev.ai ### Lists the connections.
     *
     * @tags connections
     * @name ConnectionsList
     * @request GET:/internal/connections.list
     * @secure
     */
    connectionsList: (query: ConnectionsListParams, params?: RequestParams) => Promise<AxiosResponse<ConnectionsListResponse, any>>;
    /**
     * @description ### Owner: brian.byrne@devrev.ai ### Lists the connections.
     *
     * @tags connections
     * @name ConnectionsList
     * @request GET:/internal/connections.list
     * @secure */
    connectionsListPaginator(query: ConnectionsListParams, params?: RequestParams): AsyncGenerator<ConnectionsListResponse, void, unknown>;
    /**
     * @description Lists the connections.
     *
     * @tags connections
     * @name ConnectionsListPost
     * @request POST:/internal/connections.list
     * @secure
     */
    connectionsListPost: (data: ConnectionsListRequest, params?: RequestParams) => Promise<AxiosResponse<ConnectionsListResponse, any>>;
    /**
     * @description Opens a connection for the authenticated user.
     *
     * @tags connections
     * @name ConnectionsOpen
     * @request POST:/internal/connections.open
     * @secure
     */
    connectionsOpen: (data: ConnectionsOpenRequest, params?: RequestParams) => Promise<AxiosResponse<ConnectionsOpenResponse, any>>;
    /**
     * @description Updates an existing connection.
     *
     * @tags connections
     * @name ConnectionsUpdate
     * @request POST:/internal/connections.update
     * @secure
     */
    connectionsUpdate: (data: ConnectionsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<ConnectionsUpdateResponse, any>>;
    /**
     * @description Create the content template.
     *
     * @tags notifications
     * @name ContentTemplateCreate
     * @request POST:/internal/content-template.create
     * @secure
     */
    contentTemplateCreate: (data: ContentTemplateCreateRequest, params?: RequestParams) => Promise<AxiosResponse<ContentTemplateCreateResponse, any>>;
    /**
     * @description Get the content template.
     *
     * @tags notifications
     * @name ContentTemplateGet
     * @request GET:/internal/content-template.get
     * @secure
     */
    contentTemplateGet: (query: ContentTemplateGetParams, params?: RequestParams) => Promise<AxiosResponse<ContentTemplateGetResponse, any>>;
    /**
     * @description Get the content template.
     *
     * @tags notifications
     * @name ContentTemplateGetPost
     * @request POST:/internal/content-template.get
     * @secure
     */
    contentTemplateGetPost: (data: ContentTemplateGetRequest, params?: RequestParams) => Promise<AxiosResponse<ContentTemplateGetResponse, any>>;
    /**
     * @description Lists the content templates.
     *
     * @tags notifications
     * @name ContentTemplateList
     * @request GET:/internal/content-template.list
     * @secure
     */
    contentTemplateList: (query: ContentTemplateListParams, params?: RequestParams) => Promise<AxiosResponse<ContentTemplateListResponse, any>>;
    /**
     * @description Lists the content templates.
     *
     * @tags notifications
     * @name ContentTemplateList
     * @request GET:/internal/content-template.list
     * @secure */
    contentTemplateListPaginator(query: ContentTemplateListParams, params?: RequestParams): AsyncGenerator<ContentTemplateListResponse, void, unknown>;
    /**
     * @description Lists the content templates.
     *
     * @tags notifications
     * @name ContentTemplateListPost
     * @request POST:/internal/content-template.list
     * @secure
     */
    contentTemplateListPost: (data: ContentTemplateListRequest, params?: RequestParams) => Promise<AxiosResponse<ContentTemplateListResponse, any>>;
    /**
     * @description Updates the content template.
     *
     * @tags notifications
     * @name ContentTemplateUpdate
     * @request POST:/internal/content-template.update
     * @secure
     */
    contentTemplateUpdate: (data: ContentTemplateUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<ContentTemplateUpdateResponse, any>>;
    /**
     * @description Lists recommended objects, which can assist the conversation.
     *
     * @tags recommendations
     * @name ConversationAssist
     * @request GET:/internal/conversations.assist
     * @secure
     */
    conversationAssist: (query: ConversationAssistParams, params?: RequestParams) => Promise<AxiosResponse<ConversationAssistResponse, any>>;
    /**
     * @description Lists recommended objects, which can assist the conversation.
     *
     * @tags recommendations
     * @name ConversationAssistPost
     * @request POST:/internal/conversations.assist
     * @secure
     */
    conversationAssistPost: (data: ConversationAssistRequest, params?: RequestParams) => Promise<AxiosResponse<ConversationAssistResponse, any>>;
    /**
     * @description Get count of conversations matching given filter.
     *
     * @tags conversations
     * @name ConversationsCount
     * @request GET:/internal/conversations.count
     * @secure
     */
    conversationsCount: (query: ConversationsCountParams, params?: RequestParams) => Promise<AxiosResponse<ConversationsCountResponse, any>>;
    /**
     * @description Get count of conversations matching given filter.
     *
     * @tags conversations
     * @name ConversationsCountPost
     * @request POST:/internal/conversations.count
     * @secure
     */
    conversationsCountPost: (data: ConversationsCountRequest, params?: RequestParams) => Promise<AxiosResponse<ConversationsCountResponse, any>>;
    /**
     * @description Creates a conversation.
     *
     * @tags conversations
     * @name ConversationsCreate
     * @request POST:/internal/conversations.create
     * @secure
     */
    conversationsCreate: (data: ConversationsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<ConversationsCreateResponse, any>>;
    /**
     * @description Deletes the requested conversation.
     *
     * @tags conversations
     * @name ConversationsDelete
     * @request POST:/internal/conversations.delete
     * @secure
     */
    conversationsDelete: (data: ConversationsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Exports a collection of conversation items.
     *
     * @tags conversations
     * @name ConversationsExport
     * @request GET:/internal/conversations.export
     * @secure
     */
    conversationsExport: (query: ConversationsExportParams, params?: RequestParams) => Promise<AxiosResponse<ConversationsExportResponse, any>>;
    /**
     * @description Exports a collection of conversation items.
     *
     * @tags conversations
     * @name ConversationsExportPost
     * @request POST:/internal/conversations.export
     * @secure
     */
    conversationsExportPost: (data: ConversationsExportRequest, params?: RequestParams) => Promise<AxiosResponse<ConversationsExportResponse, any>>;
    /**
     * @description Gets the requested conversation's information.
     *
     * @tags conversations
     * @name ConversationsGet
     * @request GET:/internal/conversations.get
     * @secure
     */
    conversationsGet: (query: ConversationsGetParams, params?: RequestParams) => Promise<AxiosResponse<ConversationsGetResponse, any>>;
    /**
     * @description Gets the requested conversation's information.
     *
     * @tags conversations
     * @name ConversationsGetPost
     * @request POST:/internal/conversations.get
     * @secure
     */
    conversationsGetPost: (data: ConversationsGetRequest, params?: RequestParams) => Promise<AxiosResponse<ConversationsGetResponse, any>>;
    /**
     * @description Lists collections of conversations by groups.
     *
     * @tags conversations
     * @name ConversationsGroup
     * @request GET:/internal/conversations.group
     * @secure
     */
    conversationsGroup: (query: ConversationsGroupParams, params?: RequestParams) => Promise<AxiosResponse<ConversationsGroupResponse, any>>;
    /**
     * @description Lists collections of conversations by groups.
     *
     * @tags conversations
     * @name ConversationsGroup
     * @request GET:/internal/conversations.group
     * @secure */
    conversationsGroupPaginator(query: ConversationsGroupParams, params?: RequestParams): AsyncGenerator<ConversationsGroupResponse, void, unknown>;
    /**
     * @description Lists collections of conversations by groups.
     *
     * @tags conversations
     * @name ConversationsGroupPost
     * @request POST:/internal/conversations.group
     * @secure
     */
    conversationsGroupPost: (data: ConversationsGroupRequest, params?: RequestParams) => Promise<AxiosResponse<ConversationsGroupResponse, any>>;
    /**
     * @description Lists the available conversations.
     *
     * @tags conversations
     * @name ConversationsList
     * @request GET:/internal/conversations.list
     * @secure
     */
    conversationsList: (query: ConversationsListParams, params?: RequestParams) => Promise<AxiosResponse<ConversationsListResponse, any>>;
    /**
     * @description Lists the available conversations.
     *
     * @tags conversations
     * @name ConversationsList
     * @request GET:/internal/conversations.list
     * @secure */
    conversationsListPaginator(query: ConversationsListParams, params?: RequestParams): AsyncGenerator<ConversationsListResponse, void, unknown>;
    /**
     * @description Lists the available conversations.
     *
     * @tags conversations
     * @name ConversationsListPost
     * @request POST:/internal/conversations.list
     * @secure
     */
    conversationsListPost: (data: ConversationsListRequest, params?: RequestParams) => Promise<AxiosResponse<ConversationsListResponse, any>>;
    /**
     * @description Updates the requested conversation.
     *
     * @tags conversations
     * @name ConversationsUpdate
     * @request POST:/internal/conversations.update
     * @secure
     */
    conversationsUpdate: (data: ConversationsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<ConversationsUpdateResponse, any>>;
    /**
     * @description Applies a credit coupon object.
     *
     * @tags commerce
     * @name CreditCouponsApply
     * @request POST:/internal/credit-coupons.apply
     * @secure
     */
    creditCouponsApply: (data: CreditCouponsApplyRequest, params?: RequestParams) => Promise<AxiosResponse<CreditCouponsApplyResponse, any>>;
    /**
     * @description Creates a credit coupon object.
     *
     * @tags commerce
     * @name CreditCouponsCreate
     * @request POST:/internal/credit-coupons.create
     * @secure
     */
    creditCouponsCreate: (data: CreditCouponsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<CreditCouponsCreateResponse, any>>;
    /**
     * @description Deletes a credit coupon object.
     *
     * @tags commerce
     * @name CreditCouponsDelete
     * @request POST:/internal/credit-coupons.delete
     * @secure
     */
    creditCouponsDelete: (data: CreditCouponsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Gets a credit coupon object.
     *
     * @tags commerce
     * @name CreditCouponsGet
     * @request GET:/internal/credit-coupons.get
     * @secure
     */
    creditCouponsGet: (query: CreditCouponsGetParams, params?: RequestParams) => Promise<AxiosResponse<CreditCouponsGetResponse, any>>;
    /**
     * @description Gets a credit coupon object.
     *
     * @tags commerce
     * @name CreditCouponsGetPost
     * @request POST:/internal/credit-coupons.get
     * @secure
     */
    creditCouponsGetPost: (data: CreditCouponsGetRequest, params?: RequestParams) => Promise<AxiosResponse<CreditCouponsGetResponse, any>>;
    /**
     * @description Updates a credit coupon object.
     *
     * @tags commerce
     * @name CreditCouponsUpdate
     * @request POST:/internal/credit-coupons.update
     * @secure
     */
    creditCouponsUpdate: (data: CreditCouponsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<CreditCouponsUpdateResponse, any>>;
    /**
     * @description Validates a credit coupon object.
     *
     * @tags commerce
     * @name CreditCouponsValidate
     * @request POST:/internal/credit-coupons.validate
     * @secure
     */
    creditCouponsValidate: (data: CreditCouponsValidateRequest, params?: RequestParams) => Promise<AxiosResponse<CreditCouponsValidateResponse, any>>;
    /**
     * @description Creates a credit object.
     *
     * @tags commerce
     * @name CreditsCreate
     * @request POST:/internal/credits.create
     * @secure
     */
    creditsCreate: (data: CreditsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<CreditsCreateResponse, any>>;
    /**
     * @description Deletes a credit object.
     *
     * @tags commerce
     * @name CreditsDelete
     * @request POST:/internal/credits.delete
     * @secure
     */
    creditsDelete: (data: CreditsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Gets a credit object.
     *
     * @tags commerce
     * @name CreditsGet
     * @request GET:/internal/credits.get
     * @secure
     */
    creditsGet: (query: CreditsGetParams, params?: RequestParams) => Promise<AxiosResponse<CreditsGetResponse, any>>;
    /**
     * @description Gets a credit object.
     *
     * @tags commerce
     * @name CreditsGetPost
     * @request POST:/internal/credits.get
     * @secure
     */
    creditsGetPost: (data: CreditsGetRequest, params?: RequestParams) => Promise<AxiosResponse<CreditsGetResponse, any>>;
    /**
     * @description Gets the credit objects based on the given filters.
     *
     * @tags commerce
     * @name CreditsList
     * @request GET:/internal/credits.list
     * @secure
     */
    creditsList: (query: CreditsListParams, params?: RequestParams) => Promise<AxiosResponse<CreditsListResponse, any>>;
    /**
     * @description Gets the credit objects based on the given filters.
     *
     * @tags commerce
     * @name CreditsList
     * @request GET:/internal/credits.list
     * @secure */
    creditsListPaginator(query: CreditsListParams, params?: RequestParams): AsyncGenerator<CreditsListResponse, void, unknown>;
    /**
     * @description Gets the credit objects based on the given filters.
     *
     * @tags commerce
     * @name CreditsListPost
     * @request POST:/internal/credits.list
     * @secure
     */
    creditsListPost: (data: CreditsListRequest, params?: RequestParams) => Promise<AxiosResponse<CreditsListResponse, any>>;
    /**
     * @description Updates a credit object.
     *
     * @tags commerce
     * @name CreditsUpdate
     * @request POST:/internal/credits.update
     * @secure
     */
    creditsUpdate: (data: CreditsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<CreditsUpdateResponse, any>>;
    /**
     * @description Creates a custom object.
     *
     * @tags customization
     * @name CustomObjectsCreate
     * @request POST:/internal/custom-objects.create
     * @secure
     */
    customObjectsCreate: (data: CustomObjectsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<CustomObjectsCreateResponse, any>>;
    /**
     * @description Deletes a custom object.
     *
     * @tags customization
     * @name CustomObjectsDelete
     * @request POST:/internal/custom-objects.delete
     * @secure
     */
    customObjectsDelete: (data: CustomObjectsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Gets a custom object.
     *
     * @tags customization
     * @name CustomObjectsGet
     * @request GET:/internal/custom-objects.get
     * @secure
     */
    customObjectsGet: (query: CustomObjectsGetParams, params?: RequestParams) => Promise<AxiosResponse<CustomObjectsGetResponse, any>>;
    /**
     * @description Gets a custom object.
     *
     * @tags customization
     * @name CustomObjectsGetPost
     * @request POST:/internal/custom-objects.get
     * @secure
     */
    customObjectsGetPost: (data: CustomObjectsGetRequest, params?: RequestParams) => Promise<AxiosResponse<CustomObjectsGetResponse, any>>;
    /**
     * @description Lists custom objects.
     *
     * @tags customization
     * @name CustomObjectsList
     * @request GET:/internal/custom-objects.list
     * @secure
     */
    customObjectsList: (query: CustomObjectsListParams, params?: RequestParams) => Promise<AxiosResponse<CustomObjectsListResponse, any>>;
    /**
     * @description Lists custom objects.
     *
     * @tags customization
     * @name CustomObjectsList
     * @request GET:/internal/custom-objects.list
     * @secure */
    customObjectsListPaginator(query: CustomObjectsListParams, params?: RequestParams): AsyncGenerator<CustomObjectsListResponse, void, unknown>;
    /**
     * @description Lists custom objects.
     *
     * @tags customization
     * @name CustomObjectsListPost
     * @request POST:/internal/custom-objects.list
     * @secure
     */
    customObjectsListPost: (data: CustomObjectsListRequest, params?: RequestParams) => Promise<AxiosResponse<CustomObjectsListResponse, any>>;
    /**
     * @description Updates a custom object.
     *
     * @tags customization
     * @name CustomObjectsUpdate
     * @request POST:/internal/custom-objects.update
     * @secure
     */
    customObjectsUpdate: (data: CustomObjectsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<CustomObjectsUpdateResponse, any>>;
    /**
     * @description Returns the supported languages for translations.
     *
     * @tags translation
     * @name TranslationsLanguagesList
     * @request GET:/internal/dalmatin.translations.languages.list
     * @secure
     */
    translationsLanguagesList: (params?: RequestParams) => Promise<AxiosResponse<TranslationsLanguagesListResponse, any>>;
    /**
     * @description Returns the supported languages for translations.
     *
     * @tags translation
     * @name TranslationsLanguagesListPost
     * @request POST:/internal/dalmatin.translations.languages.list
     * @secure
     */
    translationsLanguagesListPost: (data: TranslationsLanguagesListRequest, params?: RequestParams) => Promise<AxiosResponse<TranslationsLanguagesListResponse, any>>;
    /**
     * @description Returns translation text for the requested namespaces and target languages.
     *
     * @tags translation
     * @name TranslationsList
     * @request GET:/internal/dalmatin.translations.list
     * @secure
     */
    translationsList: (query: TranslationsListParams, params?: RequestParams) => Promise<AxiosResponse<TranslationsListResponse, any>>;
    /**
     * @description Returns translation text for the requested namespaces and target languages.
     *
     * @tags translation
     * @name TranslationsListPost
     * @request POST:/internal/dalmatin.translations.list
     * @secure
     */
    translationsListPost: (data: TranslationsListRequest, params?: RequestParams) => Promise<AxiosResponse<TranslationsListResponse, any>>;
    /**
     * @description Creates a new dashboard.
     *
     * @tags dashboards
     * @name DashboardsCreate
     * @request POST:/internal/dashboards.create
     * @secure
     */
    dashboardsCreate: (data: DashboardsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<DashboardsCreateResponse, any>>;
    /**
     * @description Deletes the dashboard.
     *
     * @tags dashboards
     * @name DashboardsDelete
     * @request POST:/internal/dashboards.delete
     * @secure
     */
    dashboardsDelete: (data: DashboardsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description ### Owner: madhav.sikka@devrev.ai ### Returns the requested dashboard.
     *
     * @tags dashboards
     * @name DashboardsGet
     * @request GET:/internal/dashboards.get
     * @secure
     */
    dashboardsGet: (query: DashboardsGetParams, params?: RequestParams) => Promise<AxiosResponse<DashboardsGetResponse, any>>;
    /**
     * @description Returns the requested dashboard.
     *
     * @tags dashboards
     * @name DashboardsGetPost
     * @request POST:/internal/dashboards.get
     * @secure
     */
    dashboardsGetPost: (data: DashboardsGetRequest, params?: RequestParams) => Promise<AxiosResponse<DashboardsGetResponse, any>>;
    /**
     * @description ### Owner: madhav.sikka@devrev.ai ### Returns the list of dashboards.
     *
     * @tags dashboards
     * @name DashboardsList
     * @request GET:/internal/dashboards.list
     * @secure
     */
    dashboardsList: (query: DashboardsListParams, params?: RequestParams) => Promise<AxiosResponse<DashboardsListResponse, any>>;
    /**
     * @description ### Owner: madhav.sikka@devrev.ai ### Returns the list of dashboards.
     *
     * @tags dashboards
     * @name DashboardsList
     * @request GET:/internal/dashboards.list
     * @secure */
    dashboardsListPaginator(query: DashboardsListParams, params?: RequestParams): AsyncGenerator<DashboardsListResponse, void, unknown>;
    /**
     * @description Returns the list of dashboards.
     *
     * @tags dashboards
     * @name DashboardsListPost
     * @request POST:/internal/dashboards.list
     * @secure
     */
    dashboardsListPost: (data: DashboardsListRequest, params?: RequestParams) => Promise<AxiosResponse<DashboardsListResponse, any>>;
    /**
     * @description Updates the dashboard.
     *
     * @tags dashboards
     * @name DashboardsUpdate
     * @request POST:/internal/dashboards.update
     * @secure
     */
    dashboardsUpdate: (data: DashboardsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<DashboardsUpdateResponse, any>>;
    /**
     * @description Creates a new data source.
     *
     * @tags data-sources
     * @name DataSourcesCreate
     * @request POST:/internal/data-sources.create
     * @secure
     */
    dataSourcesCreate: (data: DataSourcesCreateRequest, params?: RequestParams) => Promise<AxiosResponse<DataSourcesCreateResponse, any>>;
    /**
     * @description Deletes the data source.
     *
     * @tags data-sources
     * @name DataSourcesDelete
     * @request POST:/internal/data-sources.delete
     * @secure
     */
    dataSourcesDelete: (data: DataSourcesDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description ### Owner: madhav.sikka@devrev.ai ### Returns the requested data source.
     *
     * @tags data-sources
     * @name DataSourcesGet
     * @request GET:/internal/data-sources.get
     * @secure
     */
    dataSourcesGet: (query: DataSourcesGetParams, params?: RequestParams) => Promise<AxiosResponse<DataSourcesGetResponse, any>>;
    /**
     * @description Returns the requested data source.
     *
     * @tags data-sources
     * @name DataSourcesGetPost
     * @request POST:/internal/data-sources.get
     * @secure
     */
    dataSourcesGetPost: (data: DataSourcesGetRequest, params?: RequestParams) => Promise<AxiosResponse<DataSourcesGetResponse, any>>;
    /**
     * @description ### Owner: madhav.sikka@devrev.ai ### Returns the list of data sources.
     *
     * @tags data-sources
     * @name DataSourcesList
     * @request GET:/internal/data-sources.list
     * @secure
     */
    dataSourcesList: (query: DataSourcesListParams, params?: RequestParams) => Promise<AxiosResponse<DataSourcesListResponse, any>>;
    /**
     * @description ### Owner: madhav.sikka@devrev.ai ### Returns the list of data sources.
     *
     * @tags data-sources
     * @name DataSourcesList
     * @request GET:/internal/data-sources.list
     * @secure */
    dataSourcesListPaginator(query: DataSourcesListParams, params?: RequestParams): AsyncGenerator<DataSourcesListResponse, void, unknown>;
    /**
     * @description Returns the list of data sources.
     *
     * @tags data-sources
     * @name DataSourcesListPost
     * @request POST:/internal/data-sources.list
     * @secure
     */
    dataSourcesListPost: (data: DataSourcesListRequest, params?: RequestParams) => Promise<AxiosResponse<DataSourcesListResponse, any>>;
    /**
     * @description Updates the data source.
     *
     * @tags data-sources
     * @name DataSourcesUpdate
     * @request POST:/internal/data-sources.update
     * @secure
     */
    dataSourcesUpdate: (data: DataSourcesUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<DataSourcesUpdateResponse, any>>;
    /**
     * @description Creates a new enterprise authentication connection for a Dev organization. This authentication connection will not be enabled by default for the organization and the user will need to explicitly enable this. Keep in mind that at a time, only one authentication connection can be enabled for a Dev organization. At present, only 5 enterprise connections can be created by an organization.
     *
     * @tags auth-connection, dev-orgs
     * @name DevOrgAuthConnectionsCreate
     * @request POST:/internal/dev-orgs.auth-connections.create
     * @secure
     */
    devOrgAuthConnectionsCreate: (data: DevOrgAuthConnectionsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<DevOrgAuthConnectionsCreateResponse, any>>;
    /**
     * @description Deletes an authentication connection. Only enterprise connections which are explicitly set up for a Dev organization can be deleted. Default connections can not be deleted using this method.
     *
     * @tags auth-connection, dev-orgs
     * @name DevOrgAuthConnectionsDelete
     * @request POST:/internal/dev-orgs.auth-connections.delete
     * @secure
     */
    devOrgAuthConnectionsDelete: (data: DevOrgAuthConnectionsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description ### Owner: sambhav.jain@devrev.ai ### Retrieves the details for an authentication connection.
     *
     * @tags auth-connection, dev-orgs
     * @name DevOrgAuthConnectionsGet
     * @request GET:/internal/dev-orgs.auth-connections.get
     * @secure
     */
    devOrgAuthConnectionsGet: (query: DevOrgAuthConnectionsGetParams, params?: RequestParams) => Promise<AxiosResponse<DevOrgAuthConnectionsGetResponse, any>>;
    /**
     * @description Retrieves the details for an authentication connection.
     *
     * @tags auth-connection, dev-orgs
     * @name DevOrgAuthConnectionsGetPost
     * @request POST:/internal/dev-orgs.auth-connections.get
     * @secure
     */
    devOrgAuthConnectionsGetPost: (data: DevOrgAuthConnectionsGetRequest, params?: RequestParams) => Promise<AxiosResponse<DevOrgAuthConnectionsGetResponse, any>>;
    /**
     * @description ### Owner: sambhav.jain@devrev.ai ### Lists all the authentication connections available for a Dev organization. This list will include both social and enterprise connections which are either available by default or are explicitly created by the user.
     *
     * @tags auth-connection, dev-orgs
     * @name DevOrgAuthConnectionsList
     * @request GET:/internal/dev-orgs.auth-connections.list
     * @secure
     */
    devOrgAuthConnectionsList: (params?: RequestParams) => Promise<AxiosResponse<DevOrgAuthConnectionsListResponse, any>>;
    /**
     * @description Lists all the authentication connections available for a Dev organization. This list will include both social and enterprise connections which are either available by default or are explicitly created by the user.
     *
     * @tags auth-connection, dev-orgs
     * @name DevOrgAuthConnectionsListPost
     * @request POST:/internal/dev-orgs.auth-connections.list
     * @secure
     */
    devOrgAuthConnectionsListPost: (data: Empty, params?: RequestParams) => Promise<AxiosResponse<DevOrgAuthConnectionsListResponse, any>>;
    /**
     * @description Enable or disable an authentication connection for a Dev organization. Currently, only 1 authentication connection can be enabled at a time. When a new authentication connection is enabled, the connection which is currently enabled for the Dev organization is automatically disabled.
     *
     * @tags auth-connection, dev-orgs
     * @name DevOrgAuthConnectionsToggle
     * @request POST:/internal/dev-orgs.auth-connections.toggle
     * @secure
     */
    devOrgAuthConnectionsToggle: (data: DevOrgAuthConnectionsToggleRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Updates an authentication connection.
     *
     * @tags auth-connection, dev-orgs
     * @name DevOrgAuthConnectionsUpdate
     * @request POST:/internal/dev-orgs.auth-connections.update
     * @secure
     */
    devOrgAuthConnectionsUpdate: (data: DevOrgAuthConnectionsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<DevOrgAuthConnectionsUpdateResponse, any>>;
    /**
     * @description Create DevOrg commerce details.
     *
     * @tags commerce
     * @name DevOrgsCommerceDetailsCreate
     * @request POST:/internal/dev-orgs.commerce-details.create
     * @secure
     */
    devOrgsCommerceDetailsCreate: (data: DevOrgsCommerceDetailsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<DevOrgsCommerceDetailsCreateResponse, any>>;
    /**
     * @description Gets DevOrg commerce details.
     *
     * @tags commerce
     * @name DevOrgsCommerceDetailsGet
     * @request GET:/internal/dev-orgs.commerce-details.get
     * @secure
     */
    devOrgsCommerceDetailsGet: (params?: RequestParams) => Promise<AxiosResponse<DevOrgsCommerceDetailsGetResponse, any>>;
    /**
     * @description Gets DevOrg commerce details.
     *
     * @tags commerce
     * @name DevOrgsCommerceDetailsGetPost
     * @request POST:/internal/dev-orgs.commerce-details.get
     * @secure
     */
    devOrgsCommerceDetailsGetPost: (data: DevOrgsCommerceDetailsGetRequest, params?: RequestParams) => Promise<AxiosResponse<DevOrgsCommerceDetailsGetResponse, any>>;
    /**
     * @description Updates DevOrg commerce details.
     *
     * @tags commerce
     * @name DevOrgsCommerceDetailsUpdate
     * @request POST:/internal/dev-orgs.commerce-details.update
     * @secure
     */
    devOrgsCommerceDetailsUpdate: (data: DevOrgsCommerceDetailsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<DevOrgsCommerceDetailsUpdateResponse, any>>;
    /**
     * @description Creates a Dev organization for the authenticated user.
     *
     * @tags dev-orgs
     * @name DevOrgsCreate
     * @request POST:/internal/dev-orgs.create
     * @secure
     */
    devOrgsCreate: (data: DevOrgsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<DevOrgsCreateResponse, any>>;
    /**
     * @description Delete the Dev organization of the authenticated user.
     *
     * @tags dev-orgs
     * @name DevOrgsDelete
     * @request POST:/internal/dev-orgs.delete
     * @secure
     */
    devOrgsDelete: (data: DevOrgsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: sambhav.jain@devrev.ai ### Gets the Dev organization's information of the authenticated user.
     *
     * @tags dev-orgs
     * @name DevOrgsGet
     * @request GET:/internal/dev-orgs.get
     * @secure
     */
    devOrgsGet: (params?: RequestParams) => Promise<AxiosResponse<DevOrgsGetResponse, any>>;
    /**
     * @description Gets the Dev organization's information of the authenticated user.
     *
     * @tags dev-orgs
     * @name DevOrgsGetPost
     * @request POST:/internal/dev-orgs.get
     * @secure
     */
    devOrgsGetPost: (data: DevOrgsGetRequest, params?: RequestParams) => Promise<AxiosResponse<DevOrgsGetResponse, any>>;
    /**
     * @description Completes creating a new global Dev organization.
     *
     * @tags dev-orgs, dev-orgs-global
     * @name DevOrgsGlobalCreateCommit
     * @request POST:/internal/dev-orgs.global.create-commit
     * @secure
     */
    devOrgsGlobalCreateCommit: (data: DevOrgsGlobalCreateCommitRequest, params?: RequestParams) => Promise<AxiosResponse<DevOrgsGlobalCreateCommitResponse, any>>;
    /**
     * @description Prepares to create a new global Dev organization and locks the Dev slug.
     *
     * @tags dev-orgs, dev-orgs-global
     * @name DevOrgsGlobalCreatePrepare
     * @request POST:/internal/dev-orgs.global.create-prepare
     * @secure
     */
    devOrgsGlobalCreatePrepare: (data: DevOrgsGlobalCreatePrepareRequest, params?: RequestParams) => Promise<AxiosResponse<DevOrgsGlobalCreatePrepareResponse, any>>;
    /**
     * @description Rolls back a created Dev organization and releases the locked Dev slug.
     *
     * @tags dev-orgs, dev-orgs-global
     * @name DevOrgsGlobalCreateRollback
     * @request POST:/internal/dev-orgs.global.create-rollback
     * @secure
     */
    devOrgsGlobalCreateRollback: (data: DevOrgsGlobalCreateRollbackRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Deletes a global Dev organization.
     *
     * @tags dev-orgs, dev-orgs-global
     * @name DevOrgsGlobalDelete
     * @request POST:/internal/dev-orgs.global.delete
     * @secure
     */
    devOrgsGlobalDelete: (data: DevOrgsGlobalDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: prabath.siriwardena@devrev.ai ### Returns a global Dev organization.
     *
     * @tags dev-orgs, dev-orgs-global
     * @name DevOrgsGlobalGet
     * @request GET:/internal/dev-orgs.global.get
     * @secure
     */
    devOrgsGlobalGet: (query: DevOrgsGlobalGetParams, params?: RequestParams) => Promise<AxiosResponse<DevOrgsGlobalGetResponse, any>>;
    /**
     * @description Returns a global Dev organization.
     *
     * @tags dev-orgs, dev-orgs-global
     * @name DevOrgsGlobalGetPost
     * @request POST:/internal/dev-orgs.global.get
     * @secure
     */
    devOrgsGlobalGetPost: (data: DevOrgsGlobalGetRequest, params?: RequestParams) => Promise<AxiosResponse<DevOrgsGlobalGetResponse, any>>;
    /**
     * @description ### Owner: prabath.siriwardena@devrev.ai ### Returns a list of global Dev organization.
     *
     * @tags dev-orgs, dev-orgs-global
     * @name DevOrgsGlobalList
     * @request GET:/internal/dev-orgs.global.list
     * @secure
     */
    devOrgsGlobalList: (query: DevOrgsGlobalListParams, params?: RequestParams) => Promise<AxiosResponse<DevOrgsGlobalListResponse, any>>;
    /**
     * @description ### Owner: prabath.siriwardena@devrev.ai ### Returns a list of global Dev organization.
     *
     * @tags dev-orgs, dev-orgs-global
     * @name DevOrgsGlobalList
     * @request GET:/internal/dev-orgs.global.list
     * @secure */
    devOrgsGlobalListPaginator(query: DevOrgsGlobalListParams, params?: RequestParams): AsyncGenerator<DevOrgsGlobalListResponse, void, unknown>;
    /**
     * @description Returns a list of global Dev organization.
     *
     * @tags dev-orgs, dev-orgs-global
     * @name DevOrgsGlobalListPost
     * @request POST:/internal/dev-orgs.global.list
     * @secure
     */
    devOrgsGlobalListPost: (data: DevOrgsGlobalListRequest, params?: RequestParams) => Promise<AxiosResponse<DevOrgsGlobalListResponse, any>>;
    /**
     * @description ### Owner: prabath.siriwardena@devrev.ai ### Returns the public info of a global Dev organization.
     *
     * @tags dev-orgs, dev-orgs-global
     * @name DevOrgsGlobalPublicInfo
     * @request GET:/internal/dev-orgs.global.public-info.get
     * @secure
     */
    devOrgsGlobalPublicInfo: (query: DevOrgsGlobalPublicInfoParams, params?: RequestParams) => Promise<AxiosResponse<DevOrgsGlobalPublicInfoResponse, any>>;
    /**
     * @description Returns the public info of a global Dev organization.
     *
     * @tags dev-orgs, dev-orgs-global
     * @name DevOrgsGlobalPublicInfoPost
     * @request POST:/internal/dev-orgs.global.public-info.get
     * @secure
     */
    devOrgsGlobalPublicInfoPost: (data: DevOrgsGlobalPublicInfoRequest, params?: RequestParams) => Promise<AxiosResponse<DevOrgsGlobalPublicInfoResponse, any>>;
    /**
     * @description Completes updating a global Dev organization.
     *
     * @tags dev-orgs, dev-orgs-global
     * @name DevOrgsGlobalUpdateCommit
     * @request POST:/internal/dev-orgs.global.update-commit
     * @secure
     */
    devOrgsGlobalUpdateCommit: (data: DevOrgsGlobalUpdateCommitRequest, params?: RequestParams) => Promise<AxiosResponse<DevOrgsGlobalUpdateCommitResponse, any>>;
    /**
     * @description Prepares to update a global Dev organization and locks the new Dev slug.
     *
     * @tags dev-orgs, dev-orgs-global
     * @name DevOrgsGlobalUpdatePrepare
     * @request POST:/internal/dev-orgs.global.update-prepare
     * @secure
     */
    devOrgsGlobalUpdatePrepare: (data: DevOrgsGlobalUpdatePrepareRequest, params?: RequestParams) => Promise<AxiosResponse<DevOrgsGlobalUpdatePrepareResponse, any>>;
    /**
     * @description Rolls back a non committed update on a global Dev organization.
     *
     * @tags dev-orgs, dev-orgs-global
     * @name DevOrgsGlobalUpdateRollback
     * @request POST:/internal/dev-orgs.global.update-rollback
     * @secure
     */
    devOrgsGlobalUpdateRollback: (data: DevOrgsGlobalUpdateRollbackRequest, params?: RequestParams) => Promise<AxiosResponse<DevOrgsGlobalUpdateRollbackResponse, any>>;
    /**
     * @description Create an invitation to a user.
     *
     * @tags dev-orgs
     * @name DevOrgsInvitesCreate
     * @request POST:/internal/dev-orgs.invites.create
     * @secure
     */
    devOrgsInvitesCreate: (data: DevOrgsInvitesCreateRequest, params?: RequestParams) => Promise<AxiosResponse<DevOrgsInvitesCreateResponse, any>>;
    /**
     * @description ### Owner: sambhav.jain@devrev.ai ### Gets the list of Dev user invitations in the user's Dev organization.
     *
     * @tags dev-orgs
     * @name DevOrgsInvitesList
     * @request GET:/internal/dev-orgs.invites.list
     * @secure
     */
    devOrgsInvitesList: (query: DevOrgsInvitesListParams, params?: RequestParams) => Promise<AxiosResponse<DevOrgsInvitesListResponse, any>>;
    /**
     * @description ### Owner: sambhav.jain@devrev.ai ### Gets the list of Dev user invitations in the user's Dev organization.
     *
     * @tags dev-orgs
     * @name DevOrgsInvitesList
     * @request GET:/internal/dev-orgs.invites.list
     * @secure */
    devOrgsInvitesListPaginator(query: DevOrgsInvitesListParams, params?: RequestParams): AsyncGenerator<DevOrgsInvitesListResponse, void, unknown>;
    /**
     * @description Gets the list of Dev user invitations in the user's Dev organization.
     *
     * @tags dev-orgs
     * @name DevOrgsInvitesListPost
     * @request POST:/internal/dev-orgs.invites.list
     * @secure
     */
    devOrgsInvitesListPost: (data: DevOrgsInvitesListRequest, params?: RequestParams) => Promise<AxiosResponse<DevOrgsInvitesListResponse, any>>;
    /**
     * @description ### Owner: sambhav.jain@devrev.ai ### Gets a short-lived invitation url to join the organisation on the basis of email domain.
     *
     * @tags dev-orgs
     * @name DevOrgsJoin
     * @request GET:/internal/dev-orgs.join
     * @secure
     */
    devOrgsJoin: (query: DevOrgsJoinParams, params?: RequestParams) => Promise<AxiosResponse<DevOrgsJoinResponse, any>>;
    /**
     * @description Gets a short-lived invitation url to join the organisation on the basis of email domain.
     *
     * @tags dev-orgs
     * @name DevOrgsJoinPost
     * @request POST:/internal/dev-orgs.join
     * @secure
     */
    devOrgsJoinPost: (data: DevOrgsJoinRequest, params?: RequestParams) => Promise<AxiosResponse<DevOrgsJoinResponse, any>>;
    /**
     * @description ### Owner: sambhav.jain@devrev.ai ### Gets the list of Dev organizations for the authenticated Dev user.
     *
     * @tags dev-orgs
     * @name DevOrgsList
     * @request GET:/internal/dev-orgs.list
     * @secure
     */
    devOrgsList: (query: DevOrgsListParams, params?: RequestParams) => Promise<AxiosResponse<DevOrgsListResponse, any>>;
    /**
     * @description ### Owner: sambhav.jain@devrev.ai ### Gets the list of Dev organizations for the authenticated Dev user.
     *
     * @tags dev-orgs
     * @name DevOrgsList
     * @request GET:/internal/dev-orgs.list
     * @secure */
    devOrgsListPaginator(query: DevOrgsListParams, params?: RequestParams): AsyncGenerator<DevOrgsListResponse, void, unknown>;
    /**
     * @description Gets the list of Dev organizations for the authenticated Dev user.
     *
     * @tags dev-orgs
     * @name DevOrgsListPost
     * @request POST:/internal/dev-orgs.list
     * @secure
     */
    devOrgsListPost: (data: DevOrgsListRequest, params?: RequestParams) => Promise<AxiosResponse<DevOrgsListResponse, any>>;
    /**
     * @description ### Owner: sambhav.jain@devrev.ai ### Gets public information of a Dev organization from Slug.
     *
     * @tags dev-orgs
     * @name DevOrgPublicInfo
     * @request GET:/internal/dev-orgs.public-info.get
     */
    devOrgPublicInfo: (query: DevOrgPublicInfoParams, params?: RequestParams) => Promise<AxiosResponse<DevOrgPublicInfoResponse, any>>;
    /**
     * @description Gets public information of a Dev organization from Slug.
     *
     * @tags dev-orgs
     * @name DevOrgPublicInfoPost
     * @request POST:/internal/dev-orgs.public-info.get
     * @secure
     */
    devOrgPublicInfoPost: (data: DevOrgPublicInfoRequest, params?: RequestParams) => Promise<AxiosResponse<DevOrgPublicInfoResponse, any>>;
    /**
     * @description ### Owner: sambhav.jain@devrev.ai ### Gets the authenticated user's Dev organization information.
     *
     * @tags dev-orgs
     * @name DevOrgsSelf
     * @request GET:/internal/dev-orgs.self
     * @secure
     */
    devOrgsSelf: (params?: RequestParams) => Promise<AxiosResponse<DevOrgsSelfGetResponse, any>>;
    /**
     * @description Gets the authenticated user's Dev organization information.
     *
     * @tags dev-orgs
     * @name DevOrgsSelfPost
     * @request POST:/internal/dev-orgs.self
     * @secure
     */
    devOrgsSelfPost: (data: DevOrgsSelfGetRequest, params?: RequestParams) => Promise<AxiosResponse<DevOrgsSelfGetResponse, any>>;
    /**
     * @description ### Owner: sambhav.jain@devrev.ai ### Gets the authenticated user's Dev organization information.
     *
     * @tags dev-orgs
     * @name DevOrgsSelfGet
     * @request GET:/internal/dev-orgs.self.get
     * @secure
     */
    devOrgsSelfGet: (params?: RequestParams) => Promise<AxiosResponse<DevOrgsSelfGetResponse, any>>;
    /**
     * @description Gets the authenticated user's Dev organization information.
     *
     * @tags dev-orgs
     * @name DevOrgsSelfGetPost
     * @request POST:/internal/dev-orgs.self.get
     * @secure
     */
    devOrgsSelfGetPost: (data: DevOrgsSelfGetRequest, params?: RequestParams) => Promise<AxiosResponse<DevOrgsSelfGetResponse, any>>;
    /**
     * @description Updates the Dev organization's information of the authenticated user.
     *
     * @tags dev-orgs
     * @name DevOrgsUpdate
     * @request POST:/internal/dev-orgs.update
     * @secure
     */
    devOrgsUpdate: (data: DevOrgsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<DevOrgsUpdateResponse, any>>;
    /**
     * @description Activates the requested user.
     *
     * @tags dev-users
     * @name DevUsersActivate
     * @request POST:/internal/dev-users.activate
     * @secure
     */
    devUsersActivate: (data: DevUsersActivateRequest, params?: RequestParams) => Promise<AxiosResponse<DevUsersActivateResponse, any>>;
    /**
     * @description Counts users within your organization.
     *
     * @tags dev-users
     * @name DevUsersCount
     * @request GET:/internal/dev-users.count
     * @secure
     */
    devUsersCount: (query: DevUsersCountParams, params?: RequestParams) => Promise<AxiosResponse<DevUsersCountResponse, any>>;
    /**
     * @description Counts users within your organization.
     *
     * @tags dev-users
     * @name DevUsersCountPost
     * @request POST:/internal/dev-users.count
     * @secure
     */
    devUsersCountPost: (data: DevUsersCountRequest, params?: RequestParams) => Promise<AxiosResponse<DevUsersCountResponse, any>>;
    /**
     * @description Creates a Dev User for a Dev Organization.
     *
     * @tags dev-users
     * @name DevUsersCreate
     * @request POST:/internal/dev-users.create
     * @secure
     */
    devUsersCreate: (data: DevUsersCreateRequest, params?: RequestParams) => Promise<AxiosResponse<DevUsersCreateResponse, any>>;
    /**
     * @description Deactivates the requested user.
     *
     * @tags dev-users
     * @name DevUsersDeactivate
     * @request POST:/internal/dev-users.deactivate
     * @secure
     */
    devUsersDeactivate: (data: DevUsersDeactivateRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Deletes the requested user.
     *
     * @tags dev-users
     * @name DevUsersDelete
     * @request POST:/internal/dev-users.delete
     * @secure
     */
    devUsersDelete: (data: DevUsersDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Checks if a display handle is available for the authenticated user or not.
     *
     * @tags dev-users
     * @name DevUsersIsDisplayHandleAvailable
     * @request GET:/internal/dev-users.display-handles.is-available
     * @secure
     */
    devUsersIsDisplayHandleAvailable: (query: DevUsersIsDisplayHandleAvailableParams, params?: RequestParams) => Promise<AxiosResponse<DevUsersIsDisplayHandleAvailableResponse, any>>;
    /**
     * @description Checks if a display handle is available for the authenticated user or not.
     *
     * @tags dev-users
     * @name DevUsersIsDisplayHandleAvailablePost
     * @request POST:/internal/dev-users.display-handles.is-available
     * @secure
     */
    devUsersIsDisplayHandleAvailablePost: (data: DevUsersIsDisplayHandleAvailableRequest, params?: RequestParams) => Promise<AxiosResponse<DevUsersIsDisplayHandleAvailableResponse, any>>;
    /**
     * @description Updates the display picture of a Dev User
     *
     * @tags dev-users
     * @name DevUserUpdateDisplayPicture
     * @request POST:/internal/dev-users.display-picture
     * @secure
     */
    devUserUpdateDisplayPicture: (data: DevUserUpdateDisplayPictureRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Gets the requested user's information.
     *
     * @tags dev-users
     * @name DevUsersGet
     * @request GET:/internal/dev-users.get
     * @secure
     */
    devUsersGet: (query: DevUsersGetParams, params?: RequestParams) => Promise<AxiosResponse<DevUsersGetResponse, any>>;
    /**
     * @description Gets the requested user's information.
     *
     * @tags dev-users
     * @name DevUsersGetPost
     * @request POST:/internal/dev-users.get
     * @secure
     */
    devUsersGetPost: (data: DevUsersGetRequest, params?: RequestParams) => Promise<AxiosResponse<DevUsersGetResponse, any>>;
    /**
     * @description Links an external/secondary identity to the Dev user.
     *
     * @tags dev-users
     * @name DevUsersIdentitiesLink
     * @request POST:/internal/dev-users.identities.link
     * @secure
     */
    devUsersIdentitiesLink: (data: DevUsersIdentitiesLinkRequest, params?: RequestParams) => Promise<AxiosResponse<DevUsersIdentitiesLinkResponse, any>>;
    /**
     * @description Unlinks an external/secondary identity from the Dev user.
     *
     * @tags dev-users
     * @name DevUsersIdentitiesUnlink
     * @request POST:/internal/dev-users.identities.unlink
     * @secure
     */
    devUsersIdentitiesUnlink: (data: DevUsersIdentitiesUnlinkRequest, params?: RequestParams) => Promise<AxiosResponse<DevUsersIdentitiesUnlinkResponse, any>>;
    /**
     * @description Lists users within your organization.
     *
     * @tags dev-users
     * @name DevUsersList
     * @request GET:/internal/dev-users.list
     * @secure
     */
    devUsersList: (query: DevUsersListParams, params?: RequestParams) => Promise<AxiosResponse<DevUsersListResponse, any>>;
    /**
     * @description Lists users within your organization.
     *
     * @tags dev-users
     * @name DevUsersList
     * @request GET:/internal/dev-users.list
     * @secure */
    devUsersListPaginator(query: DevUsersListParams, params?: RequestParams): AsyncGenerator<DevUsersListResponse, void, unknown>;
    /**
     * @description Lists users within your organization.
     *
     * @tags dev-users
     * @name DevUsersListPost
     * @request POST:/internal/dev-users.list
     * @secure
     */
    devUsersListPost: (data: DevUsersListRequest, params?: RequestParams) => Promise<AxiosResponse<DevUsersListResponse, any>>;
    /**
     * @description Logout from a Dev organization.
     *
     * @tags dev-users
     * @name DevUsersLogout
     * @request POST:/internal/dev-users.logout
     * @secure
     */
    devUsersLogout: (data: DevUsersLogoutRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Merges the identity of a secondary Dev user with the primary Dev user.The account of the secondary Dev user will be deactivated and will no longer be able to log into DevRev. All objects - issues, tickets, parts etc. owned by the secondary Dev user will be transferred to the primary Dev user.
     *
     * @tags dev-users
     * @name DevUsersMerge
     * @request POST:/internal/dev-users.merge
     * @secure
     */
    devUsersMerge: (data: DevUsersMergeRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Updates the user's phone number if the verification code entered by the user is valid.
     *
     * @tags dev-users
     * @name DevUsersCheckPhoneNumberCode
     * @request POST:/internal/dev-users.phonenumbers.check-code
     * @secure
     */
    devUsersCheckPhoneNumberCode: (data: DevUsersCheckPhoneNumberCodeRequest, params?: RequestParams) => Promise<AxiosResponse<DevUsersCheckPhoneNumberCodeResponse, any>>;
    /**
     * @description Sends a verification code to the user's phone number.
     *
     * @tags dev-users
     * @name DevUsersSendPhoneNumberCode
     * @request POST:/internal/dev-users.phonenumbers.send-code
     * @secure
     */
    devUsersSendPhoneNumberCode: (data: DevUsersSendPhoneNumberCodeRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Request made by UI to perform first set of operations when Dev user logs into a Dev organization.
     *
     * @tags dev-users
     * @name DevUsersPostLogin
     * @request POST:/internal/dev-users.post-login
     * @secure
     */
    devUsersPostLogin: (data: DevUsersPostLoginRequest, params?: RequestParams) => Promise<AxiosResponse<DevUsersPostLoginResponse, any>>;
    /**
     * @description Gets the authenticated user's information.
     *
     * @tags dev-users
     * @name DevUsersSelf
     * @request GET:/internal/dev-users.self
     * @secure
     */
    devUsersSelf: (params?: RequestParams) => Promise<AxiosResponse<DevUsersSelfResponse, any>>;
    /**
     * @description Gets the authenticated user's information.
     *
     * @tags dev-users
     * @name DevUsersSelfPost
     * @request POST:/internal/dev-users.self
     * @secure
     */
    devUsersSelfPost: (data: DevUsersSelfRequest, params?: RequestParams) => Promise<AxiosResponse<DevUsersSelfResponse, any>>;
    /**
     * @description Deletes the authenticated user.
     *
     * @tags dev-users
     * @name DevUsersSelfDelete
     * @request POST:/internal/dev-users.self.delete
     * @secure
     */
    devUsersSelfDelete: (data: DevUsersSelfDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Updates the authenticated user.
     *
     * @tags dev-users
     * @name DevUsersSelfUpdate
     * @request POST:/internal/dev-users.self.update
     * @secure
     */
    devUsersSelfUpdate: (data: DevUsersSelfUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<DevUsersUpdateResponse, any>>;
    /**
     * @description Updates the user corresponding to the input Id.
     *
     * @tags dev-users
     * @name DevUsersUpdate
     * @request POST:/internal/dev-users.update
     * @secure
     */
    devUsersUpdate: (data: DevUsersUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<DevUsersUpdateResponse, any>>;
    /**
     * @description Gets the specified directory's ancestors.
     *
     * @tags directory
     * @name DirectoryAncestors
     * @request GET:/internal/directories.ancestors
     * @secure
     */
    directoryAncestors: (query: DirectoryAncestorsParams, params?: RequestParams) => Promise<AxiosResponse<DirectoryAncestorsResponse, any>>;
    /**
     * @description Gets the specified directory's ancestors.
     *
     * @tags directory
     * @name DirectoryAncestorsPost
     * @request POST:/internal/directories.ancestors
     * @secure
     */
    directoryAncestorsPost: (data: DirectoryAncestorsRequest, params?: RequestParams) => Promise<AxiosResponse<DirectoryAncestorsResponse, any>>;
    /**
     * @description Get count of directories matching given filter.
     *
     * @tags directory
     * @name DirectoriesCount
     * @request GET:/internal/directories.count
     * @secure
     */
    directoriesCount: (query: DirectoriesCountParams, params?: RequestParams) => Promise<AxiosResponse<DirectoriesCountResponse, any>>;
    /**
     * @description Get count of directories matching given filter.
     *
     * @tags directory
     * @name DirectoriesCountPost
     * @request POST:/internal/directories.count
     * @secure
     */
    directoriesCountPost: (data: DirectoriesCountRequest, params?: RequestParams) => Promise<AxiosResponse<DirectoriesCountResponse, any>>;
    /**
     * @description Creates a directory for the specified inputs.
     *
     * @tags directory
     * @name DirectoriesCreate
     * @request POST:/internal/directories.create
     * @secure
     */
    directoriesCreate: (data: DirectoriesCreateRequest, params?: RequestParams) => Promise<AxiosResponse<DirectoriesCreateResponse, any>>;
    /**
     * @description Delete the specified directory.
     *
     * @tags directory
     * @name DirectoriesDelete
     * @request POST:/internal/directories.delete
     * @secure
     */
    directoriesDelete: (data: DirectoriesDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Gets the specified directory.
     *
     * @tags directory
     * @name DirectoriesGet
     * @request GET:/internal/directories.get
     * @secure
     */
    directoriesGet: (query: DirectoriesGetParams, params?: RequestParams) => Promise<AxiosResponse<DirectoriesGetResponse, any>>;
    /**
     * @description Gets the specified directory.
     *
     * @tags directory
     * @name DirectoriesGetPost
     * @request POST:/internal/directories.get
     * @secure
     */
    directoriesGetPost: (data: DirectoriesGetRequest, params?: RequestParams) => Promise<AxiosResponse<DirectoriesGetResponse, any>>;
    /**
     * @description Lists directories matching the request.
     *
     * @tags directory
     * @name DirectoriesList
     * @request GET:/internal/directories.list
     * @secure
     */
    directoriesList: (query: DirectoriesListParams, params?: RequestParams) => Promise<AxiosResponse<DirectoriesListResponse, any>>;
    /**
     * @description Lists directories matching the request.
     *
     * @tags directory
     * @name DirectoriesList
     * @request GET:/internal/directories.list
     * @secure */
    directoriesListPaginator(query: DirectoriesListParams, params?: RequestParams): AsyncGenerator<DirectoriesListResponse, void, unknown>;
    /**
     * @description Lists directories matching the request.
     *
     * @tags directory
     * @name DirectoriesListPost
     * @request POST:/internal/directories.list
     * @secure
     */
    directoriesListPost: (data: DirectoriesListRequest, params?: RequestParams) => Promise<AxiosResponse<DirectoriesListResponse, any>>;
    /**
     * @description Get the directory tree for the specified directory.
     *
     * @tags directory
     * @name DirectoriesTree
     * @request GET:/internal/directories.tree
     * @secure
     */
    directoriesTree: (query: DirectoriesTreeParams, params?: RequestParams) => Promise<AxiosResponse<DirectoriesTreeResponse, any>>;
    /**
     * @description Get the directory tree for the specified directory.
     *
     * @tags directory
     * @name DirectoriesTreePost
     * @request POST:/internal/directories.tree
     * @secure
     */
    directoriesTreePost: (data: DirectoriesTreeRequest, params?: RequestParams) => Promise<AxiosResponse<DirectoriesTreeResponse, any>>;
    /**
     * @description Updates the specified directory.
     *
     * @tags directory
     * @name DirectoriesUpdate
     * @request POST:/internal/directories.update
     * @secure
     */
    directoriesUpdate: (data: DirectoriesUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<DirectoriesUpdateResponse, any>>;
    /**
     * @description Schedule data collection for discovery.
     *
     * @tags discovery
     * @name ScheduleDataCollection
     * @request POST:/internal/discovery.data-collection.schedule
     * @secure
     */
    scheduleDataCollection: (data: ScheduleDataCollectionRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Start data collection for discovery.
     *
     * @tags discovery
     * @name StartDataCollection
     * @request POST:/internal/discovery.data-collection.start
     * @secure
     */
    startDataCollection: (data: StartDataCollectionRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Unschedule data collection for discovery.
     *
     * @tags discovery
     * @name UnscheduleDataCollection
     * @request POST:/internal/discovery.data-collection.unschedule
     * @secure
     */
    unscheduleDataCollection: (data: UnscheduleDataCollectionRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Create discovery profile.
     *
     * @tags discovery
     * @name CreateDiscoveryProfile
     * @request POST:/internal/discovery.profiles.create
     * @secure
     */
    createDiscoveryProfile: (data: CreateDiscoveryProfileRequest, params?: RequestParams) => Promise<AxiosResponse<CreateDiscoveryProfileResponse, any>>;
    /**
     * @description Delete discovery profile.
     *
     * @tags discovery
     * @name DeleteDiscoveryProfile
     * @request POST:/internal/discovery.profiles.delete
     * @secure
     */
    deleteDiscoveryProfile: (data: DeleteDiscoveryProfileRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Get discovery profile.
     *
     * @tags discovery
     * @name GetDiscoveryProfile
     * @request POST:/internal/discovery.profiles.get
     * @secure
     */
    getDiscoveryProfile: (data: GetDiscoveryProfileRequest, params?: RequestParams) => Promise<AxiosResponse<GetDiscoveryProfileResponse, any>>;
    /**
     * @description List discovery profiles.
     *
     * @tags discovery
     * @name ListDiscoveryProfiles
     * @request GET:/internal/discovery.profiles.list
     * @secure
     */
    listDiscoveryProfiles: (query: ListDiscoveryProfilesParams, params?: RequestParams) => Promise<AxiosResponse<ListDiscoveryProfilesResponse, any>>;
    /**
     * @description List discovery profiles.
     *
     * @tags discovery
     * @name ListDiscoveryProfiles
     * @request GET:/internal/discovery.profiles.list
     * @secure */
    listDiscoveryProfilesPaginator(query: ListDiscoveryProfilesParams, params?: RequestParams): AsyncGenerator<ListDiscoveryProfilesResponse, void, unknown>;
    /**
     * @description List discovery profiles.
     *
     * @tags discovery
     * @name ListDiscoveryProfilesPost
     * @request POST:/internal/discovery.profiles.list
     * @secure
     */
    listDiscoveryProfilesPost: (data: ListDiscoveryProfilesRequest, params?: RequestParams) => Promise<AxiosResponse<ListDiscoveryProfilesResponse, any>>;
    /**
     * @description Update discovery profile.
     *
     * @tags discovery
     * @name UpdateDiscoveryProfile
     * @request POST:/internal/discovery.profiles.update
     * @secure
     */
    updateDiscoveryProfile: (data: UpdateDiscoveryProfileRequest, params?: RequestParams) => Promise<AxiosResponse<UpdateDiscoveryProfileResponse, any>>;
    /**
     * @description Run discovery using profile.
     *
     * @tags discovery
     * @name RunDiscovery
     * @request POST:/internal/discovery.run
     * @secure
     */
    runDiscovery: (data: RunDiscoveryRequest, params?: RequestParams) => Promise<AxiosResponse<RunDiscoveryResponse, any>>;
    /**
     * @description Get discovery run status.
     *
     * @tags discovery
     * @name GetDiscoveryRun
     * @request GET:/internal/discovery.run.status
     * @secure
     */
    getDiscoveryRun: (query: GetDiscoveryRunParams, params?: RequestParams) => Promise<AxiosResponse<GetDiscoveryRunResponse, any>>;
    /**
     * @description Get discovery run status.
     *
     * @tags discovery
     * @name GetDiscoveryRunPost
     * @request POST:/internal/discovery.run.status
     * @secure
     */
    getDiscoveryRunPost: (data: GetDiscoveryRunRequest, params?: RequestParams) => Promise<AxiosResponse<GetDiscoveryRunResponse, any>>;
    /**
     * @description Schedule discovery run.
     *
     * @tags discovery
     * @name ScheduleDiscovery
     * @request POST:/internal/discovery.schedule
     * @secure
     */
    scheduleDiscovery: (data: ScheduleDiscoveryRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Create discovery Settings.
     *
     * @tags discovery
     * @name CreateDiscoverySettings
     * @request POST:/internal/discovery.settings.create
     * @secure
     */
    createDiscoverySettings: (data: CreateDiscoverySettingsRequest, params?: RequestParams) => Promise<AxiosResponse<CreateDiscoverySettingsResponse, any>>;
    /**
     * @description Delete discovery Settings.
     *
     * @tags discovery
     * @name DeleteDiscoverySettings
     * @request POST:/internal/discovery.settings.delete
     * @secure
     */
    deleteDiscoverySettings: (data: DeleteDiscoverySettingsRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Get discovery Settings.
     *
     * @tags discovery
     * @name GetDiscoverySettings
     * @request GET:/internal/discovery.settings.get
     * @secure
     */
    getDiscoverySettings: (query: GetDiscoverySettingsParams, params?: RequestParams) => Promise<AxiosResponse<GetDiscoverySettingsResponse, any>>;
    /**
     * @description Get discovery Settings.
     *
     * @tags discovery
     * @name GetDiscoverySettingsPost
     * @request POST:/internal/discovery.settings.get
     * @secure
     */
    getDiscoverySettingsPost: (data: GetDiscoverySettingsRequest, params?: RequestParams) => Promise<AxiosResponse<GetDiscoverySettingsResponse, any>>;
    /**
     * @description Update discovery Settings.
     *
     * @tags discovery
     * @name UpdateDiscoverySettings
     * @request POST:/internal/discovery.settings.update
     * @secure
     */
    updateDiscoverySettings: (data: UpdateDiscoverySettingsRequest, params?: RequestParams) => Promise<AxiosResponse<UpdateDiscoverySettingsResponse, any>>;
    /**
     * @description List discovery sources.
     *
     * @tags discovery
     * @name ListDiscoverySources
     * @request GET:/internal/discovery.sources.list
     * @secure
     */
    listDiscoverySources: (query: ListDiscoverySourcesParams, params?: RequestParams) => Promise<AxiosResponse<ListDiscoverySourcesResponse, any>>;
    /**
     * @description List discovery sources.
     *
     * @tags discovery
     * @name ListDiscoverySourcesPost
     * @request POST:/internal/discovery.sources.list
     * @secure
     */
    listDiscoverySourcesPost: (data: ListDiscoverySourcesRequest, params?: RequestParams) => Promise<AxiosResponse<ListDiscoverySourcesResponse, any>>;
    /**
     * @description Unschedule discovery run.
     *
     * @tags discovery
     * @name UnscheduleDiscovery
     * @request POST:/internal/discovery.unschedule
     * @secure
     */
    unscheduleDiscovery: (data: UnscheduleDiscoveryRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Sends an email from the devorg
     *
     * @tags dmarc
     * @name DmarcSendEmail
     * @request POST:/internal/dmarc.send-email
     * @secure
     */
    dmarcSendEmail: (data: DmarcSendEmailRequest, params?: RequestParams) => Promise<AxiosResponse<DmarcSendEmailResponse, any>>;
    /**
     * @description Creates domain identity for the supplied domain
     *
     * @tags domain-identity
     * @name DomainIdentitiesCreate
     * @request POST:/internal/domain-identities.create
     * @secure
     */
    domainIdentitiesCreate: (data: DomainIdentitiesCreateRequest, params?: RequestParams) => Promise<AxiosResponse<DomainIdentitiesCreateResponse, any>>;
    /**
     * @description Syncs the domain identity verification status
     *
     * @tags domain-identity
     * @name DomainIdentitiesSync
     * @request POST:/internal/domain-identities.sync
     * @secure
     */
    domainIdentitiesSync: (data: DomainIdentitiesSyncRequest, params?: RequestParams) => Promise<AxiosResponse<DomainIdentitiesSyncResponse, any>>;
    /**
     * @description Creates a new emoji.
     *
     * @tags emojis
     * @name EmojisCreate
     * @request POST:/internal/emojis.create
     * @secure
     */
    emojisCreate: (data: EmojisCreateRequest, params?: RequestParams) => Promise<AxiosResponse<EmojisCreateResponse, any>>;
    /**
     * @description Deletes an emoji.
     *
     * @tags emojis
     * @name EmojisDelete
     * @request POST:/internal/emojis.delete
     * @secure
     */
    emojisDelete: (data: EmojisDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: brian.byrne@devrev.ai ### Looks up an emoji.
     *
     * @tags emojis
     * @name EmojisGet
     * @request GET:/internal/emojis.get
     * @secure
     */
    emojisGet: (query: EmojisGetParams, params?: RequestParams) => Promise<AxiosResponse<EmojisGetResponse, any>>;
    /**
     * @description Looks up an emoji.
     *
     * @tags emojis
     * @name EmojisGetPost
     * @request POST:/internal/emojis.get
     * @secure
     */
    emojisGetPost: (data: EmojisGetRequest, params?: RequestParams) => Promise<AxiosResponse<EmojisGetResponse, any>>;
    /**
     * @description ### Owner: brian.byrne@devrev.ai ### Lists the emojis.
     *
     * @tags emojis
     * @name EmojisList
     * @request GET:/internal/emojis.list
     * @secure
     */
    emojisList: (query: EmojisListParams, params?: RequestParams) => Promise<AxiosResponse<EmojisListResponse, any>>;
    /**
     * @description ### Owner: brian.byrne@devrev.ai ### Lists the emojis.
     *
     * @tags emojis
     * @name EmojisList
     * @request GET:/internal/emojis.list
     * @secure */
    emojisListPaginator(query: EmojisListParams, params?: RequestParams): AsyncGenerator<EmojisListResponse, void, unknown>;
    /**
     * @description Lists the emojis.
     *
     * @tags emojis
     * @name EmojisListPost
     * @request POST:/internal/emojis.list
     * @secure
     */
    emojisListPost: (data: EmojisListRequest, params?: RequestParams) => Promise<AxiosResponse<EmojisListResponse, any>>;
    /**
     * @description ### Owner: brian.byrne@devrev.ai ### Searches the emojis.
     *
     * @tags emojis
     * @name EmojisSearch
     * @request GET:/internal/emojis.search
     * @secure
     */
    emojisSearch: (query: EmojisSearchParams, params?: RequestParams) => Promise<AxiosResponse<EmojisSearchResponse, any>>;
    /**
     * @description ### Owner: brian.byrne@devrev.ai ### Searches the emojis.
     *
     * @tags emojis
     * @name EmojisSearch
     * @request GET:/internal/emojis.search
     * @secure */
    emojisSearchPaginator(query: EmojisSearchParams, params?: RequestParams): AsyncGenerator<EmojisSearchResponse, void, unknown>;
    /**
     * @description Searches the emojis.
     *
     * @tags emojis
     * @name EmojisSearchPost
     * @request POST:/internal/emojis.search
     * @secure
     */
    emojisSearchPost: (data: EmojisSearchRequest, params?: RequestParams) => Promise<AxiosResponse<EmojisSearchResponse, any>>;
    /**
     * @description Updates an emoji.
     *
     * @tags emojis
     * @name EmojisUpdate
     * @request POST:/internal/emojis.update
     * @secure
     */
    emojisUpdate: (data: EmojisUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<EmojisUpdateResponse, any>>;
    /**
     * @description ### Owner: rahul.jain@devrev.ai ### Counts the engagement records.
     *
     * @tags engagements
     * @name EngagementsCount
     * @request GET:/internal/engagements.count
     * @secure
     */
    engagementsCount: (query: EngagementsCountParams, params?: RequestParams) => Promise<AxiosResponse<EngagementsCountResponse, any>>;
    /**
     * @description Counts the engagement records.
     *
     * @tags engagements
     * @name EngagementsCountPost
     * @request POST:/internal/engagements.count
     * @secure
     */
    engagementsCountPost: (data: EngagementsCountRequest, params?: RequestParams) => Promise<AxiosResponse<EngagementsCountResponse, any>>;
    /**
     * @description Creates a new engagement record.
     *
     * @tags engagements
     * @name EngagementsCreate
     * @request POST:/internal/engagements.create
     * @secure
     */
    engagementsCreate: (data: EngagementsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<EngagementsCreateResponse, any>>;
    /**
     * @description Deletes the engagement record.
     *
     * @tags engagements
     * @name EngagementsDelete
     * @request POST:/internal/engagements.delete
     * @secure
     */
    engagementsDelete: (data: EngagementsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: rahul.jain@devrev.ai ### Gets the engagement record.
     *
     * @tags engagements
     * @name EngagementsGet
     * @request GET:/internal/engagements.get
     * @secure
     */
    engagementsGet: (query: EngagementsGetParams, params?: RequestParams) => Promise<AxiosResponse<EngagementsGetResponse, any>>;
    /**
     * @description Gets the engagement record.
     *
     * @tags engagements
     * @name EngagementsGetPost
     * @request POST:/internal/engagements.get
     * @secure
     */
    engagementsGetPost: (data: EngagementsGetRequest, params?: RequestParams) => Promise<AxiosResponse<EngagementsGetResponse, any>>;
    /**
     * @description ### Owner: rahul.jain@devrev.ai ### Lists the engagement records.
     *
     * @tags engagements
     * @name EngagementsList
     * @request GET:/internal/engagements.list
     * @secure
     */
    engagementsList: (query: EngagementsListParams, params?: RequestParams) => Promise<AxiosResponse<EngagementsListResponse, any>>;
    /**
     * @description ### Owner: rahul.jain@devrev.ai ### Lists the engagement records.
     *
     * @tags engagements
     * @name EngagementsList
     * @request GET:/internal/engagements.list
     * @secure */
    engagementsListPaginator(query: EngagementsListParams, params?: RequestParams): AsyncGenerator<EngagementsListResponse, void, unknown>;
    /**
     * @description Lists the engagement records.
     *
     * @tags engagements
     * @name EngagementsListPost
     * @request POST:/internal/engagements.list
     * @secure
     */
    engagementsListPost: (data: EngagementsListRequest, params?: RequestParams) => Promise<AxiosResponse<EngagementsListResponse, any>>;
    /**
     * @description Updates the engagement record.
     *
     * @tags engagements
     * @name EngagementsUpdate
     * @request POST:/internal/engagements.update
     * @secure
     */
    engagementsUpdate: (data: EngagementsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<EngagementsUpdateResponse, any>>;
    /**
     * @description Creates an event source.
     *
     * @tags event-source
     * @name EventSourcesCreate
     * @request POST:/internal/event-sources.create
     * @secure
     */
    eventSourcesCreate: (data: EventSourceCreateRequest, params?: RequestParams) => Promise<AxiosResponse<EventSourceCreateResponse, any>>;
    /**
     * @description Deletes an event source.
     *
     * @tags event-source
     * @name EventSourceDelete
     * @request POST:/internal/event-sources.delete
     * @secure
     */
    eventSourceDelete: (data: EventSourceDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Gets an event source.
     *
     * @tags event-source
     * @name EventSourcesGet
     * @request GET:/internal/event-sources.get
     * @secure
     */
    eventSourcesGet: (query: EventSourcesGetParams, params?: RequestParams) => Promise<AxiosResponse<EventSourceGetResponse, any>>;
    /**
     * @description Gets an event source.
     *
     * @tags event-source
     * @name EventSourcesGetPost
     * @request POST:/internal/event-sources.get
     * @secure
     */
    eventSourcesGetPost: (data: EventSourceGetRequest, params?: RequestParams) => Promise<AxiosResponse<EventSourceGetResponse, any>>;
    /**
     * @description Lists event sources for a Dev organization.
     *
     * @tags event-source
     * @name EventSourcesList
     * @request GET:/internal/event-sources.list
     * @secure
     */
    eventSourcesList: (query: EventSourcesListParams, params?: RequestParams) => Promise<AxiosResponse<EventSourcesListResponse, any>>;
    /**
     * @description Lists event sources for a Dev organization.
     *
     * @tags event-source
     * @name EventSourcesList
     * @request GET:/internal/event-sources.list
     * @secure */
    eventSourcesListPaginator(query: EventSourcesListParams, params?: RequestParams): AsyncGenerator<EventSourcesListResponse, void, unknown>;
    /**
     * @description Lists event sources for a Dev organization.
     *
     * @tags event-source
     * @name EventSourcesListPost
     * @request POST:/internal/event-sources.list
     * @secure
     */
    eventSourcesListPost: (data: EventSourcesListRequest, params?: RequestParams) => Promise<AxiosResponse<EventSourcesListResponse, any>>;
    /**
     * @description Schedules an event to be published to the specified event source.
     *
     * @tags event-source
     * @name EventSourcesScheduleEvent
     * @request POST:/internal/event-sources.schedule
     * @secure
     */
    eventSourcesScheduleEvent: (data: EventSourcesScheduleEventRequest, params?: RequestParams) => Promise<AxiosResponse<EventSourcesScheduleEventResponse, any>>;
    /**
     * @description Deletes an event scheduled for the specified event source.
     *
     * @tags event-source
     * @name EventSourcesDeleteScheduledEvent
     * @request POST:/internal/event-sources.unschedule
     * @secure
     */
    eventSourcesDeleteScheduledEvent: (data: EventSourcesDeleteScheduledEventRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Updates an event source.
     *
     * @tags event-source
     * @name EventSourceUpdate
     * @request POST:/internal/event-sources.update
     * @secure
     */
    eventSourceUpdate: (data: EventSourceUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<EventSourceUpdateResponse, any>>;
    /**
     * @description ### Owner: brian.byrne@devrev.ai ### Gets the flags for a user.
     *
     * @tags experience
     * @name ExperienceFlagsGet
     * @request GET:/internal/experience.flags.get
     */
    experienceFlagsGet: (params?: RequestParams) => Promise<AxiosResponse<ExperienceFlagsGetResponse, any>>;
    /**
     * @description Gets the flags for a user.
     *
     * @tags experience
     * @name ExperienceFlagsGetPost
     * @request POST:/internal/experience.flags.get
     * @secure
     */
    experienceFlagsGetPost: (data: ExperienceFlagsGetRequest, params?: RequestParams) => Promise<AxiosResponse<ExperienceFlagsGetResponse, any>>;
    /**
     * @description ### Owner: brian.byrne@devrev.ai ### Gets toggles for a user or organization.
     *
     * @tags experience
     * @name ExperienceTogglesGet
     * @request GET:/internal/experience.toggles.get
     * @secure
     */
    experienceTogglesGet: (query: ExperienceTogglesGetParams, params?: RequestParams) => Promise<AxiosResponse<ExperienceTogglesGetResponse, any>>;
    /**
     * @description Gets toggles for a user or organization.
     *
     * @tags experience
     * @name ExperienceTogglesGetPost
     * @request POST:/internal/experience.toggles.get
     * @secure
     */
    experienceTogglesGetPost: (data: ExperienceTogglesGetRequest, params?: RequestParams) => Promise<AxiosResponse<ExperienceTogglesGetResponse, any>>;
    /**
     * @description Sets toggles for a user or organization.
     *
     * @tags experience
     * @name ExperienceTogglesSet
     * @request POST:/internal/experience.toggles.set
     * @secure
     */
    experienceTogglesSet: (data: ExperienceTogglesSetRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: amisha.kothari@devrev.ai ### List all explore views of a section.
     *
     * @tags menu
     * @name ExploreViewsList
     * @request GET:/internal/explore-views.list
     * @secure
     */
    exploreViewsList: (query: ExploreViewsListParams, params?: RequestParams) => Promise<AxiosResponse<ExploreViewsListResponse, any>>;
    /**
     * @description ### Owner: amisha.kothari@devrev.ai ### List all explore views of a section.
     *
     * @tags menu
     * @name ExploreViewsList
     * @request GET:/internal/explore-views.list
     * @secure */
    exploreViewsListPaginator(query: ExploreViewsListParams, params?: RequestParams): AsyncGenerator<ExploreViewsListResponse, void, unknown>;
    /**
     * @description List all explore views of a section.
     *
     * @tags menu
     * @name ExploreViewsListPost
     * @request POST:/internal/explore-views.list
     * @secure
     */
    exploreViewsListPost: (data: ExploreViewsListRequest, params?: RequestParams) => Promise<AxiosResponse<ExploreViewsListResponse, any>>;
    /**
     * @description Evaluates a boolean expression.
     *
     * @tags expressions
     * @name BooleanExpressionsEvaluate
     * @request POST:/internal/expressions.boolean.evaluate
     * @secure
     */
    booleanExpressionsEvaluate: (data: BooleanExpressionEvaluateRequest, params?: RequestParams) => Promise<AxiosResponse<BooleanExpressionEvaluateResponse, any>>;
    /**
     * @description Validates a boolean expression.
     *
     * @tags expressions
     * @name BooleanExpressionsValidate
     * @request POST:/internal/expressions.boolean.validate
     * @secure
     */
    booleanExpressionsValidate: (data: BooleanExpressionValidateRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Deletes a flow.
     *
     * @tags flows
     * @name FlowDelete
     * @request POST:/internal/flows.delete
     * @secure
     */
    flowDelete: (data: FlowDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Gets a Flow.
     *
     * @tags flows
     * @name FlowGet
     * @request GET:/internal/flows.get
     * @secure
     */
    flowGet: (query: FlowGetParams, params?: RequestParams) => Promise<AxiosResponse<FlowGetResponse, any>>;
    /**
     * @description Gets a Flow.
     *
     * @tags flows
     * @name FlowGetPost
     * @request POST:/internal/flows.get
     * @secure
     */
    flowGetPost: (data: FlowGetRequest, params?: RequestParams) => Promise<AxiosResponse<FlowGetResponse, any>>;
    /**
     * @description Creates GitHub flow with the given parameters.
     *
     * @tags flows
     * @name FlowsGithubCreate
     * @request POST:/internal/flows.github.create
     * @secure
     */
    flowsGithubCreate: (data: FlowsGithubCreateRequest, params?: RequestParams) => Promise<AxiosResponse<FlowsGithubCreateResponse, any>>;
    /**
     * @description Lists flows for a Dev organization.
     *
     * @tags flows
     * @name FlowsList
     * @request GET:/internal/flows.list
     * @secure
     */
    flowsList: (query: FlowsListParams, params?: RequestParams) => Promise<AxiosResponse<FlowsListResponse, any>>;
    /**
     * @description Lists flows for a Dev organization.
     *
     * @tags flows
     * @name FlowsList
     * @request GET:/internal/flows.list
     * @secure */
    flowsListPaginator(query: FlowsListParams, params?: RequestParams): AsyncGenerator<FlowsListResponse, void, unknown>;
    /**
     * @description Lists flows for a Dev organization.
     *
     * @tags flows
     * @name FlowsListPost
     * @request POST:/internal/flows.list
     * @secure
     */
    flowsListPost: (data: FlowsListRequest, params?: RequestParams) => Promise<AxiosResponse<FlowsListResponse, any>>;
    /**
     * @description Updates a Flow.
     *
     * @tags flows
     * @name FlowUpdate
     * @request POST:/internal/flows.update
     * @secure
     */
    flowUpdate: (data: FlowUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<FlowUpdateResponse, any>>;
    /**
     * @description Validates the flow template and version update
     *
     * @tags flows
     * @name ValidateFlowTemplate
     * @request POST:/internal/flows.validate.template
     * @secure
     */
    validateFlowTemplate: (data: ValidateFlowTemplateRequest, params?: RequestParams) => Promise<AxiosResponse<ValidateFlowTemplateResponse, any>>;
    /**
     * @description Replication of a keyring from one region to global.
     *
     * @tags keyring
     * @name GlobalKeyringCreate
     * @request POST:/internal/global.keyrings.create
     * @secure
     */
    globalKeyringCreate: (data: GlobalKeyringCreateRequest, params?: RequestParams) => Promise<AxiosResponse<GlobalKeyringCreateResponse, any>>;
    /**
     * @description ### Owner: sathish.kumarhs@devrev.ai ### Get a keyring from global.
     *
     * @tags keyring
     * @name GlobalKeyringGet
     * @request GET:/internal/global.keyrings.get
     * @secure
     */
    globalKeyringGet: (query: GlobalKeyringGetParams, params?: RequestParams) => Promise<AxiosResponse<GlobalKeyringGetResponse, any>>;
    /**
     * @description Get a keyring from global.
     *
     * @tags keyring
     * @name GlobalKeyringGetPost
     * @request POST:/internal/global.keyrings.get
     * @secure
     */
    globalKeyringGetPost: (data: GlobalKeyringGetRequest, params?: RequestParams) => Promise<AxiosResponse<GlobalKeyringGetResponse, any>>;
    /**
     * @description Update a keyring in global.
     *
     * @tags keyring
     * @name GlobalKeyringUpdate
     * @request POST:/internal/global.keyrings.update
     * @secure
     */
    globalKeyringUpdate: (data: GlobalKeyringUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<GlobalKeyringUpdateResponse, any>>;
    /**
     * @description Creates a new marketplace category.
     *
     * @tags marketplace, marketplace-global-store
     * @name GlobalStoreMarketplaceCategoriesCreate
     * @request POST:/internal/global.marketplace-categories.create
     * @secure
     */
    globalStoreMarketplaceCategoriesCreate: (data: GlobalStoreMarketplaceCategoriesCreateRequest, params?: RequestParams) => Promise<AxiosResponse<GlobalStoreMarketplaceCategoriesCreateResponse, any>>;
    /**
     * @description Deletes a marketplace category.
     *
     * @tags marketplace, marketplace-global-store
     * @name GlobalStoreMarketplaceCategoriesDelete
     * @request POST:/internal/global.marketplace-categories.delete
     * @secure
     */
    globalStoreMarketplaceCategoriesDelete: (data: GlobalStoreMarketplaceCategoriesDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: luka.kosenina@devrev.ai ### Gets a marketplace category.
     *
     * @tags marketplace, marketplace-global-store
     * @name GlobalStoreMarketplaceCategoriesGet
     * @request GET:/internal/global.marketplace-categories.get
     * @secure
     */
    globalStoreMarketplaceCategoriesGet: (query: GlobalStoreMarketplaceCategoriesGetParams, params?: RequestParams) => Promise<AxiosResponse<GlobalStoreMarketplaceCategoriesGetResponse, any>>;
    /**
     * @description Gets a marketplace category.
     *
     * @tags marketplace, marketplace-global-store
     * @name GlobalStoreMarketplaceCategoriesGetPost
     * @request POST:/internal/global.marketplace-categories.get
     * @secure
     */
    globalStoreMarketplaceCategoriesGetPost: (data: GlobalStoreMarketplaceCategoriesGetRequest, params?: RequestParams) => Promise<AxiosResponse<GlobalStoreMarketplaceCategoriesGetResponse, any>>;
    /**
     * @description ### Owner: luka.kosenina@devrev.ai ### Gets the categories for a marketplace.
     *
     * @tags marketplace, marketplace-global-store
     * @name GlobalStoreMarketplaceCategoriesList
     * @request GET:/internal/global.marketplace-categories.list
     * @secure
     */
    globalStoreMarketplaceCategoriesList: (query: GlobalStoreMarketplaceCategoriesListParams, params?: RequestParams) => Promise<AxiosResponse<GlobalStoreMarketplaceCategoriesListResponse, any>>;
    /**
     * @description Gets the categories for a marketplace.
     *
     * @tags marketplace, marketplace-global-store
     * @name GlobalStoreMarketplaceCategoriesListPost
     * @request POST:/internal/global.marketplace-categories.list
     * @secure
     */
    globalStoreMarketplaceCategoriesListPost: (data: GlobalStoreMarketplaceCategoriesListRequest, params?: RequestParams) => Promise<AxiosResponse<GlobalStoreMarketplaceCategoriesListResponse, any>>;
    /**
     * @description Updates a marketplace category.
     *
     * @tags marketplace, marketplace-global-store
     * @name GlobalStoreMarketplaceCategoriesUpdate
     * @request POST:/internal/global.marketplace-categories.update
     * @secure
     */
    globalStoreMarketplaceCategoriesUpdate: (data: GlobalStoreMarketplaceCategoriesUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<GlobalStoreMarketplaceCategoriesUpdateResponse, any>>;
    /**
     * @description Creates a marketplace item.
     *
     * @tags marketplace, marketplace-global-store
     * @name GlobalStoreMarketplaceItemsCreate
     * @request POST:/internal/global.marketplace-items.create
     * @secure
     */
    globalStoreMarketplaceItemsCreate: (data: GlobalStoreMarketplaceItemsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<GlobalStoreMarketplaceItemsCreateResponse, any>>;
    /**
     * @description Deletes a marketplace item.
     *
     * @tags marketplace, marketplace-global-store
     * @name GlobalStoreMarketplaceItemsDelete
     * @request POST:/internal/global.marketplace-items.delete
     * @secure
     */
    globalStoreMarketplaceItemsDelete: (data: GlobalStoreMarketplaceItemsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description ### Owner: luka.kosenina@devrev.ai ### Gets a marketplace item.
     *
     * @tags marketplace, marketplace-global-store
     * @name GlobalStoreMarketplaceItemsGet
     * @request GET:/internal/global.marketplace-items.get
     * @secure
     */
    globalStoreMarketplaceItemsGet: (query: GlobalStoreMarketplaceItemsGetParams, params?: RequestParams) => Promise<AxiosResponse<GlobalStoreMarketplaceItemsGetResponse, any>>;
    /**
     * @description Gets a marketplace item.
     *
     * @tags marketplace, marketplace-global-store
     * @name GlobalStoreMarketplaceItemsGetPost
     * @request POST:/internal/global.marketplace-items.get
     * @secure
     */
    globalStoreMarketplaceItemsGetPost: (data: GlobalStoreMarketplaceItemsGetRequest, params?: RequestParams) => Promise<AxiosResponse<GlobalStoreMarketplaceItemsGetResponse, any>>;
    /**
     * @description Invites a dev org to access marketplace item.
     *
     * @tags marketplace, marketplace-global-store
     * @name GlobalStoreMarketplaceItemsInvite
     * @request POST:/internal/global.marketplace-items.invite
     * @secure
     */
    globalStoreMarketplaceItemsInvite: (data: GlobalStoreMarketplaceItemsInviteRequest, params?: RequestParams) => Promise<AxiosResponse<GlobalStoreMarketplaceItemsInviteResponse, any>>;
    /**
     * @description Gets the marketplace items.
     *
     * @tags marketplace, marketplace-global-store
     * @name GlobalStoreMarketplaceItemsList
     * @request GET:/internal/global.marketplace-items.list
     * @secure
     */
    globalStoreMarketplaceItemsList: (query: GlobalStoreMarketplaceItemsListParams, params?: RequestParams) => Promise<AxiosResponse<GlobalStoreMarketplaceItemsListResponse, any>>;
    /**
     * @description Gets the marketplace items.
     *
     * @tags marketplace, marketplace-global-store
     * @name GlobalStoreMarketplaceItemsList
     * @request GET:/internal/global.marketplace-items.list
     * @secure */
    globalStoreMarketplaceItemsListPaginator(query: GlobalStoreMarketplaceItemsListParams, params?: RequestParams): AsyncGenerator<GlobalStoreMarketplaceItemsListResponse, void, unknown>;
    /**
     * @description Gets the marketplace items.
     *
     * @tags marketplace, marketplace-global-store
     * @name GlobalStoreMarketplaceItemsListPost
     * @request POST:/internal/global.marketplace-items.list
     * @secure
     */
    globalStoreMarketplaceItemsListPost: (data: GlobalStoreMarketplaceItemsListRequest, params?: RequestParams) => Promise<AxiosResponse<GlobalStoreMarketplaceItemsListResponse, any>>;
    /**
     * @description Updates the meta score for the provided marketplace item. This is only applicable to the marketplace owners.
     *
     * @tags marketplace, marketplace-global-store
     * @name GlobalStoreMarketplaceItemsRank
     * @request POST:/internal/global.marketplace-items.rank
     * @secure
     */
    globalStoreMarketplaceItemsRank: (data: GlobalStoreMarketplaceItemsRankRequest, params?: RequestParams) => Promise<AxiosResponse<GlobalStoreMarketplaceItemsRankResponse, any>>;
    /**
     * @description ### Owner: gokul.ks@devrev.ai ### Searches marketplace items.
     *
     * @tags marketplace, marketplace-global-store
     * @name GlobalStoreMarketplaceItemsSearch
     * @request GET:/internal/global.marketplace-items.search
     * @secure
     */
    globalStoreMarketplaceItemsSearch: (query: GlobalStoreMarketplaceItemsSearchParams, params?: RequestParams) => Promise<AxiosResponse<GlobalStoreMarketplaceItemsSearchResponse, any>>;
    /**
     * @description Searches marketplace items.
     *
     * @tags marketplace, marketplace-global-store
     * @name GlobalStoreMarketplaceItemsSearchPost
     * @request POST:/internal/global.marketplace-items.search
     * @secure
     */
    globalStoreMarketplaceItemsSearchPost: (data: GlobalStoreMarketplaceItemsSearchRequest, params?: RequestParams) => Promise<AxiosResponse<GlobalStoreMarketplaceItemsSearchResponse, any>>;
    /**
     * @description Puts a marketplace item in desired state.
     *
     * @tags marketplace, marketplace-global-store
     * @name GlobalStoreMarketplaceItemsTransition
     * @request POST:/internal/global.marketplace-items.transition
     * @secure
     */
    globalStoreMarketplaceItemsTransition: (data: GlobalStoreMarketplaceItemsTransitionRequest, params?: RequestParams) => Promise<AxiosResponse<GlobalStoreMarketplaceItemsTransitionResponse, any>>;
    /**
     * @description Updates a marketplace item.
     *
     * @tags marketplace, marketplace-global-store
     * @name GlobalStoreMarketplaceItemsUpdate
     * @request POST:/internal/global.marketplace-items.update
     * @secure
     */
    globalStoreMarketplaceItemsUpdate: (data: GlobalStoreMarketplaceItemsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<GlobalStoreMarketplaceItemsUpdateResponse, any>>;
    /**
     * @description ### Owner: luka.kosenina@devrev.ai ### Gets a marketplace.
     *
     * @tags marketplace, marketplace-global-store
     * @name GlobalStoreMarketplacesGet
     * @request GET:/internal/global.marketplaces.get
     * @secure
     */
    globalStoreMarketplacesGet: (query: GlobalStoreMarketplacesGetParams, params?: RequestParams) => Promise<AxiosResponse<GlobalStoreMarketplacesGetResponse, any>>;
    /**
     * @description Gets a marketplace.
     *
     * @tags marketplace, marketplace-global-store
     * @name GlobalStoreMarketplacesGetPost
     * @request POST:/internal/global.marketplaces.get
     * @secure
     */
    globalStoreMarketplacesGetPost: (data: GlobalStoreMarketplacesGetRequest, params?: RequestParams) => Promise<AxiosResponse<GlobalStoreMarketplacesGetResponse, any>>;
    /**
     * @description ### Owner: luka.kosenina@devrev.ai ### Gets the marketplaces.
     *
     * @tags marketplace, marketplace-global-store
     * @name GlobalStoreMarketplacesList
     * @request GET:/internal/global.marketplaces.list
     * @secure
     */
    globalStoreMarketplacesList: (params?: RequestParams) => Promise<AxiosResponse<GlobalStoreMarketplacesListResponse, any>>;
    /**
     * @description Gets the marketplaces.
     *
     * @tags marketplace, marketplace-global-store
     * @name GlobalStoreMarketplacesListPost
     * @request POST:/internal/global.marketplaces.list
     * @secure
     */
    globalStoreMarketplacesListPost: (data: GlobalStoreMarketplacesListRequest, params?: RequestParams) => Promise<AxiosResponse<GlobalStoreMarketplacesListResponse, any>>;
    /**
     * @description Executes a GraphQL request.
     *
     * @name Graphql
     * @request POST:/internal/graphql.execute
     * @secure
     */
    graphql: (data: GraphqlRequest, params?: RequestParams) => Promise<AxiosResponse<GraphqlResponse, any>>;
    /**
     * @description Creates a new group. A group is a collection of users.
     *
     * @tags groups
     * @name GroupsCreate
     * @request POST:/internal/groups.create
     * @secure
     */
    groupsCreate: (data: GroupsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<GroupsCreateResponse, any>>;
    /**
     * @description Deletes the requested group.
     *
     * @tags groups
     * @name GroupsDelete
     * @request POST:/internal/groups.delete
     * @secure
     */
    groupsDelete: (data: GroupsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: akanksha.deswal@devrev.ai ### Gets the requested group.
     *
     * @tags groups
     * @name GroupsGet
     * @request GET:/internal/groups.get
     * @secure
     */
    groupsGet: (query: GroupsGetParams, params?: RequestParams) => Promise<AxiosResponse<GroupsGetResponse, any>>;
    /**
     * @description Gets the requested group.
     *
     * @tags groups
     * @name GroupsGetPost
     * @request POST:/internal/groups.get
     * @secure
     */
    groupsGetPost: (data: GroupsGetRequest, params?: RequestParams) => Promise<AxiosResponse<GroupsGetResponse, any>>;
    /**
     * @description ### Owner: akanksha.deswal@devrev.ai ### Lists the available groups.
     *
     * @tags groups
     * @name GroupsList
     * @request GET:/internal/groups.list
     * @secure
     */
    groupsList: (query: GroupsListParams, params?: RequestParams) => Promise<AxiosResponse<GroupsListResponse, any>>;
    /**
     * @description ### Owner: akanksha.deswal@devrev.ai ### Lists the available groups.
     *
     * @tags groups
     * @name GroupsList
     * @request GET:/internal/groups.list
     * @secure */
    groupsListPaginator(query: GroupsListParams, params?: RequestParams): AsyncGenerator<GroupsListResponse, void, unknown>;
    /**
     * @description Lists the available groups.
     *
     * @tags groups
     * @name GroupsListPost
     * @request POST:/internal/groups.list
     * @secure
     */
    groupsListPost: (data: GroupsListRequest, params?: RequestParams) => Promise<AxiosResponse<GroupsListResponse, any>>;
    /**
     * @description Adds a member to a group.
     *
     * @tags groups
     * @name GroupMembersAdd
     * @request POST:/internal/groups.members.add
     * @secure
     */
    groupMembersAdd: (data: GroupMembersAddRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: akanksha.deswal@devrev.ai ### Lists the members in a group.
     *
     * @tags groups
     * @name GroupMembersList
     * @request GET:/internal/groups.members.list
     * @secure
     */
    groupMembersList: (query: GroupMembersListParams, params?: RequestParams) => Promise<AxiosResponse<GroupMembersListResponse, any>>;
    /**
     * @description ### Owner: akanksha.deswal@devrev.ai ### Lists the members in a group.
     *
     * @tags groups
     * @name GroupMembersList
     * @request GET:/internal/groups.members.list
     * @secure */
    groupMembersListPaginator(query: GroupMembersListParams, params?: RequestParams): AsyncGenerator<GroupMembersListResponse, void, unknown>;
    /**
     * @description Lists the members in a group.
     *
     * @tags groups
     * @name GroupMembersListPost
     * @request POST:/internal/groups.members.list
     * @secure
     */
    groupMembersListPost: (data: GroupMembersListRequest, params?: RequestParams) => Promise<AxiosResponse<GroupMembersListResponse, any>>;
    /**
     * @description Removes a member from a group.
     *
     * @tags groups
     * @name GroupMembersRemove
     * @request POST:/internal/groups.members.remove
     * @secure
     */
    groupMembersRemove: (data: GroupMembersRemoveRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Updates the requested group.
     *
     * @tags groups
     * @name GroupsUpdate
     * @request POST:/internal/groups.update
     * @secure
     */
    groupsUpdate: (data: GroupsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<GroupsUpdateResponse, any>>;
    /**
     * @description Counts the number of incidents based on the given filters.
     *
     * @tags operate
     * @name IncidentsCount
     * @request GET:/internal/incidents.count
     * @secure
     */
    incidentsCount: (query: IncidentsCountParams, params?: RequestParams) => Promise<AxiosResponse<IncidentsCountResponse, any>>;
    /**
     * @description Counts the number of incidents based on the given filters.
     *
     * @tags operate
     * @name IncidentsCountPost
     * @request POST:/internal/incidents.count
     * @secure
     */
    incidentsCountPost: (data: IncidentsCountRequest, params?: RequestParams) => Promise<AxiosResponse<IncidentsCountResponse, any>>;
    /**
     * @description Creates an incident.
     *
     * @tags operate
     * @name IncidentsCreate
     * @request POST:/internal/incidents.create
     * @secure
     */
    incidentsCreate: (data: IncidentsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<IncidentsCreateResponse, any>>;
    /**
     * @description Deletes an incident.
     *
     * @tags operate
     * @name IncidentsDelete
     * @request POST:/internal/incidents.delete
     * @secure
     */
    incidentsDelete: (data: IncidentsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Gets an incident.
     *
     * @tags operate
     * @name IncidentsGet
     * @request GET:/internal/incidents.get
     * @secure
     */
    incidentsGet: (query: IncidentsGetParams, params?: RequestParams) => Promise<AxiosResponse<IncidentsGetResponse, any>>;
    /**
     * @description Gets an incident.
     *
     * @tags operate
     * @name IncidentsGetPost
     * @request POST:/internal/incidents.get
     * @secure
     */
    incidentsGetPost: (data: IncidentsGetRequest, params?: RequestParams) => Promise<AxiosResponse<IncidentsGetResponse, any>>;
    /**
     * @description Lists collections of incidents by groups.
     *
     * @tags operate
     * @name IncidentsGroup
     * @request GET:/internal/incidents.group
     * @secure
     */
    incidentsGroup: (query: IncidentsGroupParams, params?: RequestParams) => Promise<AxiosResponse<IncidentsGroupResponse, any>>;
    /**
     * @description Lists collections of incidents by groups.
     *
     * @tags operate
     * @name IncidentsGroup
     * @request GET:/internal/incidents.group
     * @secure */
    incidentsGroupPaginator(query: IncidentsGroupParams, params?: RequestParams): AsyncGenerator<IncidentsGroupResponse, void, unknown>;
    /**
     * @description Lists collections of incidents by groups.
     *
     * @tags operate
     * @name IncidentsGroupPost
     * @request POST:/internal/incidents.group
     * @secure
     */
    incidentsGroupPost: (data: IncidentsGroupRequest, params?: RequestParams) => Promise<AxiosResponse<IncidentsGroupResponse, any>>;
    /**
     * @description Lists incidents.
     *
     * @tags operate
     * @name IncidentsList
     * @request GET:/internal/incidents.list
     * @secure
     */
    incidentsList: (query: IncidentsListParams, params?: RequestParams) => Promise<AxiosResponse<IncidentsListResponse, any>>;
    /**
     * @description Lists incidents.
     *
     * @tags operate
     * @name IncidentsList
     * @request GET:/internal/incidents.list
     * @secure */
    incidentsListPaginator(query: IncidentsListParams, params?: RequestParams): AsyncGenerator<IncidentsListResponse, void, unknown>;
    /**
     * @description Lists incidents.
     *
     * @tags operate
     * @name IncidentsListPost
     * @request POST:/internal/incidents.list
     * @secure
     */
    incidentsListPost: (data: IncidentsListRequest, params?: RequestParams) => Promise<AxiosResponse<IncidentsListResponse, any>>;
    /**
     * @description Updates an incident.
     *
     * @tags operate
     * @name IncidentsUpdate
     * @request POST:/internal/incidents.update
     * @secure
     */
    incidentsUpdate: (data: IncidentsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<IncidentsUpdateResponse, any>>;
    /**
     * @description Gets an Insight.
     *
     * @tags insights
     * @name InsightsGet
     * @request GET:/internal/insights.get
     * @secure
     */
    insightsGet: (query: InsightsGetParams, params?: RequestParams) => Promise<AxiosResponse<InsightsGetResponse, any>>;
    /**
     * @description Gets an Insight.
     *
     * @tags insights
     * @name InsightsGetPost
     * @request POST:/internal/insights.get
     * @secure
     */
    insightsGetPost: (data: InsightsGetRequest, params?: RequestParams) => Promise<AxiosResponse<InsightsGetResponse, any>>;
    /**
     * @description Lists insights.
     *
     * @tags insights
     * @name InsightsList
     * @request GET:/internal/insights.list
     * @secure
     */
    insightsList: (query: InsightsListParams, params?: RequestParams) => Promise<AxiosResponse<InsightsListResponse, any>>;
    /**
     * @description Lists insights.
     *
     * @tags insights
     * @name InsightsList
     * @request GET:/internal/insights.list
     * @secure */
    insightsListPaginator(query: InsightsListParams, params?: RequestParams): AsyncGenerator<InsightsListResponse, void, unknown>;
    /**
     * @description Lists insights.
     *
     * @tags insights
     * @name InsightsListPost
     * @request POST:/internal/insights.list
     * @secure
     */
    insightsListPost: (data: InsightsListRequest, params?: RequestParams) => Promise<AxiosResponse<InsightsListResponse, any>>;
    /**
     * @description Lists insight values.
     *
     * @tags insights
     * @name InsightsValuesList
     * @request GET:/internal/insights.values.list
     * @secure
     */
    insightsValuesList: (query: InsightsValuesListParams, params?: RequestParams) => Promise<AxiosResponse<InsightsValuesListResponse, any>>;
    /**
     * @description Lists insight values.
     *
     * @tags insights
     * @name InsightsValuesList
     * @request GET:/internal/insights.values.list
     * @secure */
    insightsValuesListPaginator(query: InsightsValuesListParams, params?: RequestParams): AsyncGenerator<InsightsValuesListResponse, void, unknown>;
    /**
     * @description Lists insight values.
     *
     * @tags insights
     * @name InsightsValuesListPost
     * @request POST:/internal/insights.values.list
     * @secure
     */
    insightsValuesListPost: (data: InsightsValuesListRequest, params?: RequestParams) => Promise<AxiosResponse<InsightsValuesListResponse, any>>;
    /**
     * @description Creates an interaction.
     *
     * @tags interactions
     * @name InteractionsCreate
     * @request POST:/internal/interactions.create
     * @secure
     */
    interactionsCreate: (data: InteractionsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<InteractionsCreateResponse, any>>;
    /**
     * @description Deletes an interaction.
     *
     * @tags interactions
     * @name InteractionsDelete
     * @request POST:/internal/interactions.delete
     * @secure
     */
    interactionsDelete: (data: InteractionsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Embeds interaction into parent object.
     *
     * @tags interactions
     * @name InteractionsEmbed
     * @request POST:/internal/interactions.embed
     * @secure
     */
    interactionsEmbed: (data: InteractionsEmbedRequest, params?: RequestParams) => Promise<AxiosResponse<InteractionsEmbedResponse, any>>;
    /**
     * @description ### Owner: nitesh.dubey@devrev.ai ### Gets an interaction.
     *
     * @tags interactions
     * @name InteractionsGet
     * @request GET:/internal/interactions.get
     * @secure
     */
    interactionsGet: (query: InteractionsGetParams, params?: RequestParams) => Promise<AxiosResponse<InteractionsGetResponse, any>>;
    /**
     * @description Gets an interaction.
     *
     * @tags interactions
     * @name InteractionsGetPost
     * @request POST:/internal/interactions.get
     * @secure
     */
    interactionsGetPost: (data: InteractionsGetRequest, params?: RequestParams) => Promise<AxiosResponse<InteractionsGetResponse, any>>;
    /**
     * @description ### Owner: nitesh.dubey@devrev.ai ### Lists interactions.
     *
     * @tags interactions
     * @name InteractionsList
     * @request GET:/internal/interactions.list
     * @secure
     */
    interactionsList: (query: InteractionsListParams, params?: RequestParams) => Promise<AxiosResponse<InteractionsListResponse, any>>;
    /**
     * @description ### Owner: nitesh.dubey@devrev.ai ### Lists interactions.
     *
     * @tags interactions
     * @name InteractionsList
     * @request GET:/internal/interactions.list
     * @secure */
    interactionsListPaginator(query: InteractionsListParams, params?: RequestParams): AsyncGenerator<InteractionsListResponse, void, unknown>;
    /**
     * @description Lists interactions.
     *
     * @tags interactions
     * @name InteractionsListPost
     * @request POST:/internal/interactions.list
     * @secure
     */
    interactionsListPost: (data: InteractionsListRequest, params?: RequestParams) => Promise<AxiosResponse<InteractionsListResponse, any>>;
    /**
     * @description Updates an interaction.
     *
     * @tags interactions
     * @name InteractionsUpdate
     * @request POST:/internal/interactions.update
     * @secure
     */
    interactionsUpdate: (data: InteractionsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<InteractionsUpdateResponse, any>>;
    /**
     * @description Counts the number of invoices based on the given filters.
     *
     * @tags commerce
     * @name InvoicesCount
     * @request GET:/internal/invoices.count
     * @secure
     */
    invoicesCount: (query: InvoicesCountParams, params?: RequestParams) => Promise<AxiosResponse<InvoicesCountResponse, any>>;
    /**
     * @description Counts the number of invoices based on the given filters.
     *
     * @tags commerce
     * @name InvoicesCountPost
     * @request POST:/internal/invoices.count
     * @secure
     */
    invoicesCountPost: (data: InvoicesCountRequest, params?: RequestParams) => Promise<AxiosResponse<InvoicesCountResponse, any>>;
    /**
     * @description Deletes an invoice.
     *
     * @tags commerce
     * @name InvoicesDelete
     * @request POST:/internal/invoices.delete
     * @secure
     */
    invoicesDelete: (data: InvoicesDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Returns the invoice download url.
     *
     * @tags commerce
     * @name InvoicesDownload
     * @request GET:/internal/invoices.download
     * @secure
     */
    invoicesDownload: (query: InvoicesDownloadParams, params?: RequestParams) => Promise<AxiosResponse<InvoicesDownloadResponse, any>>;
    /**
     * @description Returns the invoice download url.
     *
     * @tags commerce
     * @name InvoicesDownloadPost
     * @request POST:/internal/invoices.download
     * @secure
     */
    invoicesDownloadPost: (data: InvoicesDownloadRequest, params?: RequestParams) => Promise<AxiosResponse<InvoicesDownloadResponse, any>>;
    /**
     * @description Returns the invoice.
     *
     * @tags commerce
     * @name InvoicesGet
     * @request GET:/internal/invoices.get
     * @secure
     */
    invoicesGet: (query: InvoicesGetParams, params?: RequestParams) => Promise<AxiosResponse<InvoicesGetResponse, any>>;
    /**
     * @description Returns the invoice.
     *
     * @tags commerce
     * @name InvoicesGetPost
     * @request POST:/internal/invoices.get
     * @secure
     */
    invoicesGetPost: (data: InvoicesGetRequest, params?: RequestParams) => Promise<AxiosResponse<InvoicesGetResponse, any>>;
    /**
     * @description List invoices for a customer.
     *
     * @tags commerce
     * @name InvoicesList
     * @request GET:/internal/invoices.list
     * @secure
     */
    invoicesList: (query: InvoicesListParams, params?: RequestParams) => Promise<AxiosResponse<InvoicesListResponse, any>>;
    /**
     * @description List invoices for a customer.
     *
     * @tags commerce
     * @name InvoicesList
     * @request GET:/internal/invoices.list
     * @secure */
    invoicesListPaginator(query: InvoicesListParams, params?: RequestParams): AsyncGenerator<InvoicesListResponse, void, unknown>;
    /**
     * @description List invoices for a customer.
     *
     * @tags commerce
     * @name InvoicesListPost
     * @request POST:/internal/invoices.list
     * @secure
     */
    invoicesListPost: (data: InvoicesListRequest, params?: RequestParams) => Promise<AxiosResponse<InvoicesListResponse, any>>;
    /**
     * @description Creates a one time invoice.
     *
     * @tags commerce
     * @name InvoicesOneTimeCreate
     * @request POST:/internal/invoices.one-time.create
     * @secure
     */
    invoicesOneTimeCreate: (data: InvoicesOneTimeCreateRequest, params?: RequestParams) => Promise<AxiosResponse<InvoicesOneTimeCreateResponse, any>>;
    /**
     * @description Returns the invoice pay url.
     *
     * @tags commerce
     * @name InvoicesPay
     * @request GET:/internal/invoices.pay
     * @secure
     */
    invoicesPay: (query: InvoicesPayParams, params?: RequestParams) => Promise<AxiosResponse<InvoicesPayResponse, any>>;
    /**
     * @description Returns the invoice pay url.
     *
     * @tags commerce
     * @name InvoicesPayPost
     * @request POST:/internal/invoices.pay
     * @secure
     */
    invoicesPayPost: (data: InvoicesPayRequest, params?: RequestParams) => Promise<AxiosResponse<InvoicesPayResponse, any>>;
    /**
     * @description Updates a invoice.
     *
     * @tags commerce
     * @name InvoicesUpdate
     * @request POST:/internal/invoices.update
     * @secure
     */
    invoicesUpdate: (data: InvoicesUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<InvoicesUpdateResponse, any>>;
    /**
     * @description ### Owner: shams.ansari@devrev.ai ### Retrieves a job's information.
     *
     * @tags jobstore
     * @name GetJob
     * @request GET:/internal/jobs.get
     * @secure
     */
    getJob: (query: GetJobParams, params?: RequestParams) => Promise<AxiosResponse<JobsGetResponse, any>>;
    /**
     * @description Retrieves a job's information.
     *
     * @tags jobstore
     * @name GetJobPost
     * @request POST:/internal/jobs.get
     * @secure
     */
    getJobPost: (data: JobsGetRequest, params?: RequestParams) => Promise<AxiosResponse<JobsGetResponse, any>>;
    /**
     * @description Gets a list of jobs.
     *
     * @tags jobstore
     * @name ListJobs
     * @request POST:/internal/jobs.list
     * @secure
     */
    listJobs: (data: JobsListRequest, params?: RequestParams) => Promise<AxiosResponse<JobsListResponse, any>>;
    /**
     * @description OAuth2 authorization callback.
     *
     * @tags keyring
     * @name KeyringsCreateCallback
     * @request GET:/internal/keyrings.authorize
     */
    keyringsCreateCallback: (query: KeyringsCreateCallbackParams, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description OAuth2 authorization callback.
     *
     * @tags keyring
     * @name KeyringsCreateCallbackPost
     * @request POST:/internal/keyrings.authorize
     * @secure
     */
    keyringsCreateCallbackPost: (data: KeyringsCreateCallbackRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Lists capabilities.
     *
     * @tags keyring
     * @name CapabilitiesList
     * @request GET:/internal/keyrings.capability.list
     * @secure
     */
    capabilitiesList: (params?: RequestParams) => Promise<AxiosResponse<CapabilitiesListResponse, any>>;
    /**
     * @description Lists capabilities.
     *
     * @tags keyring
     * @name CapabilitiesListPost
     * @request POST:/internal/keyrings.capability.list
     * @secure
     */
    capabilitiesListPost: (data: CapabilitiesListRequest, params?: RequestParams) => Promise<AxiosResponse<CapabilitiesListResponse, any>>;
    /**
     * @description Creates a keyring.
     *
     * @tags keyring
     * @name KeyringsCreate
     * @request POST:/internal/keyrings.create
     * @secure
     */
    keyringsCreate: (data: KeyringsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<KeyringsCreateResponse, any>>;
    /**
     * @description Deletes a keyring.
     *
     * @tags keyring
     * @name KeyringsDelete
     * @request POST:/internal/keyrings.delete
     * @secure
     */
    keyringsDelete: (data: KeyringsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Lists external organiztaions linked to a keyring.
     *
     * @tags keyring
     * @name ExternalOrgsList
     * @request GET:/internal/keyrings.external_org.list
     * @secure
     */
    externalOrgsList: (query: ExternalOrgsListParams, params?: RequestParams) => Promise<AxiosResponse<ExternalOrgsListResponse, any>>;
    /**
     * @description Lists external organiztaions linked to a keyring.
     *
     * @tags keyring
     * @name ExternalOrgsListPost
     * @request POST:/internal/keyrings.external_org.list
     * @secure
     */
    externalOrgsListPost: (data: ExternalOrgsListRequest, params?: RequestParams) => Promise<AxiosResponse<ExternalOrgsListResponse, any>>;
    /**
     * @description Gets a keyring.
     *
     * @tags keyring
     * @name KeyringsGet
     * @request GET:/internal/keyrings.get
     * @secure
     */
    keyringsGet: (query: KeyringsGetParams, params?: RequestParams) => Promise<AxiosResponse<KeyringsGetResponse, any>>;
    /**
     * @description Gets a keyring.
     *
     * @tags keyring
     * @name KeyringsGetPost
     * @request POST:/internal/keyrings.get
     * @secure
     */
    keyringsGetPost: (data: KeyringsGetRequest, params?: RequestParams) => Promise<AxiosResponse<KeyringsGetResponse, any>>;
    /**
     * @description Lists keyrings for a Dev organization.
     *
     * @tags keyring
     * @name KeyringsList
     * @request GET:/internal/keyrings.list
     * @secure
     */
    keyringsList: (query: KeyringsListParams, params?: RequestParams) => Promise<AxiosResponse<KeyringsListResponse, any>>;
    /**
     * @description Lists keyrings for a Dev organization.
     *
     * @tags keyring
     * @name KeyringsList
     * @request GET:/internal/keyrings.list
     * @secure */
    keyringsListPaginator(query: KeyringsListParams, params?: RequestParams): AsyncGenerator<KeyringsListResponse, void, unknown>;
    /**
     * @description Lists keyrings for a Dev organization.
     *
     * @tags keyring
     * @name KeyringsListPost
     * @request POST:/internal/keyrings.list
     * @secure
     */
    keyringsListPost: (data: KeyringsListRequest, params?: RequestParams) => Promise<AxiosResponse<KeyringsListResponse, any>>;
    /**
     * @description Updates a keyring.
     *
     * @tags keyring
     * @name KeyringsUpdate
     * @request POST:/internal/keyrings.update
     * @secure
     */
    keyringsUpdate: (data: KeyringsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<KeyringsUpdateResponse, any>>;
    /**
     * @description Lists all the vertices and edges in knowledge graph.
     *
     * @tags parts
     * @name KnowledgeV2
     * @request GET:/internal/knowledge
     * @secure
     */
    knowledgeV2: (params?: RequestParams) => Promise<AxiosResponse<KnowledgeV2Response, any>>;
    /**
     * @description Lists all the vertices and edges in knowledge graph.
     *
     * @tags parts
     * @name KnowledgeV2Post
     * @request POST:/internal/knowledge
     * @secure
     */
    knowledgeV2Post: (data: KnowledgeV2Request, params?: RequestParams) => Promise<AxiosResponse<KnowledgeV2Response, any>>;
    /**
     * @description Creates a license assignment.
     *
     * @tags commerce
     * @name LicenseAssignmentsCreate
     * @request POST:/internal/license-assignments.create
     * @secure
     */
    licenseAssignmentsCreate: (data: LicenseAssignmentsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<LicenseAssignmentsCreateResponse, any>>;
    /**
     * @description Deletes the license assignment.
     *
     * @tags commerce
     * @name LicenseAssignmentsDelete
     * @request POST:/internal/license-assignments.delete
     * @secure
     */
    licenseAssignmentsDelete: (data: LicenseAssignmentsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Returns the license assignment.
     *
     * @tags commerce
     * @name LicenseAssignmentsGet
     * @request GET:/internal/license-assignments.get
     * @secure
     */
    licenseAssignmentsGet: (query: LicenseAssignmentsGetParams, params?: RequestParams) => Promise<AxiosResponse<LicenseAssignmentsGetResponse, any>>;
    /**
     * @description Returns the license assignment.
     *
     * @tags commerce
     * @name LicenseAssignmentsGetPost
     * @request POST:/internal/license-assignments.get
     * @secure
     */
    licenseAssignmentsGetPost: (data: LicenseAssignmentsGetRequest, params?: RequestParams) => Promise<AxiosResponse<LicenseAssignmentsGetResponse, any>>;
    /**
     * @description List license assignments.
     *
     * @tags commerce
     * @name LicenseAssignmentsList
     * @request GET:/internal/license-assignments.list
     * @secure
     */
    licenseAssignmentsList: (query: LicenseAssignmentsListParams, params?: RequestParams) => Promise<AxiosResponse<LicenseAssignmentsListResponse, any>>;
    /**
     * @description List license assignments.
     *
     * @tags commerce
     * @name LicenseAssignmentsList
     * @request GET:/internal/license-assignments.list
     * @secure */
    licenseAssignmentsListPaginator(query: LicenseAssignmentsListParams, params?: RequestParams): AsyncGenerator<LicenseAssignmentsListResponse, void, unknown>;
    /**
     * @description List license assignments.
     *
     * @tags commerce
     * @name LicenseAssignmentsListPost
     * @request POST:/internal/license-assignments.list
     * @secure
     */
    licenseAssignmentsListPost: (data: LicenseAssignmentsListRequest, params?: RequestParams) => Promise<AxiosResponse<LicenseAssignmentsListResponse, any>>;
    /**
     * @description Updates license assignments.
     *
     * @tags commerce
     * @name LicenseAssignmentsUpdate
     * @request POST:/internal/license-assignments.update
     * @secure
     */
    licenseAssignmentsUpdate: (data: LicenseAssignmentsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<LicenseAssignmentsUpdateResponse, any>>;
    /**
     * @description Creates a link between two objects to indicate a relationship.
     *
     * @tags links
     * @name LinksCreate
     * @request POST:/internal/links.create
     * @secure
     */
    linksCreate: (data: LinksCreateRequest, params?: RequestParams) => Promise<AxiosResponse<LinksCreateResponse, any>>;
    /**
     * @description Deletes a link.
     *
     * @tags links
     * @name LinksDelete
     * @request POST:/internal/links.delete
     * @secure
     */
    linksDelete: (data: LinksDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Gets the requested link's information.
     *
     * @tags links
     * @name LinksGet
     * @request GET:/internal/links.get
     * @secure
     */
    linksGet: (query: LinksGetParams, params?: RequestParams) => Promise<AxiosResponse<LinksGetResponse, any>>;
    /**
     * @description Gets the requested link's information.
     *
     * @tags links
     * @name LinksGetPost
     * @request POST:/internal/links.get
     * @secure
     */
    linksGetPost: (data: LinksGetRequest, params?: RequestParams) => Promise<AxiosResponse<LinksGetResponse, any>>;
    /**
     * @description Lists collections of links by groups.
     *
     * @tags links
     * @name LinksGroup
     * @request GET:/internal/links.group
     * @secure
     */
    linksGroup: (query: LinksGroupParams, params?: RequestParams) => Promise<AxiosResponse<LinksGroupResponse, any>>;
    /**
     * @description Lists collections of links by groups.
     *
     * @tags links
     * @name LinksGroup
     * @request GET:/internal/links.group
     * @secure */
    linksGroupPaginator(query: LinksGroupParams, params?: RequestParams): AsyncGenerator<LinksGroupResponse, void, unknown>;
    /**
     * @description Lists collections of links by groups.
     *
     * @tags links
     * @name LinksGroupPost
     * @request POST:/internal/links.group
     * @secure
     */
    linksGroupPost: (data: LinksGroupRequest, params?: RequestParams) => Promise<AxiosResponse<LinksGroupResponse, any>>;
    /**
     * @description Lists the available links.
     *
     * @tags links
     * @name LinksList
     * @request GET:/internal/links.list
     * @secure
     */
    linksList: (query: LinksListParams, params?: RequestParams) => Promise<AxiosResponse<LinksListResponse, any>>;
    /**
     * @description Lists the available links.
     *
     * @tags links
     * @name LinksList
     * @request GET:/internal/links.list
     * @secure */
    linksListPaginator(query: LinksListParams, params?: RequestParams): AsyncGenerator<LinksListResponse, void, unknown>;
    /**
     * @description Lists the available links.
     *
     * @tags links
     * @name LinksListPost
     * @request POST:/internal/links.list
     * @secure
     */
    linksListPost: (data: LinksListRequest, params?: RequestParams) => Promise<AxiosResponse<LinksListResponse, any>>;
    /**
     * @description Replaces a link.
     *
     * @tags links
     * @name LinksReplace
     * @request POST:/internal/links.replace
     * @secure
     */
    linksReplace: (data: LinksReplaceRequest, params?: RequestParams) => Promise<AxiosResponse<LinksReplaceResponse, any>>;
    /**
     * @description Lists the available lobbies.
     *
     * @tags lobbies
     * @name LobbiesList
     * @request GET:/internal/lobbies.list
     * @secure
     */
    lobbiesList: (query: LobbiesListParams, params?: RequestParams) => Promise<AxiosResponse<LobbiesListResponse, any>>;
    /**
     * @description Lists the available lobbies.
     *
     * @tags lobbies
     * @name LobbiesList
     * @request GET:/internal/lobbies.list
     * @secure */
    lobbiesListPaginator(query: LobbiesListParams, params?: RequestParams): AsyncGenerator<LobbiesListResponse, void, unknown>;
    /**
     * @description Lists the available lobbies.
     *
     * @tags lobbies
     * @name LobbiesListPost
     * @request POST:/internal/lobbies.list
     * @secure
     */
    lobbiesListPost: (data: LobbiesListRequest, params?: RequestParams) => Promise<AxiosResponse<LobbiesListResponse, any>>;
    /**
     * @description Creates a new marketplace category.
     *
     * @tags marketplace
     * @name MarketplaceCategoriesCreate
     * @request POST:/internal/marketplace-categories.create
     * @secure
     */
    marketplaceCategoriesCreate: (data: MarketplaceCategoriesCreateRequest, params?: RequestParams) => Promise<AxiosResponse<MarketplaceCategoriesCreateResponse, any>>;
    /**
     * @description Deletes a marketplace category.
     *
     * @tags marketplace
     * @name MarketplaceCategoriesDelete
     * @request POST:/internal/marketplace-categories.delete
     * @secure
     */
    marketplaceCategoriesDelete: (data: MarketplaceCategoriesDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: luka.kosenina@devrev.ai ### Gets a marketplace category.
     *
     * @tags marketplace
     * @name MarketplaceCategoriesGet
     * @request GET:/internal/marketplace-categories.get
     * @secure
     */
    marketplaceCategoriesGet: (query: MarketplaceCategoriesGetParams, params?: RequestParams) => Promise<AxiosResponse<MarketplaceCategoriesGetResponse, any>>;
    /**
     * @description Gets a marketplace category.
     *
     * @tags marketplace
     * @name MarketplaceCategoriesGetPost
     * @request POST:/internal/marketplace-categories.get
     * @secure
     */
    marketplaceCategoriesGetPost: (data: MarketplaceCategoriesGetRequest, params?: RequestParams) => Promise<AxiosResponse<MarketplaceCategoriesGetResponse, any>>;
    /**
     * @description ### Owner: luka.kosenina@devrev.ai ### Gets the categories for a marketplace.
     *
     * @tags marketplace
     * @name MarketplaceCategoriesList
     * @request GET:/internal/marketplace-categories.list
     * @secure
     */
    marketplaceCategoriesList: (query: MarketplaceCategoriesListParams, params?: RequestParams) => Promise<AxiosResponse<MarketplaceCategoriesListResponse, any>>;
    /**
     * @description Gets the categories for a marketplace.
     *
     * @tags marketplace
     * @name MarketplaceCategoriesListPost
     * @request POST:/internal/marketplace-categories.list
     * @secure
     */
    marketplaceCategoriesListPost: (data: MarketplaceCategoriesListRequest, params?: RequestParams) => Promise<AxiosResponse<MarketplaceCategoriesListResponse, any>>;
    /**
     * @description Updates a marketplace category.
     *
     * @tags marketplace
     * @name MarketplaceCategoriesUpdate
     * @request POST:/internal/marketplace-categories.update
     * @secure
     */
    marketplaceCategoriesUpdate: (data: MarketplaceCategoriesUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<MarketplaceCategoriesUpdateResponse, any>>;
    /**
     * @description Creates a marketplace item.
     *
     * @tags marketplace
     * @name MarketplaceItemsCreate
     * @request POST:/internal/marketplace-items.create
     * @secure
     */
    marketplaceItemsCreate: (data: MarketplaceItemsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<MarketplaceItemsCreateResponse, any>>;
    /**
     * @description Deletes a marketplace item.
     *
     * @tags marketplace
     * @name MarketplaceItemsDelete
     * @request POST:/internal/marketplace-items.delete
     * @secure
     */
    marketplaceItemsDelete: (data: MarketplaceItemsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description ### Owner: luka.kosenina@devrev.ai ### Gets a marketplace item.
     *
     * @tags marketplace
     * @name MarketplaceItemsGet
     * @request GET:/internal/marketplace-items.get
     * @secure
     */
    marketplaceItemsGet: (query: MarketplaceItemsGetParams, params?: RequestParams) => Promise<AxiosResponse<MarketplaceItemsGetResponse, any>>;
    /**
     * @description Gets a marketplace item.
     *
     * @tags marketplace
     * @name MarketplaceItemsGetPost
     * @request POST:/internal/marketplace-items.get
     * @secure
     */
    marketplaceItemsGetPost: (data: MarketplaceItemsGetRequest, params?: RequestParams) => Promise<AxiosResponse<MarketplaceItemsGetResponse, any>>;
    /**
     * @description Installs a flow or vista for the marketplace item.
     *
     * @tags marketplace
     * @name MarketplaceItemsInstall
     * @request POST:/internal/marketplace-items.install
     * @secure
     */
    marketplaceItemsInstall: (data: MarketplaceItemsInstallRequest, params?: RequestParams) => Promise<AxiosResponse<MarketplaceItemsInstallResponse, any>>;
    /**
     * @description Invites a dev org to access marketplace item.
     *
     * @tags marketplace
     * @name MarketplaceItemsInvite
     * @request POST:/internal/marketplace-items.invite
     * @secure
     */
    marketplaceItemsInvite: (data: MarketplaceItemsInviteRequest, params?: RequestParams) => Promise<AxiosResponse<MarketplaceItemsInviteResponse, any>>;
    /**
     * @description Gets the marketplace items.
     *
     * @tags marketplace
     * @name MarketplaceItemsList
     * @request GET:/internal/marketplace-items.list
     * @secure
     */
    marketplaceItemsList: (query: MarketplaceItemsListParams, params?: RequestParams) => Promise<AxiosResponse<MarketplaceItemsListResponse, any>>;
    /**
     * @description Gets the marketplace items.
     *
     * @tags marketplace
     * @name MarketplaceItemsList
     * @request GET:/internal/marketplace-items.list
     * @secure */
    marketplaceItemsListPaginator(query: MarketplaceItemsListParams, params?: RequestParams): AsyncGenerator<MarketplaceItemsListResponse, void, unknown>;
    /**
     * @description Gets the marketplace items.
     *
     * @tags marketplace
     * @name MarketplaceItemsListPost
     * @request POST:/internal/marketplace-items.list
     * @secure
     */
    marketplaceItemsListPost: (data: MarketplaceItemsListRequest, params?: RequestParams) => Promise<AxiosResponse<MarketplaceItemsListResponse, any>>;
    /**
     * @description Publishes a marketplace submission and creates a new marketplace item in state 'published'.Previously published marketplace item will be archived (transitioned to state 'end_of_sale').
     *
     * @tags marketplace
     * @name MarketplaceItemsPublish
     * @request POST:/internal/marketplace-items.publish
     * @secure
     */
    marketplaceItemsPublish: (data: MarketplaceItemsPublishRequest, params?: RequestParams) => Promise<AxiosResponse<MarketplaceItemsPublishResponse, any>>;
    /**
     * @description meta score for the provided marketplace item. This is only applicable to the marketplace owners.
     *
     * @tags marketplace
     * @name MarketplaceItemsRank
     * @request POST:/internal/marketplace-items.rank
     * @secure
     */
    marketplaceItemsRank: (data: MarketplaceItemsRankRequest, params?: RequestParams) => Promise<AxiosResponse<MarketplaceItemsRankResponse, any>>;
    /**
     * @description ### Owner: gokul.ks@devrev.ai ### Searches marketplace items.
     *
     * @tags marketplace
     * @name MarketplaceItemsSearch
     * @request GET:/internal/marketplace-items.search
     * @secure
     */
    marketplaceItemsSearch: (query: MarketplaceItemsSearchParams, params?: RequestParams) => Promise<AxiosResponse<MarketplaceItemsSearchResponse, any>>;
    /**
     * @description Searches marketplace items.
     *
     * @tags marketplace
     * @name MarketplaceItemsSearchPost
     * @request POST:/internal/marketplace-items.search
     * @secure
     */
    marketplaceItemsSearchPost: (data: MarketplaceItemsSearchRequest, params?: RequestParams) => Promise<AxiosResponse<MarketplaceItemsSearchResponse, any>>;
    /**
     * @description Puts a marketplace item in desired state.
     *
     * @tags marketplace
     * @name MarketplaceItemsTransition
     * @request POST:/internal/marketplace-items.transition
     * @secure
     */
    marketplaceItemsTransition: (data: MarketplaceItemsTransitionRequest, params?: RequestParams) => Promise<AxiosResponse<MarketplaceItemsTransitionResponse, any>>;
    /**
     * @description Updates a marketplace item.
     *
     * @tags marketplace
     * @name MarketplaceItemsUpdate
     * @request POST:/internal/marketplace-items.update
     * @secure
     */
    marketplaceItemsUpdate: (data: MarketplaceItemsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<MarketplaceItemsUpdateResponse, any>>;
    /**
     * @description Creates a marketplace submission.
     *
     * @tags marketplace
     * @name MarketplaceSubmissionsCreate
     * @request POST:/internal/marketplace-submissions.create
     * @secure
     */
    marketplaceSubmissionsCreate: (data: MarketplaceSubmissionsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<MarketplaceSubmissionsCreateResponse, any>>;
    /**
     * @description Deletes a marketplace submission.
     *
     * @tags marketplace
     * @name MarketplaceSubmissionsDelete
     * @request POST:/internal/marketplace-submissions.delete
     * @secure
     */
    marketplaceSubmissionsDelete: (data: MarketplaceSubmissionsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: luka.kosenina@devrev.ai ### Gets a marketplace submission.
     *
     * @tags marketplace
     * @name MarketplaceSubmissionsGet
     * @request GET:/internal/marketplace-submissions.get
     * @secure
     */
    marketplaceSubmissionsGet: (query: MarketplaceSubmissionsGetParams, params?: RequestParams) => Promise<AxiosResponse<MarketplaceSubmissionsGetResponse, any>>;
    /**
     * @description Gets a marketplace submission.
     *
     * @tags marketplace
     * @name MarketplaceSubmissionsGetPost
     * @request POST:/internal/marketplace-submissions.get
     * @secure
     */
    marketplaceSubmissionsGetPost: (data: MarketplaceSubmissionsGetRequest, params?: RequestParams) => Promise<AxiosResponse<MarketplaceSubmissionsGetResponse, any>>;
    /**
     * @description ### Owner: luka.kosenina@devrev.ai ### Gets the marketplace submissions.
     *
     * @tags marketplace
     * @name MarketplaceSubmissionsList
     * @request GET:/internal/marketplace-submissions.list
     * @secure
     */
    marketplaceSubmissionsList: (query: MarketplaceSubmissionsListParams, params?: RequestParams) => Promise<AxiosResponse<MarketplaceSubmissionsListResponse, any>>;
    /**
     * @description ### Owner: luka.kosenina@devrev.ai ### Gets the marketplace submissions.
     *
     * @tags marketplace
     * @name MarketplaceSubmissionsList
     * @request GET:/internal/marketplace-submissions.list
     * @secure */
    marketplaceSubmissionsListPaginator(query: MarketplaceSubmissionsListParams, params?: RequestParams): AsyncGenerator<MarketplaceSubmissionsListResponse, void, unknown>;
    /**
     * @description Gets the marketplace submissions.
     *
     * @tags marketplace
     * @name MarketplaceSubmissionsListPost
     * @request POST:/internal/marketplace-submissions.list
     * @secure
     */
    marketplaceSubmissionsListPost: (data: MarketplaceSubmissionsListRequest, params?: RequestParams) => Promise<AxiosResponse<MarketplaceSubmissionsListResponse, any>>;
    /**
     * @description Puts a marketplace submission in desired state.
     *
     * @tags marketplace
     * @name MarketplaceSubmissionsTransition
     * @request POST:/internal/marketplace-submissions.transition
     * @secure
     */
    marketplaceSubmissionsTransition: (data: MarketplaceSubmissionsTransitionRequest, params?: RequestParams) => Promise<AxiosResponse<MarketplaceSubmissionsTransitionResponse, any>>;
    /**
     * @description Updates a marketplace submission.
     *
     * @tags marketplace
     * @name MarketplaceSubmissionsUpdate
     * @request POST:/internal/marketplace-submissions.update
     * @secure
     */
    marketplaceSubmissionsUpdate: (data: MarketplaceSubmissionsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<MarketplaceSubmissionsUpdateResponse, any>>;
    /**
     * @description Validates a request for creating a new marketplace submission. This endpoint is intended to be used only internally (marketplace-items workflow).
     *
     * @tags marketplace
     * @name MarketplaceSubmissionsValidateCreateRequest
     * @request POST:/internal/marketplace-submissions.validate-create-request
     * @secure
     */
    marketplaceSubmissionsValidateCreateRequest: (data: MarketplaceSubmissionsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Validates a request for updating a marketplace submission. This endpoint is intended to be used only internally (marketplace-items workflow).
     *
     * @tags marketplace
     * @name MarketplaceSubmissionsValidateUpdateRequest
     * @request POST:/internal/marketplace-submissions.validate-update-request
     * @secure
     */
    marketplaceSubmissionsValidateUpdateRequest: (data: MarketplaceSubmissionsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Aborts slug registration.
     *
     * @tags marketplace, marketplace-global-store
     * @name MarketplaceSlugRegistrationsAbort
     * @request POST:/internal/marketplace.slugs.abort
     * @secure
     */
    marketplaceSlugRegistrationsAbort: (data: MarketplaceSlugRegistrationsAbortRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Commits slug registration.
     *
     * @tags marketplace, marketplace-global-store
     * @name MarketplaceSlugRegistrationsCommit
     * @request POST:/internal/marketplace.slugs.commit
     * @secure
     */
    marketplaceSlugRegistrationsCommit: (data: MarketplaceSlugRegistrationsCommitRequest, params?: RequestParams) => Promise<AxiosResponse<MarketplaceSlugRegistrationsCommitResponse, any>>;
    /**
     * @description ### Owner: luka.kosenina@devrev.ai ### Checks if the slug is available for registration.
     *
     * @tags marketplace, marketplace-global-store
     * @name MarketplaceSlugRegistrationsIsAvailable
     * @request GET:/internal/marketplace.slugs.is-available
     * @secure
     */
    marketplaceSlugRegistrationsIsAvailable: (query: MarketplaceSlugRegistrationsIsAvailableParams, params?: RequestParams) => Promise<AxiosResponse<MarketplaceSlugRegistrationsIsAvailableResponse, any>>;
    /**
     * @description Checks if the slug is available for registration.
     *
     * @tags marketplace, marketplace-global-store
     * @name MarketplaceSlugRegistrationsIsAvailablePost
     * @request POST:/internal/marketplace.slugs.is-available
     * @secure
     */
    marketplaceSlugRegistrationsIsAvailablePost: (data: MarketplaceSlugRegistrationsIsAvailableRequest, params?: RequestParams) => Promise<AxiosResponse<MarketplaceSlugRegistrationsIsAvailableResponse, any>>;
    /**
     * @description Locks slug registration.
     *
     * @tags marketplace, marketplace-global-store
     * @name MarketplaceSlugRegistrationsPrepare
     * @request POST:/internal/marketplace.slugs.prepare
     * @secure
     */
    marketplaceSlugRegistrationsPrepare: (data: MarketplaceSlugRegistrationsPrepareRequest, params?: RequestParams) => Promise<AxiosResponse<MarketplaceSlugRegistrationsPrepareResponse, any>>;
    /**
     * @description ### Owner: luka.kosenina@devrev.ai ### Gets a marketplace.
     *
     * @tags marketplace
     * @name MarketplacesGet
     * @request GET:/internal/marketplaces.get
     * @secure
     */
    marketplacesGet: (query: MarketplacesGetParams, params?: RequestParams) => Promise<AxiosResponse<MarketplacesGetResponse, any>>;
    /**
     * @description Gets a marketplace.
     *
     * @tags marketplace
     * @name MarketplacesGetPost
     * @request POST:/internal/marketplaces.get
     * @secure
     */
    marketplacesGetPost: (data: MarketplacesGetRequest, params?: RequestParams) => Promise<AxiosResponse<MarketplacesGetResponse, any>>;
    /**
     * @description ### Owner: luka.kosenina@devrev.ai ### Gets the marketplaces.
     *
     * @tags marketplace
     * @name MarketplacesList
     * @request GET:/internal/marketplaces.list
     * @secure
     */
    marketplacesList: (params?: RequestParams) => Promise<AxiosResponse<MarketplacesListResponse, any>>;
    /**
     * @description Gets the marketplaces.
     *
     * @tags marketplace
     * @name MarketplacesListPost
     * @request POST:/internal/marketplaces.list
     * @secure
     */
    marketplacesListPost: (data: MarketplacesListRequest, params?: RequestParams) => Promise<AxiosResponse<MarketplacesListResponse, any>>;
    /**
     * @description ### Owner: rahul.jain@devrev.ai ### Counts the meeting records.
     *
     * @tags meetings
     * @name MeetingsCount
     * @request GET:/internal/meetings.count
     * @secure
     */
    meetingsCount: (query: MeetingsCountParams, params?: RequestParams) => Promise<AxiosResponse<MeetingsCountResponse, any>>;
    /**
     * @description Counts the meeting records.
     *
     * @tags meetings
     * @name MeetingsCountPost
     * @request POST:/internal/meetings.count
     * @secure
     */
    meetingsCountPost: (data: MeetingsCountRequest, params?: RequestParams) => Promise<AxiosResponse<MeetingsCountResponse, any>>;
    /**
     * @description Creates a new meeting record.
     *
     * @tags meetings
     * @name MeetingsCreate
     * @request POST:/internal/meetings.create
     * @secure
     */
    meetingsCreate: (data: MeetingsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<MeetingsCreateResponse, any>>;
    /**
     * @description Deletes the meeting record.
     *
     * @tags meetings
     * @name MeetingsDelete
     * @request POST:/internal/meetings.delete
     * @secure
     */
    meetingsDelete: (data: MeetingsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: rahul.jain@devrev.ai ### Gets the meeting record.
     *
     * @tags meetings
     * @name MeetingsGet
     * @request GET:/internal/meetings.get
     * @secure
     */
    meetingsGet: (query: MeetingsGetParams, params?: RequestParams) => Promise<AxiosResponse<MeetingsGetResponse, any>>;
    /**
     * @description Gets the meeting record.
     *
     * @tags meetings
     * @name MeetingsGetPost
     * @request POST:/internal/meetings.get
     * @secure
     */
    meetingsGetPost: (data: MeetingsGetRequest, params?: RequestParams) => Promise<AxiosResponse<MeetingsGetResponse, any>>;
    /**
     * @description Acquires a token to join a meeting.
     *
     * @tags meetings
     * @name MeetingsJoin
     * @request POST:/internal/meetings.join
     * @secure
     */
    meetingsJoin: (data: MeetingsJoinRequest, params?: RequestParams) => Promise<AxiosResponse<MeetingsJoinResponse, any>>;
    /**
     * @description ### Owner: rahul.jain@devrev.ai ### Lists the meeting records.
     *
     * @tags meetings
     * @name MeetingsList
     * @request GET:/internal/meetings.list
     * @secure
     */
    meetingsList: (query: MeetingsListParams, params?: RequestParams) => Promise<AxiosResponse<MeetingsListResponse, any>>;
    /**
     * @description ### Owner: rahul.jain@devrev.ai ### Lists the meeting records.
     *
     * @tags meetings
     * @name MeetingsList
     * @request GET:/internal/meetings.list
     * @secure */
    meetingsListPaginator(query: MeetingsListParams, params?: RequestParams): AsyncGenerator<MeetingsListResponse, void, unknown>;
    /**
     * @description Lists the meeting records.
     *
     * @tags meetings
     * @name MeetingsListPost
     * @request POST:/internal/meetings.list
     * @secure
     */
    meetingsListPost: (data: MeetingsListRequest, params?: RequestParams) => Promise<AxiosResponse<MeetingsListResponse, any>>;
    /**
     * @description Updates the meeting record.
     *
     * @tags meetings
     * @name MeetingsUpdate
     * @request POST:/internal/meetings.update
     * @secure
     */
    meetingsUpdate: (data: MeetingsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<MeetingsUpdateResponse, any>>;
    /**
     * @description ### Owner: amisha.kothari@devrev.ai ### Get a menu object.
     *
     * @tags menu
     * @name MenuGet
     * @request GET:/internal/menus.get
     * @secure
     */
    menuGet: (query: MenuGetParams, params?: RequestParams) => Promise<AxiosResponse<MenuGetResponse, any>>;
    /**
     * @description Get a menu object.
     *
     * @tags menu
     * @name MenuGetPost
     * @request POST:/internal/menus.get
     * @secure
     */
    menuGetPost: (data: MenuGetRequest, params?: RequestParams) => Promise<AxiosResponse<MenuGetResponse, any>>;
    /**
     * @description ### Owner: amisha.kothari@devrev.ai ### List all menus.
     *
     * @tags menu
     * @name MenuList
     * @request GET:/internal/menus.list
     * @secure
     */
    menuList: (query: MenuListParams, params?: RequestParams) => Promise<AxiosResponse<MenuListResponse, any>>;
    /**
     * @description List all menus.
     *
     * @tags menu
     * @name MenuListPost
     * @request POST:/internal/menus.list
     * @secure
     */
    menuListPost: (data: MenuListRequest, params?: RequestParams) => Promise<AxiosResponse<MenuListResponse, any>>;
    /**
     * @description update view of menu.
     *
     * @tags menu
     * @name MenuViewUpdate
     * @request POST:/internal/menus.view.update
     * @secure
     */
    menuViewUpdate: (data: MenuViewUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Executes the metric action on the given object.
     *
     * @tags slas
     * @name MetricActionExecute
     * @request POST:/internal/metric-action.execute
     * @secure
     */
    metricActionExecute: (data: MetricActionExecuteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Creates a custom metric definition
     *
     * @tags slas
     * @name MetricDefinitionsCreate
     * @request POST:/internal/metric-definitions.create
     * @secure
     */
    metricDefinitionsCreate: (data: MetricDefinitionsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<MetricDefinitionsCreateResponse, any>>;
    /**
     * @description Deletes a custom metric definition
     *
     * @tags slas
     * @name MetricDefinitionsDelete
     * @request POST:/internal/metric-definitions.delete
     * @secure
     */
    metricDefinitionsDelete: (data: MetricDefinitionsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: adwait.kulkarni@devrev.ai ### Gets a custom metric definition
     *
     * @tags slas
     * @name MetricDefinitionsGet
     * @request GET:/internal/metric-definitions.get
     * @secure
     */
    metricDefinitionsGet: (query: MetricDefinitionsGetParams, params?: RequestParams) => Promise<AxiosResponse<MetricDefinitionsGetResponse, any>>;
    /**
     * @description Gets a custom metric definition
     *
     * @tags slas
     * @name MetricDefinitionsGetPost
     * @request POST:/internal/metric-definitions.get
     * @secure
     */
    metricDefinitionsGetPost: (data: MetricDefinitionsGetRequest, params?: RequestParams) => Promise<AxiosResponse<MetricDefinitionsGetResponse, any>>;
    /**
     * @description ### Owner: lorinc.body@devrev.ai ### Lists metric definitions matching a filter.
     *
     * @tags slas
     * @name MetricDefinitionsList
     * @request GET:/internal/metric-definitions.list
     * @secure
     */
    metricDefinitionsList: (query: MetricDefinitionsListParams, params?: RequestParams) => Promise<AxiosResponse<MetricDefinitionsListResponse, any>>;
    /**
     * @description ### Owner: lorinc.body@devrev.ai ### Lists metric definitions matching a filter.
     *
     * @tags slas
     * @name MetricDefinitionsList
     * @request GET:/internal/metric-definitions.list
     * @secure */
    metricDefinitionsListPaginator(query: MetricDefinitionsListParams, params?: RequestParams): AsyncGenerator<MetricDefinitionsListResponse, void, unknown>;
    /**
     * @description Lists metric definitions matching a filter.
     *
     * @tags slas
     * @name MetricDefinitionsListPost
     * @request POST:/internal/metric-definitions.list
     * @secure
     */
    metricDefinitionsListPost: (data: MetricDefinitionsListRequest, params?: RequestParams) => Promise<AxiosResponse<MetricDefinitionsListResponse, any>>;
    /**
     * @description Updates a custom metric definition
     *
     * @tags slas
     * @name MetricDefinitionsUpdate
     * @request POST:/internal/metric-definitions.update
     * @secure
     */
    metricDefinitionsUpdate: (data: MetricDefinitionsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<MetricDefinitionsUpdateResponse, any>>;
    /**
     * @description Creates a new metric set.
     *
     * @tags alchemy
     * @name MetricSetsCreate
     * @request POST:/internal/metric-sets.create
     * @secure
     */
    metricSetsCreate: (data: MetricSetsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<MetricSetsCreateResponse, any>>;
    /**
     * @description Deletes a metric set by ID.
     *
     * @tags alchemy
     * @name MetricSetsDelete
     * @request POST:/internal/metric-sets.delete
     * @secure
     */
    metricSetsDelete: (data: MetricSetsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Gets a metric set by ID.
     *
     * @tags alchemy
     * @name MetricSetsGet
     * @request GET:/internal/metric-sets.get
     * @secure
     */
    metricSetsGet: (query: MetricSetsGetParams, params?: RequestParams) => Promise<AxiosResponse<MetricSetsGetResponse, any>>;
    /**
     * @description Gets a metric set by ID.
     *
     * @tags alchemy
     * @name MetricSetsGetPost
     * @request POST:/internal/metric-sets.get
     * @secure
     */
    metricSetsGetPost: (data: MetricSetsGetRequest, params?: RequestParams) => Promise<AxiosResponse<MetricSetsGetResponse, any>>;
    /**
     * @description Lists all the available metric sets.
     *
     * @tags alchemy
     * @name MetricSetsList
     * @request GET:/internal/metric-sets.list
     * @secure
     */
    metricSetsList: (params?: RequestParams) => Promise<AxiosResponse<MetricSetsListResponse, any>>;
    /**
     * @description Lists all the available metric sets.
     *
     * @tags alchemy
     * @name MetricSetsListPost
     * @request POST:/internal/metric-sets.list
     * @secure
     */
    metricSetsListPost: (data: MetricSetsListRequest, params?: RequestParams) => Promise<AxiosResponse<MetricSetsListResponse, any>>;
    /**
     * @description Updates a metric set by ID.
     *
     * @tags alchemy
     * @name MetricSetsUpdate
     * @request POST:/internal/metric-sets.update
     * @secure
     */
    metricSetsUpdate: (data: MetricSetsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<MetricSetsUpdateResponse, any>>;
    /**
     * @description Ingest endpoint for DevRev metrics data from clients.
     *
     * @tags product-usage
     * @name MetricsDevrevIngest
     * @request POST:/internal/metrics.devrev.ingest
     * @secure
     */
    metricsDevrevIngest: (data: MetricsDataIngestRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Gets a metric by ID.
     *
     * @tags alchemy
     * @name MetricsGet
     * @request GET:/internal/metrics.get
     * @secure
     */
    metricsGet: (query: MetricsGetParams, params?: RequestParams) => Promise<AxiosResponse<MetricsGetResponse, any>>;
    /**
     * @description Gets a metric by ID.
     *
     * @tags alchemy
     * @name MetricsGetPost
     * @request POST:/internal/metrics.get
     * @secure
     */
    metricsGetPost: (data: MetricsGetRequest, params?: RequestParams) => Promise<AxiosResponse<MetricsGetResponse, any>>;
    /**
     * @description Lists all the available metrics.
     *
     * @tags alchemy
     * @name MetricsList
     * @request GET:/internal/metrics.list
     * @secure
     */
    metricsList: (params?: RequestParams) => Promise<AxiosResponse<MetricsListResponse, any>>;
    /**
     * @description Lists all the available metrics.
     *
     * @tags alchemy
     * @name MetricsListPost
     * @request POST:/internal/metrics.list
     * @secure
     */
    metricsListPost: (data: MetricsListRequest, params?: RequestParams) => Promise<AxiosResponse<MetricsListResponse, any>>;
    /**
     * @description Write endpoint for OTLP metrics data from clients.
     *
     * @tags telemetry
     * @name MetricsOtlpWrite
     * @request POST:/internal/metrics.otlp.write
     * @secure
     */
    metricsOtlpWrite: (data: any, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Write endpoint for Prometheus metrics data from clients.
     *
     * @tags telemetry
     * @name MetricsPrometheusWrite
     * @request POST:/internal/metrics.prometheus.write
     * @secure
     */
    metricsPrometheusWrite: (data: any, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Seeds default configuration of groups, conditional roles and group members for the dev organization.
     *
     * @tags dev-orgs
     * @name MfzDefaultsSeed
     * @request POST:/internal/mfz-defaults.seed
     * @secure
     */
    mfzDefaultsSeed: (data: MfzDefaultsSeedRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Logs ML feedback.
     *
     * @name LogMlFeedback
     * @request POST:/internal/ml-feedback
     * @secure
     */
    logMlFeedback: (data: LogMlFeedbackRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Creates a news item.
     *
     * @tags news
     * @name NewsCreate
     * @request POST:/internal/news.create
     * @secure
     */
    newsCreate: (data: NewsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<NewsCreateResponse, any>>;
    /**
     * @description Deletes a news item.
     *
     * @tags news
     * @name NewsDelete
     * @request POST:/internal/news.delete
     * @secure
     */
    newsDelete: (data: NewsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Gets a news item.
     *
     * @tags news
     * @name NewsGet
     * @request GET:/internal/news.get
     * @secure
     */
    newsGet: (query: NewsGetParams, params?: RequestParams) => Promise<AxiosResponse<NewsGetResponse, any>>;
    /**
     * @description Gets a news item.
     *
     * @tags news
     * @name NewsGetPost
     * @request POST:/internal/news.get
     * @secure
     */
    newsGetPost: (data: NewsGetRequest, params?: RequestParams) => Promise<AxiosResponse<NewsGetResponse, any>>;
    /**
     * @description Lists news items.
     *
     * @tags news
     * @name NewsList
     * @request GET:/internal/news.list
     * @secure
     */
    newsList: (query: NewsListParams, params?: RequestParams) => Promise<AxiosResponse<NewsListResponse, any>>;
    /**
     * @description Lists news items.
     *
     * @tags news
     * @name NewsList
     * @request GET:/internal/news.list
     * @secure */
    newsListPaginator(query: NewsListParams, params?: RequestParams): AsyncGenerator<NewsListResponse, void, unknown>;
    /**
     * @description Lists news items.
     *
     * @tags news
     * @name NewsListPost
     * @request POST:/internal/news.list
     * @secure
     */
    newsListPost: (data: NewsListRequest, params?: RequestParams) => Promise<AxiosResponse<NewsListResponse, any>>;
    /**
     * @description Get content for notification channel.
     *
     * @tags notifications
     * @name NotificationsChannelContent
     * @request POST:/internal/notifications.channel-content
     * @secure
     */
    notificationsChannelContent: (data: NotificationsChannelContentRequest, params?: RequestParams) => Promise<AxiosResponse<NotificationsChannelContentResponse, any>>;
    /**
     * @description Lists the notifications channels for Android.
     *
     * @tags notifications
     * @name NotificationsChannels
     * @request GET:/internal/notifications.channels
     * @secure
     */
    notificationsChannels: (query: NotificationsChannelsParams, params?: RequestParams) => Promise<AxiosResponse<NotificationsChannelsResponse, any>>;
    /**
     * @description Lists the notifications channels for Android.
     *
     * @tags notifications
     * @name NotificationsChannelsPost
     * @request POST:/internal/notifications.channels
     * @secure
     */
    notificationsChannelsPost: (data: NotificationsChannelsRequest, params?: RequestParams) => Promise<AxiosResponse<NotificationsChannelsResponse, any>>;
    /**
     * @description Lists the notifications by groups.
     *
     * @tags notifications
     * @name NotificationsGroup
     * @request GET:/internal/notifications.group
     * @secure
     */
    notificationsGroup: (query: NotificationsGroupParams, params?: RequestParams) => Promise<AxiosResponse<NotificationsGroupResponse, any>>;
    /**
     * @description Lists the notifications by groups.
     *
     * @tags notifications
     * @name NotificationsGroup
     * @request GET:/internal/notifications.group
     * @secure */
    notificationsGroupPaginator(query: NotificationsGroupParams, params?: RequestParams): AsyncGenerator<NotificationsGroupResponse, void, unknown>;
    /**
     * @description Lists the notifications by groups.
     *
     * @tags notifications
     * @name NotificationsGroupPost
     * @request POST:/internal/notifications.group
     * @secure
     */
    notificationsGroupPost: (data: NotificationsGroupRequest, params?: RequestParams) => Promise<AxiosResponse<NotificationsGroupResponse, any>>;
    /**
     * @description Lists the notifications.
     *
     * @tags notifications
     * @name NotificationsList
     * @request GET:/internal/notifications.list
     * @secure
     */
    notificationsList: (query: NotificationsListParams, params?: RequestParams) => Promise<AxiosResponse<NotificationsListResponse, any>>;
    /**
     * @description Lists the notifications.
     *
     * @tags notifications
     * @name NotificationsList
     * @request GET:/internal/notifications.list
     * @secure */
    notificationsListPaginator(query: NotificationsListParams, params?: RequestParams): AsyncGenerator<NotificationsListResponse, void, unknown>;
    /**
     * @description Lists the notifications.
     *
     * @tags notifications
     * @name NotificationsListPost
     * @request POST:/internal/notifications.list
     * @secure
     */
    notificationsListPost: (data: NotificationsListRequest, params?: RequestParams) => Promise<AxiosResponse<NotificationsListResponse, any>>;
    /**
     * @description Updates the state of the notifications.
     *
     * @tags notifications
     * @name NotificationsMark
     * @request POST:/internal/notifications.mark
     * @secure
     */
    notificationsMark: (data: NotificationsMarkRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Generate a notification.
     *
     * @tags notifications
     * @name NotificationsSend
     * @request POST:/internal/notifications.send
     * @secure
     */
    notificationsSend: (data: NotificationsSendRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Copy data file to the oasis dataset.
     *
     * @tags oasis
     * @name OasisDataCopy
     * @request POST:/internal/oasis.data.copy
     * @secure
     */
    oasisDataCopy: (data: OasisDataCopyRequest, params?: RequestParams) => Promise<AxiosResponse<OasisDataCopyResponse, any>>;
    /**
     * @description Creates the Oasis data for the table.
     *
     * @tags oasis
     * @name OasisDataCreate
     * @request POST:/internal/oasis.data.create
     * @secure
     */
    oasisDataCreate: (data: OasisDataCreateRequest, params?: RequestParams) => Promise<AxiosResponse<OasisDataCreateResponse, any>>;
    /**
     * @description Deletes the Oasis data item.
     *
     * @tags oasis
     * @name OasisDataDelete
     * @request POST:/internal/oasis.data.delete
     * @secure
     */
    oasisDataDelete: (data: OasisDataDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description ### Owner: bhavani.hari@devrev.ai ### Returns the Oasis data for the table.
     *
     * @tags oasis
     * @name OasisDataFetch
     * @request GET:/internal/oasis.data.fetch
     * @secure
     */
    oasisDataFetch: (query: OasisDataFetchParams, params?: RequestParams) => Promise<AxiosResponse<OasisDataFetchResponse, any>>;
    /**
     * @description ### Owner: bhavani.hari@devrev.ai ### Returns the Oasis data for the table.
     *
     * @tags oasis
     * @name OasisDataFetch
     * @request GET:/internal/oasis.data.fetch
     * @secure */
    oasisDataFetchPaginator(query: OasisDataFetchParams, params?: RequestParams): AsyncGenerator<OasisDataFetchResponse, void, unknown>;
    /**
     * @description Returns the Oasis data for the table.
     *
     * @tags oasis
     * @name OasisDataFetchPost
     * @request POST:/internal/oasis.data.fetch
     * @secure
     */
    oasisDataFetchPost: (data: OasisDataFetchRequest, params?: RequestParams) => Promise<AxiosResponse<OasisDataFetchResponse, any>>;
    /**
     * @description ### Owner: bhavani.hari@devrev.ai ### Returns the filtered data from a oasis partition.
     *
     * @tags oasis
     * @name PartitionFilter
     * @request GET:/internal/oasis.data.filter
     * @secure
     */
    partitionFilter: (query: PartitionFilterParams, params?: RequestParams) => Promise<AxiosResponse<OasisPartitionFilterResponse, any>>;
    /**
     * @description Returns the filtered data from a oasis partition.
     *
     * @tags oasis
     * @name PartitionFilterPost
     * @request POST:/internal/oasis.data.filter
     * @secure
     */
    partitionFilterPost: (data: OasisPartitionFilterRequest, params?: RequestParams) => Promise<AxiosResponse<OasisPartitionFilterResponse, any>>;
    /**
     * @description ### Owner: bhavani.hari@devrev.ai ### Returns the filtered data from a oasis partition. This skips the fastly cache.
     *
     * @tags oasis
     * @name PartitionFilterNoCache
     * @request GET:/internal/oasis.data.filter-nocache
     * @secure
     */
    partitionFilterNoCache: (query: PartitionFilterNoCacheParams, params?: RequestParams) => Promise<AxiosResponse<OasisPartitionFilterResponse, any>>;
    /**
     * @description Returns the filtered data from a oasis partition. This skips the fastly cache.
     *
     * @tags oasis
     * @name PartitionFilterNoCachePost
     * @request POST:/internal/oasis.data.filter-nocache
     * @secure
     */
    partitionFilterNoCachePost: (data: OasisPartitionFilterRequest, params?: RequestParams) => Promise<AxiosResponse<OasisPartitionFilterResponse, any>>;
    /**
     * @description ### Owner: amit.gosavi@devrev.ai ### Prepares the Oasis data for the faster data response.
     *
     * @tags oasis
     * @name OasisDataPrepare
     * @request GET:/internal/oasis.data.prepare
     * @secure
     */
    oasisDataPrepare: (query: OasisDataPrepareParams, params?: RequestParams) => Promise<AxiosResponse<OasisDataPrepareResponse, any>>;
    /**
     * @description ### Owner: amit.gosavi@devrev.ai ### Prepares the Oasis data for the faster data response.
     *
     * @tags oasis
     * @name OasisDataPrepare
     * @request GET:/internal/oasis.data.prepare
     * @secure */
    oasisDataPreparePaginator(query: OasisDataPrepareParams, params?: RequestParams): AsyncGenerator<OasisDataPrepareResponse, void, unknown>;
    /**
     * @description Prepares the Oasis data for the faster data response.
     *
     * @tags oasis
     * @name OasisDataPreparePost
     * @request POST:/internal/oasis.data.prepare
     * @secure
     */
    oasisDataPreparePost: (data: OasisDataPrepareRequest, params?: RequestParams) => Promise<AxiosResponse<OasisDataPrepareResponse, any>>;
    /**
     * @description Returns the Oasis data after executing the query.
     *
     * @tags oasis
     * @name OasisDataQuery
     * @request POST:/internal/oasis.data.query
     * @secure
     */
    oasisDataQuery: (data: OasisDataQueryRequest, params?: RequestParams) => Promise<AxiosResponse<OasisDataQueryResponse, any>>;
    /**
     * @description Streams the data for the oasis dataset.
     *
     * @tags oasis
     * @name OasisDataStream
     * @request POST:/internal/oasis.data.stream
     * @secure
     */
    oasisDataStream: (data: OasisDataStreamRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Sync the data from S3.
     *
     * @tags oasis
     * @name OasisDataSync
     * @request POST:/internal/oasis.data.sync
     * @secure
     */
    oasisDataSync: (data: OasisDataSyncRequest, params?: RequestParams) => Promise<AxiosResponse<OasisDataSyncResponse, any>>;
    /**
     * @description Updates the dataset access level and version. This call is internal to DevRev and can be only called by Data Owners group members.
     *
     * @tags oasis
     * @name DatasetAccessAndVersionControl
     * @request POST:/internal/oasis.dataset.access-and-version-control
     * @secure
     */
    datasetAccessAndVersionControl: (data: OasisDatasetAccessAndVersionControlRequest, params?: RequestParams) => Promise<AxiosResponse<OasisDatasetAccessAndVersionControlResponse, any>>;
    /**
     * @description Creates the Oasis data for the table.
     *
     * @tags oasis
     * @name DatasetCreate
     * @request POST:/internal/oasis.dataset.create
     * @secure
     */
    datasetCreate: (data: OasisDatasetCreateRequest, params?: RequestParams) => Promise<AxiosResponse<OasisDatasetCreateResponse, any>>;
    /**
     * @description Deletes the dataset.
     *
     * @tags oasis
     * @name DatasetDelete
     * @request POST:/internal/oasis.dataset.delete
     * @secure
     */
    datasetDelete: (data: OasisDatasetDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description ### Owner: bhavani.hari@devrev.ai ### Returns the dataset requested.
     *
     * @tags oasis
     * @name OasisDatasetGet
     * @request GET:/internal/oasis.dataset.get
     * @secure
     */
    oasisDatasetGet: (query: OasisDatasetGetParams, params?: RequestParams) => Promise<AxiosResponse<OasisDatasetGetResponse, any>>;
    /**
     * @description Returns the dataset requested.
     *
     * @tags oasis
     * @name OasisDatasetGetPost
     * @request POST:/internal/oasis.dataset.get
     * @secure
     */
    oasisDatasetGetPost: (data: OasisDatasetGetRequest, params?: RequestParams) => Promise<AxiosResponse<OasisDatasetGetResponse, any>>;
    /**
     * @description ### Owner: bhavani.hari@devrev.ai ### Returns the list of datasets that match the filter.
     *
     * @tags oasis
     * @name DatasetList
     * @request GET:/internal/oasis.dataset.list
     * @secure
     */
    datasetList: (query: DatasetListParams, params?: RequestParams) => Promise<AxiosResponse<OasisDatasetListResponse, any>>;
    /**
     * @description ### Owner: bhavani.hari@devrev.ai ### Returns the list of datasets that match the filter.
     *
     * @tags oasis
     * @name DatasetList
     * @request GET:/internal/oasis.dataset.list
     * @secure */
    datasetListPaginator(query: DatasetListParams, params?: RequestParams): AsyncGenerator<OasisDatasetListResponse, void, unknown>;
    /**
     * @description Returns the list of datasets that match the filter.
     *
     * @tags oasis
     * @name DatasetListPost
     * @request POST:/internal/oasis.dataset.list
     * @secure
     */
    datasetListPost: (data: OasisDatasetListRequest, params?: RequestParams) => Promise<AxiosResponse<OasisDatasetListResponse, any>>;
    /**
     * @description Updates the dataset.
     *
     * @tags oasis
     * @name DatasetUpdate
     * @request POST:/internal/oasis.dataset.update
     * @secure
     */
    datasetUpdate: (data: OasisDatasetUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<OasisDatasetUpdateResponse, any>>;
    /**
     * @description Creates the Oasis job.
     *
     * @tags oasis
     * @name OasisJobCreate
     * @request POST:/internal/oasis.job.create
     * @secure
     */
    oasisJobCreate: (data: OasisJobCreateRequest, params?: RequestParams) => Promise<AxiosResponse<OasisJobCreateResponse, any>>;
    /**
     * @description Executes the Oasis job.
     *
     * @tags oasis
     * @name OasisJobExecute
     * @request POST:/internal/oasis.job.execute
     * @secure
     */
    oasisJobExecute: (data: OasisJobExecuteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: amit.gosavi@devrev.ai ### Gets the Oasis job.
     *
     * @tags oasis
     * @name OasisJobGet
     * @request GET:/internal/oasis.job.get
     * @secure
     */
    oasisJobGet: (query: OasisJobGetParams, params?: RequestParams) => Promise<AxiosResponse<OasisJobGetResponse, any>>;
    /**
     * @description Gets the Oasis job.
     *
     * @tags oasis
     * @name OasisJobGetPost
     * @request POST:/internal/oasis.job.get
     * @secure
     */
    oasisJobGetPost: (data: OasisJobGetRequest, params?: RequestParams) => Promise<AxiosResponse<OasisJobGetResponse, any>>;
    /**
     * @description Updates the Oasis job.
     *
     * @tags oasis
     * @name OasisJobUpdate
     * @request POST:/internal/oasis.job.update
     * @secure
     */
    oasisJobUpdate: (data: OasisJobUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<OasisJobUpdateResponse, any>>;
    /**
     * @description ### Owner: i-aman.singh@devrev.ai ### Connects to an open oasis socket.
     *
     * @tags sockets
     * @name OasisSocketsConnect
     * @request GET:/internal/oasis.sockets.connect
     * @secure
     */
    oasisSocketsConnect: (query: OasisSocketsConnectParams, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Connects to an open oasis socket.
     *
     * @tags sockets
     * @name OasisSocketsConnectPost
     * @request POST:/internal/oasis.sockets.connect
     * @secure
     */
    oasisSocketsConnectPost: (data: SocketsConnectRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Opens a new oasis socket.
     *
     * @tags sockets
     * @name OasisSocketsOpen
     * @request POST:/internal/oasis.sockets.open
     * @secure
     */
    oasisSocketsOpen: (data: SocketsOpenRequest, params?: RequestParams) => Promise<AxiosResponse<SocketsOpenResponse, any>>;
    /**
     * @description Returns the total count of the object members satisfying the request parameters.
     *
     * @tags object-members
     * @name ObjectMembersCount
     * @request GET:/internal/object-members.count
     * @secure
     */
    objectMembersCount: (query: ObjectMembersCountParams, params?: RequestParams) => Promise<AxiosResponse<ObjectMembersCountResponse, any>>;
    /**
     * @description Returns the total count of the object members satisfying the request parameters.
     *
     * @tags object-members
     * @name ObjectMembersCountPost
     * @request POST:/internal/object-members.count
     * @secure
     */
    objectMembersCountPost: (data: ObjectMembersCountRequest, params?: RequestParams) => Promise<AxiosResponse<ObjectMembersCountResponse, any>>;
    /**
     * @description Creates an object member.
     *
     * @tags object-members
     * @name ObjectMembersCreate
     * @request POST:/internal/object-members.create
     * @secure
     */
    objectMembersCreate: (data: ObjectMembersCreateRequest, params?: RequestParams) => Promise<AxiosResponse<ObjectMembersCreateResponse, any>>;
    /**
     * @description Gets an object member.
     *
     * @tags object-members
     * @name ObjectMembersGet
     * @request GET:/internal/object-members.get
     * @secure
     */
    objectMembersGet: (query: ObjectMembersGetParams, params?: RequestParams) => Promise<AxiosResponse<ObjectMembersGetResponse, any>>;
    /**
     * @description Gets an object member.
     *
     * @tags object-members
     * @name ObjectMembersGetPost
     * @request POST:/internal/object-members.get
     * @secure
     */
    objectMembersGetPost: (data: ObjectMembersGetRequest, params?: RequestParams) => Promise<AxiosResponse<ObjectMembersGetResponse, any>>;
    /**
     * @description Lists object members satisfying the request parameters.
     *
     * @tags object-members
     * @name ObjectMembersList
     * @request GET:/internal/object-members.list
     * @secure
     */
    objectMembersList: (query: ObjectMembersListParams, params?: RequestParams) => Promise<AxiosResponse<ObjectMembersListResponse, any>>;
    /**
     * @description Lists object members satisfying the request parameters.
     *
     * @tags object-members
     * @name ObjectMembersList
     * @request GET:/internal/object-members.list
     * @secure */
    objectMembersListPaginator(query: ObjectMembersListParams, params?: RequestParams): AsyncGenerator<ObjectMembersListResponse, void, unknown>;
    /**
     * @description Lists object members satisfying the request parameters.
     *
     * @tags object-members
     * @name ObjectMembersListPost
     * @request POST:/internal/object-members.list
     * @secure
     */
    objectMembersListPost: (data: ObjectMembersListRequest, params?: RequestParams) => Promise<AxiosResponse<ObjectMembersListResponse, any>>;
    /**
     * @description Removes an object member.
     *
     * @tags object-members
     * @name ObjectMembersRemove
     * @request POST:/internal/object-members.remove
     * @secure
     */
    objectMembersRemove: (data: ObjectMembersRemoveRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Updates and returns the available tasks for the authenticated user.
     *
     * @tags onboarding
     * @name OnboardingTasksApply
     * @request POST:/internal/onboarding-tasks.apply
     * @secure
     */
    onboardingTasksApply: (data: OnboardingTasksApplyRequest, params?: RequestParams) => Promise<AxiosResponse<OnboardingTasksApplyResponse, any>>;
    /**
     * @description Gets the one time line item objects based on the given filters.
     *
     * @tags commerce
     * @name OneTimeItemsList
     * @request GET:/internal/one-time-line-items.list
     * @secure
     */
    oneTimeItemsList: (query: OneTimeItemsListParams, params?: RequestParams) => Promise<AxiosResponse<OneTimeItemsListResponse, any>>;
    /**
     * @description Gets the one time line item objects based on the given filters.
     *
     * @tags commerce
     * @name OneTimeItemsList
     * @request GET:/internal/one-time-line-items.list
     * @secure */
    oneTimeItemsListPaginator(query: OneTimeItemsListParams, params?: RequestParams): AsyncGenerator<OneTimeItemsListResponse, void, unknown>;
    /**
     * @description Gets the one time line item objects based on the given filters.
     *
     * @tags commerce
     * @name OneTimeItemsListPost
     * @request POST:/internal/one-time-line-items.list
     * @secure
     */
    oneTimeItemsListPost: (data: OneTimeItemsListRequest, params?: RequestParams) => Promise<AxiosResponse<OneTimeItemsListResponse, any>>;
    /**
     * @description ### Owner: abhishek.bansal@devrev.ai ### Lists all operations.
     *
     * @tags operation
     * @name ListOperations
     * @request GET:/internal/operations.list
     * @secure
     */
    listOperations: (query: ListOperationsParams, params?: RequestParams) => Promise<AxiosResponse<ListOperationsResponse, any>>;
    /**
     * @description ### Owner: abhishek.bansal@devrev.ai ### Lists all operations.
     *
     * @tags operation
     * @name ListOperations
     * @request GET:/internal/operations.list
     * @secure */
    listOperationsPaginator(query: ListOperationsParams, params?: RequestParams): AsyncGenerator<ListOperationsResponse, void, unknown>;
    /**
     * @description Lists all operations.
     *
     * @tags operation
     * @name ListOperationsPost
     * @request POST:/internal/operations.list
     * @secure
     */
    listOperationsPost: (data: ListOperationsRequest, params?: RequestParams) => Promise<AxiosResponse<ListOperationsResponse, any>>;
    /**
     * @description ### Owner: abhishek.bansal@devrev.ai ### Get an operation's schema.
     *
     * @tags operation
     * @name GetSchemaOperation
     * @request GET:/internal/operations.schema
     * @secure
     */
    getSchemaOperation: (query: GetSchemaOperationParams, params?: RequestParams) => Promise<AxiosResponse<GetSchemaOperationResponse, any>>;
    /**
     * @description Get an operation's schema.
     *
     * @tags operation
     * @name GetSchemaOperationPost
     * @request POST:/internal/operations.schema
     * @secure
     */
    getSchemaOperationPost: (data: GetSchemaOperationRequest, params?: RequestParams) => Promise<AxiosResponse<GetSchemaOperationResponse, any>>;
    /**
     * @description Creates an organization schedule fragment.
     *
     * @tags schedules
     * @name OrgScheduleFragmentsCreate
     * @request POST:/internal/org-schedule-fragments.create
     * @secure
     */
    orgScheduleFragmentsCreate: (data: OrgScheduleFragmentsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<OrgScheduleFragmentsCreateResponse, any>>;
    /**
     * @description ### Owner: lorinc.body@devrev.ai ### Gets an organization schedule fragment.
     *
     * @tags schedules
     * @name OrgScheduleFragmentsGet
     * @request GET:/internal/org-schedule-fragments.get
     * @secure
     */
    orgScheduleFragmentsGet: (query: OrgScheduleFragmentsGetParams, params?: RequestParams) => Promise<AxiosResponse<OrgScheduleFragmentsGetResponse, any>>;
    /**
     * @description Gets an organization schedule fragment.
     *
     * @tags schedules
     * @name OrgScheduleFragmentsGetPost
     * @request POST:/internal/org-schedule-fragments.get
     * @secure
     */
    orgScheduleFragmentsGetPost: (data: OrgScheduleFragmentsGetRequest, params?: RequestParams) => Promise<AxiosResponse<OrgScheduleFragmentsGetResponse, any>>;
    /**
     * @description Changes stage of an organization schedule fragment.
     *
     * @tags schedules
     * @name OrgScheduleFragmentsTransition
     * @request POST:/internal/org-schedule-fragments.transition
     * @secure
     */
    orgScheduleFragmentsTransition: (data: OrgScheduleFragmentsTransitionRequest, params?: RequestParams) => Promise<AxiosResponse<OrgScheduleFragmentsTransitionResponse, any>>;
    /**
     * @description Creates an organization schedule with a default weekly organization schedule and a list of organization schedule fragments.
     *
     * @tags schedules
     * @name OrgSchedulesCreate
     * @request POST:/internal/org-schedules.create
     * @secure
     */
    orgSchedulesCreate: (data: OrgSchedulesCreateRequest, params?: RequestParams) => Promise<AxiosResponse<OrgSchedulesCreateResponse, any>>;
    /**
     * @description ### Owner: lorinc.body@devrev.ai ### Gets an organization schedule.
     *
     * @tags schedules
     * @name OrgSchedulesGet
     * @request GET:/internal/org-schedules.get
     * @secure
     */
    orgSchedulesGet: (query: OrgSchedulesGetParams, params?: RequestParams) => Promise<AxiosResponse<OrgSchedulesGetResponse, any>>;
    /**
     * @description Gets an organization schedule.
     *
     * @tags schedules
     * @name OrgSchedulesGetPost
     * @request POST:/internal/org-schedules.get
     * @secure
     */
    orgSchedulesGetPost: (data: OrgSchedulesGetRequest, params?: RequestParams) => Promise<AxiosResponse<OrgSchedulesGetResponse, any>>;
    /**
     * @description ### Owner: suraj.narra@devrev.ai ### Gets list of organization schedules.
     *
     * @tags schedules
     * @name OrgSchedulesList
     * @request GET:/internal/org-schedules.list
     * @secure
     */
    orgSchedulesList: (query: OrgSchedulesListParams, params?: RequestParams) => Promise<AxiosResponse<OrgSchedulesListResponse, any>>;
    /**
     * @description ### Owner: suraj.narra@devrev.ai ### Gets list of organization schedules.
     *
     * @tags schedules
     * @name OrgSchedulesList
     * @request GET:/internal/org-schedules.list
     * @secure */
    orgSchedulesListPaginator(query: OrgSchedulesListParams, params?: RequestParams): AsyncGenerator<OrgSchedulesListResponse, void, unknown>;
    /**
     * @description Gets list of organization schedules.
     *
     * @tags schedules
     * @name OrgSchedulesListPost
     * @request POST:/internal/org-schedules.list
     * @secure
     */
    orgSchedulesListPost: (data: OrgSchedulesListRequest, params?: RequestParams) => Promise<AxiosResponse<OrgSchedulesListResponse, any>>;
    /**
     * @description Sets next organization schedule fragment which must begin the day the last existing fragment ends.
     *
     * @tags schedules
     * @name OrgSchedulesSetFuture
     * @request POST:/internal/org-schedules.set-future
     * @secure
     */
    orgSchedulesSetFuture: (data: OrgSchedulesSetFutureRequest, params?: RequestParams) => Promise<AxiosResponse<OrgSchedulesSetFutureResponse, any>>;
    /**
     * @description Publishes or archives an organization schedule.
     *
     * @tags schedules
     * @name OrgSchedulesTransition
     * @request POST:/internal/org-schedules.transition
     * @secure
     */
    orgSchedulesTransition: (data: OrgSchedulesTransitionRequest, params?: RequestParams) => Promise<AxiosResponse<OrgSchedulesTransitionResponse, any>>;
    /**
     * @description Updates an organization schedule.
     *
     * @tags schedules
     * @name OrgSchedulesUpdate
     * @request POST:/internal/org-schedules.update
     * @secure
     */
    orgSchedulesUpdate: (data: OrgSchedulesUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<OrgSchedulesUpdateResponse, any>>;
    /**
     * @description Lists top contributors of a part.
     *
     * @tags parts
     * @name PartsContributorsList
     * @request GET:/internal/parts.contributors.list
     * @secure
     */
    partsContributorsList: (query: PartsContributorsListParams, params?: RequestParams) => Promise<AxiosResponse<PartsContributorsListResponse, any>>;
    /**
     * @description Lists top contributors of a part.
     *
     * @tags parts
     * @name PartsContributorsListPost
     * @request POST:/internal/parts.contributors.list
     * @secure
     */
    partsContributorsListPost: (data: PartsContributorsListRequest, params?: RequestParams) => Promise<AxiosResponse<PartsContributorsListResponse, any>>;
    /**
     * @description Get count of parts matching given filter.
     *
     * @tags parts
     * @name PartsCount
     * @request GET:/internal/parts.count
     * @secure
     */
    partsCount: (query: PartsCountParams, params?: RequestParams) => Promise<AxiosResponse<PartsCountResponse, any>>;
    /**
     * @description Get count of parts matching given filter.
     *
     * @tags parts
     * @name PartsCountPost
     * @request POST:/internal/parts.count
     * @secure
     */
    partsCountPost: (data: PartsCountRequest, params?: RequestParams) => Promise<AxiosResponse<PartsCountResponse, any>>;
    /**
     * @description Creates new [part](https://devrev.ai/docs/product/parts).
     *
     * @tags parts
     * @name PartsCreate
     * @request POST:/internal/parts.create
     * @secure
     */
    partsCreate: (data: PartsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<PartsCreateResponse, any>>;
    /**
     * @description Lists top customers of a part.
     *
     * @tags parts
     * @name PartsCustomersList
     * @request GET:/internal/parts.customers.list
     * @secure
     */
    partsCustomersList: (query: PartsCustomersListParams, params?: RequestParams) => Promise<AxiosResponse<PartsCustomersListResponse, any>>;
    /**
     * @description Lists top customers of a part.
     *
     * @tags parts
     * @name PartsCustomersListPost
     * @request POST:/internal/parts.customers.list
     * @secure
     */
    partsCustomersListPost: (data: PartsCustomersListRequest, params?: RequestParams) => Promise<AxiosResponse<PartsCustomersListResponse, any>>;
    /**
     * @description Deletes a [part](https://devrev.ai/docs/product/parts).
     *
     * @tags parts
     * @name PartsDelete
     * @request POST:/internal/parts.delete
     * @secure
     */
    partsDelete: (data: PartsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Get links for part hierarchy
     *
     * @tags parts
     * @name PartsDescendantLinksTraverse
     * @request GET:/internal/parts.descendant-links.traverse
     * @secure
     */
    partsDescendantLinksTraverse: (query: PartsDescendantLinksTraverseParams, params?: RequestParams) => Promise<AxiosResponse<PartsDescendantLinksTraverseResponse, any>>;
    /**
     * @description Get links for part hierarchy
     *
     * @tags parts
     * @name PartsDescendantLinksTraverse
     * @request GET:/internal/parts.descendant-links.traverse
     * @secure */
    partsDescendantLinksTraversePaginator(query: PartsDescendantLinksTraverseParams, params?: RequestParams): AsyncGenerator<PartsDescendantLinksTraverseResponse, void, unknown>;
    /**
     * @description Get links for part hierarchy
     *
     * @tags parts
     * @name PartsDescendantLinksTraversePost
     * @request POST:/internal/parts.descendant-links.traverse
     * @secure
     */
    partsDescendantLinksTraversePost: (data: PartsDescendantLinksTraverseRequest, params?: RequestParams) => Promise<AxiosResponse<PartsDescendantLinksTraverseResponse, any>>;
    /**
     * @description Exports a list of parts.
     *
     * @tags parts
     * @name PartsExport
     * @request POST:/internal/parts.export
     * @secure
     */
    partsExport: (data: PartsExportRequest, params?: RequestParams) => Promise<AxiosResponse<PartsExportResponse, any>>;
    /**
     * @description Deletes API endpoints from a feature.
     *
     * @tags parts
     * @name PartsFeaturesApiEndpointsDelete
     * @request POST:/internal/parts.features.api-endpoints.delete
     * @secure
     */
    partsFeaturesApiEndpointsDelete: (data: PartsFeaturesApiEndpointsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<PartsFeaturesApiEndpointsDeleteResponse, any>>;
    /**
     * @description Merges API endpoints across two features.
     *
     * @tags parts
     * @name PartsFeaturesApiEndpointsMerge
     * @request POST:/internal/parts.features.api-endpoints.merge
     * @secure
     */
    partsFeaturesApiEndpointsMerge: (data: PartsFeaturesApiEndpointsMergeRequest, params?: RequestParams) => Promise<AxiosResponse<PartsFeaturesApiEndpointsMergeResponse, any>>;
    /**
     * @description Deletes API operations from a feature.
     *
     * @tags parts
     * @name PartsFeaturesApiOperationsDelete
     * @request POST:/internal/parts.features.api-operations.delete
     * @secure
     */
    partsFeaturesApiOperationsDelete: (data: PartsFeaturesApiOperationsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<PartsFeaturesApiOperationsDeleteResponse, any>>;
    /**
     * @description Merges API operations across two features.
     *
     * @tags parts
     * @name PartsFeaturesApiOperationsMerge
     * @request POST:/internal/parts.features.api-operations.merge
     * @secure
     */
    partsFeaturesApiOperationsMerge: (data: PartsFeaturesApiOperationsMergeRequest, params?: RequestParams) => Promise<AxiosResponse<PartsFeaturesApiOperationsMergeResponse, any>>;
    /**
     * @description Gets a [part's](https://devrev.ai/docs/product/parts) information.
     *
     * @tags parts
     * @name PartsGet
     * @request GET:/internal/parts.get
     * @secure
     */
    partsGet: (query: PartsGetParams, params?: RequestParams) => Promise<AxiosResponse<PartsGetResponse, any>>;
    /**
     * @description Gets a [part's](https://devrev.ai/docs/product/parts) information.
     *
     * @tags parts
     * @name PartsGetPost
     * @request POST:/internal/parts.get
     * @secure
     */
    partsGetPost: (data: PartsGetRequest, params?: RequestParams) => Promise<AxiosResponse<PartsGetResponse, any>>;
    /**
     * @description Lists collections of parts by groups.
     *
     * @tags parts
     * @name PartsGroup
     * @request GET:/internal/parts.group
     * @secure
     */
    partsGroup: (query: PartsGroupParams, params?: RequestParams) => Promise<AxiosResponse<PartsGroupResponse, any>>;
    /**
     * @description Lists collections of parts by groups.
     *
     * @tags parts
     * @name PartsGroup
     * @request GET:/internal/parts.group
     * @secure */
    partsGroupPaginator(query: PartsGroupParams, params?: RequestParams): AsyncGenerator<PartsGroupResponse, void, unknown>;
    /**
     * @description Lists collections of parts by groups.
     *
     * @tags parts
     * @name PartsGroupPost
     * @request POST:/internal/parts.group
     * @secure
     */
    partsGroupPost: (data: PartsGroupRequest, params?: RequestParams) => Promise<AxiosResponse<PartsGroupResponse, any>>;
    /**
     * @description Lists a collection of [parts](https://devrev.ai/docs/product/parts).
     *
     * @tags parts
     * @name PartsList
     * @request GET:/internal/parts.list
     * @secure
     */
    partsList: (query: PartsListParams, params?: RequestParams) => Promise<AxiosResponse<PartsListResponse, any>>;
    /**
     * @description Lists a collection of [parts](https://devrev.ai/docs/product/parts).
     *
     * @tags parts
     * @name PartsList
     * @request GET:/internal/parts.list
     * @secure */
    partsListPaginator(query: PartsListParams, params?: RequestParams): AsyncGenerator<PartsListResponse, void, unknown>;
    /**
     * @description Lists a collection of [parts](https://devrev.ai/docs/product/parts).
     *
     * @tags parts
     * @name PartsListPost
     * @request POST:/internal/parts.list
     * @secure
     */
    partsListPost: (data: PartsListRequest, params?: RequestParams) => Promise<AxiosResponse<PartsListResponse, any>>;
    /**
     * @description Mutate a part to either promote or merge it.
     *
     * @tags parts
     * @name PartsMutate
     * @request GET:/internal/parts.mutate
     * @secure
     */
    partsMutate: (query: PartsMutateParams, params?: RequestParams) => Promise<AxiosResponse<PartsMutateResponse, any>>;
    /**
     * @description Mutate a part to either promote or merge it.
     *
     * @tags parts
     * @name PartsMutatePost
     * @request POST:/internal/parts.mutate
     * @secure
     */
    partsMutatePost: (data: PartsMutateRequest, params?: RequestParams) => Promise<AxiosResponse<PartsMutateResponse, any>>;
    /**
     * @description Lists top supporters of a part.
     *
     * @tags parts
     * @name PartsSupportersList
     * @request GET:/internal/parts.supporters.list
     * @secure
     */
    partsSupportersList: (query: PartsSupportersListParams, params?: RequestParams) => Promise<AxiosResponse<PartsSupportersListResponse, any>>;
    /**
     * @description Lists top supporters of a part.
     *
     * @tags parts
     * @name PartsSupportersListPost
     * @request POST:/internal/parts.supporters.list
     * @secure
     */
    partsSupportersListPost: (data: PartsSupportersListRequest, params?: RequestParams) => Promise<AxiosResponse<PartsSupportersListResponse, any>>;
    /**
     * @description Updates a [part's](https://devrev.ai/docs/product/parts) information.
     *
     * @tags parts
     * @name PartsUpdate
     * @request POST:/internal/parts.update
     * @secure
     */
    partsUpdate: (data: PartsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<PartsUpdateResponse, any>>;
    /**
     * @description Update payment intent object.
     *
     * @tags commerce
     * @name PaymentIntentsUpdate
     * @request POST:/internal/payment-intents.update
     * @secure
     */
    paymentIntentsUpdate: (data: PaymentIntentsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Deletes the payment method from the customer configuration.
     *
     * @tags commerce
     * @name PaymentMethodsDelete
     * @request POST:/internal/payment-methods.delete
     * @secure
     */
    paymentMethodsDelete: (data: PaymentMethodsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Returns the payment method.
     *
     * @tags commerce
     * @name PaymentMethodsGet
     * @request GET:/internal/payment-methods.get
     * @secure
     */
    paymentMethodsGet: (query: PaymentMethodsGetParams, params?: RequestParams) => Promise<AxiosResponse<PaymentMethodsGetResponse, any>>;
    /**
     * @description Returns the payment method.
     *
     * @tags commerce
     * @name PaymentMethodsGetPost
     * @request POST:/internal/payment-methods.get
     * @secure
     */
    paymentMethodsGetPost: (data: PaymentMethodsGetRequest, params?: RequestParams) => Promise<AxiosResponse<PaymentMethodsGetResponse, any>>;
    /**
     * @description List payment methods for a customer.
     *
     * @tags commerce
     * @name PaymentMethodsList
     * @request GET:/internal/payment-methods.list
     * @secure
     */
    paymentMethodsList: (query: PaymentMethodsListParams, params?: RequestParams) => Promise<AxiosResponse<PaymentMethodsListResponse, any>>;
    /**
     * @description List payment methods for a customer.
     *
     * @tags commerce
     * @name PaymentMethodsListPost
     * @request POST:/internal/payment-methods.list
     * @secure
     */
    paymentMethodsListPost: (data: PaymentMethodsListRequest, params?: RequestParams) => Promise<AxiosResponse<PaymentMethodsListResponse, any>>;
    /**
     * @description Sets the payment method as default in the customer configuration.
     *
     * @tags commerce
     * @name PaymentMethodsSetDefault
     * @request POST:/internal/payment-methods.set-default
     * @secure
     */
    paymentMethodsSetDefault: (data: PaymentMethodsSetDefaultRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Setup intent initiates the process of saving a payment method details in the customer's configuration. The API returns a client key which is to be used on the front end side to call Stripe to verify and save the user entered payment method details for the customer on Stripe.
     *
     * @tags commerce
     * @name PaymentMethodsSetupIntentCreate
     * @request POST:/internal/payment-methods.setup-intent.create
     * @secure
     */
    paymentMethodsSetupIntentCreate: (data: PaymentMethodsSetupIntentCreateRequest, params?: RequestParams) => Promise<AxiosResponse<PaymentMethodsSetupIntentCreateResponse, any>>;
    /**
     * @description Create a plug setting object.
     *
     * @tags plug-settings
     * @name PlugSettingsCreate
     * @request POST:/internal/plug-settings.create
     * @secure
     */
    plugSettingsCreate: (data: PlugSettingsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<PlugSettingsCreateResponse, any>>;
    /**
     * @description Create a default plug setting object.
     *
     * @tags plug-settings
     * @name PlugSettingsDefaultCreate
     * @request POST:/internal/plug-settings.default.create
     * @secure
     */
    plugSettingsDefaultCreate: (data: PlugSettingsDefaultCreateRequest, params?: RequestParams) => Promise<AxiosResponse<PlugSettingsDefaultCreateResponse, any>>;
    /**
     * @description Deletes a plug setting object.
     *
     * @tags plug-settings
     * @name PlugSettingsDelete
     * @request POST:/internal/plug-settings.delete
     * @secure
     */
    plugSettingsDelete: (data: PlugSettingsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: madhav.sikka@devrev.ai ### Get plug setting object.
     *
     * @tags plug-settings
     * @name PlugSettingsGet
     * @request GET:/internal/plug-settings.get
     * @secure
     */
    plugSettingsGet: (query: PlugSettingsGetParams, params?: RequestParams) => Promise<AxiosResponse<PlugSettingsGetResponse, any>>;
    /**
     * @description Get plug setting object.
     *
     * @tags plug-settings
     * @name PlugSettingsGetPost
     * @request POST:/internal/plug-settings.get
     * @secure
     */
    plugSettingsGetPost: (data: PlugSettingsGetRequest, params?: RequestParams) => Promise<AxiosResponse<PlugSettingsGetResponse, any>>;
    /**
     * @description ### Owner: madhav.sikka@devrev.ai ### Lists plug setting objects.
     *
     * @tags plug-settings
     * @name PlugSettingsList
     * @request GET:/internal/plug-settings.list
     * @secure
     */
    plugSettingsList: (query: PlugSettingsListParams, params?: RequestParams) => Promise<AxiosResponse<PlugSettingsListResponse, any>>;
    /**
     * @description ### Owner: madhav.sikka@devrev.ai ### Lists plug setting objects.
     *
     * @tags plug-settings
     * @name PlugSettingsList
     * @request GET:/internal/plug-settings.list
     * @secure */
    plugSettingsListPaginator(query: PlugSettingsListParams, params?: RequestParams): AsyncGenerator<PlugSettingsListResponse, void, unknown>;
    /**
     * @description Lists plug setting objects.
     *
     * @tags plug-settings
     * @name PlugSettingsListPost
     * @request POST:/internal/plug-settings.list
     * @secure
     */
    plugSettingsListPost: (data: PlugSettingsListRequest, params?: RequestParams) => Promise<AxiosResponse<PlugSettingsListResponse, any>>;
    /**
     * @description Update plug setting object.
     *
     * @tags plug-settings
     * @name PlugSettingsUpdate
     * @request POST:/internal/plug-settings.update
     * @secure
     */
    plugSettingsUpdate: (data: PlugSettingsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<PlugSettingsUpdateResponse, any>>;
    /**
     * @description Get the preferences object.
     *
     * @tags preferences
     * @name PreferencesGet
     * @request GET:/internal/preferences.get
     * @secure
     */
    preferencesGet: (query: PreferencesGetParams, params?: RequestParams) => Promise<AxiosResponse<PreferencesGetResponse, any>>;
    /**
     * @description Get the preferences object.
     *
     * @tags preferences
     * @name PreferencesGetPost
     * @request POST:/internal/preferences.get
     * @secure
     */
    preferencesGetPost: (data: PreferencesGetRequest, params?: RequestParams) => Promise<AxiosResponse<PreferencesGetResponse, any>>;
    /**
     * @description Lists the preferences defined for a particular object.
     *
     * @tags preferences
     * @name PreferencesList
     * @request GET:/internal/preferences.list
     * @secure
     */
    preferencesList: (query: PreferencesListParams, params?: RequestParams) => Promise<AxiosResponse<PreferencesListResponse, any>>;
    /**
     * @description Lists the preferences defined for a particular object.
     *
     * @tags preferences
     * @name PreferencesListPost
     * @request POST:/internal/preferences.list
     * @secure
     */
    preferencesListPost: (data: PreferencesListRequest, params?: RequestParams) => Promise<AxiosResponse<PreferencesListResponse, any>>;
    /**
     * @description Lists the preferences snap kit JSON for a particular object.
     *
     * @tags preferences
     * @name PreferencesSnapKitList
     * @request GET:/internal/preferences.snap-kit.list
     * @secure
     */
    preferencesSnapKitList: (query: PreferencesSnapKitListParams, params?: RequestParams) => Promise<AxiosResponse<PreferencesSnapKitListResponse, any>>;
    /**
     * @description Lists the preferences snap kit JSON for a particular object.
     *
     * @tags preferences
     * @name PreferencesSnapKitListPost
     * @request POST:/internal/preferences.snap-kit.list
     * @secure
     */
    preferencesSnapKitListPost: (data: PreferencesSnapKitListRequest, params?: RequestParams) => Promise<AxiosResponse<PreferencesSnapKitListResponse, any>>;
    /**
     * @description Updates the preference for a particular object.
     *
     * @tags preferences
     * @name PreferencesUpdate
     * @request POST:/internal/preferences.update
     * @secure
     */
    preferencesUpdate: (data: PreferencesUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<PreferencesUpdateResponse, any>>;
    /**
     * @description Counts the number of price book objects based on the given filters.
     *
     * @tags commerce
     * @name PriceBooksCount
     * @request GET:/internal/price-books.count
     * @secure
     */
    priceBooksCount: (query: PriceBooksCountParams, params?: RequestParams) => Promise<AxiosResponse<PriceBooksCountResponse, any>>;
    /**
     * @description Counts the number of price book objects based on the given filters.
     *
     * @tags commerce
     * @name PriceBooksCountPost
     * @request POST:/internal/price-books.count
     * @secure
     */
    priceBooksCountPost: (data: PriceBooksCountRequest, params?: RequestParams) => Promise<AxiosResponse<PriceBooksCountResponse, any>>;
    /**
     * @description Creates a price book object.
     *
     * @tags commerce
     * @name PriceBooksCreate
     * @request POST:/internal/price-books.create
     * @secure
     */
    priceBooksCreate: (data: PriceBooksCreateRequest, params?: RequestParams) => Promise<AxiosResponse<PriceBooksCreateResponse, any>>;
    /**
     * @description Deletes a price book object.
     *
     * @tags commerce
     * @name PriceBooksDelete
     * @request POST:/internal/price-books.delete
     * @secure
     */
    priceBooksDelete: (data: PriceBooksDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Gets a price book object.
     *
     * @tags commerce
     * @name PriceBooksGet
     * @request GET:/internal/price-books.get
     * @secure
     */
    priceBooksGet: (query: PriceBooksGetParams, params?: RequestParams) => Promise<AxiosResponse<PriceBooksGetResponse, any>>;
    /**
     * @description Gets a price book object.
     *
     * @tags commerce
     * @name PriceBooksGetPost
     * @request POST:/internal/price-books.get
     * @secure
     */
    priceBooksGetPost: (data: PriceBooksGetRequest, params?: RequestParams) => Promise<AxiosResponse<PriceBooksGetResponse, any>>;
    /**
     * @description Gets the price book objects based on the given filters.
     *
     * @tags commerce
     * @name PriceBooksList
     * @request GET:/internal/price-books.list
     * @secure
     */
    priceBooksList: (query: PriceBooksListParams, params?: RequestParams) => Promise<AxiosResponse<PriceBooksListResponse, any>>;
    /**
     * @description Gets the price book objects based on the given filters.
     *
     * @tags commerce
     * @name PriceBooksList
     * @request GET:/internal/price-books.list
     * @secure */
    priceBooksListPaginator(query: PriceBooksListParams, params?: RequestParams): AsyncGenerator<PriceBooksListResponse, void, unknown>;
    /**
     * @description Gets the price book objects based on the given filters.
     *
     * @tags commerce
     * @name PriceBooksListPost
     * @request POST:/internal/price-books.list
     * @secure
     */
    priceBooksListPost: (data: PriceBooksListRequest, params?: RequestParams) => Promise<AxiosResponse<PriceBooksListResponse, any>>;
    /**
     * @description Updates a price book object.
     *
     * @tags commerce
     * @name PriceBooksUpdate
     * @request POST:/internal/price-books.update
     * @secure
     */
    priceBooksUpdate: (data: PriceBooksUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<PriceBooksUpdateResponse, any>>;
    /**
     * @description Counts the number of pricing objects based on the given filters.
     *
     * @tags commerce
     * @name PricingsCount
     * @request GET:/internal/pricings.count
     * @secure
     */
    pricingsCount: (query: PricingsCountParams, params?: RequestParams) => Promise<AxiosResponse<PricingsCountResponse, any>>;
    /**
     * @description Counts the number of pricing objects based on the given filters.
     *
     * @tags commerce
     * @name PricingsCountPost
     * @request POST:/internal/pricings.count
     * @secure
     */
    pricingsCountPost: (data: PricingsCountRequest, params?: RequestParams) => Promise<AxiosResponse<PricingsCountResponse, any>>;
    /**
     * @description Creates a pricing object.
     *
     * @tags commerce
     * @name PricingsCreate
     * @request POST:/internal/pricings.create
     * @secure
     */
    pricingsCreate: (data: PricingsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<PricingsCreateResponse, any>>;
    /**
     * @description Deletes a pricing object.
     *
     * @tags commerce
     * @name PricingsDelete
     * @request POST:/internal/pricings.delete
     * @secure
     */
    pricingsDelete: (data: PricingsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Gets a pricing object.
     *
     * @tags commerce
     * @name PricingsGet
     * @request GET:/internal/pricings.get
     * @secure
     */
    pricingsGet: (query: PricingsGetParams, params?: RequestParams) => Promise<AxiosResponse<PricingsGetResponse, any>>;
    /**
     * @description Gets a pricing object.
     *
     * @tags commerce
     * @name PricingsGetPost
     * @request POST:/internal/pricings.get
     * @secure
     */
    pricingsGetPost: (data: PricingsGetRequest, params?: RequestParams) => Promise<AxiosResponse<PricingsGetResponse, any>>;
    /**
     * @description Gets the pricing objects based on the given filters.
     *
     * @tags commerce
     * @name PricingsList
     * @request GET:/internal/pricings.list
     * @secure
     */
    pricingsList: (query: PricingsListParams, params?: RequestParams) => Promise<AxiosResponse<PricingsListResponse, any>>;
    /**
     * @description Gets the pricing objects based on the given filters.
     *
     * @tags commerce
     * @name PricingsList
     * @request GET:/internal/pricings.list
     * @secure */
    pricingsListPaginator(query: PricingsListParams, params?: RequestParams): AsyncGenerator<PricingsListResponse, void, unknown>;
    /**
     * @description Gets the pricing objects based on the given filters.
     *
     * @tags commerce
     * @name PricingsListPost
     * @request POST:/internal/pricings.list
     * @secure
     */
    pricingsListPost: (data: PricingsListRequest, params?: RequestParams) => Promise<AxiosResponse<PricingsListResponse, any>>;
    /**
     * @description Updates a pricing object.
     *
     * @tags commerce
     * @name PricingsUpdate
     * @request POST:/internal/pricings.update
     * @secure
     */
    pricingsUpdate: (data: PricingsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<PricingsUpdateResponse, any>>;
    /**
     * @description DevRev Profile is a user's personal profile to promote themselves and connect with other professionals. This method returns a successful response if a profile is created with a unique email and display handle. If another login option with same email is used, the existing profile is updated. Otherwise, the method returns conflict response due to already existing profile. Also, the method requires authorization token obtained from DevRev platform through the login workflow.
     *
     * @tags profiles
     * @name ProfilesCreate
     * @request POST:/internal/profiles.create
     * @secure
     */
    profilesCreate: (data: ProfilesCreateRequest, params?: RequestParams) => Promise<AxiosResponse<ProfilesCreateResponse, any>>;
    /**
     * @description Gets the profile's public information of a user on the DevRev platform using display-handle. The method returns not-found response if the profile's visibility is private or if it does not exist. Also note that display-handle can also be changed by the user.
     *
     * @tags profiles
     * @name ProfilesGetByHandle
     * @request GET:/internal/profiles.get-by-handle
     */
    profilesGetByHandle: (query: ProfilesGetByHandleParams, params?: RequestParams) => Promise<AxiosResponse<ProfilesGetByHandleResponse, any>>;
    /**
     * @description Gets the profile's public information of a user on the DevRev platform using display-handle. The method returns not-found response if the profile's visibility is private or if it does not exist. Also note that display-handle can also be changed by the user.
     *
     * @tags profiles
     * @name ProfilesGetByHandlePost
     * @request POST:/internal/profiles.get-by-handle
     * @secure
     */
    profilesGetByHandlePost: (data: ProfilesGetByHandleRequest, params?: RequestParams) => Promise<AxiosResponse<ProfilesGetByHandleResponse, any>>;
    /**
     * @description Checks to ensure that the desired display handle is not already in use. This does not secure the handle, so it is possible that the check would be successful and a subsequent call to create a profile with the checked display handle might fail due to a race condition.
     *
     * @tags profiles
     * @name ProfilesIsDisplayHandleAvailable
     * @request GET:/internal/profiles.is-display-handle-available
     * @secure
     */
    profilesIsDisplayHandleAvailable: (query: ProfilesIsDisplayHandleAvailableParams, params?: RequestParams) => Promise<AxiosResponse<ProfilesIsDisplayHandleAvailableResponse, any>>;
    /**
     * @description Checks to ensure that the desired display handle is not already in use. This does not secure the handle, so it is possible that the check would be successful and a subsequent call to create a profile with the checked display handle might fail due to a race condition.
     *
     * @tags profiles
     * @name ProfilesIsDisplayHandleAvailablePost
     * @request POST:/internal/profiles.is-display-handle-available
     * @secure
     */
    profilesIsDisplayHandleAvailablePost: (data: ProfilesIsDisplayHandleAvailableRequest, params?: RequestParams) => Promise<AxiosResponse<ProfilesIsDisplayHandleAvailableResponse, any>>;
    /**
     * @description Gets the currently logged in user's profile information.
     *
     * @tags profiles
     * @name ProfilesSelf
     * @request GET:/internal/profiles.self
     * @secure
     */
    profilesSelf: (params?: RequestParams) => Promise<AxiosResponse<ProfilesSelfResponse, any>>;
    /**
     * @description Gets the currently logged in user's profile information.
     *
     * @tags profiles
     * @name ProfilesSelfPost
     * @request POST:/internal/profiles.self
     * @secure
     */
    profilesSelfPost: (data: ProfilesSelfRequest, params?: RequestParams) => Promise<AxiosResponse<ProfilesSelfResponse, any>>;
    /**
     * @description Deletes the currently logged in user profile from the DevRev platform.
     *
     * @tags profiles
     * @name ProfilesSelfDelete
     * @request POST:/internal/profiles.self.delete
     * @secure
     */
    profilesSelfDelete: (data: ProfilesSelfDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Updates the currently logged-in user's profile information. Beware, the links to your profile page will return a not-found error on changing your display-handle. Also, your old display-handle becomes available for anyone else to claim.
     *
     * @tags profiles
     * @name ProfilesSelfUpdate
     * @request POST:/internal/profiles.self.update
     * @secure
     */
    profilesSelfUpdate: (data: ProfilesSelfUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<ProfilesSelfUpdateResponse, any>>;
    /**
     * @description Registers a push device.
     *
     * @tags notifications
     * @name PushDevicesRegister
     * @request POST:/internal/push-devices.register
     * @secure
     */
    pushDevicesRegister: (data: PushDevicesRegisterRequest, params?: RequestParams) => Promise<AxiosResponse<PushDevicesRegisterResponse, any>>;
    /**
     * @description Unregisters a push device.
     *
     * @tags notifications
     * @name PushDevicesUnregister
     * @request POST:/internal/push-devices.unregister
     * @secure
     */
    pushDevicesUnregister: (data: PushDevicesUnregisterRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Updates the timestamp on a device.
     *
     * @tags notifications
     * @name PushDevicesUpdate
     * @request POST:/internal/push-devices.update
     * @secure
     */
    pushDevicesUpdate: (data: PushDevicesUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<PushDevicesUpdateResponse, any>>;
    /**
     * @description Creates a question-answer.
     *
     * @tags question-answers
     * @name CreateQuestionAnswer
     * @request POST:/internal/question-answers.create
     * @secure
     */
    createQuestionAnswer: (data: QuestionAnswersCreateRequest, params?: RequestParams) => Promise<AxiosResponse<QuestionAnswersCreateResponse, any>>;
    /**
     * @description Deletes a question-answer.
     *
     * @tags question-answers
     * @name DeleteQuestionAnswer
     * @request POST:/internal/question-answers.delete
     * @secure
     */
    deleteQuestionAnswer: (data: QuestionAnswersDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description ### Owner: dd@devrev.ai ### Gets a question-answer.
     *
     * @tags question-answers
     * @name GetQuestionAnswer
     * @request GET:/internal/question-answers.get
     * @secure
     */
    getQuestionAnswer: (query: GetQuestionAnswerParams, params?: RequestParams) => Promise<AxiosResponse<QuestionAnswersGetResponse, any>>;
    /**
     * @description Gets a question-answer.
     *
     * @tags question-answers
     * @name GetQuestionAnswerPost
     * @request POST:/internal/question-answers.get
     * @secure
     */
    getQuestionAnswerPost: (data: QuestionAnswersGetRequest, params?: RequestParams) => Promise<AxiosResponse<QuestionAnswersGetResponse, any>>;
    /**
     * @description ### Owner: dd@devrev.ai ### Lists a collection of question-answers.
     *
     * @tags question-answers
     * @name ListQuestionAnswers
     * @request GET:/internal/question-answers.list
     * @secure
     */
    listQuestionAnswers: (query: ListQuestionAnswersParams, params?: RequestParams) => Promise<AxiosResponse<QuestionAnswersListResponse, any>>;
    /**
     * @description ### Owner: dd@devrev.ai ### Lists a collection of question-answers.
     *
     * @tags question-answers
     * @name ListQuestionAnswers
     * @request GET:/internal/question-answers.list
     * @secure */
    listQuestionAnswersPaginator(query: ListQuestionAnswersParams, params?: RequestParams): AsyncGenerator<QuestionAnswersListResponse, void, unknown>;
    /**
     * @description Lists a collection of question-answers.
     *
     * @tags question-answers
     * @name ListQuestionAnswersPost
     * @request POST:/internal/question-answers.list
     * @secure
     */
    listQuestionAnswersPost: (data: QuestionAnswersListRequest, params?: RequestParams) => Promise<AxiosResponse<QuestionAnswersListResponse, any>>;
    /**
     * @description Updates a question-answer.
     *
     * @tags question-answers
     * @name UpdateQuestionAnswer
     * @request POST:/internal/question-answers.update
     * @secure
     */
    updateQuestionAnswer: (data: QuestionAnswersUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<QuestionAnswersUpdateResponse, any>>;
    /**
     * @description Clones a quote object and returns the cloned object.
     *
     * @tags commerce
     * @name QuotesClone
     * @request POST:/internal/quotes.clone
     * @secure
     */
    quotesClone: (data: QuotesCloneRequest, params?: RequestParams) => Promise<AxiosResponse<QuotesCloneResponse, any>>;
    /**
     * @description Counts the number of quote objects based on the given filters.
     *
     * @tags commerce
     * @name QuotesCount
     * @request GET:/internal/quotes.count
     * @secure
     */
    quotesCount: (query: QuotesCountParams, params?: RequestParams) => Promise<AxiosResponse<QuotesCountResponse, any>>;
    /**
     * @description Counts the number of quote objects based on the given filters.
     *
     * @tags commerce
     * @name QuotesCountPost
     * @request POST:/internal/quotes.count
     * @secure
     */
    quotesCountPost: (data: QuotesCountRequest, params?: RequestParams) => Promise<AxiosResponse<QuotesCountResponse, any>>;
    /**
     * @description Creates a quote object.
     *
     * @tags commerce
     * @name QuotesCreate
     * @request POST:/internal/quotes.create
     * @secure
     */
    quotesCreate: (data: QuotesCreateRequest, params?: RequestParams) => Promise<AxiosResponse<QuotesCreateResponse, any>>;
    /**
     * @description Deletes a quote object.
     *
     * @tags commerce
     * @name QuotesDelete
     * @request POST:/internal/quotes.delete
     * @secure
     */
    quotesDelete: (data: QuotesDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Generates a quote pdf.
     *
     * @tags commerce
     * @name QuotesGeneratePdf
     * @request POST:/internal/quotes.generate-pdf
     * @secure
     */
    quotesGeneratePdf: (data: QuotesGeneratePdfRequest, params?: RequestParams) => Promise<AxiosResponse<QuotesGeneratePdfResponse, any>>;
    /**
     * @description Gets a quote object.
     *
     * @tags commerce
     * @name QuotesGet
     * @request GET:/internal/quotes.get
     * @secure
     */
    quotesGet: (query: QuotesGetParams, params?: RequestParams) => Promise<AxiosResponse<QuotesGetResponse, any>>;
    /**
     * @description Gets a quote object.
     *
     * @tags commerce
     * @name QuotesGetPost
     * @request POST:/internal/quotes.get
     * @secure
     */
    quotesGetPost: (data: QuotesGetRequest, params?: RequestParams) => Promise<AxiosResponse<QuotesGetResponse, any>>;
    /**
     * @description Gets the quote objects based on the given filters.
     *
     * @tags commerce
     * @name QuotesList
     * @request GET:/internal/quotes.list
     * @secure
     */
    quotesList: (query: QuotesListParams, params?: RequestParams) => Promise<AxiosResponse<QuotesListResponse, any>>;
    /**
     * @description Gets the quote objects based on the given filters.
     *
     * @tags commerce
     * @name QuotesList
     * @request GET:/internal/quotes.list
     * @secure */
    quotesListPaginator(query: QuotesListParams, params?: RequestParams): AsyncGenerator<QuotesListResponse, void, unknown>;
    /**
     * @description Gets the quote objects based on the given filters.
     *
     * @tags commerce
     * @name QuotesListPost
     * @request POST:/internal/quotes.list
     * @secure
     */
    quotesListPost: (data: QuotesListRequest, params?: RequestParams) => Promise<AxiosResponse<QuotesListResponse, any>>;
    /**
     * @description Updates a quote object.
     *
     * @tags commerce
     * @name QuotesUpdate
     * @request POST:/internal/quotes.update
     * @secure
     */
    quotesUpdate: (data: QuotesUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<QuotesUpdateResponse, any>>;
    /**
     * @description List the reactors for an object.
     *
     * @tags timeline-entries, works
     * @name ReactionsList
     * @request GET:/internal/reactions.list
     * @secure
     */
    reactionsList: (query: ReactionsListParams, params?: RequestParams) => Promise<AxiosResponse<ReactionsListResponse, any>>;
    /**
     * @description List the reactors for an object.
     *
     * @tags timeline-entries, works
     * @name ReactionsList
     * @request GET:/internal/reactions.list
     * @secure */
    reactionsListPaginator(query: ReactionsListParams, params?: RequestParams): AsyncGenerator<ReactionsListResponse, void, unknown>;
    /**
     * @description List the reactors for an object.
     *
     * @tags timeline-entries, works
     * @name ReactionsListPost
     * @request POST:/internal/reactions.list
     * @secure
     */
    reactionsListPost: (data: ReactionsListRequest, params?: RequestParams) => Promise<AxiosResponse<ReactionsListResponse, any>>;
    /**
     * @description Updates a reaction to an object.
     *
     * @tags timeline-entries, works
     * @name ReactionsUpdate
     * @request POST:/internal/reactions.update
     * @secure
     */
    reactionsUpdate: (data: ReactionsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Lists suggestions for given input fields.
     *
     * @tags recommendations
     * @name AutoSuggest
     * @request POST:/internal/recommendations.autosuggest
     * @secure
     */
    autoSuggest: (data: AutoSuggestRequest, params?: RequestParams) => Promise<AxiosResponse<AutoSuggestResponse, any>>;
    /**
     * @description Returns a completion for the chat messages.
     *
     * @tags recommendations
     * @name ChatComplete
     * @request POST:/internal/recommendations.chat.complete
     * @secure
     */
    chatComplete: (data: ChatCompleteRequest, params?: RequestParams) => Promise<AxiosResponse<ChatCompleteResponse, any>>;
    /**
     * @description Classifies a given inquiry as spam or not.
     *
     * @name ClassifyInquiry
     * @request POST:/internal/recommendations.classify-inquiry
     * @secure
     */
    classifyInquiry: (data: ClassifyInquiryRequest, params?: RequestParams) => Promise<AxiosResponse<ClassifyInquiryResponse, any>>;
    /**
     * @description Evaluates the sentiment of a given object.
     *
     * @tags recommendations
     * @name EvaluateSentiment
     * @request POST:/internal/recommendations.evaluate.sentiment
     * @secure
     */
    evaluateSentiment: (data: EvaluateSentimentRequest, params?: RequestParams) => Promise<AxiosResponse<EvaluateSentimentResponse, any>>;
    /**
     * @description Gets a reply for a user query.
     *
     * @tags recommendations
     * @name GetReply
     * @request POST:/internal/recommendations.get-reply
     * @secure
     */
    getReply: (data: GetReplyRequest, params?: RequestParams) => Promise<AxiosResponse<GetReplyResponse, any>>;
    /**
     * @description Lists link target recommendations.
     *
     * @tags recommendations
     * @name LinkTarget
     * @request POST:/internal/recommendations.link.target
     * @secure
     */
    linkTarget: (data: LinkTargetRequest, params?: RequestParams) => Promise<AxiosResponse<LinkTargetResponse, any>>;
    /**
     * @description Suggest parts that can be attributed to a given object.
     *
     * @tags recommendations
     * @name PartsSuggest
     * @request POST:/internal/recommendations.parts.suggest
     * @secure
     */
    partsSuggest: (data: PartsSuggestRequest, params?: RequestParams) => Promise<AxiosResponse<PartsSuggestResponse, any>>;
    /**
     * @description Lists personalized work items for a user.
     *
     * @tags recommendations
     * @name PersonalizedList
     * @request POST:/internal/recommendations.personalized.list
     * @secure
     */
    personalizedList: (data: PersonalizedListRequest, params?: RequestParams) => Promise<AxiosResponse<PersonalizedListResponse, any>>;
    /**
     * @description Returns relevant context for a given query.
     *
     * @tags recommendations
     * @name GetRelevantContext
     * @request GET:/internal/recommendations.relevant-context
     * @secure
     */
    getRelevantContext: (query: GetRelevantContextParams, params?: RequestParams) => Promise<AxiosResponse<RelevantContextResponse, any>>;
    /**
     * @description Returns relevant context for a given query.
     *
     * @tags recommendations
     * @name GetRelevantContextPost
     * @request POST:/internal/recommendations.relevant-context
     * @secure
     */
    getRelevantContextPost: (data: RelevantContextRequest, params?: RequestParams) => Promise<AxiosResponse<RelevantContextResponse, any>>;
    /**
     * @description Returns resolved entities for a given text.
     *
     * @tags recommendations
     * @name ResolveEntities
     * @request POST:/internal/recommendations.resolve-entities
     * @secure
     */
    resolveEntities: (data: ResolveEntitiesRequest, params?: RequestParams) => Promise<AxiosResponse<ResolveEntitiesResponse, any>>;
    /**
     * @description Returns a list of completions for the given query.
     *
     * @tags recommendations
     * @name SearchAutoComplete
     * @request POST:/internal/recommendations.search.complete
     * @secure
     */
    searchAutoComplete: (data: SearchAutoCompleteRequest, params?: RequestParams) => Promise<AxiosResponse<SearchAutoCompleteResponse, any>>;
    /**
     * @description Returns similar objects for a given object.
     *
     * @tags recommendations
     * @name GetSimilarObjects
     * @request GET:/internal/recommendations.suggest-objects
     * @secure
     */
    getSimilarObjects: (query: GetSimilarObjectsParams, params?: RequestParams) => Promise<AxiosResponse<SuggestObjectsResponse, any>>;
    /**
     * @description Returns similar objects for a given object.
     *
     * @tags recommendations
     * @name GetSimilarObjectsPost
     * @request POST:/internal/recommendations.suggest-objects
     * @secure
     */
    getSimilarObjectsPost: (data: SuggestObjectsRequest, params?: RequestParams) => Promise<AxiosResponse<SuggestObjectsResponse, any>>;
    /**
     * @description Typeahead recommendation.
     *
     * @tags recommendations
     * @name TypeAhead
     * @request POST:/internal/recommendations.typeahead
     * @secure
     */
    typeAhead: (data: TypeAheadRequest, params?: RequestParams) => Promise<AxiosResponse<TypeAheadResponse, any>>;
    /**
     * @description Lists similar work items.
     *
     * @tags recommendations
     * @name WorkDeflect
     * @request POST:/internal/recommendations.works.deflect
     * @secure
     */
    workDeflect: (data: WorkDeflectRequest, params?: RequestParams) => Promise<AxiosResponse<WorkDeflectResponse, any>>;
    /**
     * @description Creates a record template object.
     *
     * @tags record-templates
     * @name RecordTemplateCreate
     * @request POST:/internal/record-templates.create
     * @secure
     */
    recordTemplateCreate: (data: RecordTemplateCreateRequest, params?: RequestParams) => Promise<AxiosResponse<RecordTemplateCreateResponse, any>>;
    /**
     * @description Deletes a record template object.
     *
     * @tags record-templates
     * @name RecordTemplateDelete
     * @request POST:/internal/record-templates.delete
     * @secure
     */
    recordTemplateDelete: (data: RecordTemplateDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: altaf.ahmad@devrev.ai ### Gets a record template object.
     *
     * @tags record-templates
     * @name RecordTemplateGet
     * @request GET:/internal/record-templates.get
     * @secure
     */
    recordTemplateGet: (query: RecordTemplateGetParams, params?: RequestParams) => Promise<AxiosResponse<RecordTemplateGetResponse, any>>;
    /**
     * @description Gets a record template object.
     *
     * @tags record-templates
     * @name RecordTemplateGetPost
     * @request POST:/internal/record-templates.get
     * @secure
     */
    recordTemplateGetPost: (data: RecordTemplateGetRequest, params?: RequestParams) => Promise<AxiosResponse<RecordTemplateGetResponse, any>>;
    /**
     * @description ### Owner: altaf.ahmad@devrev.ai ### Lists record template objects.
     *
     * @tags record-templates
     * @name RecordTemplateList
     * @request GET:/internal/record-templates.list
     * @secure
     */
    recordTemplateList: (query: RecordTemplateListParams, params?: RequestParams) => Promise<AxiosResponse<RecordTemplateListResponse, any>>;
    /**
     * @description ### Owner: altaf.ahmad@devrev.ai ### Lists record template objects.
     *
     * @tags record-templates
     * @name RecordTemplateList
     * @request GET:/internal/record-templates.list
     * @secure */
    recordTemplateListPaginator(query: RecordTemplateListParams, params?: RequestParams): AsyncGenerator<RecordTemplateListResponse, void, unknown>;
    /**
     * @description Lists record template objects.
     *
     * @tags record-templates
     * @name RecordTemplateListPost
     * @request POST:/internal/record-templates.list
     * @secure
     */
    recordTemplateListPost: (data: RecordTemplateListRequest, params?: RequestParams) => Promise<AxiosResponse<RecordTemplateListResponse, any>>;
    /**
     * @description Updates a record template object.
     *
     * @tags record-templates
     * @name RecordTemplateUpdate
     * @request POST:/internal/record-templates.update
     * @secure
     */
    recordTemplateUpdate: (data: RecordTemplateUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<RecordTemplateUpdateResponse, any>>;
    /**
     * @description Generates release notes for a given part in date range
     *
     * @name GenerateReleaseNotes
     * @request POST:/internal/release-notes.generate
     * @secure
     */
    generateReleaseNotes: (data: GenerateReleaseNotesRequest, params?: RequestParams) => Promise<AxiosResponse<GenerateReleaseNotesResponse, any>>;
    /**
     * @description Gets a Rev org's commerce details.
     *
     * @tags commerce
     * @name RevOrgsCommerceDetailsGet
     * @request GET:/internal/rev-orgs.commerce-details.get
     * @secure
     */
    revOrgsCommerceDetailsGet: (query: RevOrgsCommerceDetailsGetParams, params?: RequestParams) => Promise<AxiosResponse<RevOrgsCommerceDetailsGetResponse, any>>;
    /**
     * @description Gets a Rev org's commerce details.
     *
     * @tags commerce
     * @name RevOrgsCommerceDetailsGetPost
     * @request POST:/internal/rev-orgs.commerce-details.get
     * @secure
     */
    revOrgsCommerceDetailsGetPost: (data: RevOrgsCommerceDetailsGetRequest, params?: RequestParams) => Promise<AxiosResponse<RevOrgsCommerceDetailsGetResponse, any>>;
    /**
     * @description List Rev org's commerce details.
     *
     * @tags commerce
     * @name RevOrgsCommerceDetailsList
     * @request GET:/internal/rev-orgs.commerce-details.list
     * @secure
     */
    revOrgsCommerceDetailsList: (query: RevOrgsCommerceDetailsListParams, params?: RequestParams) => Promise<AxiosResponse<RevOrgsCommerceDetailsListResponse, any>>;
    /**
     * @description List Rev org's commerce details.
     *
     * @tags commerce
     * @name RevOrgsCommerceDetailsList
     * @request GET:/internal/rev-orgs.commerce-details.list
     * @secure */
    revOrgsCommerceDetailsListPaginator(query: RevOrgsCommerceDetailsListParams, params?: RequestParams): AsyncGenerator<RevOrgsCommerceDetailsListResponse, void, unknown>;
    /**
     * @description List Rev org's commerce details.
     *
     * @tags commerce
     * @name RevOrgsCommerceDetailsListPost
     * @request POST:/internal/rev-orgs.commerce-details.list
     * @secure
     */
    revOrgsCommerceDetailsListPost: (data: RevOrgsCommerceDetailsListRequest, params?: RequestParams) => Promise<AxiosResponse<RevOrgsCommerceDetailsListResponse, any>>;
    /**
     * @description Updates a Rev org's commerce details.
     *
     * @tags commerce
     * @name RevOrgsCommerceDetailsUpdate
     * @request POST:/internal/rev-orgs.commerce-details.update
     * @secure
     */
    revOrgsCommerceDetailsUpdate: (data: RevOrgsCommerceDetailsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<RevOrgsCommerceDetailsUpdateResponse, any>>;
    /**
     * @description ### Owner: akanksha.deswal@devrev.ai ### Gets the count of Rev organizations matching given filter.
     *
     * @tags rev-orgs
     * @name RevOrgsCount
     * @request GET:/internal/rev-orgs.count
     * @secure
     */
    revOrgsCount: (query: RevOrgsCountParams, params?: RequestParams) => Promise<AxiosResponse<RevOrgsCountResponse, any>>;
    /**
     * @description Gets the count of Rev organizations matching given filter.
     *
     * @tags rev-orgs
     * @name RevOrgsCountPost
     * @request POST:/internal/rev-orgs.count
     * @secure
     */
    revOrgsCountPost: (data: RevOrgsCountRequest, params?: RequestParams) => Promise<AxiosResponse<RevOrgsCountResponse, any>>;
    /**
     * @description Creates a Rev organization in the authenticated user's Dev organization.
     *
     * @tags rev-orgs
     * @name RevOrgsCreate
     * @request POST:/internal/rev-orgs.create
     * @secure
     */
    revOrgsCreate: (data: RevOrgsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<RevOrgsCreateResponse, any>>;
    /**
     * @description Creates bulk Rev organizations for the authenticated user's Dev organization.
     *
     * @tags rev-orgs
     * @name RevOrgsBulkCreate
     * @request POST:/internal/rev-orgs.create.bulk.csv
     * @secure
     */
    revOrgsBulkCreate: (data: RevOrgsBulkCreateRequest, params?: RequestParams) => Promise<AxiosResponse<RevOrgsBulkCreateResponse, any>>;
    /**
     * @description Deletes the Rev organization.
     *
     * @tags rev-orgs
     * @name RevOrgsDelete
     * @request POST:/internal/rev-orgs.delete
     * @secure
     */
    revOrgsDelete: (data: RevOrgsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Checks if a Rev organization can be deleted.
     *
     * @tags rev-orgs
     * @name RevOrgsDeleteValidate
     * @request POST:/internal/rev-orgs.delete.validate
     * @secure
     */
    revOrgsDeleteValidate: (data: RevOrgsDeleteValidateRequest, params?: RequestParams) => Promise<AxiosResponse<RevOrgsDeleteValidateResponse, any>>;
    /**
     * @description Exports a list of revorgs.
     *
     * @tags rev-orgs
     * @name RevOrgsExport
     * @request POST:/internal/rev-orgs.export
     * @secure
     */
    revOrgsExport: (data: RevOrgsExportRequest, params?: RequestParams) => Promise<AxiosResponse<RevOrgsExportResponse, any>>;
    /**
     * @description ### Owner: akanksha.deswal@devrev.ai ### Retrieves the Rev organization's information.
     *
     * @tags rev-orgs
     * @name RevOrgsGet
     * @request GET:/internal/rev-orgs.get
     * @secure
     */
    revOrgsGet: (query: RevOrgsGetParams, params?: RequestParams) => Promise<AxiosResponse<RevOrgsGetResponse, any>>;
    /**
     * @description Retrieves the Rev organization's information.
     *
     * @tags rev-orgs
     * @name RevOrgsGetPost
     * @request POST:/internal/rev-orgs.get
     * @secure
     */
    revOrgsGetPost: (data: RevOrgsGetRequest, params?: RequestParams) => Promise<AxiosResponse<RevOrgsGetResponse, any>>;
    /**
     * @description ### Owner: akanksha.deswal@devrev.ai ### Lists collections of Rev organizations by groups.
     *
     * @tags rev-orgs
     * @name RevOrgsGroup
     * @request GET:/internal/rev-orgs.group
     * @secure
     */
    revOrgsGroup: (query: RevOrgsGroupParams, params?: RequestParams) => Promise<AxiosResponse<RevOrgsGroupResponse, any>>;
    /**
     * @description ### Owner: akanksha.deswal@devrev.ai ### Lists collections of Rev organizations by groups.
     *
     * @tags rev-orgs
     * @name RevOrgsGroup
     * @request GET:/internal/rev-orgs.group
     * @secure */
    revOrgsGroupPaginator(query: RevOrgsGroupParams, params?: RequestParams): AsyncGenerator<RevOrgsGroupResponse, void, unknown>;
    /**
     * @description Lists collections of Rev organizations by groups.
     *
     * @tags rev-orgs
     * @name RevOrgsGroupPost
     * @request POST:/internal/rev-orgs.group
     * @secure
     */
    revOrgsGroupPost: (data: RevOrgsGroupRequest, params?: RequestParams) => Promise<AxiosResponse<RevOrgsGroupResponse, any>>;
    /**
     * @description ### Owner: akanksha.deswal@devrev.ai ### Gets the list of Rev organizations' information belonging to the authenticated user's Dev Organization which the user is also authorized to access.
     *
     * @tags rev-orgs
     * @name RevOrgsList
     * @request GET:/internal/rev-orgs.list
     * @secure
     */
    revOrgsList: (query: RevOrgsListParams, params?: RequestParams) => Promise<AxiosResponse<RevOrgsListResponse, any>>;
    /**
     * @description ### Owner: akanksha.deswal@devrev.ai ### Gets the list of Rev organizations' information belonging to the authenticated user's Dev Organization which the user is also authorized to access.
     *
     * @tags rev-orgs
     * @name RevOrgsList
     * @request GET:/internal/rev-orgs.list
     * @secure */
    revOrgsListPaginator(query: RevOrgsListParams, params?: RequestParams): AsyncGenerator<RevOrgsListResponse, void, unknown>;
    /**
     * @description Gets the list of Rev organizations' information belonging to the authenticated user's Dev Organization which the user is also authorized to access.
     *
     * @tags rev-orgs
     * @name RevOrgsListPost
     * @request POST:/internal/rev-orgs.list
     * @secure
     */
    revOrgsListPost: (data: RevOrgsListRequest, params?: RequestParams) => Promise<AxiosResponse<RevOrgsListResponse, any>>;
    /**
     * @description Merges the identity of a secondary Rev org with the primary Rev org.Secondary Rev org will be deleted.All objects - issues, tickets, conversations, rev users etc. referencing the secondary Rev org will be transferred to the primary Rev org.
     *
     * @tags rev-orgs
     * @name RevOrgsMerge
     * @request POST:/internal/rev-orgs.merge
     * @secure
     */
    revOrgsMerge: (data: RevOrgsMergeRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: akanksha.deswal@devrev.ai ### Fetches sample csv for bulk import.
     *
     * @tags rev-orgs
     * @name GetRevOrgSampleCsv
     * @request GET:/internal/rev-orgs.sample-csv.get
     * @secure
     */
    getRevOrgSampleCsv: (params?: RequestParams) => Promise<AxiosResponse<GetRevOrgSampleCsvResponse, any>>;
    /**
     * @description Fetches sample csv for bulk import.
     *
     * @tags rev-orgs
     * @name GetRevOrgSampleCsvPost
     * @request POST:/internal/rev-orgs.sample-csv.get
     * @secure
     */
    getRevOrgSampleCsvPost: (data: GetRevOrgSampleCsvRequest, params?: RequestParams) => Promise<AxiosResponse<GetRevOrgSampleCsvResponse, any>>;
    /**
     * @description Updates the Rev organization's information.
     *
     * @tags rev-orgs
     * @name RevOrgsUpdate
     * @request POST:/internal/rev-orgs.update
     * @secure
     */
    revOrgsUpdate: (data: RevOrgsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<RevOrgsUpdateResponse, any>>;
    /**
     * @description Upgrades all Rev Orgs schema.
     *
     * @tags accounts
     * @name RevOrgsUpgrade
     * @request POST:/internal/rev-orgs.upgrade
     * @secure
     */
    revOrgsUpgrade: (data: RevOrgsUpgradeRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Discover Rev Part Hierarchy for a given DevOrg
     *
     * @tags parts
     * @name DiscoverRevParts
     * @request POST:/internal/rev-parts.discover
     * @secure
     */
    discoverRevParts: (data: DiscoverRevPartsRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Gets the list of Rev users' information across all Rev organizations in user's Dev organization.
     *
     * @tags rev-users
     * @name RevUsersListAll
     * @request GET:/internal/rev-users.all.list
     * @secure
     */
    revUsersListAll: (query: RevUsersListAllParams, params?: RequestParams) => Promise<AxiosResponse<RevUsersListAllResponse, any>>;
    /**
     * @description Gets the list of Rev users' information across all Rev organizations in user's Dev organization.
     *
     * @tags rev-users
     * @name RevUsersListAll
     * @request GET:/internal/rev-users.all.list
     * @secure */
    revUsersListAllPaginator(query: RevUsersListAllParams, params?: RequestParams): AsyncGenerator<RevUsersListAllResponse, void, unknown>;
    /**
     * @description Gets the list of Rev users' information across all Rev organizations in user's Dev organization.
     *
     * @tags rev-users
     * @name RevUsersListAllPost
     * @request POST:/internal/rev-users.all.list
     * @secure
     */
    revUsersListAllPost: (data: RevUsersListAllRequest, params?: RequestParams) => Promise<AxiosResponse<RevUsersListAllResponse, any>>;
    /**
     * @description ### Owner: akanksha.deswal@devrev.ai ### Gets the count of Rev users matching given filter.
     *
     * @tags rev-users
     * @name RevUsersCount
     * @request GET:/internal/rev-users.count
     * @secure
     */
    revUsersCount: (query: RevUsersCountParams, params?: RequestParams) => Promise<AxiosResponse<RevUsersCountResponse, any>>;
    /**
     * @description Gets the count of Rev users matching given filter.
     *
     * @tags rev-users
     * @name RevUsersCountPost
     * @request POST:/internal/rev-users.count
     * @secure
     */
    revUsersCountPost: (data: RevUsersCountRequest, params?: RequestParams) => Promise<AxiosResponse<RevUsersCountResponse, any>>;
    /**
     * @description Creates a Rev user for a Rev organization. Rev user can be a customer or a lead of an organization.
     *
     * @tags rev-users
     * @name RevUsersCreate
     * @request POST:/internal/rev-users.create
     * @secure
     */
    revUsersCreate: (data: RevUsersCreateRequest, params?: RequestParams) => Promise<AxiosResponse<RevUsersCreateResponse, any>>;
    /**
     * @description Creates bulk Rev users.
     *
     * @tags rev-users
     * @name RevUsersBulkCreate
     * @request POST:/internal/rev-users.create.bulk.csv
     * @secure
     */
    revUsersBulkCreate: (data: RevUsersBulkCreateRequest, params?: RequestParams) => Promise<AxiosResponse<RevUsersBulkCreateResponse, any>>;
    /**
     * @description Deletes a Rev user.
     *
     * @tags rev-users
     * @name RevUsersDelete
     * @request POST:/internal/rev-users.delete
     * @secure
     */
    revUsersDelete: (data: RevUsersDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Exports a list of rev-users.
     *
     * @tags rev-users
     * @name RevUsersExport
     * @request POST:/internal/rev-users.export
     * @secure
     */
    revUsersExport: (data: RevUsersExportRequest, params?: RequestParams) => Promise<AxiosResponse<RevUsersExportResponse, any>>;
    /**
     * @description Returns the Rev user of a Rev organization by its ID.
     *
     * @tags rev-users
     * @name RevUsersGet
     * @request GET:/internal/rev-users.get
     * @secure
     */
    revUsersGet: (query: RevUsersGetParams, params?: RequestParams) => Promise<AxiosResponse<RevUsersGetResponse, any>>;
    /**
     * @description Returns the Rev user of a Rev organization by its ID.
     *
     * @tags rev-users
     * @name RevUsersGetPost
     * @request POST:/internal/rev-users.get
     * @secure
     */
    revUsersGetPost: (data: RevUsersGetRequest, params?: RequestParams) => Promise<AxiosResponse<RevUsersGetResponse, any>>;
    /**
     * @description Lists collections of Rev users by groups.
     *
     * @tags rev-users
     * @name RevUsersGroup
     * @request GET:/internal/rev-users.group
     * @secure
     */
    revUsersGroup: (query: RevUsersGroupParams, params?: RequestParams) => Promise<AxiosResponse<RevUsersGroupResponse, any>>;
    /**
     * @description Lists collections of Rev users by groups.
     *
     * @tags rev-users
     * @name RevUsersGroup
     * @request GET:/internal/rev-users.group
     * @secure */
    revUsersGroupPaginator(query: RevUsersGroupParams, params?: RequestParams): AsyncGenerator<RevUsersGroupResponse, void, unknown>;
    /**
     * @description Lists collections of Rev users by groups.
     *
     * @tags rev-users
     * @name RevUsersGroupPost
     * @request POST:/internal/rev-users.group
     * @secure
     */
    revUsersGroupPost: (data: RevUsersGroupRequest, params?: RequestParams) => Promise<AxiosResponse<RevUsersGroupResponse, any>>;
    /**
     * @description Returns a Rev session token for leads.
     *
     * @tags rev-users
     * @name RevUsersIdentify
     * @request POST:/internal/rev-users.identify
     * @secure
     */
    revUsersIdentify: (data: RevUsersIdentifyRequest, params?: RequestParams) => Promise<AxiosResponse<RevUsersIdentifyResponse, any>>;
    /**
     * @description Links a rev user to a rev org.
     *
     * @tags rev-users
     * @name LinkRevUserToRevOrg
     * @request POST:/internal/rev-users.link
     * @secure
     */
    linkRevUserToRevOrg: (data: LinkRevUserToRevOrgRequest, params?: RequestParams) => Promise<AxiosResponse<LinkRevUserToRevOrgResponse, any>>;
    /**
     * @description Returns a list of all Rev Users belonging to the authenticated user's Dev Organization.
     *
     * @tags rev-users
     * @name RevUsersList
     * @request GET:/internal/rev-users.list
     * @secure
     */
    revUsersList: (query: RevUsersListParams, params?: RequestParams) => Promise<AxiosResponse<RevUsersListResponse, any>>;
    /**
     * @description Returns a list of all Rev Users belonging to the authenticated user's Dev Organization.
     *
     * @tags rev-users
     * @name RevUsersList
     * @request GET:/internal/rev-users.list
     * @secure */
    revUsersListPaginator(query: RevUsersListParams, params?: RequestParams): AsyncGenerator<RevUsersListResponse, void, unknown>;
    /**
     * @description Returns a list of all Rev Users belonging to the authenticated user's Dev Organization.
     *
     * @tags rev-users
     * @name RevUsersListPost
     * @request POST:/internal/rev-users.list
     * @secure
     */
    revUsersListPost: (data: RevUsersListRequest, params?: RequestParams) => Promise<AxiosResponse<RevUsersListResponse, any>>;
    /**
     * @description Merges the identity of a secondary Rev user with the primary Rev user.The account of the secondary Rev user will be deleted.All objects - issues, tickets, conversations etc. referencing the secondary Rev user will be transferred to the primary Rev user.
     *
     * @tags rev-users
     * @name RevUsersMerge
     * @request POST:/internal/rev-users.merge
     * @secure
     */
    revUsersMerge: (data: RevUsersMergeRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Moves the Rev User to the target Rev organization under a Dev organization.
     *
     * @tags rev-users
     * @name RevUsersMove
     * @request POST:/internal/rev-users.move
     * @secure
     */
    revUsersMove: (data: RevUsersMoveRequest, params?: RequestParams) => Promise<AxiosResponse<RevUsersMoveResponse, any>>;
    /**
     * @description Validates the request for Rev User's move operation.
     *
     * @tags rev-users
     * @name RevUsersMoveValidate
     * @request POST:/internal/rev-users.move.validate
     * @secure
     */
    revUsersMoveValidate: (data: RevUsersMoveValidateRequest, params?: RequestParams) => Promise<AxiosResponse<RevUsersMoveValidateResponse, any>>;
    /**
     * @description ### Owner: akanksha.deswal@devrev.ai ### Fetches sample csv for bulk import.
     *
     * @tags rev-users
     * @name GetRevUserSampleCsv
     * @request GET:/internal/rev-users.sample-csv.get
     * @secure
     */
    getRevUserSampleCsv: (params?: RequestParams) => Promise<AxiosResponse<GetRevUserSampleCsvResponse, any>>;
    /**
     * @description Fetches sample csv for bulk import.
     *
     * @tags rev-users
     * @name GetRevUserSampleCsvPost
     * @request POST:/internal/rev-users.sample-csv.get
     * @secure
     */
    getRevUserSampleCsvPost: (data: GetRevUserSampleCsvRequest, params?: RequestParams) => Promise<AxiosResponse<GetRevUserSampleCsvResponse, any>>;
    /**
     * @description Gets the authenticated Rev user's information.
     *
     * @tags rev-users
     * @name RevUsersSelfGet
     * @request GET:/internal/rev-users.self.get
     * @secure
     */
    revUsersSelfGet: (params?: RequestParams) => Promise<AxiosResponse<RevUsersSelfResponse, any>>;
    /**
     * @description Gets the authenticated Rev user's information.
     *
     * @tags rev-users
     * @name RevUsersSelfGetPost
     * @request POST:/internal/rev-users.self.get
     * @secure
     */
    revUsersSelfGetPost: (data: RevUsersSelfRequest, params?: RequestParams) => Promise<AxiosResponse<RevUsersSelfResponse, any>>;
    /**
     * @description Updates the authenticated Rev user.
     *
     * @tags rev-users
     * @name RevUsersSelfUpdate
     * @request POST:/internal/rev-users.self.update
     * @secure
     */
    revUsersSelfUpdate: (data: RevUsersSelfUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<RevUsersSelfUpdateResponse, any>>;
    /**
     * @description Unlinks a rev user from a rev org.
     *
     * @tags rev-users
     * @name UnlinkRevUserFromRevOrg
     * @request POST:/internal/rev-users.unlink
     * @secure
     */
    unlinkRevUserFromRevOrg: (data: UnlinkRevUserFromRevOrgRequest, params?: RequestParams) => Promise<AxiosResponse<UnlinkRevUserFromRevOrgResponse, any>>;
    /**
     * @description Updates a Rev user.
     *
     * @tags rev-users
     * @name RevUsersUpdate
     * @request POST:/internal/rev-users.update
     * @secure
     */
    revUsersUpdate: (data: RevUsersUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<RevUsersUpdateResponse, any>>;
    /**
     * @description Upgrades all Rev Users schema.
     *
     * @tags accounts
     * @name RevUsersUpgrade
     * @request POST:/internal/rev-users.upgrade
     * @secure
     */
    revUsersUpgrade: (data: RevUsersUpgradeRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Gets the reward transactions based on the given filters.
     *
     * @tags commerce
     * @name RewardTransactionsList
     * @request GET:/internal/reward.transactions.list
     * @secure
     */
    rewardTransactionsList: (query: RewardTransactionsListParams, params?: RequestParams) => Promise<AxiosResponse<RewardTransactionsListResponse, any>>;
    /**
     * @description Gets the reward transactions based on the given filters.
     *
     * @tags commerce
     * @name RewardTransactionsListPost
     * @request POST:/internal/reward.transactions.list
     * @secure
     */
    rewardTransactionsListPost: (data: RewardTransactionsListRequest, params?: RequestParams) => Promise<AxiosResponse<RewardTransactionsListResponse, any>>;
    /**
     * @description Creates a reward.
     *
     * @tags commerce
     * @name RewardsCreate
     * @request POST:/internal/rewards.create
     * @secure
     */
    rewardsCreate: (data: RewardsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<RewardsCreateResponse, any>>;
    /**
     * @description Gets a reward.
     *
     * @tags commerce
     * @name RewardsGet
     * @request GET:/internal/rewards.get
     * @secure
     */
    rewardsGet: (query: RewardsGetParams, params?: RequestParams) => Promise<AxiosResponse<RewardsGetResponse, any>>;
    /**
     * @description Gets a reward.
     *
     * @tags commerce
     * @name RewardsGetPost
     * @request POST:/internal/rewards.get
     * @secure
     */
    rewardsGetPost: (data: RewardsGetRequest, params?: RequestParams) => Promise<AxiosResponse<RewardsGetResponse, any>>;
    /**
     * @description Gets the rewards based on the given filters.
     *
     * @tags commerce
     * @name RewardsList
     * @request GET:/internal/rewards.list
     * @secure
     */
    rewardsList: (query: RewardsListParams, params?: RequestParams) => Promise<AxiosResponse<RewardsListResponse, any>>;
    /**
     * @description Gets the rewards based on the given filters.
     *
     * @tags commerce
     * @name RewardsListPost
     * @request POST:/internal/rewards.list
     * @secure
     */
    rewardsListPost: (data: RewardsListRequest, params?: RequestParams) => Promise<AxiosResponse<RewardsListResponse, any>>;
    /**
     * @description Transfers rewards from a rev user to its own rev org or to a rev user of the same rev org.
     *
     * @tags commerce
     * @name RewardsTransfer
     * @request POST:/internal/rewards.transfer
     * @secure
     */
    rewardsTransfer: (data: RewardsTransferRequest, params?: RequestParams) => Promise<AxiosResponse<RewardsTransferResponse, any>>;
    /**
     * @description Converts rewards to credits for a rev org.
     *
     * @tags commerce
     * @name RewardsTransferToCredits
     * @request POST:/internal/rewards.transfer-to-credits
     * @secure
     */
    rewardsTransferToCredits: (data: RewardsTransferToCreditsRequest, params?: RequestParams) => Promise<AxiosResponse<RewardsTransferToCreditsResponse, any>>;
    /**
     * @description Assigns or revokes roles of a principal.
     *
     * @tags roles
     * @name RolesApply
     * @request POST:/internal/roles.apply
     * @secure
     */
    rolesApply: (data: RolesApplyRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Clones roles of a target for its subtype.
     *
     * @tags roles
     * @name RolesClone
     * @request POST:/internal/roles.clone
     * @secure
     */
    rolesClone: (data: RolesCloneRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Creates a new role.
     *
     * @tags roles
     * @name RolesCreate
     * @request POST:/internal/roles.create
     * @secure
     */
    rolesCreate: (data: RolesCreateRequest, params?: RequestParams) => Promise<AxiosResponse<RolesCreateResponse, any>>;
    /**
     * @description Deletes a role.
     *
     * @tags roles
     * @name RolesDelete
     * @request POST:/internal/roles.delete
     * @secure
     */
    rolesDelete: (data: RolesDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Gets the requested role's information.
     *
     * @tags roles
     * @name RolesGet
     * @request GET:/internal/roles.get
     * @secure
     */
    rolesGet: (query: RolesGetParams, params?: RequestParams) => Promise<AxiosResponse<RolesGetResponse, any>>;
    /**
     * @description Gets the requested role's information.
     *
     * @tags roles
     * @name RolesGetPost
     * @request POST:/internal/roles.get
     * @secure
     */
    rolesGetPost: (data: RolesGetRequest, params?: RequestParams) => Promise<AxiosResponse<RolesGetResponse, any>>;
    /**
     * @description Lists the available roles.
     *
     * @tags roles
     * @name RolesList
     * @request GET:/internal/roles.list
     * @secure
     */
    rolesList: (query: RolesListParams, params?: RequestParams) => Promise<AxiosResponse<RolesListResponse, any>>;
    /**
     * @description Lists the available roles.
     *
     * @tags roles
     * @name RolesListPost
     * @request POST:/internal/roles.list
     * @secure
     */
    rolesListPost: (data: RolesListRequest, params?: RequestParams) => Promise<AxiosResponse<RolesListResponse, any>>;
    /**
     * @description Lists the principals the set of roles are assigned to.
     *
     * @tags roles
     * @name PrincipalsList
     * @request GET:/internal/roles.principals.list
     * @secure
     */
    principalsList: (query: PrincipalsListParams, params?: RequestParams) => Promise<AxiosResponse<PrincipalsListResponse, any>>;
    /**
     * @description Lists the principals the set of roles are assigned to.
     *
     * @tags roles
     * @name PrincipalsListPost
     * @request POST:/internal/roles.principals.list
     * @secure
     */
    principalsListPost: (data: PrincipalsListRequest, params?: RequestParams) => Promise<AxiosResponse<PrincipalsListResponse, any>>;
    /**
     * @description Updates an existing role.
     *
     * @tags roles
     * @name RolesUpdate
     * @request POST:/internal/roles.update
     * @secure
     */
    rolesUpdate: (data: RolesUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<RolesUpdateResponse, any>>;
    /**
     * @description Creates a room and returns the room details.
     *
     * @tags rooms
     * @name RoomsCreate
     * @request POST:/internal/rooms.create
     * @secure
     */
    roomsCreate: (data: RoomsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<RoomsCreateResponse, any>>;
    /**
     * @description Informs a room of a user update.
     *
     * @tags rooms
     * @name RoomsInform
     * @request POST:/internal/rooms.inform
     * @secure
     */
    roomsInform: (data: RoomsInformRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Gets the specified rule node.
     *
     * @tags rules
     * @name RuleNodesGet
     * @request GET:/internal/rule-nodes.get
     * @secure
     */
    ruleNodesGet: (query: RuleNodesGetParams, params?: RequestParams) => Promise<AxiosResponse<RuleNodesGetResponse, any>>;
    /**
     * @description Gets the specified rule node.
     *
     * @tags rules
     * @name RuleNodesGetPost
     * @request POST:/internal/rule-nodes.get
     * @secure
     */
    ruleNodesGetPost: (data: RuleNodesGetRequest, params?: RequestParams) => Promise<AxiosResponse<RuleNodesGetResponse, any>>;
    /**
     * @description Lists rule nodes matching the request.
     *
     * @tags rules
     * @name RuleNodesList
     * @request GET:/internal/rule-nodes.list
     * @secure
     */
    ruleNodesList: (query: RuleNodesListParams, params?: RequestParams) => Promise<AxiosResponse<RuleNodesListResponse, any>>;
    /**
     * @description Lists rule nodes matching the request.
     *
     * @tags rules
     * @name RuleNodesListPost
     * @request POST:/internal/rule-nodes.list
     * @secure
     */
    ruleNodesListPost: (data: RuleNodesListRequest, params?: RequestParams) => Promise<AxiosResponse<RuleNodesListResponse, any>>;
    /**
     * @description Creates a rule for the specified inputs.
     *
     * @tags rules
     * @name RulesCreate
     * @request POST:/internal/rules.create
     * @secure
     */
    rulesCreate: (data: RulesCreateRequest, params?: RequestParams) => Promise<AxiosResponse<RulesCreateResponse, any>>;
    /**
     * @description Delete the specified rule.
     *
     * @tags rules
     * @name RulesDelete
     * @request POST:/internal/rules.delete
     * @secure
     */
    rulesDelete: (data: RulesDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Fills the inputs for a node in a rule.
     *
     * @tags rules
     * @name RulesFillNode
     * @request POST:/internal/rules.fill-node
     * @secure
     */
    rulesFillNode: (data: RulesFillNodeRequest, params?: RequestParams) => Promise<AxiosResponse<RulesFillNodeResponse, any>>;
    /**
     * @description Generates a rule through natural language prompt.
     *
     * @tags rules
     * @name RulesGenerate
     * @request POST:/internal/rules.generate
     * @secure
     */
    rulesGenerate: (data: RulesGenerateRequest, params?: RequestParams) => Promise<AxiosResponse<RulesGenerateResponse, any>>;
    /**
     * @description Generates the structure for a rule through natural language prompt.
     *
     * @tags rules
     * @name RulesGenerateStructure
     * @request POST:/internal/rules.generate-structure
     * @secure
     */
    rulesGenerateStructure: (data: RulesGenerateStructureRequest, params?: RequestParams) => Promise<AxiosResponse<RulesGenerateStructureResponse, any>>;
    /**
     * @description Gets the specified rule.
     *
     * @tags rules
     * @name RulesGet
     * @request GET:/internal/rules.get
     * @secure
     */
    rulesGet: (query: RulesGetParams, params?: RequestParams) => Promise<AxiosResponse<RulesGetResponse, any>>;
    /**
     * @description Gets the specified rule.
     *
     * @tags rules
     * @name RulesGetPost
     * @request POST:/internal/rules.get
     * @secure
     */
    rulesGetPost: (data: RulesGetRequest, params?: RequestParams) => Promise<AxiosResponse<RulesGetResponse, any>>;
    /**
     * @description Lists rules matching the request.
     *
     * @tags rules
     * @name RulesList
     * @request GET:/internal/rules.list
     * @secure
     */
    rulesList: (query: RulesListParams, params?: RequestParams) => Promise<AxiosResponse<RulesListResponse, any>>;
    /**
     * @description Lists rules matching the request.
     *
     * @tags rules
     * @name RulesListPost
     * @request POST:/internal/rules.list
     * @secure
     */
    rulesListPost: (data: RulesListRequest, params?: RequestParams) => Promise<AxiosResponse<RulesListResponse, any>>;
    /**
     * @description Suggests the 'rule-node-id' and 'display-id' for a node in a rule.
     *
     * @tags rules
     * @name RulesSuggestNode
     * @request POST:/internal/rules.suggest-node
     * @secure
     */
    rulesSuggestNode: (data: RulesSuggestNodeRequest, params?: RequestParams) => Promise<AxiosResponse<RulesSuggestNodeResponse, any>>;
    /**
     * @description Updates the specified rule.
     *
     * @tags rules
     * @name RulesUpdate
     * @request POST:/internal/rules.update
     * @secure
     */
    rulesUpdate: (data: RulesUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<RulesUpdateResponse, any>>;
    /**
     * @description Gets the aggregated schema.
     *
     * @tags customization
     * @name AggregatedSchemaGet
     * @request GET:/internal/schemas.aggregated.get
     * @secure
     */
    aggregatedSchemaGet: (query: AggregatedSchemaGetParams, params?: RequestParams) => Promise<AxiosResponse<AggregatedSchemaGetResponse, any>>;
    /**
     * @description Gets the aggregated schema.
     *
     * @tags customization
     * @name AggregatedSchemaGetPost
     * @request POST:/internal/schemas.aggregated.get
     * @secure
     */
    aggregatedSchemaGetPost: (data: AggregatedSchemaGetRequest, params?: RequestParams) => Promise<AxiosResponse<AggregatedSchemaGetResponse, any>>;
    /**
     * @description Gets the aggregated schema.
     *
     * @tags customization
     * @name AggregatedSchemaGetPrivate
     * @request GET:/internal/schemas.aggregated.get.private
     * @secure
     */
    aggregatedSchemaGetPrivate: (query: AggregatedSchemaGetPrivateParams, params?: RequestParams) => Promise<AxiosResponse<AggregatedSchemaGetResponsePrivate, any>>;
    /**
     * @description Gets the aggregated schema.
     *
     * @tags customization
     * @name AggregatedSchemaGetPrivatePost
     * @request POST:/internal/schemas.aggregated.get.private
     * @secure
     */
    aggregatedSchemaGetPrivatePost: (data: AggregatedSchemaGetRequestPrivate, params?: RequestParams) => Promise<AxiosResponse<AggregatedSchemaGetResponsePrivate, any>>;
    /**
     * @description Gets a custom schema fragment.
     *
     * @tags customization
     * @name CustomSchemaFragmentsGet
     * @request GET:/internal/schemas.custom.get
     * @secure
     */
    customSchemaFragmentsGet: (query: CustomSchemaFragmentsGetParams, params?: RequestParams) => Promise<AxiosResponse<CustomSchemaFragmentsGetResponse, any>>;
    /**
     * @description Gets a custom schema fragment.
     *
     * @tags customization
     * @name CustomSchemaFragmentsGetPost
     * @request POST:/internal/schemas.custom.get
     * @secure
     */
    customSchemaFragmentsGetPost: (data: CustomSchemaFragmentsGetRequest, params?: RequestParams) => Promise<AxiosResponse<CustomSchemaFragmentsGetResponse, any>>;
    /**
     * @description Gets a custom schema fragment.
     *
     * @tags customization
     * @name CustomSchemaFragmentsGetPrivate
     * @request GET:/internal/schemas.custom.get.private
     * @secure
     */
    customSchemaFragmentsGetPrivate: (query: CustomSchemaFragmentsGetPrivateParams, params?: RequestParams) => Promise<AxiosResponse<CustomSchemaFragmentsGetResponsePrivate, any>>;
    /**
     * @description Gets a custom schema fragment.
     *
     * @tags customization
     * @name CustomSchemaFragmentsGetPrivatePost
     * @request POST:/internal/schemas.custom.get.private
     * @secure
     */
    customSchemaFragmentsGetPrivatePost: (data: CustomSchemaFragmentsGetRequestPrivate, params?: RequestParams) => Promise<AxiosResponse<CustomSchemaFragmentsGetResponsePrivate, any>>;
    /**
     * @description Lists custom schema fragments.
     *
     * @tags customization
     * @name CustomSchemaFragmentsList
     * @request GET:/internal/schemas.custom.list
     * @secure
     */
    customSchemaFragmentsList: (query: CustomSchemaFragmentsListParams, params?: RequestParams) => Promise<AxiosResponse<CustomSchemaFragmentsListResponse, any>>;
    /**
     * @description Lists custom schema fragments.
     *
     * @tags customization
     * @name CustomSchemaFragmentsList
     * @request GET:/internal/schemas.custom.list
     * @secure */
    customSchemaFragmentsListPaginator(query: CustomSchemaFragmentsListParams, params?: RequestParams): AsyncGenerator<CustomSchemaFragmentsListResponse, void, unknown>;
    /**
     * @description Lists custom schema fragments.
     *
     * @tags customization
     * @name CustomSchemaFragmentsListPost
     * @request POST:/internal/schemas.custom.list
     * @secure
     */
    customSchemaFragmentsListPost: (data: CustomSchemaFragmentsListRequest, params?: RequestParams) => Promise<AxiosResponse<CustomSchemaFragmentsListResponse, any>>;
    /**
     * @description Lists custom schema fragments.
     *
     * @tags customization
     * @name CustomSchemaFragmentsListPrivate
     * @request GET:/internal/schemas.custom.list.private
     * @secure
     */
    customSchemaFragmentsListPrivate: (query: CustomSchemaFragmentsListPrivateParams, params?: RequestParams) => Promise<AxiosResponse<CustomSchemaFragmentsListResponsePrivate, any>>;
    /**
     * @description Lists custom schema fragments.
     *
     * @tags customization
     * @name CustomSchemaFragmentsListPrivate
     * @request GET:/internal/schemas.custom.list.private
     * @secure */
    customSchemaFragmentsListPrivatePaginator(query: CustomSchemaFragmentsListPrivateParams, params?: RequestParams): AsyncGenerator<CustomSchemaFragmentsListResponsePrivate, void, unknown>;
    /**
     * @description Lists custom schema fragments.
     *
     * @tags customization
     * @name CustomSchemaFragmentsListPrivatePost
     * @request POST:/internal/schemas.custom.list.private
     * @secure
     */
    customSchemaFragmentsListPrivatePost: (data: CustomSchemaFragmentsListRequestPrivate, params?: RequestParams) => Promise<AxiosResponse<CustomSchemaFragmentsListResponsePrivate, any>>;
    /**
     * @description Creates or updates a custom schema fragment.
     *
     * @tags customization
     * @name CustomSchemaFragmentsSet
     * @request POST:/internal/schemas.custom.set
     * @secure
     */
    customSchemaFragmentsSet: (data: CustomSchemaFragmentsSetRequest, params?: RequestParams) => Promise<AxiosResponse<CustomSchemaFragmentsSetResponse, any>>;
    /**
     * @description Creates or updates a custom schema fragment.
     *
     * @tags customization
     * @name CustomSchemaFragmentsSetPrivate
     * @request POST:/internal/schemas.custom.set.private
     * @secure
     */
    customSchemaFragmentsSetPrivate: (data: CustomSchemaFragmentsSetRequestPrivate, params?: RequestParams) => Promise<AxiosResponse<CustomSchemaFragmentsSetResponsePrivate, any>>;
    /**
     * @description Gets a stock schema fragment.
     *
     * @tags customization
     * @name StockSchemaFragmentsGet
     * @request GET:/internal/schemas.stock.get
     * @secure
     */
    stockSchemaFragmentsGet: (query: StockSchemaFragmentsGetParams, params?: RequestParams) => Promise<AxiosResponse<StockSchemaFragmentsGetResponse, any>>;
    /**
     * @description Gets a stock schema fragment.
     *
     * @tags customization
     * @name StockSchemaFragmentsGetPost
     * @request POST:/internal/schemas.stock.get
     * @secure
     */
    stockSchemaFragmentsGetPost: (data: StockSchemaFragmentsGetRequest, params?: RequestParams) => Promise<AxiosResponse<StockSchemaFragmentsGetResponse, any>>;
    /**
     * @description Gets a stock schema fragment.
     *
     * @tags customization
     * @name StockSchemaFragmentsGetPrivate
     * @request GET:/internal/schemas.stock.get.private
     * @secure
     */
    stockSchemaFragmentsGetPrivate: (query: StockSchemaFragmentsGetPrivateParams, params?: RequestParams) => Promise<AxiosResponse<StockSchemaFragmentsGetResponsePrivate, any>>;
    /**
     * @description Gets a stock schema fragment.
     *
     * @tags customization
     * @name StockSchemaFragmentsGetPrivatePost
     * @request POST:/internal/schemas.stock.get.private
     * @secure
     */
    stockSchemaFragmentsGetPrivatePost: (data: StockSchemaFragmentsGetRequestPrivate, params?: RequestParams) => Promise<AxiosResponse<StockSchemaFragmentsGetResponsePrivate, any>>;
    /**
     * @description Lists stock schema fragments.
     *
     * @tags customization
     * @name StockSchemaFragmentsList
     * @request GET:/internal/schemas.stock.list
     * @secure
     */
    stockSchemaFragmentsList: (query: StockSchemaFragmentsListParams, params?: RequestParams) => Promise<AxiosResponse<StockSchemaFragmentsListResponse, any>>;
    /**
     * @description Lists stock schema fragments.
     *
     * @tags customization
     * @name StockSchemaFragmentsList
     * @request GET:/internal/schemas.stock.list
     * @secure */
    stockSchemaFragmentsListPaginator(query: StockSchemaFragmentsListParams, params?: RequestParams): AsyncGenerator<StockSchemaFragmentsListResponse, void, unknown>;
    /**
     * @description Lists stock schema fragments.
     *
     * @tags customization
     * @name StockSchemaFragmentsListPost
     * @request POST:/internal/schemas.stock.list
     * @secure
     */
    stockSchemaFragmentsListPost: (data: StockSchemaFragmentsListRequest, params?: RequestParams) => Promise<AxiosResponse<StockSchemaFragmentsListResponse, any>>;
    /**
     * @description Lists stock schema fragments.
     *
     * @tags customization
     * @name StockSchemaFragmentsListPrivate
     * @request GET:/internal/schemas.stock.list.private
     * @secure
     */
    stockSchemaFragmentsListPrivate: (query: StockSchemaFragmentsListPrivateParams, params?: RequestParams) => Promise<AxiosResponse<StockSchemaFragmentsListResponsePrivate, any>>;
    /**
     * @description Lists stock schema fragments.
     *
     * @tags customization
     * @name StockSchemaFragmentsListPrivate
     * @request GET:/internal/schemas.stock.list.private
     * @secure */
    stockSchemaFragmentsListPrivatePaginator(query: StockSchemaFragmentsListPrivateParams, params?: RequestParams): AsyncGenerator<StockSchemaFragmentsListResponsePrivate, void, unknown>;
    /**
     * @description Lists stock schema fragments.
     *
     * @tags customization
     * @name StockSchemaFragmentsListPrivatePost
     * @request POST:/internal/schemas.stock.list.private
     * @secure
     */
    stockSchemaFragmentsListPrivatePost: (data: StockSchemaFragmentsListRequestPrivate, params?: RequestParams) => Promise<AxiosResponse<StockSchemaFragmentsListResponsePrivate, any>>;
    /**
     * @description Lists subtypes.
     *
     * @tags customization
     * @name SubtypesList
     * @request GET:/internal/schemas.subtypes.list
     * @secure
     */
    subtypesList: (query: SubtypesListParams, params?: RequestParams) => Promise<AxiosResponse<SubtypesListResponse, any>>;
    /**
     * @description Lists subtypes.
     *
     * @tags customization
     * @name SubtypesListPost
     * @request POST:/internal/schemas.subtypes.list
     * @secure
     */
    subtypesListPost: (data: SubtypesListRequest, params?: RequestParams) => Promise<AxiosResponse<SubtypesListResponse, any>>;
    /**
     * @description Gets the new fragment IDs and fields resulting from changing a subtype.
     *
     * @tags customization
     * @name SchemasSubtypePrepareUpdateGet
     * @request POST:/internal/schemas.subtypes.prepare-update
     * @secure
     */
    schemasSubtypePrepareUpdateGet: (data: SchemasSubtypePrepareUpdateGetRequest, params?: RequestParams) => Promise<AxiosResponse<SchemasSubtypePrepareUpdateGetResponse, any>>;
    /**
     * @description Creates a new score.
     *
     * @tags alchemy
     * @name ScoresCreate
     * @request POST:/internal/scores.create
     * @secure
     */
    scoresCreate: (data: ScoresCreateRequest, params?: RequestParams) => Promise<AxiosResponse<ScoresCreateResponse, any>>;
    /**
     * @description Deletes a score by ID.
     *
     * @tags alchemy
     * @name ScoresDelete
     * @request POST:/internal/scores.delete
     * @secure
     */
    scoresDelete: (data: ScoresDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Gets a score by ID.
     *
     * @tags alchemy
     * @name ScoresGet
     * @request GET:/internal/scores.get
     * @secure
     */
    scoresGet: (query: ScoresGetParams, params?: RequestParams) => Promise<AxiosResponse<ScoresGetResponse, any>>;
    /**
     * @description Gets a score by ID.
     *
     * @tags alchemy
     * @name ScoresGetPost
     * @request POST:/internal/scores.get
     * @secure
     */
    scoresGetPost: (data: ScoresGetRequest, params?: RequestParams) => Promise<AxiosResponse<ScoresGetResponse, any>>;
    /**
     * @description Lists all the available scores.
     *
     * @tags alchemy
     * @name ScoresList
     * @request GET:/internal/scores.list
     * @secure
     */
    scoresList: (params?: RequestParams) => Promise<AxiosResponse<ScoresListResponse, any>>;
    /**
     * @description Lists all the available scores.
     *
     * @tags alchemy
     * @name ScoresListPost
     * @request POST:/internal/scores.list
     * @secure
     */
    scoresListPost: (data: ScoresListRequest, params?: RequestParams) => Promise<AxiosResponse<ScoresListResponse, any>>;
    /**
     * @description Updates a score by ID.
     *
     * @tags alchemy
     * @name ScoresUpdate
     * @request POST:/internal/scores.update
     * @secure
     */
    scoresUpdate: (data: ScoresUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<ScoresUpdateResponse, any>>;
    /**
     * @description Searches for KB articles for the provided query.
     *
     * @tags search
     * @name SearchArticles
     * @request GET:/internal/search.articles
     * @secure
     */
    searchArticles: (query: SearchArticlesParams, params?: RequestParams) => Promise<AxiosResponse<SearchArticlesResponse, any>>;
    /**
     * @description Searches for KB articles for the provided query.
     *
     * @tags search
     * @name SearchArticlesPost
     * @request POST:/internal/search.articles
     * @secure
     */
    searchArticlesPost: (data: SearchArticlesRequest, params?: RequestParams) => Promise<AxiosResponse<SearchArticlesResponse, any>>;
    /**
     * @description ### Owner: ashwini.vasanth@devrev.ai ### Searches for records based on a given query.
     *
     * @tags search
     * @name SearchCore
     * @request GET:/internal/search.core
     * @secure
     */
    searchCore: (query: SearchCoreParams, params?: RequestParams) => Promise<AxiosResponse<SearchCoreResponse, any>>;
    /**
     * @description ### Owner: ashwini.vasanth@devrev.ai ### Searches for records based on a given query.
     *
     * @tags search
     * @name SearchCore
     * @request GET:/internal/search.core
     * @secure */
    searchCorePaginator(query: SearchCoreParams, params?: RequestParams): AsyncGenerator<SearchCoreResponse, void, unknown>;
    /**
     * @description Searches for records based on a given query.
     *
     * @tags search
     * @name SearchCorePost
     * @request POST:/internal/search.core
     * @secure
     */
    searchCorePost: (data: SearchCoreRequest, params?: RequestParams) => Promise<AxiosResponse<SearchCoreResponse, any>>;
    /**
     * @description ### Owner: dd@devrev.ai ### Performs search, using a combination of syntactic and semantic search.
     *
     * @tags search
     * @name SearchHybrid
     * @request GET:/internal/search.hybrid
     * @secure
     */
    searchHybrid: (query: SearchHybridParams, params?: RequestParams) => Promise<AxiosResponse<SearchHybridResponse, any>>;
    /**
     * @description Performs search, using a combination of syntactic and semantic search.
     *
     * @tags search
     * @name SearchHybridPost
     * @request POST:/internal/search.hybrid
     * @secure
     */
    searchHybridPost: (data: SearchHybridRequest, params?: RequestParams) => Promise<AxiosResponse<SearchHybridResponse, any>>;
    /**
     * @description Performs search, encompassing exact, prefix and infix matches on the specified query.
     *
     * @tags search
     * @name SearchSuggest
     * @request GET:/internal/search.suggest
     * @secure
     */
    searchSuggest: (query: SearchSuggestParams, params?: RequestParams) => Promise<AxiosResponse<SearchSuggestResponse, any>>;
    /**
     * @description Performs search, encompassing exact, prefix and infix matches on the specified query.
     *
     * @tags search
     * @name SearchSuggest
     * @request GET:/internal/search.suggest
     * @secure */
    searchSuggestPaginator(query: SearchSuggestParams, params?: RequestParams): AsyncGenerator<SearchSuggestResponse, void, unknown>;
    /**
     * @description Performs search, encompassing exact, prefix and infix matches on the specified query.
     *
     * @tags search
     * @name SearchSuggestPost
     * @request POST:/internal/search.suggest
     * @secure
     */
    searchSuggestPost: (data: SearchSuggestRequest, params?: RequestParams) => Promise<AxiosResponse<SearchSuggestResponse, any>>;
    /**
     * @description Typeahead search.
     *
     * @tags search
     * @name SearchTypeahead
     * @request GET:/internal/search.typeahead
     * @secure
     */
    searchTypeahead: (query: SearchTypeaheadParams, params?: RequestParams) => Promise<AxiosResponse<SearchTypeaheadResponse, any>>;
    /**
     * @description Typeahead search.
     *
     * @tags search
     * @name SearchTypeahead
     * @request GET:/internal/search.typeahead
     * @secure */
    searchTypeaheadPaginator(query: SearchTypeaheadParams, params?: RequestParams): AsyncGenerator<SearchTypeaheadResponse, void, unknown>;
    /**
     * @description Typeahead search.
     *
     * @tags search
     * @name SearchTypeaheadPost
     * @request POST:/internal/search.typeahead
     * @secure
     */
    searchTypeaheadPost: (data: SearchTypeaheadRequest, params?: RequestParams) => Promise<AxiosResponse<SearchTypeaheadResponse, any>>;
    /**
     * @description Creates a service account.
     *
     * @tags service-accounts
     * @name ServiceAccountsCreate
     * @request POST:/internal/service-accounts.create
     * @secure
     */
    serviceAccountsCreate: (data: ServiceAccountsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<ServiceAccountsCreateResponse, any>>;
    /**
     * @description Deletes a service account.
     *
     * @tags service-accounts
     * @name ServiceAccountsDelete
     * @request POST:/internal/service-accounts.delete
     * @secure
     */
    serviceAccountsDelete: (data: ServiceAccountsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: prabath.siriwardena@devrev.ai ### Gets a service account.
     *
     * @tags service-accounts
     * @name ServiceAccountsGet
     * @request GET:/internal/service-accounts.get
     * @secure
     */
    serviceAccountsGet: (query: ServiceAccountsGetParams, params?: RequestParams) => Promise<AxiosResponse<ServiceAccountsGetResponse, any>>;
    /**
     * @description Gets a service account.
     *
     * @tags service-accounts
     * @name ServiceAccountsGetPost
     * @request POST:/internal/service-accounts.get
     * @secure
     */
    serviceAccountsGetPost: (data: ServiceAccountsGetRequest, params?: RequestParams) => Promise<AxiosResponse<ServiceAccountsGetResponse, any>>;
    /**
     * @description Creates a keyring under the corresponding service account.
     *
     * @tags service-accounts
     * @name ServiceAccountsKeyringsCreate
     * @request POST:/internal/service-accounts.keyrings.create
     * @secure
     */
    serviceAccountsKeyringsCreate: (data: ServiceAccountsKeyringsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<ServiceAccountsKeyringsCreateResponse, any>>;
    /**
     * @description Deletes a keyring under the corresponding service account.
     *
     * @tags service-accounts
     * @name ServiceAccountsKeyringsDelete
     * @request POST:/internal/service-accounts.keyrings.delete
     * @secure
     */
    serviceAccountsKeyringsDelete: (data: ServiceAccountsKeyringsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: prabath.siriwardena@devrev.ai ### Gets a keyring under the corresponding service account.
     *
     * @tags service-accounts
     * @name ServiceAccountsKeyringsGet
     * @request GET:/internal/service-accounts.keyrings.get
     * @secure
     */
    serviceAccountsKeyringsGet: (query: ServiceAccountsKeyringsGetParams, params?: RequestParams) => Promise<AxiosResponse<ServiceAccountsKeyringsGetResponse, any>>;
    /**
     * @description Gets a keyring under the corresponding service account.
     *
     * @tags service-accounts
     * @name ServiceAccountsKeyringsGetPost
     * @request POST:/internal/service-accounts.keyrings.get
     * @secure
     */
    serviceAccountsKeyringsGetPost: (data: ServiceAccountsKeyringsGetRequest, params?: RequestParams) => Promise<AxiosResponse<ServiceAccountsKeyringsGetResponse, any>>;
    /**
     * @description Updates a keyring under the corresponding service account.
     *
     * @tags service-accounts
     * @name ServiceAccountsKeyringsUpdate
     * @request POST:/internal/service-accounts.keyrings.update
     * @secure
     */
    serviceAccountsKeyringsUpdate: (data: ServiceAccountsKeyringsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<ServiceAccountsKeyringsUpdateResponse, any>>;
    /**
     * @description ### Owner: prabath.siriwardena@devrev.ai ### Lists the service accounts.
     *
     * @tags service-accounts
     * @name ServiceAccountsList
     * @request GET:/internal/service-accounts.list
     * @secure
     */
    serviceAccountsList: (query: ServiceAccountsListParams, params?: RequestParams) => Promise<AxiosResponse<ServiceAccountsListResponse, any>>;
    /**
     * @description ### Owner: prabath.siriwardena@devrev.ai ### Lists the service accounts.
     *
     * @tags service-accounts
     * @name ServiceAccountsList
     * @request GET:/internal/service-accounts.list
     * @secure */
    serviceAccountsListPaginator(query: ServiceAccountsListParams, params?: RequestParams): AsyncGenerator<ServiceAccountsListResponse, void, unknown>;
    /**
     * @description Lists the service accounts.
     *
     * @tags service-accounts
     * @name ServiceAccountsListPost
     * @request POST:/internal/service-accounts.list
     * @secure
     */
    serviceAccountsListPost: (data: ServiceAccountsListRequest, params?: RequestParams) => Promise<AxiosResponse<ServiceAccountsListResponse, any>>;
    /**
     * @description Updates a service account.
     *
     * @tags service-accounts
     * @name ServiceAccountsUpdate
     * @request POST:/internal/service-accounts.update
     * @secure
     */
    serviceAccountsUpdate: (data: ServiceAccountsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<ServiceAccountsUpdateResponse, any>>;
    /**
     * @description Cancels a service plan.
     *
     * @tags commerce
     * @name ServicePlansCancel
     * @request POST:/internal/service-plans.cancel
     * @secure
     */
    servicePlansCancel: (data: ServicePlansCancelRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Counts the number of service plan objects based on the given filters.
     *
     * @tags commerce
     * @name ServicePlansCount
     * @request GET:/internal/service-plans.count
     * @secure
     */
    servicePlansCount: (query: ServicePlansCountParams, params?: RequestParams) => Promise<AxiosResponse<ServicePlansCountResponse, any>>;
    /**
     * @description Counts the number of service plan objects based on the given filters.
     *
     * @tags commerce
     * @name ServicePlansCountPost
     * @request POST:/internal/service-plans.count
     * @secure
     */
    servicePlansCountPost: (data: ServicePlansCountRequest, params?: RequestParams) => Promise<AxiosResponse<ServicePlansCountResponse, any>>;
    /**
     * @description Creates a service plan object.
     *
     * @tags commerce
     * @name ServicePlansCreate
     * @request POST:/internal/service-plans.create
     * @secure
     */
    servicePlansCreate: (data: ServicePlansCreateRequest, params?: RequestParams) => Promise<AxiosResponse<ServicePlansCreateResponse, any>>;
    /**
     * @description Gets a service plan object.
     *
     * @tags commerce
     * @name ServicePlansGet
     * @request GET:/internal/service-plans.get
     * @secure
     */
    servicePlansGet: (query: ServicePlansGetParams, params?: RequestParams) => Promise<AxiosResponse<ServicePlansGetResponse, any>>;
    /**
     * @description Gets a service plan object.
     *
     * @tags commerce
     * @name ServicePlansGetPost
     * @request POST:/internal/service-plans.get
     * @secure
     */
    servicePlansGetPost: (data: ServicePlansGetRequest, params?: RequestParams) => Promise<AxiosResponse<ServicePlansGetResponse, any>>;
    /**
     * @description Gets compatible skus that can be purchased with the current configuration of the service plan.
     *
     * @tags commerce
     * @name ServicePlansGetCompatibleSkus
     * @request GET:/internal/service-plans.get-compatible-skus
     * @secure
     */
    servicePlansGetCompatibleSkus: (query: ServicePlansGetCompatibleSkusParams, params?: RequestParams) => Promise<AxiosResponse<ServicePlansGetCompatibleSkusResponse, any>>;
    /**
     * @description Gets compatible skus that can be purchased with the current configuration of the service plan.
     *
     * @tags commerce
     * @name ServicePlansGetCompatibleSkusPost
     * @request POST:/internal/service-plans.get-compatible-skus
     * @secure
     */
    servicePlansGetCompatibleSkusPost: (data: ServicePlansGetCompatibleSkusRequest, params?: RequestParams) => Promise<AxiosResponse<ServicePlansGetCompatibleSkusResponse, any>>;
    /**
     * @description Gets the service plan objects based on the given filters.
     *
     * @tags commerce
     * @name ServicePlansList
     * @request GET:/internal/service-plans.list
     * @secure
     */
    servicePlansList: (query: ServicePlansListParams, params?: RequestParams) => Promise<AxiosResponse<ServicePlansListResponse, any>>;
    /**
     * @description Gets the service plan objects based on the given filters.
     *
     * @tags commerce
     * @name ServicePlansList
     * @request GET:/internal/service-plans.list
     * @secure */
    servicePlansListPaginator(query: ServicePlansListParams, params?: RequestParams): AsyncGenerator<ServicePlansListResponse, void, unknown>;
    /**
     * @description Gets the service plan objects based on the given filters.
     *
     * @tags commerce
     * @name ServicePlansListPost
     * @request POST:/internal/service-plans.list
     * @secure
     */
    servicePlansListPost: (data: ServicePlansListRequest, params?: RequestParams) => Promise<AxiosResponse<ServicePlansListResponse, any>>;
    /**
     * @description Updates a service plan object.
     *
     * @tags commerce
     * @name ServicePlansUpdate
     * @request POST:/internal/service-plans.update
     * @secure
     */
    servicePlansUpdate: (data: ServicePlansUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<ServicePlansUpdateResponse, any>>;
    /**
     * @description Creates a sku rule.
     *
     * @tags commerce
     * @name SkuRulesCreate
     * @request POST:/internal/skurules.create
     * @secure
     */
    skuRulesCreate: (data: SkuRulesCreateRequest, params?: RequestParams) => Promise<AxiosResponse<SkuRulesCreateResponse, any>>;
    /**
     * @description Deletes a sku rule.
     *
     * @tags commerce
     * @name SkuRulesDelete
     * @request POST:/internal/skurules.delete
     * @secure
     */
    skuRulesDelete: (data: SkuRulesDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Gets a sku rule.
     *
     * @tags commerce
     * @name SkuRulesGet
     * @request GET:/internal/skurules.get
     * @secure
     */
    skuRulesGet: (query: SkuRulesGetParams, params?: RequestParams) => Promise<AxiosResponse<SkuRulesGetResponse, any>>;
    /**
     * @description Gets a sku rule.
     *
     * @tags commerce
     * @name SkuRulesGetPost
     * @request POST:/internal/skurules.get
     * @secure
     */
    skuRulesGetPost: (data: SkuRulesGetRequest, params?: RequestParams) => Promise<AxiosResponse<SkuRulesGetResponse, any>>;
    /**
     * @description Gets the sku rules based on the given filters.
     *
     * @tags commerce
     * @name SkuRulesList
     * @request GET:/internal/skurules.list
     * @secure
     */
    skuRulesList: (query: SkuRulesListParams, params?: RequestParams) => Promise<AxiosResponse<SkuRulesListResponse, any>>;
    /**
     * @description Gets the sku rules based on the given filters.
     *
     * @tags commerce
     * @name SkuRulesList
     * @request GET:/internal/skurules.list
     * @secure */
    skuRulesListPaginator(query: SkuRulesListParams, params?: RequestParams): AsyncGenerator<SkuRulesListResponse, void, unknown>;
    /**
     * @description Gets the sku rules based on the given filters.
     *
     * @tags commerce
     * @name SkuRulesListPost
     * @request POST:/internal/skurules.list
     * @secure
     */
    skuRulesListPost: (data: SkuRulesListRequest, params?: RequestParams) => Promise<AxiosResponse<SkuRulesListResponse, any>>;
    /**
     * @description Updates a sku rule.
     *
     * @tags commerce
     * @name SkuRulesUpdate
     * @request POST:/internal/skurules.update
     * @secure
     */
    skuRulesUpdate: (data: SkuRulesUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<SkuRulesUpdateResponse, any>>;
    /**
     * @description Counts the number of SKUs based on the given filters.
     *
     * @tags commerce
     * @name SkusCount
     * @request GET:/internal/skus.count
     * @secure
     */
    skusCount: (query: SkusCountParams, params?: RequestParams) => Promise<AxiosResponse<SkusCountResponse, any>>;
    /**
     * @description Counts the number of SKUs based on the given filters.
     *
     * @tags commerce
     * @name SkusCountPost
     * @request POST:/internal/skus.count
     * @secure
     */
    skusCountPost: (data: SkusCountRequest, params?: RequestParams) => Promise<AxiosResponse<SkusCountResponse, any>>;
    /**
     * @description Creates a SKU.
     *
     * @tags commerce
     * @name SkusCreate
     * @request POST:/internal/skus.create
     * @secure
     */
    skusCreate: (data: SkusCreateRequest, params?: RequestParams) => Promise<AxiosResponse<SkusCreateResponse, any>>;
    /**
     * @description Deletes a SKU.
     *
     * @tags commerce
     * @name SkusDelete
     * @request POST:/internal/skus.delete
     * @secure
     */
    skusDelete: (data: SkusDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Gets a SKU.
     *
     * @tags commerce
     * @name SkusGet
     * @request GET:/internal/skus.get
     * @secure
     */
    skusGet: (query: SkusGetParams, params?: RequestParams) => Promise<AxiosResponse<SkusGetResponse, any>>;
    /**
     * @description Gets a SKU.
     *
     * @tags commerce
     * @name SkusGetPost
     * @request POST:/internal/skus.get
     * @secure
     */
    skusGetPost: (data: SkusGetRequest, params?: RequestParams) => Promise<AxiosResponse<SkusGetResponse, any>>;
    /**
     * @description Gets the SKUs based on the given filters.
     *
     * @tags commerce
     * @name SkusList
     * @request GET:/internal/skus.list
     * @secure
     */
    skusList: (query: SkusListParams, params?: RequestParams) => Promise<AxiosResponse<SkusListResponse, any>>;
    /**
     * @description Gets the SKUs based on the given filters.
     *
     * @tags commerce
     * @name SkusList
     * @request GET:/internal/skus.list
     * @secure */
    skusListPaginator(query: SkusListParams, params?: RequestParams): AsyncGenerator<SkusListResponse, void, unknown>;
    /**
     * @description Gets the SKUs based on the given filters.
     *
     * @tags commerce
     * @name SkusListPost
     * @request POST:/internal/skus.list
     * @secure
     */
    skusListPost: (data: SkusListRequest, params?: RequestParams) => Promise<AxiosResponse<SkusListResponse, any>>;
    /**
     * @description Updates a SKU.
     *
     * @tags commerce
     * @name SkusUpdate
     * @request POST:/internal/skus.update
     * @secure
     */
    skusUpdate: (data: SkusUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<SkusUpdateResponse, any>>;
    /**
     * @description Versions a SKU.
     *
     * @tags commerce
     * @name SkusVersion
     * @request POST:/internal/skus.version
     * @secure
     */
    skusVersion: (data: SkusVersionRequest, params?: RequestParams) => Promise<AxiosResponse<SkusVersionResponse, any>>;
    /**
     * @description Creates an SLA assignment rule.
     *
     * @tags slas
     * @name SlaAssignmentRulesCreate
     * @request POST:/internal/sla-assignment-rules.create
     * @secure
     */
    slaAssignmentRulesCreate: (data: SlaAssignmentRulesCreateRequest, params?: RequestParams) => Promise<AxiosResponse<SlaAssignmentRulesCreateResponse, any>>;
    /**
     * @description Deletes an SLA assignment rule.
     *
     * @tags slas
     * @name SlaAssignmentRulesDelete
     * @request POST:/internal/sla-assignment-rules.delete
     * @secure
     */
    slaAssignmentRulesDelete: (data: SlaAssignmentRulesDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: suraj.narra@devrev.ai ### Gets an SLA assignment rule.
     *
     * @tags slas
     * @name SlaAssignmentRulesGet
     * @request GET:/internal/sla-assignment-rules.get
     * @secure
     */
    slaAssignmentRulesGet: (query: SlaAssignmentRulesGetParams, params?: RequestParams) => Promise<AxiosResponse<SlaAssignmentRulesGetResponse, any>>;
    /**
     * @description Gets an SLA assignment rule.
     *
     * @tags slas
     * @name SlaAssignmentRulesGetPost
     * @request POST:/internal/sla-assignment-rules.get
     * @secure
     */
    slaAssignmentRulesGetPost: (data: SlaAssignmentRulesGetRequest, params?: RequestParams) => Promise<AxiosResponse<SlaAssignmentRulesGetResponse, any>>;
    /**
     * @description ### Owner: suraj.narra@devrev.ai ### Gets a list of SLA assignment rules.
     *
     * @tags slas
     * @name SlaAssignmentRulesList
     * @request GET:/internal/sla-assignment-rules.list
     * @secure
     */
    slaAssignmentRulesList: (query: SlaAssignmentRulesListParams, params?: RequestParams) => Promise<AxiosResponse<SlaAssignmentRulesListResponse, any>>;
    /**
     * @description ### Owner: suraj.narra@devrev.ai ### Gets a list of SLA assignment rules.
     *
     * @tags slas
     * @name SlaAssignmentRulesList
     * @request GET:/internal/sla-assignment-rules.list
     * @secure */
    slaAssignmentRulesListPaginator(query: SlaAssignmentRulesListParams, params?: RequestParams): AsyncGenerator<SlaAssignmentRulesListResponse, void, unknown>;
    /**
     * @description Gets a list of SLA assignment rules.
     *
     * @tags slas
     * @name SlaAssignmentRulesListPost
     * @request POST:/internal/sla-assignment-rules.list
     * @secure
     */
    slaAssignmentRulesListPost: (data: SlaAssignmentRulesListRequest, params?: RequestParams) => Promise<AxiosResponse<SlaAssignmentRulesListResponse, any>>;
    /**
     * @description Updates an SLA assignment rule.
     *
     * @tags slas
     * @name SlaAssignmentRulesUpdate
     * @request POST:/internal/sla-assignment-rules.update
     * @secure
     */
    slaAssignmentRulesUpdate: (data: SlaAssignmentRulesUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<SlaAssignmentRulesUpdateResponse, any>>;
    /**
     * @description ### Owner: prashant.kumar@devrev.ai ### Gets an SLA tracker.
     *
     * @tags slas
     * @name SlaTrackersGet
     * @request GET:/internal/sla-trackers.get
     * @secure
     */
    slaTrackersGet: (query: SlaTrackersGetParams, params?: RequestParams) => Promise<AxiosResponse<SlaTrackersGetResponse, any>>;
    /**
     * @description Gets an SLA tracker.
     *
     * @tags slas
     * @name SlaTrackersGetPost
     * @request POST:/internal/sla-trackers.get
     * @secure
     */
    slaTrackersGetPost: (data: SlaTrackersGetRequest, params?: RequestParams) => Promise<AxiosResponse<SlaTrackersGetResponse, any>>;
    /**
     * @description  Assigns the SLA to a set of Rev organizations.
     *
     * @tags slas
     * @name SlasAssign
     * @request POST:/internal/slas.assign
     * @secure
     */
    slasAssign: (data: SlasAssignRequest, params?: RequestParams) => Promise<AxiosResponse<SlasAssignResponse, any>>;
    /**
     * @description Creates an SLA in draft status.
     *
     * @tags slas
     * @name SlasCreate
     * @request POST:/internal/slas.create
     * @secure
     */
    slasCreate: (data: SlasCreateRequest, params?: RequestParams) => Promise<AxiosResponse<SlasCreateResponse, any>>;
    /**
     * @description ### Owner: lorinc.body@devrev.ai ### Gets an SLA.
     *
     * @tags slas
     * @name SlasGet
     * @request GET:/internal/slas.get
     * @secure
     */
    slasGet: (query: SlasGetParams, params?: RequestParams) => Promise<AxiosResponse<SlasGetResponse, any>>;
    /**
     * @description Gets an SLA.
     *
     * @tags slas
     * @name SlasGetPost
     * @request POST:/internal/slas.get
     * @secure
     */
    slasGetPost: (data: SlasGetRequest, params?: RequestParams) => Promise<AxiosResponse<SlasGetResponse, any>>;
    /**
     * @description ### Owner: lorinc.body@devrev.ai ### Lists SLAs matching a filter.
     *
     * @tags slas
     * @name SlasList
     * @request GET:/internal/slas.list
     * @secure
     */
    slasList: (query: SlasListParams, params?: RequestParams) => Promise<AxiosResponse<SlasListResponse, any>>;
    /**
     * @description ### Owner: lorinc.body@devrev.ai ### Lists SLAs matching a filter.
     *
     * @tags slas
     * @name SlasList
     * @request GET:/internal/slas.list
     * @secure */
    slasListPaginator(query: SlasListParams, params?: RequestParams): AsyncGenerator<SlasListResponse, void, unknown>;
    /**
     * @description Lists SLAs matching a filter.
     *
     * @tags slas
     * @name SlasListPost
     * @request POST:/internal/slas.list
     * @secure
     */
    slasListPost: (data: SlasListRequest, params?: RequestParams) => Promise<AxiosResponse<SlasListResponse, any>>;
    /**
     * @description Changes the status of an SLA.
     *
     * @tags slas
     * @name SlasTransition
     * @request POST:/internal/slas.transition
     * @secure
     */
    slasTransition: (data: SlasTransitionRequest, params?: RequestParams) => Promise<AxiosResponse<SlasTransitionResponse, any>>;
    /**
     * @description Updates a draft SLA.
     *
     * @tags slas
     * @name SlasUpdate
     * @request POST:/internal/slas.update
     * @secure
     */
    slasUpdate: (data: SlasUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<SlasUpdateResponse, any>>;
    /**
     * @description Initialize snap component.
     *
     * @tags snap-components
     * @name InitializeSnapComponent
     * @request POST:/internal/snap-components.initialize
     * @secure
     */
    initializeSnapComponent: (data: InitializeSnapComponentRequest, params?: RequestParams) => Promise<AxiosResponse<InitializeSnapComponentResponse, any>>;
    /**
     * @description ### Owner: srividya.tata@devrev.ai ### List snap components.
     *
     * @tags snap-components
     * @name ListSnapComponents
     * @request GET:/internal/snap-components.list
     * @secure
     */
    listSnapComponents: (query: ListSnapComponentsParams, params?: RequestParams) => Promise<AxiosResponse<ListSnapComponentsResponse, any>>;
    /**
     * @description ### Owner: srividya.tata@devrev.ai ### List snap components.
     *
     * @tags snap-components
     * @name ListSnapComponents
     * @request GET:/internal/snap-components.list
     * @secure */
    listSnapComponentsPaginator(query: ListSnapComponentsParams, params?: RequestParams): AsyncGenerator<ListSnapComponentsResponse, void, unknown>;
    /**
     * @description List snap components.
     *
     * @tags snap-components
     * @name ListSnapComponentsPost
     * @request POST:/internal/snap-components.list
     * @secure
     */
    listSnapComponentsPost: (data: ListSnapComponentsRequest, params?: RequestParams) => Promise<AxiosResponse<ListSnapComponentsResponse, any>>;
    /**
     * @description Creates a snap-in package.
     *
     * @tags snap-in-packages
     * @name SnapInPackagesCreate
     * @request POST:/internal/snap-in-packages.create
     * @secure
     */
    snapInPackagesCreate: (data: SnapInPackagesCreateRequest, params?: RequestParams) => Promise<AxiosResponse<SnapInPackagesCreateResponse, any>>;
    /**
     * @description Deletes a snap-in package.
     *
     * @tags snap-in-packages
     * @name SnapInPackagesDelete
     * @request POST:/internal/snap-in-packages.delete
     * @secure
     */
    snapInPackagesDelete: (data: SnapInPackagesDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description ### Owner: peter.marinsek@devrev.ai ### Gets a snap-in package.
     *
     * @tags snap-in-packages
     * @name SnapInPackagesGet
     * @request GET:/internal/snap-in-packages.get
     * @secure
     */
    snapInPackagesGet: (query: SnapInPackagesGetParams, params?: RequestParams) => Promise<AxiosResponse<SnapInPackagesGetResponse, any>>;
    /**
     * @description Gets a snap-in package.
     *
     * @tags snap-in-packages
     * @name SnapInPackagesGetPost
     * @request POST:/internal/snap-in-packages.get
     * @secure
     */
    snapInPackagesGetPost: (data: SnapInPackagesGetRequest, params?: RequestParams) => Promise<AxiosResponse<SnapInPackagesGetResponse, any>>;
    /**
     * @description ### Owner: peter.marinsek@devrev.ai ### Lists snap-in packages for a Dev organization.
     *
     * @tags snap-in-packages
     * @name SnapInPackagesList
     * @request GET:/internal/snap-in-packages.list
     * @secure
     */
    snapInPackagesList: (query: SnapInPackagesListParams, params?: RequestParams) => Promise<AxiosResponse<SnapInPackagesListResponse, any>>;
    /**
     * @description ### Owner: peter.marinsek@devrev.ai ### Lists snap-in packages for a Dev organization.
     *
     * @tags snap-in-packages
     * @name SnapInPackagesList
     * @request GET:/internal/snap-in-packages.list
     * @secure */
    snapInPackagesListPaginator(query: SnapInPackagesListParams, params?: RequestParams): AsyncGenerator<SnapInPackagesListResponse, void, unknown>;
    /**
     * @description Lists snap-in packages for a Dev organization.
     *
     * @tags snap-in-packages
     * @name SnapInPackagesListPost
     * @request POST:/internal/snap-in-packages.list
     * @secure
     */
    snapInPackagesListPost: (data: SnapInPackagesListRequest, params?: RequestParams) => Promise<AxiosResponse<SnapInPackagesListResponse, any>>;
    /**
     * @description ### Owner: umang.malik@devrev.ai ### Fetches the logs for the snap-in-package based on the filters specified.
     *
     * @tags snap-in-packages
     * @name SnapInPackagesLogsFetch
     * @request GET:/internal/snap-in-packages.logs.fetch
     * @secure
     */
    snapInPackagesLogsFetch: (query: SnapInPackagesLogsFetchParams, params?: RequestParams) => Promise<AxiosResponse<SnapInPackagesLogsFetchResponse, any>>;
    /**
     * @description ### Owner: umang.malik@devrev.ai ### Fetches the logs for the snap-in-package based on the filters specified.
     *
     * @tags snap-in-packages
     * @name SnapInPackagesLogsFetch
     * @request GET:/internal/snap-in-packages.logs.fetch
     * @secure */
    snapInPackagesLogsFetchPaginator(query: SnapInPackagesLogsFetchParams, params?: RequestParams): AsyncGenerator<SnapInPackagesLogsFetchResponse, void, unknown>;
    /**
     * @description Fetches the logs for the snap-in-package based on the filters specified.
     *
     * @tags snap-in-packages
     * @name SnapInPackagesLogsFetchPost
     * @request POST:/internal/snap-in-packages.logs.fetch
     * @secure
     */
    snapInPackagesLogsFetchPost: (data: SnapInPackagesLogsFetchRequest, params?: RequestParams) => Promise<AxiosResponse<SnapInPackagesLogsFetchResponse, any>>;
    /**
     * @description Updates a snap-in package.
     *
     * @tags snap-in-packages
     * @name SnapInPackagesUpdate
     * @request POST:/internal/snap-in-packages.update
     * @secure
     */
    snapInPackagesUpdate: (data: SnapInPackagesUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<SnapInPackagesUpdateResponse, any>>;
    /**
     * @description Validates a Snap-in package's slug.
     *
     * @tags snap-in-packages
     * @name SnapInPackagesValidateSlug
     * @request POST:/internal/snap-in-packages.validate-slug
     * @secure
     */
    snapInPackagesValidateSlug: (data: SnapInPackagesValidateSlugRequest, params?: RequestParams) => Promise<AxiosResponse<SnapInPackagesValidateSlugResponse, any>>;
    /**
     * @description Creates snap-in preferences for a user in a snap-in.
     *
     * @tags snap-ins
     * @name SnapInPreferencesCreate
     * @request POST:/internal/snap-in-preferences.create
     * @secure
     */
    snapInPreferencesCreate: (data: SnapInPreferencesCreateRequest, params?: RequestParams) => Promise<AxiosResponse<SnapInPreferencesCreateResponse, any>>;
    /**
     * @description ### Owner: navneel.mandal@devrev.ai ### Gets snap-in preferences for a user in a snap-in.
     *
     * @tags snap-ins
     * @name SnapInPreferencesGet
     * @request GET:/internal/snap-in-preferences.get
     * @secure
     */
    snapInPreferencesGet: (query: SnapInPreferencesGetParams, params?: RequestParams) => Promise<AxiosResponse<SnapInPreferencesGetResponse, any>>;
    /**
     * @description Gets snap-in preferences for a user in a snap-in.
     *
     * @tags snap-ins
     * @name SnapInPreferencesGetPost
     * @request POST:/internal/snap-in-preferences.get
     * @secure
     */
    snapInPreferencesGetPost: (data: SnapInPreferencesGetRequest, params?: RequestParams) => Promise<AxiosResponse<SnapInPreferencesGetResponse, any>>;
    /**
     * @description Updates snap-in preferences' state for a user in a snap-in.
     *
     * @tags snap-ins
     * @name SnapInPreferencesStateUpdate
     * @request POST:/internal/snap-in-preferences.state-update
     * @secure
     */
    snapInPreferencesStateUpdate: (data: SnapInPreferencesStateUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<SnapInPreferencesStateUpdateResponse, any>>;
    /**
     * @description Updates snap-in preferences for a user in a snap-in.
     *
     * @tags snap-ins
     * @name SnapInPreferencesUpdate
     * @request POST:/internal/snap-in-preferences.update
     * @secure
     */
    snapInPreferencesUpdate: (data: SnapInPreferencesUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<SnapInPreferencesUpdateResponse, any>>;
    /**
     * @description Creates a snap-in version.
     *
     * @tags snap-in-versions
     * @name SnapInVersionsCreate
     * @request POST:/internal/snap-in-versions.create
     * @secure
     */
    snapInVersionsCreate: (data: SnapInVersionsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<SnapInVersionsCreateResponse, any>>;
    /**
     * @description Deletes a snap-in version.
     *
     * @tags snap-in-versions
     * @name SnapInVersionsDelete
     * @request POST:/internal/snap-in-versions.delete
     * @secure
     */
    snapInVersionsDelete: (data: SnapInVersionsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description ### Owner: peter.marinsek@devrev.ai ### Gets a snap-in version.
     *
     * @tags snap-in-versions
     * @name SnapInVersionsGet
     * @request GET:/internal/snap-in-versions.get
     * @secure
     */
    snapInVersionsGet: (query: SnapInVersionsGetParams, params?: RequestParams) => Promise<AxiosResponse<SnapInVersionsGetResponse, any>>;
    /**
     * @description Gets a snap-in version.
     *
     * @tags snap-in-versions
     * @name SnapInVersionsGetPost
     * @request POST:/internal/snap-in-versions.get
     * @secure
     */
    snapInVersionsGetPost: (data: SnapInVersionsGetRequest, params?: RequestParams) => Promise<AxiosResponse<SnapInVersionsGetResponse, any>>;
    /**
     * @description ### Owner: harpinder.singh@devrev.ai ### Lists snap-in versions for a Dev organization.
     *
     * @tags snap-in-versions
     * @name SnapInVersionsList
     * @request GET:/internal/snap-in-versions.list
     * @secure
     */
    snapInVersionsList: (query: SnapInVersionsListParams, params?: RequestParams) => Promise<AxiosResponse<SnapInVersionsListResponse, any>>;
    /**
     * @description ### Owner: harpinder.singh@devrev.ai ### Lists snap-in versions for a Dev organization.
     *
     * @tags snap-in-versions
     * @name SnapInVersionsList
     * @request GET:/internal/snap-in-versions.list
     * @secure */
    snapInVersionsListPaginator(query: SnapInVersionsListParams, params?: RequestParams): AsyncGenerator<SnapInVersionsListResponse, void, unknown>;
    /**
     * @description Lists snap-in versions for a Dev organization.
     *
     * @tags snap-in-versions
     * @name SnapInVersionsListPost
     * @request POST:/internal/snap-in-versions.list
     * @secure
     */
    snapInVersionsListPost: (data: SnapInVersionsListRequest, params?: RequestParams) => Promise<AxiosResponse<SnapInVersionsListResponse, any>>;
    /**
     * @description Checks whether a Snap-in version is upgradable to new definition.
     *
     * @tags snap-in-versions
     * @name SnapInVersionsUpgradabilityCheck
     * @request POST:/internal/snap-in-versions.upgradability-check
     * @secure
     */
    snapInVersionsUpgradabilityCheck: (data: SnapInVersionsUpgradabilityCheckRequest, params?: RequestParams) => Promise<AxiosResponse<SnapInVersionsUpgradabilityCheckResponse, any>>;
    /**
     * @description Upgrades the given snap-in version.
     *
     * @tags snap-in-versions
     * @name SnapInVersionsUpgrade
     * @request POST:/internal/snap-in-versions.upgrade
     * @secure
     */
    snapInVersionsUpgrade: (data: SnapInVersionsUpgradeRequest, params?: RequestParams) => Promise<AxiosResponse<SnapInVersionsUpgradeResponse, any>>;
    /**
     * @description Validates a Snap-in version's manifest.
     *
     * @tags snap-in-versions
     * @name SnapInVersionsValidateManifest
     * @request POST:/internal/snap-in-versions.validate-manifest
     * @secure
     */
    snapInVersionsValidateManifest: (data: SnapInVersionsValidateManifestRequest, params?: RequestParams) => Promise<AxiosResponse<SnapInVersionsValidateManifestResponse, any>>;
    /**
     * @description Activates a snap-in.
     *
     * @tags snap-ins
     * @name SnapInsActivate
     * @request POST:/internal/snap-ins.activate
     * @secure
     */
    snapInsActivate: (data: SnapInsActivateRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Deactivates a snap-in.
     *
     * @tags snap-ins
     * @name SnapInsDeactivate
     * @request POST:/internal/snap-ins.deactivate
     * @secure
     */
    snapInsDeactivate: (data: SnapInsDeactivateRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Deletes a snap-in.
     *
     * @tags snap-ins
     * @name SnapInsDelete
     * @request POST:/internal/snap-ins.delete
     * @secure
     */
    snapInsDelete: (data: SnapInsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Creates a draft snap-in from given snap-in version.
     *
     * @tags snap-ins
     * @name SnapInsDraftCreate
     * @request POST:/internal/snap-ins.draft.create
     * @secure
     */
    snapInsDraftCreate: (data: SnapInsDraftCreateRequest, params?: RequestParams) => Promise<AxiosResponse<SnapInsDraftCreateResponse, any>>;
    /**
     * @description ### Owner: harpinder.singh@devrev.ai ### Gets a snap-in.
     *
     * @tags snap-ins
     * @name SnapInsGet
     * @request GET:/internal/snap-ins.get
     * @secure
     */
    snapInsGet: (query: SnapInsGetParams, params?: RequestParams) => Promise<AxiosResponse<SnapInsGetResponse, any>>;
    /**
     * @description Gets a snap-in.
     *
     * @tags snap-ins
     * @name SnapInsGetPost
     * @request POST:/internal/snap-ins.get
     * @secure
     */
    snapInsGetPost: (data: SnapInsGetRequest, params?: RequestParams) => Promise<AxiosResponse<SnapInsGetResponse, any>>;
    /**
     * @description ### Owner: harpinder.singh@devrev.ai ### Lists snap-ins for a Dev organization.
     *
     * @tags snap-ins
     * @name SnapInsList
     * @request GET:/internal/snap-ins.list
     * @secure
     */
    snapInsList: (query: SnapInsListParams, params?: RequestParams) => Promise<AxiosResponse<SnapInsListResponse, any>>;
    /**
     * @description ### Owner: harpinder.singh@devrev.ai ### Lists snap-ins for a Dev organization.
     *
     * @tags snap-ins
     * @name SnapInsList
     * @request GET:/internal/snap-ins.list
     * @secure */
    snapInsListPaginator(query: SnapInsListParams, params?: RequestParams): AsyncGenerator<SnapInsListResponse, void, unknown>;
    /**
     * @description Lists snap-ins for a Dev organization.
     *
     * @tags snap-ins
     * @name SnapInsListPost
     * @request POST:/internal/snap-ins.list
     * @secure
     */
    snapInsListPost: (data: SnapInsListRequest, params?: RequestParams) => Promise<AxiosResponse<SnapInsListResponse, any>>;
    /**
     * @description ### Owner: navneel.mandal@devrev.ai ### Gets snap-in resources for a user in a snap-in.
     *
     * @tags snap-ins
     * @name SnapInsResources
     * @request GET:/internal/snap-ins.resources
     * @secure
     */
    snapInsResources: (query: SnapInsResourcesParams, params?: RequestParams) => Promise<AxiosResponse<SnapInsResourcesResponse, any>>;
    /**
     * @description Gets snap-in resources for a user in a snap-in.
     *
     * @tags snap-ins
     * @name SnapInsResourcesPost
     * @request POST:/internal/snap-ins.resources
     * @secure
     */
    snapInsResourcesPost: (data: SnapInsResourcesRequest, params?: RequestParams) => Promise<AxiosResponse<SnapInsResourcesResponse, any>>;
    /**
     * @description System updates of a snap-in.
     *
     * @tags snap-ins
     * @name SnapInsSystemUpdate
     * @request POST:/internal/snap-ins.system-update
     * @secure
     */
    snapInsSystemUpdate: (data: SnapInsSystemUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<SnapInsSystemUpdateResponse, any>>;
    /**
     * @description Updates a snap-in.
     *
     * @tags snap-ins
     * @name SnapInsUpdate
     * @request POST:/internal/snap-ins.update
     * @secure
     */
    snapInsUpdate: (data: SnapInsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<SnapInsUpdateResponse, any>>;
    /**
     * @description Creates a deferred snap-kit action which gets executed at later point.
     *
     * @tags snap-kit-execution
     * @name SnapKitActionCreateDeferred
     * @request POST:/internal/snap-kit-action.create.deferred
     * @secure
     */
    snapKitActionCreateDeferred: (data: SnapKitActionCreateDeferredRequest, params?: RequestParams) => Promise<AxiosResponse<SnapKitActionCreateDeferredResponse, any>>;
    /**
     * @description Executes snap kit actions.
     *
     * @name ExecuteSnapKitAction
     * @request POST:/internal/snap-kit-action.execute
     * @secure
     */
    executeSnapKitAction: (data: ExecuteSnapKitActionRequest, params?: RequestParams) => Promise<AxiosResponse<ExecuteSnapKitActionResponse, any>>;
    /**
     * @description Executes deferred snap-kit actions.
     *
     * @tags snap-kit-execution
     * @name SnapKitActionExecuteDeferred
     * @request POST:/internal/snap-kit-action.execute.deferred
     * @secure
     */
    snapKitActionExecuteDeferred: (data: SnapKitActionExecuteDeferredRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Generate Snap-kit through natural language prompts within a multi-turn conversation context. Generates complete Snap-kit that can be rendered on various surfaces within the DevRev App.
     *
     * @name GenerateSnapKit
     * @request POST:/internal/snap-kit.generate
     * @secure
     */
    generateSnapKit: (data: GenerateSnapKitRequest, params?: RequestParams) => Promise<AxiosResponse<GenerateSnapKitResponse, any>>;
    /**
     * @description Create a snap widget object.
     *
     * @tags snap-widgets
     * @name SnapWidgetsCreate
     * @request POST:/internal/snap-widgets.create
     * @secure
     */
    snapWidgetsCreate: (data: SnapWidgetsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<SnapWidgetsCreateResponse, any>>;
    /**
     * @description Delete a snap widget object.
     *
     * @tags snap-widgets
     * @name SnapWidgetsDelete
     * @request POST:/internal/snap-widgets.delete
     * @secure
     */
    snapWidgetsDelete: (data: SnapWidgetsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: madhav.sikka@devrev.ai ### Get a snap widget object.
     *
     * @tags snap-widgets
     * @name SnapWidgetsGet
     * @request GET:/internal/snap-widgets.get
     * @secure
     */
    snapWidgetsGet: (query: SnapWidgetsGetParams, params?: RequestParams) => Promise<AxiosResponse<SnapWidgetsGetResponse, any>>;
    /**
     * @description Get a snap widget object.
     *
     * @tags snap-widgets
     * @name SnapWidgetsGetPost
     * @request POST:/internal/snap-widgets.get
     * @secure
     */
    snapWidgetsGetPost: (data: SnapWidgetsGetRequest, params?: RequestParams) => Promise<AxiosResponse<SnapWidgetsGetResponse, any>>;
    /**
     * @description ### Owner: madhav.sikka@devrev.ai ### List snap widget objects.
     *
     * @tags snap-widgets
     * @name SnapWidgetsList
     * @request GET:/internal/snap-widgets.list
     * @secure
     */
    snapWidgetsList: (query: SnapWidgetsListParams, params?: RequestParams) => Promise<AxiosResponse<SnapWidgetsListResponse, any>>;
    /**
     * @description ### Owner: madhav.sikka@devrev.ai ### List snap widget objects.
     *
     * @tags snap-widgets
     * @name SnapWidgetsList
     * @request GET:/internal/snap-widgets.list
     * @secure */
    snapWidgetsListPaginator(query: SnapWidgetsListParams, params?: RequestParams): AsyncGenerator<SnapWidgetsListResponse, void, unknown>;
    /**
     * @description List snap widget objects.
     *
     * @tags snap-widgets
     * @name SnapWidgetsListPost
     * @request POST:/internal/snap-widgets.list
     * @secure
     */
    snapWidgetsListPost: (data: SnapWidgetsListRequest, params?: RequestParams) => Promise<AxiosResponse<SnapWidgetsListResponse, any>>;
    /**
     * @description Update a snap widget object.
     *
     * @tags snap-widgets
     * @name SnapWidgetsUpdate
     * @request POST:/internal/snap-widgets.update
     * @secure
     */
    snapWidgetsUpdate: (data: SnapWidgetsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<SnapWidgetsUpdateResponse, any>>;
    /**
     * @description ### Owner: harpinder.singh@devrev.ai ### Lists snaps for a Dev organization.
     *
     * @tags flows, snap-ins
     * @name SnapsList
     * @request GET:/internal/snaps.list
     * @secure
     */
    snapsList: (params?: RequestParams) => Promise<AxiosResponse<SnapsListResponse, any>>;
    /**
     * @description Lists snaps for a Dev organization.
     *
     * @tags flows, snap-ins
     * @name SnapsListPost
     * @request POST:/internal/snaps.list
     * @secure
     */
    snapsListPost: (data: SnapsListRequest, params?: RequestParams) => Promise<AxiosResponse<SnapsListResponse, any>>;
    /**
     * @description ### Owner: brian.byrne@devrev.ai ### Connects to an open socket.
     *
     * @tags sockets
     * @name SocketsConnect
     * @request GET:/internal/sockets.connect
     * @secure
     */
    socketsConnect: (query: SocketsConnectParams, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Connects to an open socket.
     *
     * @tags sockets
     * @name SocketsConnectPost
     * @request POST:/internal/sockets.connect
     * @secure
     */
    socketsConnectPost: (data: SocketsConnectRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Opens a new socket.
     *
     * @tags sockets
     * @name SocketsOpen
     * @request POST:/internal/sockets.open
     * @secure
     */
    socketsOpen: (data: SocketsOpenRequest, params?: RequestParams) => Promise<AxiosResponse<SocketsOpenResponse, any>>;
    /**
     * @description Publishes socket actions on behalf of the client.
     *
     * @tags sockets
     * @name SocketsPublish
     * @request POST:/internal/sockets.publish
     * @secure
     */
    socketsPublish: (data: SocketsPublishRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Creates a stage diagram.
     *
     * @tags customization
     * @name StageDiagramsCreate
     * @request POST:/internal/stage-diagrams.create
     * @secure
     */
    stageDiagramsCreate: (data: StageDiagramsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<StageDiagramsCreateResponse, any>>;
    /**
     * @description Gets a stage diagram.
     *
     * @tags customization
     * @name StageDiagramsGet
     * @request GET:/internal/stage-diagrams.get
     * @secure
     */
    stageDiagramsGet: (query: StageDiagramsGetParams, params?: RequestParams) => Promise<AxiosResponse<StageDiagramsGetResponse, any>>;
    /**
     * @description Gets a stage diagram.
     *
     * @tags customization
     * @name StageDiagramsGetPost
     * @request POST:/internal/stage-diagrams.get
     * @secure
     */
    stageDiagramsGetPost: (data: StageDiagramsGetRequest, params?: RequestParams) => Promise<AxiosResponse<StageDiagramsGetResponse, any>>;
    /**
     * @description Lists stage diagrams.
     *
     * @tags customization
     * @name StageDiagramsList
     * @request GET:/internal/stage-diagrams.list
     * @secure
     */
    stageDiagramsList: (query: StageDiagramsListParams, params?: RequestParams) => Promise<AxiosResponse<StageDiagramsListResponse, any>>;
    /**
     * @description Lists stage diagrams.
     *
     * @tags customization
     * @name StageDiagramsList
     * @request GET:/internal/stage-diagrams.list
     * @secure */
    stageDiagramsListPaginator(query: StageDiagramsListParams, params?: RequestParams): AsyncGenerator<StageDiagramsListResponse, void, unknown>;
    /**
     * @description Lists stage diagrams.
     *
     * @tags customization
     * @name StageDiagramsListPost
     * @request POST:/internal/stage-diagrams.list
     * @secure
     */
    stageDiagramsListPost: (data: StageDiagramsListRequest, params?: RequestParams) => Promise<AxiosResponse<StageDiagramsListResponse, any>>;
    /**
     * @description Updates a stage diagram.
     *
     * @tags customization
     * @name StageDiagramsUpdate
     * @request POST:/internal/stage-diagrams.update
     * @secure
     */
    stageDiagramsUpdate: (data: StageDiagramsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<StageDiagramsUpdateResponse, any>>;
    /**
     * @description Creates a custom stage.
     *
     * @tags customization
     * @name CustomStagesCreate
     * @request POST:/internal/stages.custom.create
     * @secure
     */
    customStagesCreate: (data: CustomStagesCreateRequest, params?: RequestParams) => Promise<AxiosResponse<CustomStagesCreateResponse, any>>;
    /**
     * @description Gets a custom stage.
     *
     * @tags customization
     * @name CustomStagesGet
     * @request GET:/internal/stages.custom.get
     * @secure
     */
    customStagesGet: (query: CustomStagesGetParams, params?: RequestParams) => Promise<AxiosResponse<CustomStagesGetResponse, any>>;
    /**
     * @description Gets a custom stage.
     *
     * @tags customization
     * @name CustomStagesGetPost
     * @request POST:/internal/stages.custom.get
     * @secure
     */
    customStagesGetPost: (data: CustomStagesGetRequest, params?: RequestParams) => Promise<AxiosResponse<CustomStagesGetResponse, any>>;
    /**
     * @description Lists custom stages.
     *
     * @tags customization
     * @name CustomStagesList
     * @request GET:/internal/stages.custom.list
     * @secure
     */
    customStagesList: (query: CustomStagesListParams, params?: RequestParams) => Promise<AxiosResponse<CustomStagesListResponse, any>>;
    /**
     * @description Lists custom stages.
     *
     * @tags customization
     * @name CustomStagesList
     * @request GET:/internal/stages.custom.list
     * @secure */
    customStagesListPaginator(query: CustomStagesListParams, params?: RequestParams): AsyncGenerator<CustomStagesListResponse, void, unknown>;
    /**
     * @description Lists custom stages.
     *
     * @tags customization
     * @name CustomStagesListPost
     * @request POST:/internal/stages.custom.list
     * @secure
     */
    customStagesListPost: (data: CustomStagesListRequest, params?: RequestParams) => Promise<AxiosResponse<CustomStagesListResponse, any>>;
    /**
     * @description Updates a custom stage.
     *
     * @tags customization
     * @name CustomStagesUpdate
     * @request POST:/internal/stages.custom.update
     * @secure
     */
    customStagesUpdate: (data: CustomStagesUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<CustomStagesUpdateResponse, any>>;
    /**
     * @description Creates a custom state.
     *
     * @tags customization
     * @name CustomStatesCreate
     * @request POST:/internal/states.custom.create
     * @secure
     */
    customStatesCreate: (data: CustomStatesCreateRequest, params?: RequestParams) => Promise<AxiosResponse<CustomStatesCreateResponse, any>>;
    /**
     * @description Gets a custom state.
     *
     * @tags customization
     * @name CustomStatesGet
     * @request GET:/internal/states.custom.get
     * @secure
     */
    customStatesGet: (query: CustomStatesGetParams, params?: RequestParams) => Promise<AxiosResponse<CustomStatesGetResponse, any>>;
    /**
     * @description Gets a custom state.
     *
     * @tags customization
     * @name CustomStatesGetPost
     * @request POST:/internal/states.custom.get
     * @secure
     */
    customStatesGetPost: (data: CustomStatesGetRequest, params?: RequestParams) => Promise<AxiosResponse<CustomStatesGetResponse, any>>;
    /**
     * @description Lists custom states.
     *
     * @tags customization
     * @name CustomStatesList
     * @request GET:/internal/states.custom.list
     * @secure
     */
    customStatesList: (query: CustomStatesListParams, params?: RequestParams) => Promise<AxiosResponse<CustomStatesListResponse, any>>;
    /**
     * @description Lists custom states.
     *
     * @tags customization
     * @name CustomStatesList
     * @request GET:/internal/states.custom.list
     * @secure */
    customStatesListPaginator(query: CustomStatesListParams, params?: RequestParams): AsyncGenerator<CustomStatesListResponse, void, unknown>;
    /**
     * @description Lists custom states.
     *
     * @tags customization
     * @name CustomStatesListPost
     * @request POST:/internal/states.custom.list
     * @secure
     */
    customStatesListPost: (data: CustomStatesListRequest, params?: RequestParams) => Promise<AxiosResponse<CustomStatesListResponse, any>>;
    /**
     * @description Updates a custom state.
     *
     * @tags customization
     * @name CustomStatesUpdate
     * @request POST:/internal/states.custom.update
     * @secure
     */
    customStatesUpdate: (data: CustomStatesUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<CustomStatesUpdateResponse, any>>;
    /**
     * @description Deregisters an email event source from the support settings.
     *
     * @tags support-settings
     * @name DeregisterEmailEventSource
     * @request POST:/internal/support-settings.event-source-subdomains.deregister
     * @secure
     */
    deregisterEmailEventSource: (data: EmailEventSourceDeregisterRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Gets the event source id from the default sub domain in support settings.
     *
     * @tags support-settings
     * @name GetEmailEventSource
     * @request POST:/internal/support-settings.event-source-subdomains.get
     * @secure
     */
    getEmailEventSource: (data: EmailEventSourceGetRequest, params?: RequestParams) => Promise<AxiosResponse<EmailEventSourceGetResponse, any>>;
    /**
     * @description Registers an email event source in the support settings.
     *
     * @tags support-settings
     * @name RegisterEmailEventSource
     * @request POST:/internal/support-settings.event-source-subdomains.register
     * @secure
     */
    registerEmailEventSource: (data: EmailEventSourceRegisterRequest, params?: RequestParams) => Promise<AxiosResponse<EmailEventSourceRegisterResponse, any>>;
    /**
     * @description Creates a schema for survey, which includes name and description of schema.
     *
     * @tags surveys
     * @name SurveysCreate
     * @request POST:/internal/surveys.create
     * @secure
     */
    surveysCreate: (data: SurveysCreateRequest, params?: RequestParams) => Promise<AxiosResponse<SurveysCreateResponse, any>>;
    /**
     * @description Deletes the specified survey.
     *
     * @tags surveys
     * @name SurveysDelete
     * @request POST:/internal/surveys.delete
     * @secure
     */
    surveysDelete: (data: SurveysDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: i-praneeth.bala@devrev.ai ### Gets a survey given the ID.
     *
     * @tags surveys
     * @name SurveysGet
     * @request GET:/internal/surveys.get
     * @secure
     */
    surveysGet: (query: SurveysGetParams, params?: RequestParams) => Promise<AxiosResponse<SurveysGetResponse, any>>;
    /**
     * @description Gets a survey given the ID.
     *
     * @tags surveys
     * @name SurveysGetPost
     * @request POST:/internal/surveys.get
     * @secure
     */
    surveysGetPost: (data: SurveysGetRequest, params?: RequestParams) => Promise<AxiosResponse<SurveysGetResponse, any>>;
    /**
     * @description ### Owner: amit.gosavi@devrev.ai ### List surveys requested by the user.
     *
     * @tags surveys
     * @name SurveysList
     * @request GET:/internal/surveys.list
     * @secure
     */
    surveysList: (query: SurveysListParams, params?: RequestParams) => Promise<AxiosResponse<SurveysListResponse, any>>;
    /**
     * @description ### Owner: amit.gosavi@devrev.ai ### List surveys requested by the user.
     *
     * @tags surveys
     * @name SurveysList
     * @request GET:/internal/surveys.list
     * @secure */
    surveysListPaginator(query: SurveysListParams, params?: RequestParams): AsyncGenerator<SurveysListResponse, void, unknown>;
    /**
     * @description List surveys requested by the user.
     *
     * @tags surveys
     * @name SurveysListPost
     * @request POST:/internal/surveys.list
     * @secure
     */
    surveysListPost: (data: SurveysListRequest, params?: RequestParams) => Promise<AxiosResponse<SurveysListResponse, any>>;
    /**
     * @description ### Owner: amit.gosavi@devrev.ai ### List survey responses requested by the user.
     *
     * @tags surveys
     * @name SurveysResponsesList
     * @request GET:/internal/surveys.responses.list
     * @secure
     */
    surveysResponsesList: (query: SurveysResponsesListParams, params?: RequestParams) => Promise<AxiosResponse<SurveysResponsesListResponse, any>>;
    /**
     * @description ### Owner: amit.gosavi@devrev.ai ### List survey responses requested by the user.
     *
     * @tags surveys
     * @name SurveysResponsesList
     * @request GET:/internal/surveys.responses.list
     * @secure */
    surveysResponsesListPaginator(query: SurveysResponsesListParams, params?: RequestParams): AsyncGenerator<SurveysResponsesListResponse, void, unknown>;
    /**
     * @description List survey responses requested by the user.
     *
     * @tags surveys
     * @name SurveysResponsesListPost
     * @request POST:/internal/surveys.responses.list
     * @secure
     */
    surveysResponsesListPost: (data: SurveysResponsesListRequest, params?: RequestParams) => Promise<AxiosResponse<SurveysResponsesListResponse, any>>;
    /**
     * @description Updates a user's survey response for the provided dispatch ID.
     *
     * @tags surveys
     * @name SurveysResponsesUpdate
     * @request POST:/internal/surveys.responses.update
     * @secure
     */
    surveysResponsesUpdate: (data: SurveysResponsesUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Sends a survey on the specified channels.
     *
     * @tags surveys
     * @name SurveysSend
     * @request POST:/internal/surveys.send
     * @secure
     */
    surveysSend: (data: SurveysSendRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Submits a user response to a survey, which is defined by the survey ID.
     *
     * @tags surveys
     * @name SurveysSubmit
     * @request POST:/internal/surveys.submit
     * @secure
     */
    surveysSubmit: (data: SurveysSubmitRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Gets the requested user's information.
     *
     * @tags sys-users
     * @name SysUsersGet
     * @request GET:/internal/sys-users.get
     * @secure
     */
    sysUsersGet: (query: SysUsersGetParams, params?: RequestParams) => Promise<AxiosResponse<SysUsersGetResponse, any>>;
    /**
     * @description Gets the requested user's information.
     *
     * @tags sys-users
     * @name SysUsersGetPost
     * @request POST:/internal/sys-users.get
     * @secure
     */
    sysUsersGetPost: (data: SysUsersGetRequest, params?: RequestParams) => Promise<AxiosResponse<SysUsersGetResponse, any>>;
    /**
     * @description ### Owner: akanksha.deswal@devrev.ai ### Lists system users within your organization.
     *
     * @tags sys-users
     * @name SysUsersList
     * @request GET:/internal/sys-users.list
     * @secure
     */
    sysUsersList: (query: SysUsersListParams, params?: RequestParams) => Promise<AxiosResponse<SysUsersListResponse, any>>;
    /**
     * @description ### Owner: akanksha.deswal@devrev.ai ### Lists system users within your organization.
     *
     * @tags sys-users
     * @name SysUsersList
     * @request GET:/internal/sys-users.list
     * @secure */
    sysUsersListPaginator(query: SysUsersListParams, params?: RequestParams): AsyncGenerator<SysUsersListResponse, void, unknown>;
    /**
     * @description Lists system users within your organization.
     *
     * @tags sys-users
     * @name SysUsersListPost
     * @request POST:/internal/sys-users.list
     * @secure
     */
    sysUsersListPost: (data: SysUsersListRequest, params?: RequestParams) => Promise<AxiosResponse<SysUsersListResponse, any>>;
    /**
     * @description Updates the system user.
     *
     * @tags sys-users
     * @name SysUsersUpdate
     * @request POST:/internal/sys-users.update
     * @secure
     */
    sysUsersUpdate: (data: SysUsersUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<SysUsersUpdateResponse, any>>;
    /**
     * @description Creates a new tag, which is used to create associations between objects and a logical concept denoted by the tag's name.
     *
     * @tags tags
     * @name TagsCreate
     * @request POST:/internal/tags.create
     * @secure
     */
    tagsCreate: (data: TagsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<TagsCreateResponse, any>>;
    /**
     * @description Deletes a tag.
     *
     * @tags tags
     * @name TagsDelete
     * @request POST:/internal/tags.delete
     * @secure
     */
    tagsDelete: (data: TagsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Gets a tag's information.
     *
     * @tags tags
     * @name TagsGet
     * @request GET:/internal/tags.get
     * @secure
     */
    tagsGet: (query: TagsGetParams, params?: RequestParams) => Promise<AxiosResponse<TagsGetResponse, any>>;
    /**
     * @description Gets a tag's information.
     *
     * @tags tags
     * @name TagsGetPost
     * @request POST:/internal/tags.get
     * @secure
     */
    tagsGetPost: (data: TagsGetRequest, params?: RequestParams) => Promise<AxiosResponse<TagsGetResponse, any>>;
    /**
     * @description Lists the available tags.
     *
     * @tags tags
     * @name TagsList
     * @request GET:/internal/tags.list
     * @secure
     */
    tagsList: (query: TagsListParams, params?: RequestParams) => Promise<AxiosResponse<TagsListResponse, any>>;
    /**
     * @description Lists the available tags.
     *
     * @tags tags
     * @name TagsList
     * @request GET:/internal/tags.list
     * @secure */
    tagsListPaginator(query: TagsListParams, params?: RequestParams): AsyncGenerator<TagsListResponse, void, unknown>;
    /**
     * @description Lists the available tags.
     *
     * @tags tags
     * @name TagsListPost
     * @request POST:/internal/tags.list
     * @secure
     */
    tagsListPost: (data: TagsListRequest, params?: RequestParams) => Promise<AxiosResponse<TagsListResponse, any>>;
    /**
     * @description Updates a tag's information.
     *
     * @tags tags
     * @name TagsUpdate
     * @request POST:/internal/tags.update
     * @secure
     */
    tagsUpdate: (data: TagsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<TagsUpdateResponse, any>>;
    /**
     * @description Gets the quote term templates objects based on the given filters.
     *
     * @tags commerce
     * @name QuoteTermTemplatesList
     * @request GET:/internal/term-templates.list
     * @secure
     */
    quoteTermTemplatesList: (query: QuoteTermTemplatesListParams, params?: RequestParams) => Promise<AxiosResponse<QuoteTermTemplatesListResponse, any>>;
    /**
     * @description Gets the quote term templates objects based on the given filters.
     *
     * @tags commerce
     * @name QuoteTermTemplatesList
     * @request GET:/internal/term-templates.list
     * @secure */
    quoteTermTemplatesListPaginator(query: QuoteTermTemplatesListParams, params?: RequestParams): AsyncGenerator<QuoteTermTemplatesListResponse, void, unknown>;
    /**
     * @description Gets the quote term templates objects based on the given filters.
     *
     * @tags commerce
     * @name QuoteTermTemplatesListPost
     * @request POST:/internal/term-templates.list
     * @secure
     */
    quoteTermTemplatesListPost: (data: QuoteTermTemplatesListRequest, params?: RequestParams) => Promise<AxiosResponse<QuoteTermTemplatesListResponse, any>>;
    /**
     * @description Creates a new entry on an object's timeline.
     *
     * @tags timeline-entries
     * @name TimelineEntriesCreate
     * @request POST:/internal/timeline-entries.create
     * @secure
     */
    timelineEntriesCreate: (data: TimelineEntriesCreateRequest, params?: RequestParams) => Promise<AxiosResponse<TimelineEntriesCreateResponse, any>>;
    /**
     * @description Deletes an entry from an object's timeline.
     *
     * @tags timeline-entries
     * @name TimelineEntriesDelete
     * @request POST:/internal/timeline-entries.delete
     * @secure
     */
    timelineEntriesDelete: (data: TimelineEntriesDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: brian.byrne@devrev.ai ### Gets an entry on an object's timeline.
     *
     * @tags timeline-entries
     * @name TimelineEntriesGet
     * @request GET:/internal/timeline-entries.get
     * @secure
     */
    timelineEntriesGet: (query: TimelineEntriesGetParams, params?: RequestParams) => Promise<AxiosResponse<TimelineEntriesGetResponse, any>>;
    /**
     * @description Gets an entry on an object's timeline.
     *
     * @tags timeline-entries
     * @name TimelineEntriesGetPost
     * @request POST:/internal/timeline-entries.get
     * @secure
     */
    timelineEntriesGetPost: (data: TimelineEntriesGetRequest, params?: RequestParams) => Promise<AxiosResponse<TimelineEntriesGetResponse, any>>;
    /**
     * @description ### Owner: brian.byrne@devrev.ai ### Lists the timeline entries for an object.
     *
     * @tags timeline-entries
     * @name TimelineEntriesList
     * @request GET:/internal/timeline-entries.list
     * @secure
     */
    timelineEntriesList: (query: TimelineEntriesListParams, params?: RequestParams) => Promise<AxiosResponse<TimelineEntriesListResponse, any>>;
    /**
     * @description ### Owner: brian.byrne@devrev.ai ### Lists the timeline entries for an object.
     *
     * @tags timeline-entries
     * @name TimelineEntriesList
     * @request GET:/internal/timeline-entries.list
     * @secure */
    timelineEntriesListPaginator(query: TimelineEntriesListParams, params?: RequestParams): AsyncGenerator<TimelineEntriesListResponse, void, unknown>;
    /**
     * @description Lists the timeline entries for an object.
     *
     * @tags timeline-entries
     * @name TimelineEntriesListPost
     * @request POST:/internal/timeline-entries.list
     * @secure
     */
    timelineEntriesListPost: (data: TimelineEntriesListRequest, params?: RequestParams) => Promise<AxiosResponse<TimelineEntriesListResponse, any>>;
    /**
     * @description Updates an entry on an object's timeline.
     *
     * @tags timeline-entries
     * @name TimelineEntriesUpdate
     * @request POST:/internal/timeline-entries.update
     * @secure
     */
    timelineEntriesUpdate: (data: TimelineEntriesUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<TimelineEntriesUpdateResponse, any>>;
    /**
     * @description Converters DevRev Markdown to HTML
     *
     * @tags tools
     * @name ConvertMarkdownToHtml
     * @request POST:/internal/tools.convert-markdown-to-html
     * @secure
     */
    convertMarkdownToHtml: (data: MarkdownToHtmlRequest, params?: RequestParams) => Promise<AxiosResponse<MarkdownToHtmlResponse, any>>;
    /**
     * @description Allows publishing of events (example from plug widget).
     *
     * @tags event-source
     * @name TrackEventsPublish
     * @request POST:/internal/track-events.publish
     * @secure
     */
    trackEventsPublish: (data: TrackEventsPublishRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Translates input text to specified target language.
     *
     * @tags translation
     * @name Translate
     * @request POST:/internal/translate
     * @secure
     */
    translate: (data: TranslateRequest, params?: RequestParams) => Promise<AxiosResponse<TranslateResponse, any>>;
    /**
     * @description Returns the supported languages for translation.
     *
     * @tags translation
     * @name TranslationLanguagesList
     * @request GET:/internal/translation.languages.list
     * @secure
     */
    translationLanguagesList: (query: TranslationLanguagesListParams, params?: RequestParams) => Promise<AxiosResponse<SupportedLanguagesResponse, any>>;
    /**
     * @description Returns the supported languages for translation.
     *
     * @tags translation
     * @name TranslationLanguagesListPost
     * @request POST:/internal/translation.languages.list
     * @secure
     */
    translationLanguagesListPost: (data: SupportedLanguagesRequest, params?: RequestParams) => Promise<AxiosResponse<SupportedLanguagesResponse, any>>;
    /**
     * @description Translates input text to specified target language.
     *
     * @tags translation
     * @name TranslationTranslate
     * @request POST:/internal/translation.translate
     * @secure
     */
    translationTranslate: (data: TranslateRequest, params?: RequestParams) => Promise<AxiosResponse<TranslateResponse, any>>;
    /**
     * @description Spacebar suggestions.
     *
     * @name TuringSuggestions
     * @request POST:/internal/turing.suggestions
     * @secure
     */
    turingSuggestions: (data: TuringSuggestionsRequest, params?: RequestParams) => Promise<AxiosResponse<TuringSuggestionsResponse, any>>;
    /**
     * @description Counts the number of Unit of Measurements based on the given filters.
     *
     * @tags product-usage
     * @name UomsCount
     * @request GET:/internal/uoms.count
     * @secure
     */
    uomsCount: (query: UomsCountParams, params?: RequestParams) => Promise<AxiosResponse<UomsCountResponse, any>>;
    /**
     * @description Counts the number of Unit of Measurements based on the given filters.
     *
     * @tags product-usage
     * @name UomsCountPost
     * @request POST:/internal/uoms.count
     * @secure
     */
    uomsCountPost: (data: UomsCountRequest, params?: RequestParams) => Promise<AxiosResponse<UomsCountResponse, any>>;
    /**
     * @description Creates a Unit of Measurement on a part.
     *
     * @tags product-usage
     * @name UomsCreate
     * @request POST:/internal/uoms.create
     * @secure
     */
    uomsCreate: (data: UomsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<UomsCreateResponse, any>>;
    /**
     * @description Deletes a Unit of Measurement.
     *
     * @tags product-usage
     * @name UomsDelete
     * @request POST:/internal/uoms.delete
     * @secure
     */
    uomsDelete: (data: UomsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description Gets a Unit of Measurement.
     *
     * @tags product-usage
     * @name UomsGet
     * @request GET:/internal/uoms.get
     * @secure
     */
    uomsGet: (query: UomsGetParams, params?: RequestParams) => Promise<AxiosResponse<UomsGetResponse, any>>;
    /**
     * @description Gets a Unit of Measurement.
     *
     * @tags product-usage
     * @name UomsGetPost
     * @request POST:/internal/uoms.get
     * @secure
     */
    uomsGetPost: (data: UomsGetRequest, params?: RequestParams) => Promise<AxiosResponse<UomsGetResponse, any>>;
    /**
     * @description Gets the Unit of Measurements based on the given filters.
     *
     * @tags product-usage
     * @name UomsList
     * @request GET:/internal/uoms.list
     * @secure
     */
    uomsList: (query: UomsListParams, params?: RequestParams) => Promise<AxiosResponse<UomsListResponse, any>>;
    /**
     * @description Gets the Unit of Measurements based on the given filters.
     *
     * @tags product-usage
     * @name UomsList
     * @request GET:/internal/uoms.list
     * @secure */
    uomsListPaginator(query: UomsListParams, params?: RequestParams): AsyncGenerator<UomsListResponse, void, unknown>;
    /**
     * @description Gets the Unit of Measurements based on the given filters.
     *
     * @tags product-usage
     * @name UomsListPost
     * @request POST:/internal/uoms.list
     * @secure
     */
    uomsListPost: (data: UomsListRequest, params?: RequestParams) => Promise<AxiosResponse<UomsListResponse, any>>;
    /**
     * @description Updates a Unit of Measurement.
     *
     * @tags product-usage
     * @name UomsUpdate
     * @request POST:/internal/uoms.update
     * @secure
     */
    uomsUpdate: (data: UomsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<UomsUpdateResponse, any>>;
    /**
     * @description Create a user session object.
     *
     * @tags user-sessions
     * @name UserSessionCreate
     * @request POST:/internal/user-sessions.create
     * @secure
     */
    userSessionCreate: (data: UserSessionsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<UserSessionsCreateResponse, any>>;
    /**
     * @description Delete a user session object.
     *
     * @tags user-sessions
     * @name UserSessionDelete
     * @request POST:/internal/user-sessions.delete
     * @secure
     */
    userSessionDelete: (data: UserSessionsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: i-harsh.agarwal@devrev.ai ### Get a user session object.
     *
     * @tags user-sessions
     * @name UserSessionGet
     * @request GET:/internal/user-sessions.get
     * @secure
     */
    userSessionGet: (query: UserSessionGetParams, params?: RequestParams) => Promise<AxiosResponse<UserSessionsGetResponse, any>>;
    /**
     * @description Get a user session object.
     *
     * @tags user-sessions
     * @name UserSessionGetPost
     * @request POST:/internal/user-sessions.get
     * @secure
     */
    userSessionGetPost: (data: UserSessionsGetRequest, params?: RequestParams) => Promise<AxiosResponse<UserSessionsGetResponse, any>>;
    /**
     * @description ### Owner: i-harsh.agarwal@devrev.ai ### List user session objects.
     *
     * @tags user-sessions
     * @name UserSessionList
     * @request GET:/internal/user-sessions.list
     * @secure
     */
    userSessionList: (query: UserSessionListParams, params?: RequestParams) => Promise<AxiosResponse<UserSessionsListResponse, any>>;
    /**
     * @description ### Owner: i-harsh.agarwal@devrev.ai ### List user session objects.
     *
     * @tags user-sessions
     * @name UserSessionList
     * @request GET:/internal/user-sessions.list
     * @secure */
    userSessionListPaginator(query: UserSessionListParams, params?: RequestParams): AsyncGenerator<UserSessionsListResponse, void, unknown>;
    /**
     * @description List user session objects.
     *
     * @tags user-sessions
     * @name UserSessionListPost
     * @request POST:/internal/user-sessions.list
     * @secure
     */
    userSessionListPost: (data: UserSessionsListRequest, params?: RequestParams) => Promise<AxiosResponse<UserSessionsListResponse, any>>;
    /**
     * @description Update a user session object.
     *
     * @tags user-sessions
     * @name UserSessionUpdate
     * @request POST:/internal/user-sessions.update
     * @secure
     */
    userSessionUpdate: (data: UserSessionsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<UserSessionsUpdateResponse, any>>;
    /**
     * @description Returns the user's privileges for the target object.
     *
     * @tags users
     * @name UserPrivileges
     * @request GET:/internal/user.privileges
     * @secure
     */
    userPrivileges: (query: UserPrivilegesParams, params?: RequestParams) => Promise<AxiosResponse<UserPrivilegesResponse, any>>;
    /**
     * @description Returns the user's privileges for the target object.
     *
     * @tags users
     * @name UserPrivilegesPost
     * @request POST:/internal/user.privileges
     * @secure
     */
    userPrivilegesPost: (data: UserPrivilegesRequest, params?: RequestParams) => Promise<AxiosResponse<UserPrivilegesResponse, any>>;
    /**
     * @description Grants or revokes agents of a user.
     *
     * @tags users
     * @name UsersAgentsUpdate
     * @request POST:/internal/users.agents.update
     * @secure
     */
    usersAgentsUpdate: (data: UsersAgentsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: manan.sharma@devrev.ai ### Gets the list of Dev organizations that the Dev user is invited to.
     *
     * @tags dev-orgs, dev-orgs-global
     * @name DevUserGlobalInvitationsList
     * @request GET:/internal/users.global.invitations.list
     * @secure
     */
    devUserGlobalInvitationsList: (query: DevUserGlobalInvitationsListParams, params?: RequestParams) => Promise<AxiosResponse<DevUserGlobalInvitationsListResponse, any>>;
    /**
     * @description Gets the list of Dev organizations that the Dev user is invited to.
     *
     * @tags dev-orgs, dev-orgs-global
     * @name DevUserGlobalInvitationsListPost
     * @request POST:/internal/users.global.invitations.list
     * @secure
     */
    devUserGlobalInvitationsListPost: (data: DevUserGlobalInvitationsListRequest, params?: RequestParams) => Promise<AxiosResponse<DevUserGlobalInvitationsListResponse, any>>;
    /**
     * @description Delete the invitation sent to the user.
     *
     * @tags dev-users
     * @name UserInvitationDelete
     * @request POST:/internal/users.invitations.delete
     * @secure
     */
    userInvitationDelete: (data: UserInvitationDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Gets the list of Dev organizations that the Dev user is invited to.
     *
     * @tags dev-orgs
     * @name DevUserInvitationsList
     * @request GET:/internal/users.invitations.list
     * @secure
     */
    devUserInvitationsList: (params?: RequestParams) => Promise<AxiosResponse<ListDevUserInvitationsResponse, any>>;
    /**
     * @description Gets the list of Dev organizations that the Dev user is invited to.
     *
     * @tags dev-orgs
     * @name DevUserInvitationsListPost
     * @request POST:/internal/users.invitations.list
     * @secure
     */
    devUserInvitationsListPost: (data: ListDevUserInvitationsRequest, params?: RequestParams) => Promise<AxiosResponse<ListDevUserInvitationsResponse, any>>;
    /**
     * @description Update an invitation to a user.
     *
     * @tags dev-users
     * @name UserInvitationUpdate
     * @request POST:/internal/users.invitations.update
     * @secure
     */
    userInvitationUpdate: (data: UserInvitationUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<UserInvitationUpdateResponse, any>>;
    /**
     * @description ### Owner: dg@devrev.ai ### Get a UX store document.
     *
     * @tags ux-store
     * @name UxStoreGet
     * @request GET:/internal/ux-store.get
     * @secure
     */
    uxStoreGet: (query: UxStoreGetParams, params?: RequestParams) => Promise<AxiosResponse<UxStoreGetResponse, any>>;
    /**
     * @description Get a UX store document.
     *
     * @tags ux-store
     * @name UxStoreGetPost
     * @request POST:/internal/ux-store.get
     * @secure
     */
    uxStoreGetPost: (data: UxStoreGetRequest, params?: RequestParams) => Promise<AxiosResponse<UxStoreGetResponse, any>>;
    /**
     * @description Insert or update the document.
     *
     * @tags ux-store
     * @name UxStoreUpsert
     * @request POST:/internal/ux-store.upsert
     * @secure
     */
    uxStoreUpsert: (data: UxStoreUpsertRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Creates an index in DevRev vector store
     *
     * @tags vector-store
     * @name VectorStoreIndexCreate
     * @request POST:/internal/vector-store.index.create
     * @secure
     */
    vectorStoreIndexCreate: (data: VectorStoreIndexCreateRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Retrieves the ids of the most similar items, along with their similarity scores.
     *
     * @tags vector-store
     * @name VectorStoreIndexQuery
     * @request POST:/internal/vector-store.index.query
     * @secure
     */
    vectorStoreIndexQuery: (data: VectorStoreIndexQueryRequest, params?: RequestParams) => Promise<AxiosResponse<VectorStoreIndexQueryResponse, any>>;
    /**
     * @description Add vectors to the specified index.
     *
     * @tags vector-store
     * @name VectorStoreIndexUpsert
     * @request POST:/internal/vector-store.index.upsert
     * @secure
     */
    vectorStoreIndexUpsert: (data: VectorStoreIndexUpsertRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Checks the verification code that was sent to the phone number via previously invoked endpoint "verify.send-code". Verification codes are valid for a duration of 10-minute verification session.
     *
     * @tags verify
     * @name VerifyCheckCode
     * @request POST:/internal/verify.check-code
     * @secure
     */
    verifyCheckCode: (data: VerifyCheckCodeRequest, params?: RequestParams) => Promise<AxiosResponse<VerifyCheckCodeResponse, any>>;
    /**
     * @description Sends an email to redirect mobile during signup.
     *
     * @tags verify
     * @name VerifyRedirectMobileSignup
     * @request POST:/internal/verify.redirect-mobile-signup
     * @secure
     */
    verifyRedirectMobileSignup: (data: VerifyRedirectMobileSignupRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Sends a verification code to the given phone number. The code is valid for the duration of 10-minute verification session. During this session, reinvoking this endpoint will send the same verification code and the code's validity will not be extended.
     *
     * @tags verify
     * @name VerifySendCode
     * @request POST:/internal/verify.send-code
     * @secure
     */
    verifySendCode: (data: VerifySendCodeRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Creates a vista.
     *
     * @tags vistas
     * @name VistasCreate
     * @request POST:/internal/vistas.create
     * @secure
     */
    vistasCreate: (data: VistasCreateRequest, params?: RequestParams) => Promise<AxiosResponse<VistasCreateResponse, any>>;
    /**
     * @description Deletes the requested vista.
     *
     * @tags vistas
     * @name VistasDelete
     * @request POST:/internal/vistas.delete
     * @secure
     */
    vistasDelete: (data: VistasDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Gets the requested vistas's information.
     *
     * @tags vistas
     * @name VistasGet
     * @request GET:/internal/vistas.get
     * @secure
     */
    vistasGet: (query: VistasGetParams, params?: RequestParams) => Promise<AxiosResponse<VistasGetResponse, any>>;
    /**
     * @description Gets the requested vistas's information.
     *
     * @tags vistas
     * @name VistasGetPost
     * @request POST:/internal/vistas.get
     * @secure
     */
    vistasGetPost: (data: VistasGetRequest, params?: RequestParams) => Promise<AxiosResponse<VistasGetResponse, any>>;
    /**
     * @description Creates a vista group item.
     *
     * @tags vistas
     * @name VistasGroupsCreate
     * @request POST:/internal/vistas.groups.create
     * @secure
     */
    vistasGroupsCreate: (data: VistasGroupsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<VistasGroupsCreateResponse, any>>;
    /**
     * @description Deletes the requested vista group item
     *
     * @tags vistas
     * @name VistasGroupsDelete
     * @request POST:/internal/vistas.groups.delete
     * @secure
     */
    vistasGroupsDelete: (data: VistasGroupsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: shivam.gupta@devrev.ai ### Gets the requested vista group item's information.
     *
     * @tags vistas
     * @name VistasGroupsGet
     * @request GET:/internal/vistas.groups.get
     * @secure
     */
    vistasGroupsGet: (query: VistasGroupsGetParams, params?: RequestParams) => Promise<AxiosResponse<VistasGroupsGetResponse, any>>;
    /**
     * @description Gets the requested vista group item's information.
     *
     * @tags vistas
     * @name VistasGroupsGetPost
     * @request POST:/internal/vistas.groups.get
     * @secure
     */
    vistasGroupsGetPost: (data: VistasGroupsGetRequest, params?: RequestParams) => Promise<AxiosResponse<VistasGroupsGetResponse, any>>;
    /**
     * @description Moves the work items from one group to another.
     *
     * @tags vistas
     * @name VistasGroupItemsMove
     * @request POST:/internal/vistas.groups.items.move
     * @secure
     */
    vistasGroupItemsMove: (data: VistasGroupItemsMoveRequest, params?: RequestParams) => Promise<AxiosResponse<VistasGroupItemsMoveResponse, any>>;
    /**
     * @description ### Owner: shivam.gupta@devrev.ai ### Lists the available vista group items.
     *
     * @tags vistas
     * @name VistasGroupsList
     * @request GET:/internal/vistas.groups.list
     * @secure
     */
    vistasGroupsList: (query: VistasGroupsListParams, params?: RequestParams) => Promise<AxiosResponse<VistasGroupsListResponse, any>>;
    /**
     * @description ### Owner: shivam.gupta@devrev.ai ### Lists the available vista group items.
     *
     * @tags vistas
     * @name VistasGroupsList
     * @request GET:/internal/vistas.groups.list
     * @secure */
    vistasGroupsListPaginator(query: VistasGroupsListParams, params?: RequestParams): AsyncGenerator<VistasGroupsListResponse, void, unknown>;
    /**
     * @description Lists the available vista group items.
     *
     * @tags vistas
     * @name VistasGroupsListPost
     * @request POST:/internal/vistas.groups.list
     * @secure
     */
    vistasGroupsListPost: (data: VistasGroupsListRequest, params?: RequestParams) => Promise<AxiosResponse<VistasGroupsListResponse, any>>;
    /**
     * @description Updates the requested vista group item.
     *
     * @tags vistas
     * @name VistasGroupsUpdate
     * @request POST:/internal/vistas.groups.update
     * @secure
     */
    vistasGroupsUpdate: (data: VistasGroupsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<VistasGroupsUpdateResponse, any>>;
    /**
     * @description Lists the available vistas.
     *
     * @tags vistas
     * @name VistasList
     * @request GET:/internal/vistas.list
     * @secure
     */
    vistasList: (query: VistasListParams, params?: RequestParams) => Promise<AxiosResponse<VistasListResponse, any>>;
    /**
     * @description Lists the available vistas.
     *
     * @tags vistas
     * @name VistasList
     * @request GET:/internal/vistas.list
     * @secure */
    vistasListPaginator(query: VistasListParams, params?: RequestParams): AsyncGenerator<VistasListResponse, void, unknown>;
    /**
     * @description Lists the available vistas.
     *
     * @tags vistas
     * @name VistasListPost
     * @request POST:/internal/vistas.list
     * @secure
     */
    vistasListPost: (data: VistasListRequest, params?: RequestParams) => Promise<AxiosResponse<VistasListResponse, any>>;
    /**
     * @description Lists the parts to which the vistas are linked to.
     *
     * @tags vistas
     * @name VistasPartsList
     * @request GET:/internal/vistas.parts.list
     * @secure
     */
    vistasPartsList: (query: VistasPartsListParams, params?: RequestParams) => Promise<AxiosResponse<VistasPartsListResponse, any>>;
    /**
     * @description Lists the parts to which the vistas are linked to.
     *
     * @tags vistas
     * @name VistasPartsList
     * @request GET:/internal/vistas.parts.list
     * @secure */
    vistasPartsListPaginator(query: VistasPartsListParams, params?: RequestParams): AsyncGenerator<VistasPartsListResponse, void, unknown>;
    /**
     * @description Lists the parts to which the vistas are linked to.
     *
     * @tags vistas
     * @name VistasPartsListPost
     * @request POST:/internal/vistas.parts.list
     * @secure
     */
    vistasPartsListPost: (data: VistasPartsListRequest, params?: RequestParams) => Promise<AxiosResponse<VistasPartsListResponse, any>>;
    /**
     * @description Updates the requested vista.
     *
     * @tags vistas
     * @name VistasUpdate
     * @request POST:/internal/vistas.update
     * @secure
     */
    vistasUpdate: (data: VistasUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<VistasUpdateResponse, any>>;
    /**
     * @description Gets requesting user watcher events for an object.
     *
     * @tags watchers
     * @name WatchersGet
     * @request GET:/internal/watchers.get
     * @secure
     */
    watchersGet: (query: WatchersGetParams, params?: RequestParams) => Promise<AxiosResponse<WatchersGetResponse, any>>;
    /**
     * @description Gets requesting user watcher events for an object.
     *
     * @tags watchers
     * @name WatchersGetPost
     * @request POST:/internal/watchers.get
     * @secure
     */
    watchersGetPost: (data: WatchersGetRequest, params?: RequestParams) => Promise<AxiosResponse<WatchersGetResponse, any>>;
    /**
     * @description Lists watchers of an object.
     *
     * @tags watchers
     * @name WatchersList
     * @request GET:/internal/watchers.list
     * @secure
     */
    watchersList: (query: WatchersListParams, params?: RequestParams) => Promise<AxiosResponse<WatchersListResponse, any>>;
    /**
     * @description Lists watchers of an object.
     *
     * @tags watchers
     * @name WatchersList
     * @request GET:/internal/watchers.list
     * @secure */
    watchersListPaginator(query: WatchersListParams, params?: RequestParams): AsyncGenerator<WatchersListResponse, void, unknown>;
    /**
     * @description Lists watchers of an object.
     *
     * @tags watchers
     * @name WatchersListPost
     * @request POST:/internal/watchers.list
     * @secure
     */
    watchersListPost: (data: WatchersListRequest, params?: RequestParams) => Promise<AxiosResponse<WatchersListResponse, any>>;
    /**
     * @description Updates watchers on the object.
     *
     * @tags watchers
     * @name WatchersUpdate
     * @request POST:/internal/watchers.update
     * @secure
     */
    watchersUpdate: (data: WatchersUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description Change state of a web crawler job to pause or resume it back to running.
     *
     * @tags web-crawler-job
     * @name WebCrawlerJobsControl
     * @request POST:/internal/web-crawler-jobs.control
     * @secure
     */
    webCrawlerJobsControl: (data: WebCrawlerJobsControlRequest, params?: RequestParams) => Promise<AxiosResponse<WebCrawlerJobsControlResponse, any>>;
    /**
     * @description Creates a web crawler job whose objective is to crawl the provided URLs/sitemaps and generate corresponding webpages as artifacts.
     *
     * @tags web-crawler-job
     * @name CreateWebCrawlerJob
     * @request POST:/internal/web-crawler-jobs.create
     * @secure
     */
    createWebCrawlerJob: (data: WebCrawlerJobsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<WebCrawlerJobsCreateResponse, any>>;
    /**
     * @description ### Owner: chirag.jain@devrev.ai ### Gets a web crawler job.
     *
     * @tags web-crawler-job
     * @name GetWebCrawlerJob
     * @request GET:/internal/web-crawler-jobs.get
     * @secure
     */
    getWebCrawlerJob: (query: GetWebCrawlerJobParams, params?: RequestParams) => Promise<AxiosResponse<WebCrawlerJobsGetResponse, any>>;
    /**
     * @description Gets a web crawler job.
     *
     * @tags web-crawler-job
     * @name GetWebCrawlerJobPost
     * @request POST:/internal/web-crawler-jobs.get
     * @secure
     */
    getWebCrawlerJobPost: (data: WebCrawlerJobsGetRequest, params?: RequestParams) => Promise<AxiosResponse<WebCrawlerJobsGetResponse, any>>;
    /**
     * @description ### Owner: chirag.jain@devrev.ai ### Lists web crawler jobs.
     *
     * @tags web-crawler-job
     * @name ListWebCrawlerJobs
     * @request GET:/internal/web-crawler-jobs.list
     * @secure
     */
    listWebCrawlerJobs: (query: ListWebCrawlerJobsParams, params?: RequestParams) => Promise<AxiosResponse<WebCrawlerJobsListResponse, any>>;
    /**
     * @description ### Owner: chirag.jain@devrev.ai ### Lists web crawler jobs.
     *
     * @tags web-crawler-job
     * @name ListWebCrawlerJobs
     * @request GET:/internal/web-crawler-jobs.list
     * @secure */
    listWebCrawlerJobsPaginator(query: ListWebCrawlerJobsParams, params?: RequestParams): AsyncGenerator<WebCrawlerJobsListResponse, void, unknown>;
    /**
     * @description Lists web crawler jobs.
     *
     * @tags web-crawler-job
     * @name ListWebCrawlerJobsPost
     * @request POST:/internal/web-crawler-jobs.list
     * @secure
     */
    listWebCrawlerJobsPost: (data: WebCrawlerJobsListRequest, params?: RequestParams) => Promise<AxiosResponse<WebCrawlerJobsListResponse, any>>;
    /**
     * @description Creates a new webhook target.
     *
     * @tags webhooks
     * @name WebhooksCreate
     * @request POST:/internal/webhooks.create
     * @secure
     */
    webhooksCreate: (data: WebhooksCreateRequest, params?: RequestParams) => Promise<AxiosResponse<WebhooksCreateResponse, any>>;
    /**
     * @description Deletes the requested webhook.
     *
     * @tags webhooks
     * @name WebhooksDelete
     * @request POST:/internal/webhooks.delete
     * @secure
     */
    webhooksDelete: (data: WebhooksDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: brian.byrne@devrev.ai ### Gets the requested webhook's information.
     *
     * @tags webhooks
     * @name WebhooksGet
     * @request GET:/internal/webhooks.get
     * @secure
     */
    webhooksGet: (query: WebhooksGetParams, params?: RequestParams) => Promise<AxiosResponse<WebhooksGetResponse, any>>;
    /**
     * @description Gets the requested webhook's information.
     *
     * @tags webhooks
     * @name WebhooksGetPost
     * @request POST:/internal/webhooks.get
     * @secure
     */
    webhooksGetPost: (data: WebhooksGetRequest, params?: RequestParams) => Promise<AxiosResponse<WebhooksGetResponse, any>>;
    /**
     * @description ### Owner: brian.byrne@devrev.ai ### Lists the webhooks.
     *
     * @tags webhooks
     * @name WebhooksList
     * @request GET:/internal/webhooks.list
     * @secure
     */
    webhooksList: (params?: RequestParams) => Promise<AxiosResponse<WebhooksListResponse, any>>;
    /**
     * @description Lists the webhooks.
     *
     * @tags webhooks
     * @name WebhooksListPost
     * @request POST:/internal/webhooks.list
     * @secure
     */
    webhooksListPost: (data: WebhooksListRequest, params?: RequestParams) => Promise<AxiosResponse<WebhooksListResponse, any>>;
    /**
     * @description Updates the requested webhook.
     *
     * @tags webhooks
     * @name WebhooksUpdate
     * @request POST:/internal/webhooks.update
     * @secure
     */
    webhooksUpdate: (data: WebhooksUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<WebhooksUpdateResponse, any>>;
    /**
     * @description Creates a new widget.
     *
     * @tags widgets
     * @name WidgetsCreate
     * @request POST:/internal/widgets.create
     * @secure
     */
    widgetsCreate: (data: WidgetsCreateRequest, params?: RequestParams) => Promise<AxiosResponse<WidgetsCreateResponse, any>>;
    /**
     * @description Deletes the widget.
     *
     * @tags widgets
     * @name WidgetsDelete
     * @request POST:/internal/widgets.delete
     * @secure
     */
    widgetsDelete: (data: WidgetsDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<void, any>>;
    /**
     * @description ### Owner: madhav.sikka@devrev.ai ### Returns the requested widget.
     *
     * @tags widgets
     * @name WidgetsGet
     * @request GET:/internal/widgets.get
     * @secure
     */
    widgetsGet: (query: WidgetsGetParams, params?: RequestParams) => Promise<AxiosResponse<WidgetsGetResponse, any>>;
    /**
     * @description Returns the requested widget.
     *
     * @tags widgets
     * @name WidgetsGetPost
     * @request POST:/internal/widgets.get
     * @secure
     */
    widgetsGetPost: (data: WidgetsGetRequest, params?: RequestParams) => Promise<AxiosResponse<WidgetsGetResponse, any>>;
    /**
     * @description ### Owner: madhav.sikka@devrev.ai ### Returns the list of widgets.
     *
     * @tags widgets
     * @name WidgetsList
     * @request GET:/internal/widgets.list
     * @secure
     */
    widgetsList: (query: WidgetsListParams, params?: RequestParams) => Promise<AxiosResponse<WidgetsListResponse, any>>;
    /**
     * @description ### Owner: madhav.sikka@devrev.ai ### Returns the list of widgets.
     *
     * @tags widgets
     * @name WidgetsList
     * @request GET:/internal/widgets.list
     * @secure */
    widgetsListPaginator(query: WidgetsListParams, params?: RequestParams): AsyncGenerator<WidgetsListResponse, void, unknown>;
    /**
     * @description Returns the list of widgets.
     *
     * @tags widgets
     * @name WidgetsListPost
     * @request POST:/internal/widgets.list
     * @secure
     */
    widgetsListPost: (data: WidgetsListRequest, params?: RequestParams) => Promise<AxiosResponse<WidgetsListResponse, any>>;
    /**
     * @description Updates the widget.
     *
     * @tags widgets
     * @name WidgetsUpdate
     * @request POST:/internal/widgets.update
     * @secure
     */
    widgetsUpdate: (data: WidgetsUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<WidgetsUpdateResponse, any>>;
    /**
     * @description ### Owner: umang.malik@devrev.ai ### Retrieves a workflow run by ID.
     *
     * @tags workflow-run
     * @name GetWorkflowRun
     * @request GET:/internal/workflow-runs.get
     * @secure
     */
    getWorkflowRun: (query: GetWorkflowRunParams, params?: RequestParams) => Promise<AxiosResponse<GetWorkflowRunResponse, any>>;
    /**
     * @description Retrieves a workflow run by ID.
     *
     * @tags workflow-run
     * @name GetWorkflowRunPost
     * @request POST:/internal/workflow-runs.get
     * @secure
     */
    getWorkflowRunPost: (data: GetWorkflowRunRequest, params?: RequestParams) => Promise<AxiosResponse<GetWorkflowRunResponse, any>>;
    /**
     * @description ### Owner: umang.malik@devrev.ai ### Lists all workflow runs.
     *
     * @tags workflow-run
     * @name ListWorkflowRuns
     * @request GET:/internal/workflow-runs.list
     * @secure
     */
    listWorkflowRuns: (query: ListWorkflowRunsParams, params?: RequestParams) => Promise<AxiosResponse<ListWorkflowRunsResponse, any>>;
    /**
     * @description ### Owner: umang.malik@devrev.ai ### Lists all workflow runs.
     *
     * @tags workflow-run
     * @name ListWorkflowRuns
     * @request GET:/internal/workflow-runs.list
     * @secure */
    listWorkflowRunsPaginator(query: ListWorkflowRunsParams, params?: RequestParams): AsyncGenerator<ListWorkflowRunsResponse, void, unknown>;
    /**
     * @description Lists all workflow runs.
     *
     * @tags workflow-run
     * @name ListWorkflowRunsPost
     * @request POST:/internal/workflow-runs.list
     * @secure
     */
    listWorkflowRunsPost: (data: ListWorkflowRunsRequest, params?: RequestParams) => Promise<AxiosResponse<ListWorkflowRunsResponse, any>>;
    /**
     * @description Creates a new workflow step.
     *
     * @tags workflow-step
     * @name CreateWorkflowStep
     * @request POST:/internal/workflow-steps.create
     * @secure
     */
    createWorkflowStep: (data: CreateWorkflowStepRequest, params?: RequestParams) => Promise<AxiosResponse<CreateWorkflowStepResponse, any>>;
    /**
     * @description Deletes a workflow step.
     *
     * @tags workflow-step
     * @name DeleteWorkflowStep
     * @request POST:/internal/workflow-steps.delete
     * @secure
     */
    deleteWorkflowStep: (data: DeleteWorkflowStepRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: vikas.sheoran@devrev.ai ### Retrieves a workflow step by ID.
     *
     * @tags workflow-step
     * @name GetWorkflowStep
     * @request GET:/internal/workflow-steps.get
     * @secure
     */
    getWorkflowStep: (query: GetWorkflowStepParams, params?: RequestParams) => Promise<AxiosResponse<GetWorkflowStepResponse, any>>;
    /**
     * @description Retrieves a workflow step by ID.
     *
     * @tags workflow-step
     * @name GetWorkflowStepPost
     * @request POST:/internal/workflow-steps.get
     * @secure
     */
    getWorkflowStepPost: (data: GetWorkflowStepRequest, params?: RequestParams) => Promise<AxiosResponse<GetWorkflowStepResponse, any>>;
    /**
     * @description ### Owner: vikas.sheoran@devrev.ai ### Lists all workflow steps.
     *
     * @tags workflow-step
     * @name ListWorkflowSteps
     * @request GET:/internal/workflow-steps.list
     * @secure
     */
    listWorkflowSteps: (query: ListWorkflowStepsParams, params?: RequestParams) => Promise<AxiosResponse<ListWorkflowStepsResponse, any>>;
    /**
     * @description ### Owner: vikas.sheoran@devrev.ai ### Lists all workflow steps.
     *
     * @tags workflow-step
     * @name ListWorkflowSteps
     * @request GET:/internal/workflow-steps.list
     * @secure */
    listWorkflowStepsPaginator(query: ListWorkflowStepsParams, params?: RequestParams): AsyncGenerator<ListWorkflowStepsResponse, void, unknown>;
    /**
     * @description Lists all workflow steps.
     *
     * @tags workflow-step
     * @name ListWorkflowStepsPost
     * @request POST:/internal/workflow-steps.list
     * @secure
     */
    listWorkflowStepsPost: (data: ListWorkflowStepsRequest, params?: RequestParams) => Promise<AxiosResponse<ListWorkflowStepsResponse, any>>;
    /**
     * @description ### Owner: umang.malik@devrev.ai ### Get schemas for workflow steps.
     *
     * @tags workflow-step
     * @name GetSchemaWorkflowSteps
     * @request GET:/internal/workflow-steps.schema
     * @secure
     */
    getSchemaWorkflowSteps: (query: GetSchemaWorkflowStepsParams, params?: RequestParams) => Promise<AxiosResponse<GetSchemaWorkflowStepsResponse, any>>;
    /**
     * @description Get schemas for workflow steps.
     *
     * @tags workflow-step
     * @name GetSchemaWorkflowStepsPost
     * @request POST:/internal/workflow-steps.schema
     * @secure
     */
    getSchemaWorkflowStepsPost: (data: GetSchemaWorkflowStepsRequest, params?: RequestParams) => Promise<AxiosResponse<GetSchemaWorkflowStepsResponse, any>>;
    /**
     * @description Updates an existing workflow step.
     *
     * @tags workflow-step
     * @name UpdateWorkflowStep
     * @request POST:/internal/workflow-steps.update
     * @secure
     */
    updateWorkflowStep: (data: UpdateWorkflowStepRequest, params?: RequestParams) => Promise<AxiosResponse<UpdateWorkflowStepResponse, any>>;
    /**
     * @description Creates a new workflow.
     *
     * @tags workflow
     * @name CreateWorkflow
     * @request POST:/internal/workflows.create
     * @secure
     */
    createWorkflow: (data: CreateWorkflowRequest, params?: RequestParams) => Promise<AxiosResponse<CreateWorkflowResponse, any>>;
    /**
     * @description Deletes a workflow.
     *
     * @tags workflow
     * @name DeleteWorkflow
     * @request POST:/internal/workflows.delete
     * @secure
     */
    deleteWorkflow: (data: DeleteWorkflowRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: vikas.sheoran@devrev.ai ### Retrieves a workflow by ID.
     *
     * @tags workflow
     * @name GetWorkflow
     * @request GET:/internal/workflows.get
     * @secure
     */
    getWorkflow: (query: GetWorkflowParams, params?: RequestParams) => Promise<AxiosResponse<GetWorkflowResponse, any>>;
    /**
     * @description Retrieves a workflow by ID.
     *
     * @tags workflow
     * @name GetWorkflowPost
     * @request POST:/internal/workflows.get
     * @secure
     */
    getWorkflowPost: (data: GetWorkflowRequest, params?: RequestParams) => Promise<AxiosResponse<GetWorkflowResponse, any>>;
    /**
     * @description ### Owner: vikas.sheoran@devrev.ai ### Lists all workflows.
     *
     * @tags workflow
     * @name ListWorkflows
     * @request GET:/internal/workflows.list
     * @secure
     */
    listWorkflows: (query: ListWorkflowsParams, params?: RequestParams) => Promise<AxiosResponse<ListWorkflowsResponse, any>>;
    /**
     * @description ### Owner: vikas.sheoran@devrev.ai ### Lists all workflows.
     *
     * @tags workflow
     * @name ListWorkflows
     * @request GET:/internal/workflows.list
     * @secure */
    listWorkflowsPaginator(query: ListWorkflowsParams, params?: RequestParams): AsyncGenerator<ListWorkflowsResponse, void, unknown>;
    /**
     * @description Lists all workflows.
     *
     * @tags workflow
     * @name ListWorkflowsPost
     * @request POST:/internal/workflows.list
     * @secure
     */
    listWorkflowsPost: (data: ListWorkflowsRequest, params?: RequestParams) => Promise<AxiosResponse<ListWorkflowsResponse, any>>;
    /**
     * @description Updates an existing workflow.
     *
     * @tags workflow
     * @name UpdateWorkflow
     * @request POST:/internal/workflows.update
     * @secure
     */
    updateWorkflow: (data: UpdateWorkflowRequest, params?: RequestParams) => Promise<AxiosResponse<UpdateWorkflowResponse, any>>;
    /**
     * @description Updates the status of a workflow.
     *
     * @tags workflow
     * @name UpdateStatusWorkflow
     * @request POST:/internal/workflows.update-status
     * @secure
     */
    updateStatusWorkflow: (data: UpdateStatusWorkflowRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: dd@devrev.ai ### Gather summary information about work clusters.
     *
     * @tags works
     * @name WorksClustersGather
     * @request GET:/internal/works.clusters.gather
     * @secure
     */
    worksClustersGather: (query: WorksClustersGatherParams, params?: RequestParams) => Promise<AxiosResponse<WorksClustersGatherResponse, any>>;
    /**
     * @description ### Owner: dd@devrev.ai ### Gather summary information about work clusters.
     *
     * @tags works
     * @name WorksClustersGather
     * @request GET:/internal/works.clusters.gather
     * @secure */
    worksClustersGatherPaginator(query: WorksClustersGatherParams, params?: RequestParams): AsyncGenerator<WorksClustersGatherResponse, void, unknown>;
    /**
     * @description Gather summary information about work clusters.
     *
     * @tags works
     * @name WorksClustersGatherPost
     * @request POST:/internal/works.clusters.gather
     * @secure
     */
    worksClustersGatherPost: (data: WorksClustersGatherRequest, params?: RequestParams) => Promise<AxiosResponse<WorksClustersGatherResponse, any>>;
    /**
     * @description ### Owner: dd@devrev.ai ### List the work items or IDs contained in a single work cluster or multiple clusters.
     *
     * @tags works
     * @name WorksClustersList
     * @request GET:/internal/works.clusters.list
     * @secure
     */
    worksClustersList: (query: WorksClustersListParams, params?: RequestParams) => Promise<AxiosResponse<WorksClustersListResponse, any>>;
    /**
     * @description ### Owner: dd@devrev.ai ### List the work items or IDs contained in a single work cluster or multiple clusters.
     *
     * @tags works
     * @name WorksClustersList
     * @request GET:/internal/works.clusters.list
     * @secure */
    worksClustersListPaginator(query: WorksClustersListParams, params?: RequestParams): AsyncGenerator<WorksClustersListResponse, void, unknown>;
    /**
     * @description List the work items or IDs contained in a single work cluster or multiple clusters.
     *
     * @tags works
     * @name WorksClustersListPost
     * @request POST:/internal/works.clusters.list
     * @secure
     */
    worksClustersListPost: (data: WorksClustersListRequest, params?: RequestParams) => Promise<AxiosResponse<WorksClustersListResponse, any>>;
    /**
     * @description ### Owner: anshu.avinash@devrev.ai ### Get count of work matching given filter.
     *
     * @tags works
     * @name WorksCount
     * @request GET:/internal/works.count
     * @secure
     */
    worksCount: (query: WorksCountParams, params?: RequestParams) => Promise<AxiosResponse<WorksCountResponse, any>>;
    /**
     * @description Get count of work matching given filter.
     *
     * @tags works
     * @name WorksCountPost
     * @request POST:/internal/works.count
     * @secure
     */
    worksCountPost: (data: WorksCountRequest, params?: RequestParams) => Promise<AxiosResponse<WorksCountResponse, any>>;
    /**
     * @description Creates new work ([issue](https://devrev.ai/docs/product/build), [ticket](https://devrev.ai/docs/product/support)) item. [task](https://docs.devrev.ai/product/tasks) and opportunity work types are supported in the beta version.
     *
     * @tags works
     * @name WorksCreate
     * @request POST:/internal/works.create
     * @secure
     */
    worksCreate: (data: WorksCreateRequest, params?: RequestParams) => Promise<AxiosResponse<WorksCreateResponse, any>>;
    /**
     * @description Deletes a work item.
     *
     * @tags works
     * @name WorksDelete
     * @request POST:/internal/works.delete
     * @secure
     */
    worksDelete: (data: WorksDeleteRequest, params?: RequestParams) => Promise<AxiosResponse<object, any>>;
    /**
     * @description ### Owner: anshu.avinash@devrev.ai ### Exports a collection of work items.
     *
     * @tags works
     * @name WorksExport
     * @request GET:/internal/works.export
     * @secure
     */
    worksExport: (query: WorksExportParams, params?: RequestParams) => Promise<AxiosResponse<WorksExportResponse, any>>;
    /**
     * @description Exports a collection of work items.
     *
     * @tags works
     * @name WorksExportPost
     * @request POST:/internal/works.export
     * @secure
     */
    worksExportPost: (data: WorksExportRequest, params?: RequestParams) => Promise<AxiosResponse<WorksExportResponse, any>>;
    /**
     * @description ### Owner: anshu.avinash@devrev.ai ### Gets a work item's information.
     *
     * @tags works
     * @name WorksGet
     * @request GET:/internal/works.get
     * @secure
     */
    worksGet: (query: WorksGetParams, params?: RequestParams) => Promise<AxiosResponse<WorksGetResponse, any>>;
    /**
     * @description Gets a work item's information.
     *
     * @tags works
     * @name WorksGetPost
     * @request POST:/internal/works.get
     * @secure
     */
    worksGetPost: (data: WorksGetRequest, params?: RequestParams) => Promise<AxiosResponse<WorksGetResponse, any>>;
    /**
     * @description ### Owner: anshu.avinash@devrev.ai ### Lists collections of works by groups.
     *
     * @tags works
     * @name WorksGroup
     * @request GET:/internal/works.group
     * @secure
     */
    worksGroup: (query: WorksGroupParams, params?: RequestParams) => Promise<AxiosResponse<WorksGroupResponse, any>>;
    /**
     * @description ### Owner: anshu.avinash@devrev.ai ### Lists collections of works by groups.
     *
     * @tags works
     * @name WorksGroup
     * @request GET:/internal/works.group
     * @secure */
    worksGroupPaginator(query: WorksGroupParams, params?: RequestParams): AsyncGenerator<WorksGroupResponse, void, unknown>;
    /**
     * @description Lists collections of works by groups.
     *
     * @tags works
     * @name WorksGroupPost
     * @request POST:/internal/works.group
     * @secure
     */
    worksGroupPost: (data: WorksGroupRequest, params?: RequestParams) => Promise<AxiosResponse<WorksGroupResponse, any>>;
    /**
     * @description ### Owner: anshu.avinash@devrev.ai ### Lists a collection of work items.
     *
     * @tags works
     * @name WorksList
     * @request GET:/internal/works.list
     * @secure
     */
    worksList: (query: WorksListParams, params?: RequestParams) => Promise<AxiosResponse<WorksListResponse, any>>;
    /**
     * @description ### Owner: anshu.avinash@devrev.ai ### Lists a collection of work items.
     *
     * @tags works
     * @name WorksList
     * @request GET:/internal/works.list
     * @secure */
    worksListPaginator(query: WorksListParams, params?: RequestParams): AsyncGenerator<WorksListResponse, void, unknown>;
    /**
     * @description Lists a collection of work items.
     *
     * @tags works
     * @name WorksListPost
     * @request POST:/internal/works.list
     * @secure
     */
    worksListPost: (data: WorksListRequest, params?: RequestParams) => Promise<AxiosResponse<WorksListResponse, any>>;
    /**
     * @description ### Owner: anshu.avinash@devrev.ai ### Lists suggested works.
     *
     * @tags works
     * @name WorksSuggest
     * @request GET:/internal/works.suggest
     * @secure
     */
    worksSuggest: (query: WorksSuggestParams, params?: RequestParams) => Promise<AxiosResponse<WorksSuggestResponse, any>>;
    /**
     * @description ### Owner: anshu.avinash@devrev.ai ### Lists suggested works.
     *
     * @tags works
     * @name WorksSuggest
     * @request GET:/internal/works.suggest
     * @secure */
    worksSuggestPaginator(query: WorksSuggestParams, params?: RequestParams): AsyncGenerator<WorksSuggestResponse, void, unknown>;
    /**
     * @description Lists suggested works.
     *
     * @tags works
     * @name WorksSuggestPost
     * @request POST:/internal/works.suggest
     * @secure
     */
    worksSuggestPost: (data: WorksSuggestRequest, params?: RequestParams) => Promise<AxiosResponse<WorksSuggestResponse, any>>;
    /**
     * @description ### Owner: anshu.avinash@devrev.ai ### Generate work info from given context.
     *
     * @tags works
     * @name WorksSuggestInfo
     * @request GET:/internal/works.suggest-info
     * @secure
     */
    worksSuggestInfo: (query: WorksSuggestInfoParams, params?: RequestParams) => Promise<AxiosResponse<WorksSuggestInfoResponse, any>>;
    /**
     * @description Generate work info from given context.
     *
     * @tags works
     * @name WorksSuggestInfoPost
     * @request POST:/internal/works.suggest-info
     * @secure
     */
    worksSuggestInfoPost: (data: WorksSuggestInfoRequest, params?: RequestParams) => Promise<AxiosResponse<WorksSuggestInfoResponse, any>>;
    /**
     * @description Updates a work item's information.
     *
     * @tags works
     * @name WorksUpdate
     * @request POST:/internal/works.update
     * @secure
     */
    worksUpdate: (data: WorksUpdateRequest, params?: RequestParams) => Promise<AxiosResponse<WorksUpdateResponse, any>>;
}
export {};
